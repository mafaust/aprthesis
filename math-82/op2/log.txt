[0] INFO ProjectConfiguration - Version of the JVM used: 1.8.0_202
[0] INFO main - Java version of the JDK used to run tests: 1.8.0_202
[0] INFO main - The compliance of the JVM is:  8
[2] INFO main - command line arguments: [-location  /Users/marekmazur/astor/defects4j/math-82  -mode  jgenprog  -package  org.apache.commons  -jvm4testexecution  /Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin  -failing  org.apache.commons.math.optimization.linear.SimplexSolverTest  -srcjavafolder  /src/java/  -srctestfolder  /src/test/  -binjavafolder  /target/classes/  -bintestfolder  /target/test-classes/  -stopfirst  true  -dependencies  /Users/marekmazur/astor/examples/libs/junit-4.4.jar  -maxgen  1000000  -seed  10  -maxtime  60  -scope  local  -stopfirst  true  -flthreshold  0  -population  1  -faultlocalization  flacoco]
[5] INFO AstorMain - Running Astor on a JDK at /Users/marekmazur/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/jre
Source folders: [/Users/marekmazur/astor/defects4j/math-82/src/main/java]
Source Test folders: [/Users/marekmazur/astor/defects4j/math-82/src/test]
---- Creating spoon model
Creating model,  Code location from working folder: /Users/marekmazur/astor/defects4j/math-82/src/main/java
building model: /Users/marekmazur/astor/defects4j/math-82/src/main/java, compliance level: 8
Classpath (Dependencies) for building SpoonModel: [/Users/marekmazur/astor/examples/libs/junit-4.4.jar]
Spoon Model built from location: /Users/marekmazur/astor/defects4j/math-82/src/main/java
Number of CtTypes created: 388
Running chosen test detection strategy: CLASSLOADER
Test retrieved from classes: 224
Running Flacoco...
Running spectrum-based fault localization...
FlacocoConfig{workspace='/Users/marekmazur/astor/.', projectPath='/Users/marekmazur/astor/defects4j/math-82', srcJavaDir=[/Users/marekmazur/astor/defects4j/math-82/src/main/java], srcTestDir=[/Users/marekmazur/astor/defects4j/math-82/src/test], binJavaDir=[/Users/marekmazur/astor/defects4j/math-82/target/classes], binTestDir=[/Users/marekmazur/astor/defects4j/math-82/target/test-classes], classpath='/Users/marekmazur/astor/examples/libs/junit-4.4.jar', customJUnitClasspath='null', customJacocoClasspath='null', mavenHome='/Users/marekmazur/.m2/repository/', coverTests=false, testRunnerVerbose=false, testRunnerTimeoutInMs=3600000, testRunnerJVMArgs='null', threshold=0.0, includeZeros=false, complianceLevel=8, testDetectionStrategy=CLASSLOADER, ignoredTests=[], jUnit4Tests=[org.apache.commons.math.linear.SparseRealMatrixTest#testSerial, org.apache.commons.math.util.MathUtilsTest#testL2DistanceInt, org.apache.commons.math.linear.QRSolverTest#testOverdetermined, org.apache.commons.math.linear.SingularValueSolverTest#testSolveSingularityErrors, org.apache.commons.math.fraction.BigFractionTest#testPow, org.apache.commons.math.linear.BigMatrixImplTest#testSubMatrix, org.apache.commons.math.geometry.RotationTest#testCompose, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testParameters, org.apache.commons.math.linear.RealMatrixImplTest#testAdd, org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowFieldMatrix, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testDimensions, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest#derivativesConsistency, org.apache.commons.math.ode.FirstOrderConverterTest#testSmallStep, org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension4WithSplit, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNotPositiveDefinite, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNonDefaultSetting, org.apache.commons.math.stat.StatUtilsTest#testStats, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testSwissFertility, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeReal, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testCircleFitting, org.apache.commons.math.stat.regression.SimpleRegressionTest#testCorr, org.apache.commons.math.linear.BiDiagonalTransformerTest#testDimensions, org.apache.commons.math.util.MathUtilsTest#testNextAfterSpecialCases, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testPerfectFit, org.apache.commons.math.distribution.TDistributionTest#testConsistency, org.apache.commons.math.stat.inference.TTestTest#testOneSampleT, org.apache.commons.math.random.RandomAdaptorTest#testConfig, org.apache.commons.math.complex.ComplexTest#testConstructor, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testIllConditioned, org.apache.commons.math.complex.ComplexTest#testMultiplyNaN, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testConsistency, org.apache.commons.math.util.MathUtilsTest#testSubAndCheckLong, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRowMatrix, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testGetValues, org.apache.commons.math.ConvergenceExceptionTest#testConstructorPatternArguments, org.apache.commons.math.distribution.WeibullDistributionTest#testSampling, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSanityChecks, org.apache.commons.math.linear.BlockRealMatrixTest#testCopyFunctions, org.apache.commons.math.linear.LUSolverTest#testSolveDimensionErrors, org.apache.commons.math.linear.BigMatrixImplTest#testPlusMinus, org.apache.commons.math.distribution.CauchyDistributionTest#testIllegalArguments, org.apache.commons.math.random.ValueServerTest#testReplay, org.apache.commons.math.util.MathUtilsTest#testSignInt, org.apache.commons.math.distribution.GammaDistributionTest#testCumulativeProbabilities, org.apache.commons.math.linear.BlockFieldMatrixTest#testAddFail, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnLarge, org.apache.commons.math.fraction.FractionTest#testDoubleValue, org.apache.commons.math.linear.SparseFieldVectorTest#testMapFunctions, org.apache.commons.math.distribution.HypergeometricDistributionTest#testIllegalArguments, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#checkClone, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest#testTestNegative, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testIncrementation, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewNewtonSolverValid, org.apache.commons.math.complex.ComplexTest#testGetArgumentNaN, org.apache.commons.math.geometry.Vector3DTest#testAdd, org.apache.commons.math.transform.FastSineTransformerTest#testSinFunction, org.apache.commons.math.stat.FrequencyTest#testSerial, org.apache.commons.math.linear.SparseFieldMatrixTest#testGetRowMatrix, org.apache.commons.math.linear.LUDecompositionImplTest#testDimensions, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPlusMinus, org.apache.commons.math.special.BetaTest#testLogBetaPositiveZero, org.apache.commons.math.fraction.BigFractionFieldTest#testSerial, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testString, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testSerial, org.apache.commons.math.linear.RealVectorFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructor, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPermutation, org.apache.commons.math.linear.EigenSolverTest#testSolve, org.apache.commons.math.complex.ComplexTest#testTan, org.apache.commons.math.distribution.PoissonDistributionTest#testDensities, org.apache.commons.math.util.BigRealTest#testConstructor, org.apache.commons.math.linear.BigMatrixImplTest#testIsSingular, org.apache.commons.math.MaxIterationsExceededExceptionTest#testSimpleConstructor, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateSin, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonEqualCounts, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testMinStep, org.apache.commons.math.linear.SingularValueSolverTest#testSolveDimensionErrors, org.apache.commons.math.special.BetaTest#testLogBetaNanPositive, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testDeprecated, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testSimplistic, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testTrivial, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testEvaluation, org.apache.commons.math.util.MathUtilsTest#testPermutedArrayHash, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowLarge, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentEquations, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#derivativesConsistency, org.apache.commons.math.linear.SparseRealMatrixTest#testTranspose, org.apache.commons.math.geometry.Vector3DTest#testNorm, org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumn, org.apache.commons.math.complex.ComplexTest#testCosNaN, org.apache.commons.math.linear.BigMatrixImplTest#testPremultiplyVector, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testSinFunction, org.apache.commons.math.linear.CholeskySolverTest#testDeterminant, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataThatIsNotSquare, org.apache.commons.math.genetics.RandomKeyTest#testIsSame, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNotSymmetricMatrixException, org.apache.commons.math.optimization.linear.SimplexTableauTest#testdiscardArtificialVariables, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testEqualsAndHashCode, org.apache.commons.math.random.RandomDataTest#testNextUniform, org.apache.commons.math.fraction.FractionTest#testCompareTo, org.apache.commons.math.linear.RealMatrixImplTest#testSetRow, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testEvaluation, org.apache.commons.math.distribution.NormalDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.fraction.FractionFormatTest#testFormatImproper, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumnVector, org.apache.commons.math.linear.FieldMatrixImplTest#testSetSubMatrix, org.apache.commons.math.stat.CertifiedDataTest#testSummaryStatistics, org.apache.commons.math.util.BigRealTest#testCompareTo, org.apache.commons.math.stat.descriptive.rank.MinTest#testConsistency, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonUnEqualCounts, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFittingBadInit, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEventsErrors, org.apache.commons.math.linear.RealMatrixImplTest#testToString, org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearFullRank, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testEqualsAndHashCode, org.apache.commons.math.complex.ComplexTest#testDivideInfinite, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testNonInversible, org.apache.commons.math.fraction.FractionTest#testDoubleConstructor, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testCompletelyIncorrectBandwidth, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testCircleFittingBadInit, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest#serialization, org.apache.commons.math.genetics.RandomKeyMutationTest#testMutate, org.apache.commons.math.optimization.linear.SimplexSolverTest#testEpsilon, org.apache.commons.math.linear.RealMatrixImplTest#testGetRowVector, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest#serialization, org.apache.commons.math.estimation.WeightedMeasurementTest#testTheory, org.apache.commons.math.complex.ComplexTest#testSubtractNaN, org.apache.commons.math.random.RandomAdaptorTest#testNextPoisson, org.apache.commons.math.stat.descriptive.moment.MeanTest#testIncrementation, org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquare, org.apache.commons.math.stat.descriptive.summary.SumTest#testWeightedConsistency, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testNonSquare, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testInconsistentEquations, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleNoDecimals, org.apache.commons.math.complex.ComplexTest#testSqrtRealZero, org.apache.commons.math.linear.RealMatrixImplTest#testDimensions, org.apache.commons.math.fraction.BigFractionFormatTest#testFormatImproperNegative, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testSinFunction, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveBadParameters, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testN0andN1Conditions, org.apache.commons.math.complex.ComplexFormatTest#testGetImaginaryFormat, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSetQuantile, org.apache.commons.math.complex.ComplexTest#testSqrtImaginaryNegative, org.apache.commons.math.stat.FrequencyTest#testAddNonComparable, org.apache.commons.math.linear.BlockRealMatrixTest#testPlusMinus, org.apache.commons.math.linear.BigMatrixImplTest#testConstructors, org.apache.commons.math.complex.ComplexTest#testSinhNaN, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSerial, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testSerial, org.apache.commons.math.linear.RealMatrixImplTest#testSetColumnVector, org.apache.commons.math.linear.BlockRealMatrixTest#testSetRowVector, org.apache.commons.math.stat.inference.TTestFactoryTest#testOneSampleTTest, org.apache.commons.math.fraction.BigFractionTest#testDoubleValue, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testWindowSize, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testQRColumnsPermutation, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testCopy, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersUnsorted, org.apache.commons.math.stat.descriptive.moment.MeanTest#testSerialization, org.apache.commons.math.linear.EigenDecompositionImplTest#testEigenvalues, org.apache.commons.math.distribution.PascalDistributionTest#testDegenerate1, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testGetSummary, org.apache.commons.math.linear.BlockFieldMatrixTest#testPlusMinus, org.apache.commons.math.complex.FrenchComplexFormatTest#testPositiveInfinity, org.apache.commons.math.distribution.PascalDistributionTest#testDegenerate0, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowLarge, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersSimple, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testGetFromEmpty, org.apache.commons.math.special.BetaTest#testRegularizedBetaNegativePositivePositive, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumn, org.apache.commons.math.stat.descriptive.summary.SumTest#testSerialization, org.apache.commons.math.linear.EigenDecompositionImplTest#testTridiagonal, org.apache.commons.math.linear.SparseFieldVectorTest#testBasicFunctions, org.apache.commons.math.distribution.CauchyDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.linear.SparseRealMatrixTest#testMath209, org.apache.commons.math.distribution.HypergeometricDistributionTest#testCumulativeProbabilities, org.apache.commons.math.linear.FieldMatrixImplTest#testGetVectors, org.apache.commons.math.geometry.RotationTest#testAngles, org.apache.commons.math.linear.BigMatrixImplTest#testEqualsAndHashCode, org.apache.commons.math.analysis.solvers.BrentSolverTest#testQuinticZero, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPoissonLargeMean, org.apache.commons.math.optimization.linear.SimplexSolverTest#testSolutionWithNegativeDecisionVariable, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testMultiplication, org.apache.commons.math.distribution.ChiSquareDistributionTest#testDfAccessors, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstLaguerrePolynomials, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumnMatrix, org.apache.commons.math.ode.ContinuousOutputModelTest#testRandomAccess, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSetterInjection, org.apache.commons.math.genetics.RandomKeyTest#testIdentityPermutation, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersUnsorted, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testCovarianceConsistency, org.apache.commons.math.distribution.BetaDistributionTest#testDensity, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testIncreasingTolerance, org.apache.commons.math.fraction.BigFractionFormatTest#testParseBig, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testSanityChecks, org.apache.commons.math.linear.SparseRealMatrixTest#testSetSubMatrix, org.apache.commons.math.linear.QRSolverTest#testSolveRankErrors, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testShuffledStatistics, org.apache.commons.math.geometry.Vector3DTest#testDistanceSq, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterInjection, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumn, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testHermiteDifferentials, org.apache.commons.math.distribution.NormalDistributionTest#testGetMean, org.apache.commons.math.genetics.RandomKeyTest#testComparatorPermutation, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIntegratorControls, org.apache.commons.math.stat.regression.SimpleRegressionTest#testSSENonNegative, org.apache.commons.math.linear.RealMatrixImplTest#testGetEntry, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testSerialization, org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension1, org.apache.commons.math.optimization.linear.SimplexSolverTest#testTrivialModel, org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension2, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest#testDerivativesConsistency, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testMatricesValues, org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeY, org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeZ, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testCircleFitting, org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension3, org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumnVector, org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeX, org.apache.commons.math.fraction.FractionFormatTest#testParseProperInvalidMinus, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenSeparator, org.apache.commons.math.estimation.MinpackTest#testMinpackOsborne2, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary#test, org.apache.commons.math.complex.ComplexTest#testTanhCritical, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregateDegenerate, org.apache.commons.math.estimation.MinpackTest#testMinpackOsborne1, org.apache.commons.math.geometry.Vector3DTest#testSubtract, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testIllegalArguments, org.apache.commons.math.complex.ComplexFormatTest#testNegativeImaginary, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIncreasingTolerance, org.apache.commons.math.random.RandomAdaptorTest#testNextSample, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetFunctionValueAccuracy, org.apache.commons.math.linear.SparseRealMatrixTest#testTrace, org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnBigMatrix, org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumn, org.apache.commons.math.linear.ArrayFieldVectorTest#testMapFunctions, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testTwoSets, org.apache.commons.math.stat.descriptive.rank.MaxTest#testEqualsAndHashCode, org.apache.commons.math.stat.descriptive.moment.MeanTest#testEvaluation, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testMomentSmallSamples, org.apache.commons.math.linear.BlockFieldMatrixTest#testDimensions, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testEqualsAndHashCode, org.apache.commons.math.fraction.FractionFieldTest#testSerial, org.apache.commons.math.linear.SparseRealVectorTest#testMisc, org.apache.commons.math.special.GammaTest#testLogGammaPositive, org.apache.commons.math.stat.StatUtilsTest#testProduct, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSetterIllegalState, org.apache.commons.math.complex.ComplexTest#testCosInf, org.apache.commons.math.optimization.general.MinpackTest#testMinpackBrownAlmostLinear, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest#testRosenbrock, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#derivativesConsistency, org.apache.commons.math.estimation.MinpackTest#testMinpackBrownAlmostLinear, org.apache.commons.math.genetics.BinaryChromosomeTest#testInvalidConstructor, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testMomentSmallSamples, org.apache.commons.math.geometry.Vector3DTest#testNormalize, org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction2, org.apache.commons.math.genetics.RandomKeyTest#testEqualRepr, org.apache.commons.math.complex.FrenchComplexFormatTest#testStaticFormatComplex, org.apache.commons.math.stat.correlation.CovarianceTest#testConstant, org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutOnExisting, org.apache.commons.math.complex.ComplexFormatTest#testParseZeroReal, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParsePositiveInfinity, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testExpm1Function, org.apache.commons.math.geometry.Vector3DFormatTest#testParsePositiveInfinity, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testDimensionCheck, org.apache.commons.math.linear.EigenDecompositionImplTest#testDimensions, org.apache.commons.math.geometry.Vector3DTest#testAngular, org.apache.commons.math.util.ResizableDoubleArrayTest#testWithInitialCapacity, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testSinFunction, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testIllConditioned, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorPatternArguments, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testVariableSteps, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSerial, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBracketSin, org.apache.commons.math.util.MathUtilsTest#testGcd, org.apache.commons.math.distribution.GammaDistributionTest#testValues, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeBoth, org.apache.commons.math.linear.FieldMatrixImplTest#testEqualsAndHashCode, org.apache.commons.math.linear.BigMatrixImplTest#testMultiply2, org.apache.commons.math.genetics.FitnessCachingTest#testFitnessCaching, org.apache.commons.math.random.RandomAdaptorTest#testNextUniform, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPremultiplyVector, org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeZ, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSample, org.apache.commons.math.distribution.WeibullDistributionTest#testConsistency, org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateNoSuccesses, org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeX, org.apache.commons.math.stat.FrequencyTest#testAdd, org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeY, org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeImaginary, org.apache.commons.math.distribution.BetaDistributionTest#testCumulative, org.apache.commons.math.random.RandomDataTest#testNextPoisson, org.apache.commons.math.distribution.ChiSquareDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetMatrixLarge, org.apache.commons.math.distribution.HypergeometricDistributionTest#testLargeValues, org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexInf, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#backward, org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest#testQuinticMin, org.apache.commons.math.distribution.BinomialDistributionTest#testDegenerate1, org.apache.commons.math.special.BetaTest#testLogBetaNegativePositive, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testOneSet, org.apache.commons.math.distribution.BinomialDistributionTest#testDegenerate0, org.apache.commons.math.distribution.CauchyDistributionTest#testScale, org.apache.commons.math.util.MathUtilsTest#testSubAndCheck, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testNaNContracts, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testToString, org.apache.commons.math.fraction.BigFractionTest#testNegate, org.apache.commons.math.complex.ComplexTest#testExpInf, org.apache.commons.math.stat.regression.SimpleRegressionTest#testNorris, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseZeroImaginary, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseIgnoredWhitespace, org.apache.commons.math.genetics.RandomKeyTest#testDecode, org.apache.commons.math.optimization.general.MinpackTest#testMinpackChebyquad, org.apache.commons.math.linear.MatrixUtilsTest#testCreateBigMatrix, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testConstant, org.apache.commons.math.analysis.integration.RombergIntegratorTest#testSinFunction, org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareIndependence, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testCopy, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBadParameters, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRowVector, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testProductAndGeometricMean, org.apache.commons.math.genetics.FixedGenerationCountTest#testIsSatisfied, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGet, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveZeroPositive, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstChebyshevPolynomials, org.apache.commons.math.linear.RealMatrixImplTest#testTrace, org.apache.commons.math.optimization.direct.NelderMeadTest#testMinimizeMaximize, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testCopyConsistency, org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testInconsistentEquations, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testVariableSteps, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testConstructorSingleFormat, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testStepSize, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSpecialValues, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testIncrementation, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testNaN, org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenSuffix, org.apache.commons.math.linear.QRSolverTest#testSolve, org.apache.commons.math.util.OpenIntToFieldTest#testGetAbsent, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testExamples, org.apache.commons.math.util.TransformerMapTest#testTransformers, org.apache.commons.math.util.OpenIntToFieldTest#testIterator, org.apache.commons.math.complex.ComplexFormatTest#testNegativeInfinity, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testConstants, org.apache.commons.math.linear.SparseRealMatrixTest#testMultiply2, org.apache.commons.math.complex.ComplexTest#testNthRoot_normal_fourthRoot, org.apache.commons.math.distribution.ZipfDistributionTest#testCumulativeProbabilities, org.apache.commons.math.special.GammaTest#testDigammaSmallArgs, org.apache.commons.math.linear.BlockRealMatrixTest#testGetVectors, org.apache.commons.math.stat.regression.SimpleRegressionTest#testInference, org.apache.commons.math.stat.descriptive.rank.PercentileTest#test5, org.apache.commons.math.linear.ArrayRealVectorTest#testMisc, org.apache.commons.math.distribution.WeibullDistributionTest#testIllegalArguments, org.apache.commons.math.optimization.direct.NelderMeadTest#testRosenbrock, org.apache.commons.math.linear.SparseFieldMatrixTest#testGetEntry, org.apache.commons.math.stat.regression.SimpleRegressionTest#testClear, org.apache.commons.math.linear.SparseFieldMatrixTest#testAddFail, org.apache.commons.math.special.BetaTest#testRegularizedBetaZeroPositivePositive, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testEvaluation, org.apache.commons.math.optimization.linear.SimplexSolverTest#testInfeasibleSolution, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testQuinticFunction, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testSetterInjection, org.apache.commons.math.random.MersenneTwisterTest#testNextIntNeg, org.apache.commons.math.complex.ComplexTest#testEqualsTrue, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testSerial, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testDecreasingSteps, org.apache.commons.math.complex.ComplexTest#testEqualsNull, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testSerialization, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMultiply2, org.apache.commons.math.linear.SparseFieldMatrixTest#testSubMatrix, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArgumentCause, org.apache.commons.math.util.BigRealFieldTest#testOne, org.apache.commons.math.complex.ComplexTest#testScalarMultiply, org.apache.commons.math.linear.RealMatrixImplTest#testGetRow, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testCopy, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveObsFromSingle, org.apache.commons.math.util.TransformerMapTest#testClear, org.apache.commons.math.complex.ComplexTest#testSqrtPolar, org.apache.commons.math.random.ValueServerTest#testFill, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testEqualsAndHashCode, org.apache.commons.math.fraction.BigFractionFormatTest#testFormatZero, org.apache.commons.math.distribution.ChiSquareDistributionTest#testSmallDf, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNan, org.apache.commons.math.util.MathUtilsTest#testL1DistanceInt, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math.stat.descriptive.summary.ProductTest#testSpecialValues, org.apache.commons.math.distribution.NormalDistributionTest#testMath280, org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareLargeTestStatistic, org.apache.commons.math.linear.EigenDecompositionImplTest#testDistinctEigenvalues, org.apache.commons.math.fraction.FractionFormatTest#testDoubleFormat, org.apache.commons.math.linear.BlockFieldMatrixTest#testSerial, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testDimensionCheck, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumn, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testBigStep, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testSerial, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testMath226, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextLong, org.apache.commons.math.linear.BlockRealMatrixTest#testGetRowVector, org.apache.commons.math.linear.BlockRealMatrixTest#testGetRowMatrix, org.apache.commons.math.genetics.ElitisticListPopulationTest#testNextGeneration, org.apache.commons.math.analysis.integration.RombergIntegratorTest#testParameters, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureHex, org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexNaN, org.apache.commons.math.linear.RealVectorFormatTest#testParseZeroX, org.apache.commons.math.ConvergenceExceptionTest#testConstructor, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#checklone, org.apache.commons.math.estimation.MinpackTest#testMinpackHelicalValley, org.apache.commons.math.genetics.ListPopulationTest#testGetFittestChromosome, org.apache.commons.math.linear.RealVectorFormatTest#testForgottenSeparator, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testLongly, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testMomentSmallSamples, org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowBigMatrix, org.apache.commons.math.linear.LUDecompositionImplTest#testLLowerTriangular, org.apache.commons.math.distribution.BinomialDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.util.MathUtilsTest#testLInfDistanceInt, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRowVector, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testNoDependency, org.apache.commons.math.linear.BiDiagonalTransformerTest#testUOrthogonal, org.apache.commons.math.linear.BlockFieldMatrixTest#testPremultiply, org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowRealMatrix, org.apache.commons.math.analysis.solvers.MullerSolverTest#testDeprecated2, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseManyComponents, org.apache.commons.math.special.GammaTest#testRegularizedGammaPositivePositive, org.apache.commons.math.util.TransformerMapTest#testPutTransformer, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeAll, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testQuinticFunction, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testDimension, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testCircleFittingBadInit, org.apache.commons.math.complex.FrenchComplexFormatTest#testFormatObject, org.apache.commons.math.fraction.BigFractionFormatTest#testWholeFormat, org.apache.commons.math.fraction.FractionTest#testEqualsAndHashCode, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testStepSize, org.apache.commons.math.util.MathUtilsTest#testNormalizeAngle, org.apache.commons.math.MathExceptionTest#testConstructorCause, org.apache.commons.math.complex.ComplexTest#testAbsNaN, org.apache.commons.math.util.MathUtilsTest#testIndicatorInt, org.apache.commons.math.linear.BlockRealMatrixTest#testAdd, org.apache.commons.math.linear.RealMatrixImplTest#testScalarAdd, org.apache.commons.math.special.GammaTest#testLogGammaZero, org.apache.commons.math.stat.StatUtilsTest#testPercentile, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareLargeTestStatistic, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testCopyConsistency, org.apache.commons.math.linear.RealMatrixImplTest#testOperate, org.apache.commons.math.stat.descriptive.rank.MaxTest#testMomentSmallSamples, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenPrefix, org.apache.commons.math.stat.correlation.CovarianceTest#testLongly, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testTrivial, org.apache.commons.math.ode.ContinuousOutputModelTest#testErrorConditions, org.apache.commons.math.complex.ComplexFormatTest#testZeroImaginary, org.apache.commons.math.fraction.BigFractionFormatTest#testParseInteger, org.apache.commons.math.random.MersenneTwisterTest#testNexBytes, org.apache.commons.math.complex.ComplexUtilsTest#testPolar2Complex, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testPercentileSetter, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testUnstableDerivative, org.apache.commons.math.complex.ComplexTest#testMath221, org.apache.commons.math.complex.ComplexTest#testSqrt1z, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnDistortedSine, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testCopy, org.apache.commons.math.linear.FieldMatrixImplTest#testSetRowMatrix, org.apache.commons.math.geometry.RotationTest#testQuaternion, org.apache.commons.math.linear.ArrayFieldVectorTest#testDataInOut, org.apache.commons.math.random.RandomAdaptorTest#testNextPermutation, org.apache.commons.math.linear.RealMatrixImplTest#testMultiply, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testRedundantEquations, org.apache.commons.math.linear.QRDecompositionImplTest#testHTrapezoidal, org.apache.commons.math.linear.RealVectorFormatTest#testParseNan, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveNoRoot, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testDimensions, org.apache.commons.math.distribution.GammaDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.analysis.integration.RombergIntegratorTest#testQuinticFunction, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testN0andN1Conditions, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseZeroX, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterIllegalState, org.apache.commons.math.linear.QRDecompositionImplTest#testQOrthogonal, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testMismatch, org.apache.commons.math.fraction.FractionFormatTest#testFormatZero, org.apache.commons.math.distribution.GammaDistributionTest#testConsistency, org.apache.commons.math.distribution.WeibullDistributionTest#testSetBeta, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testDimensionCheck, org.apache.commons.math.linear.BiDiagonalTransformerTest#testMatricesValues, org.apache.commons.math.stat.data.LotteryTest#testCertifiedValues, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testFixedState, org.apache.commons.math.fraction.BigFractionTest#testGetReducedFraction, org.apache.commons.math.linear.RealMatrixImplTest#testAddFail, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testSmallLastStep, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#derivativesConsistency, org.apache.commons.math.util.TransformerMapTest#testContainsClass, org.apache.commons.math.linear.BlockFieldMatrixTest#testSeveralBlocks, org.apache.commons.math.random.EmpiricalDistributionTest#testGridTooFat, org.apache.commons.math.geometry.RotationTest#testMatrix, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testSerialization, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testCopy, org.apache.commons.math.stat.descriptive.summary.ProductTest#testEqualsAndHashCode, org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleWithDecimals, org.apache.commons.math.linear.SparseFieldMatrixTest#testCopyFunctions, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetAbsoluteAccuracy, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testCopyConsistency, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextHex, org.apache.commons.math.linear.BiDiagonalTransformerTest#testVOrthogonal, org.apache.commons.math.optimization.linear.SimplexSolverTest#testMinimization, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testConsistency, org.apache.commons.math.stat.inference.TTestFactoryTest#testTwoSampleTHeterscedastic, org.apache.commons.math.geometry.Vector3DFormatTest#testParseIgnoredWhitespace, org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumnMatrix, org.apache.commons.math.linear.RealVectorFormatTest#testNonDefaultSetting, org.apache.commons.math.fraction.FractionFieldTest#testZero, org.apache.commons.math.util.MathUtilsTest#test0Choose0, org.apache.commons.math.util.DefaultTransformerTest#testTransformString, org.apache.commons.math.distribution.NormalDistributionTest#testSetMean, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testCopy, org.apache.commons.math.linear.EigenDecompositionImplTest#testRepeatedEigenvalue, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testSerial, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testSerialization, org.apache.commons.math.stat.descriptive.rank.MinTest#testIncrementation, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testIncrementation, org.apache.commons.math.genetics.ChromosomeTest#testFindSameChromosome, org.apache.commons.math.linear.BlockFieldMatrixTest#testOperatePremultiplyLarge, org.apache.commons.math.linear.RealVectorFormatTest#testSimpleWithDecimals, org.apache.commons.math.stat.descriptive.rank.MaxTest#testSpecialValues, org.apache.commons.math.linear.FieldMatrixImplTest#testPremultiply, org.apache.commons.math.geometry.Vector3DFormatTest#testNan, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleWithDecimals, org.apache.commons.math.fraction.FractionTest#testDigitLimitConstructor, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressandVariance, org.apache.commons.math.complex.ComplexTest#testConjugate, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testIncrementation, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testChebyshevDifferentials, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNan, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEventsNoConvergence, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetEntry, org.apache.commons.math.distribution.WeibullDistributionTest#testAlpha, org.apache.commons.math.linear.BigMatrixImplTest#testTranspose, org.apache.commons.math.util.MathUtilsTest#testEqualsWithAllowedUlps, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetRelativeAccuracy, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveAccuracySin, org.apache.commons.math.complex.FrenchComplexFormatTest#testNan, org.apache.commons.math.linear.ArrayRealVectorTest#testBasicFunctions, org.apache.commons.math.distribution.BinomialDistributionTest#testDensities, org.apache.commons.math.random.ValueServerTest#testEmptyDigestFile, org.apache.commons.math.fraction.BigFractionTest#testDivide, org.apache.commons.math.linear.BlockRealMatrixTest#testCopySubMatrix, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testConsistency, org.apache.commons.math.random.RandomAdaptorTest#testNextInt, org.apache.commons.math.complex.ComplexFormatTest#testParseZeroImaginary, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testNullIntervalCheck, org.apache.commons.math.special.GammaTest#testTrigamma, org.apache.commons.math.fraction.BigFractionTest#testSerial, org.apache.commons.math.stat.inference.TTestTest#testTwoSampleTHeterscedastic, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testAdd, org.apache.commons.math.linear.BlockRealMatrixTest#testMultiply, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testParameters, org.apache.commons.math.linear.MatrixUtilsTest#testCreateIdentityMatrix, org.apache.commons.math.analysis.solvers.MullerSolverTest#testQuinticFunction, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemove2, org.apache.commons.math.linear.FieldMatrixImplTest#testCopyFunctions, org.apache.commons.math.fraction.BigFractionFormatTest#testParseInvalid, org.apache.commons.math.distribution.NormalDistributionTest#testQuantiles, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#testIncreasingTolerance, org.apache.commons.math.special.GammaTest#testDigammaLargeArgs, org.apache.commons.math.linear.ArrayRealVectorTest#testPredicates, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testVOrthogonal, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testBackward, org.apache.commons.math.distribution.NormalDistributionTest#testCumulativeProbabilities, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRandom, org.apache.commons.math.linear.ArrayFieldVectorTest#testConstructors, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testRemoval, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetMaximalIterationCount, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testWalk, org.apache.commons.math.complex.ComplexTest#testDivideNaN, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnTwoPoints, org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testNoError, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumnVector, org.apache.commons.math.fraction.FractionFormatTest#testParseProper, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testSerialization, org.apache.commons.math.geometry.Vector3DTest#testScalarProduct, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayPatternArgumentsCause, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRowMatrix, org.apache.commons.math.transform.FastCosineTransformerTest#testSinFunction, org.apache.commons.math.stat.descriptive.summary.SumTest#testEqualsAndHashCode, org.apache.commons.math.linear.RealMatrixImplTest#testTranspose, org.apache.commons.math.geometry.RotationTest#testVectorOnePair, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testIncreasingTolerance, org.apache.commons.math.linear.TriDiagonalTransformerTest#testQOrthogonal, org.apache.commons.math.special.BetaTest#testLogBetaPositiveNan, org.apache.commons.math.special.BetaTest#testLogBetaPositiveNegative, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testWrongDerivative, org.apache.commons.math.linear.SparseRealMatrixTest#testSubMatrix, org.apache.commons.math.analysis.solvers.RiddersSolverTest#testQuinticFunction, org.apache.commons.math.distribution.PoissonDistributionTest#testNormalApproximateProbability, org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMaximalTiesMinimum, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testMomentSmallSamples, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest#serialization, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#interpolationInside, org.apache.commons.math.stat.inference.TTestFactoryTest#testOneSampleT, org.apache.commons.math.complex.ComplexTest#testNegateNaN, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNonDefaultSetting, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetVectors, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testStats, org.apache.commons.math.stat.descriptive.moment.MeanTest#testCopy, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testTranspose, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetEntry, org.apache.commons.math.linear.BigMatrixImplTest#testPremultiply, org.apache.commons.math.optimization.linear.SimplexTableauTest#testSerial, org.apache.commons.math.stat.descriptive.rank.MinTest#testMomentSmallSamples, org.apache.commons.math.fraction.BigFractionFormatTest#testDenominatorFormat, org.apache.commons.math.linear.BlockRealMatrixTest#testDimensions, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#serialization, org.apache.commons.math.complex.ComplexTest#testSinNaN, org.apache.commons.math.complex.ComplexTest#testScalarMultiplyInf, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest#testEqualsAndHashCode, org.apache.commons.math.linear.LUDecompositionImplTest#testMatricesValues2, org.apache.commons.math.linear.LUDecompositionImplTest#testMatricesValues1, org.apache.commons.math.stat.descriptive.rank.MaxTest#testIncrementation, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testInconsistentSizes, org.apache.commons.math.linear.RealVectorFormatTest#testNan, org.apache.commons.math.linear.BlockRealMatrixTest#testPremultiplyVector, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testSwissFertility, org.apache.commons.math.genetics.RandomKeyTest#testConstructor2, org.apache.commons.math.genetics.RandomKeyTest#testConstructor1, org.apache.commons.math.util.BigRealTest#testEqualsAndHashCode, org.apache.commons.math.complex.ComplexTest#testLogZero, org.apache.commons.math.util.ResizableDoubleArrayTest#testMinMax, org.apache.commons.math.linear.LUDecompositionImplTest#testUUpperTriangular, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testNonInversible, org.apache.commons.math.random.RandomDataTest#testNextLongExtremeValues, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSerialization, org.apache.commons.math.linear.TriDiagonalTransformerTest#testNonSquare, org.apache.commons.math.complex.ComplexTest#testCosh, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testCopyConsistency, org.apache.commons.math.linear.ArrayFieldVectorTest#testSerial, org.apache.commons.math.estimation.MinpackTest#testMinpackLinearFullRank, org.apache.commons.math.geometry.Vector3DFormatTest#testPositiveInfinity, org.apache.commons.math.stat.descriptive.rank.MinTest#testNaNs, org.apache.commons.math.stat.descriptive.summary.SumTest#testCopy, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testKepler, org.apache.commons.math.stat.regression.SimpleRegressionTest#testPerfect, org.apache.commons.math.linear.RealVectorFormatTest#testParseManyComponents, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuinticFunction, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testEqualsAndHashCode, org.apache.commons.math.linear.BlockFieldMatrixTest#testMultiply2, org.apache.commons.math.linear.ArrayFieldVectorTest#testBasicFunctions, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testEqualsAndHashCode, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnLarge, org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeImaginary, org.apache.commons.math.linear.BlockFieldMatrixTest#testAdd, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNonDefaultSetting, org.apache.commons.math.fraction.BigFractionTest#testSubtract, org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumnVector, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testConsistency, org.apache.commons.math.distribution.ChiSquareDistributionTest#testConsistency, org.apache.commons.math.fraction.FractionFormatTest#testParse, org.apache.commons.math.linear.FieldMatrixImplTest#testGetRow, org.apache.commons.math.linear.RealMatrixImplTest#testSetRowMatrix, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMaxIterations, org.apache.commons.math.linear.BigMatrixImplTest#testNorm, org.apache.commons.math.distribution.GammaDistributionTest#testDensity, org.apache.commons.math.fraction.BigFractionTest#testDigitLimitConstructor, org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumnMatrix, org.apache.commons.math.linear.MatrixUtilsTest#testBigFractionConverter, org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeInfinity, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#test20090720, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testIllConditioned, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testTwoSets, org.apache.commons.math.linear.ArrayRealVectorTest#testSerial, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testCopyConsistency, org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGet, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMath199, org.apache.commons.math.linear.BlockFieldMatrixTest#testTrace, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testStats, org.apache.commons.math.complex.ComplexFormatTest#testFormatObject, org.apache.commons.math.stat.descriptive.summary.SumTest#testCopyConsistency, org.apache.commons.math.transform.FastFourierTransformerTest#testSinFunction, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#serialization, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testContainsKey, org.apache.commons.math.complex.ComplexFormatTest#testSetRealFormatNull, org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testRedundantUnsolvable, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonBadCounts, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#backward, org.apache.commons.math.analysis.solvers.NewtonSolverTest#testSinZero, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testSmallStep, org.apache.commons.math.linear.RealMatrixImplTest#testSetColumnMatrix, org.apache.commons.math.linear.FieldMatrixImplTest#testToString, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testKepler, org.apache.commons.math.linear.BlockRealMatrixTest#testWalk, org.apache.commons.math.analysis.solvers.MullerSolverTest#testDeprecated, org.apache.commons.math.linear.BlockFieldMatrixTest#testOperateLarge, org.apache.commons.math.stat.descriptive.rank.MinTest#testEvaluation, org.apache.commons.math.optimization.general.MinpackTest#testMinpackBox3Dimensional, org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeImaginary, org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearRank1, org.apache.commons.math.linear.SparseFieldMatrixTest#testGetColumnMatrix, org.apache.commons.math.ConvergenceExceptionTest#testConstructorPatternArgumentsCause, org.apache.commons.math.linear.BlockRealMatrixTest#testOperateLarge, org.apache.commons.math.geometry.Vector3DTest#testDistanceInf, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBigStep, org.apache.commons.math.linear.BlockFieldMatrixTest#testTranspose, org.apache.commons.math.linear.SparseFieldMatrixTest#testPremultiplyVector, org.apache.commons.math.fraction.BigFractionTest#testGoldenRatio, org.apache.commons.math.linear.ArrayRealVectorTest#testDataInOut, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testEvaluation, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testEvaluation, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMaxIterations, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnOnePoint, org.apache.commons.math.ode.sampling.StepNormalizerTest#testBoundaries, org.apache.commons.math.linear.SparseFieldMatrixTest#testPremultiply, org.apache.commons.math.geometry.Vector3DTest#testAngularSeparation, org.apache.commons.math.random.RandomAdaptorTest#testNextSecureInt, org.apache.commons.math.linear.BigMatrixImplTest#testInverse, org.apache.commons.math.linear.SparseRealMatrixTest#testToString, org.apache.commons.math.estimation.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testBackward, org.apache.commons.math.util.DefaultTransformerTest#testTransformDouble, org.apache.commons.math.MathExceptionTest#testSerialization, org.apache.commons.math.util.MathUtilsTest#testCosh, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSetterInjection, org.apache.commons.math.optimization.linear.SimplexTableauTest#testTableauWithNoArtificialVars, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetSubMatrix, org.apache.commons.math.util.MathUtilsTest#testScalb, org.apache.commons.math.genetics.BinaryChromosomeTest#testRandomConstructor, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeZ, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquare, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeY, org.apache.commons.math.estimation.EstimatedParameterTest#testEstimate, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeX, org.apache.commons.math.optimization.general.MinpackTest#testMinpackPowellSingular, org.apache.commons.math.util.OpenIntToFieldTest#testContainsKey, org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testDeprecated, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testUUpperTriangular, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testConsistency, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testCopy, org.apache.commons.math.complex.ComplexTest#testNthRoot_normal_thirdRoot, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNan, org.apache.commons.math.linear.BigMatrixImplTest#testToString, org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath272, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleNoDecimals, org.apache.commons.math.stat.inference.TTestTest#testOneSampleTTest, org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenSeparator, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest#testSerialization, org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeReal, org.apache.commons.math.optimization.direct.MultiDirectionalTest#testMinimizeMaximize, org.apache.commons.math.linear.SparseRealMatrixTest#testMultiply, org.apache.commons.math.stat.descriptive.summary.ProductTest#testConsistency, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnStraightLine, org.apache.commons.math.complex.ComplexTest#testSinh, org.apache.commons.math.random.RandomAdaptorTest#testNextExponential, org.apache.commons.math.linear.LUSolverTest#testDeterminant, org.apache.commons.math.stat.StatUtilsTest#testArrayIndexConditions, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testNaN, org.apache.commons.math.estimation.WeightedMeasurementTest#testConstruction, org.apache.commons.math.linear.SparseFieldMatrixTest#testMath209, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testVariableSteps, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testToString, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testGetSummary, org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleNoDecimals, org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath288, org.apache.commons.math.linear.EigenDecompositionImplTest#testDiagonal, org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath286, org.apache.commons.math.analysis.solvers.BrentSolverTest#testInitialGuess, org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnRealMatrix, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testDimensionCheck, org.apache.commons.math.fraction.BigFractionFormatTest#testFormat, org.apache.commons.math.util.MathUtilsTest#testSignByte, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testCircleFitting, org.apache.commons.math.ode.ContinuousOutputModelTest#testBoundaries, org.apache.commons.math.complex.ComplexFormatTest#testPaseNegativeInfinity, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNan, org.apache.commons.math.random.RandomAdaptorTest#testNextSecureLong, org.apache.commons.math.distribution.PascalDistributionTest#testCumulativeProbabilities, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSpecialValues, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testConsistency, org.apache.commons.math.stat.descriptive.summary.ProductTest#testCopy, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeInfinity, org.apache.commons.math.stat.StatUtilsTest#testN0andN1Conditions, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testCopySubMatrix, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseZeroX, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#derivativesConsistency, org.apache.commons.math.distribution.TDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.linear.FieldMatrixImplTest#testOperate, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest#testConstructor, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testOperate, org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGetWith0ExpectedSize, org.apache.commons.math.special.ErfTest#testErf3291, org.apache.commons.math.complex.ComplexTest#testHashCode, org.apache.commons.math.linear.SparseRealMatrixTest#testNorm, org.apache.commons.math.linear.ArrayRealVectorTest#testConstructors, org.apache.commons.math.linear.EigenSolverTest#testSolveDimensionErrors, org.apache.commons.math.complex.ComplexTest#testAddNaN, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testFrobeniusNorm, org.apache.commons.math.linear.SparseFieldMatrixTest#testPlusMinus, org.apache.commons.math.optimization.general.MinpackTest#testMinpackOsborne2, org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleWithDecimals, org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumnMatrix, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testDistance, org.apache.commons.math.linear.BlockRealMatrixTest#testTrace, org.apache.commons.math.linear.QRDecompositionImplTest#testRUpperTriangular, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRowVector, org.apache.commons.math.optimization.general.MinpackTest#testMinpackOsborne1, org.apache.commons.math.linear.BlockFieldMatrixTest#testCopySubMatrix, org.apache.commons.math.linear.BlockRealMatrixTest#testOperatePremultiplyLarge, org.apache.commons.math.complex.ComplexTest#testConjugateNaN, org.apache.commons.math.linear.FieldMatrixImplTest#testMath209, org.apache.commons.math.stat.inference.TTestTest#testSmallSamples, org.apache.commons.math.linear.RealMatrixImplTest#testSetSubMatrix, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMoreRows, org.apache.commons.math.linear.BigMatrixImplTest#testMath209, org.apache.commons.math.distribution.ChiSquareDistributionTest#testDensity, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testTwoSets, org.apache.commons.math.complex.FrenchComplexFormatTest#testConstructorSingleFormat, org.apache.commons.math.linear.BlockFieldMatrixTest#testScalarAdd, org.apache.commons.math.complex.ComplexTest#testCos, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenSuffix, org.apache.commons.math.special.BetaTest#testRegularizedBetaNanPositivePositive, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testMinStep, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testQuintic, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#checklone, org.apache.commons.math.linear.BlockFieldMatrixTest#testCopyFunctions, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextIntExtremeValues, org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest#testSinMin, org.apache.commons.math.random.RandomDataTest#testConfig, org.apache.commons.math.complex.ComplexTest#testAsinInf, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testNorm, org.apache.commons.math.distribution.PoissonDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testNISTExample, org.apache.commons.math.complex.ComplexTest#testAtanNaN, org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbability2, org.apache.commons.math.complex.ComplexTest#testAcosInf, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testKepler, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testInsufficientBandwidth, org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryCharacterEmpty, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuadraticFunction, org.apache.commons.math.linear.BlockFieldMatrixTest#testExamples, org.apache.commons.math.distribution.HypergeometricDistributionTest#testMoreLargeValues, org.apache.commons.math.complex.ComplexTest#testPow, org.apache.commons.math.linear.RealVectorFormatTest#testFormatObject, org.apache.commons.math.distribution.FDistributionTest#testDfAccessors, org.apache.commons.math.util.MathUtilsTest#testArrayEquals, org.apache.commons.math.stat.descriptive.moment.MeanTest#testEqualsAndHashCode, org.apache.commons.math.optimization.general.MinpackTest#testMinpackBrownDennis, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRow, org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesMaximum, org.apache.commons.math.stat.correlation.CovarianceTest#testSwissFertility, org.apache.commons.math.random.RandomDataTest#testNextSecureInt, org.apache.commons.math.geometry.Vector3DTest#testOrthogonal, org.apache.commons.math.geometry.Vector3DTest#testDistance, org.apache.commons.math.distribution.WeibullDistributionTest#testCumulativeProbabilities, org.apache.commons.math.distribution.CauchyDistributionTest#testSetScale, org.apache.commons.math.stat.FrequencyTest#testEmptyTable, org.apache.commons.math.optimization.direct.NelderMeadTest#testMaxIterations, org.apache.commons.math.linear.RealMatrixImplTest#testMultiply2, org.apache.commons.math.special.BetaTest#testLogBetaZeroPositive, org.apache.commons.math.fraction.BigFractionFormatTest#testFormatNegative, org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientLarge, org.apache.commons.math.random.RandomAdaptorTest#testNextIntExtremeValues, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testWindowSize, org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesAverage, org.apache.commons.math.stat.descriptive.rank.MinTest#testCopyConsistency, org.apache.commons.math.complex.ComplexFormatTest#testConstructorSingleFormat, org.apache.commons.math.linear.LUDecompositionImplTest#testNonSquare, org.apache.commons.math.fraction.FractionFormatTest#testWholeFormat, org.apache.commons.math.distribution.PascalDistributionTest#testFloatingPointArguments, org.apache.commons.math.stat.StatUtilsTest#testVariance, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testNaNContracts, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveNegative, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testSerialization, org.apache.commons.math.geometry.Vector3DTest#testConstructors, org.apache.commons.math.util.MathUtilsTest#testIndicatorLong, org.apache.commons.math.stat.descriptive.rank.MaxTest#testNaNs, org.apache.commons.math.util.TransformerMapTest#testRemoveTransformer, org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleWithDecimals, org.apache.commons.math.linear.MatrixUtilsTest#testcreateFieldMatrix, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testNaNContracts, org.apache.commons.math.linear.BlockRealMatrixTest#testSerial, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeX, org.apache.commons.math.linear.BiDiagonalTransformerTest#testUpperOrLower, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeY, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeZ, org.apache.commons.math.distribution.ExponentialDistributionTest#testIllegalArguments, org.apache.commons.math.random.MersenneTwisterTest#testDouble, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersSimple, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testStepSize, org.apache.commons.math.MaxIterationsExceededExceptionTest#testComplexConstructor, org.apache.commons.math.stat.inference.TestUtilsTest#testTwoSampleTHeterscedastic, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testUnstableDerivative, org.apache.commons.math.stat.FrequencyTest#testPcts, org.apache.commons.math.geometry.Vector3DTest#testAngle, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testMomentSmallSamples, org.apache.commons.math.random.MersenneTwisterTest#testGaussian, org.apache.commons.math.analysis.solvers.MullerSolverTest#testSinFunction2, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewBrentSolverValid, org.apache.commons.math.fraction.FractionFormatTest#testLongFormat, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSerialization, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testStats, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testProductAndGeometricMean, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextGaussian, org.apache.commons.math.linear.BigMatrixImplTest#testLUDecomposition, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testSerial, org.apache.commons.math.random.ValueServerTest#testProperties, org.apache.commons.math.linear.RealMatrixImplTest#testEqualsAndHashCode, org.apache.commons.math.geometry.Vector3DTest#testNorm1, org.apache.commons.math.complex.ComplexTest#testAtanInf, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRowVector, org.apache.commons.math.special.ErfTest#testErf2807, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testArrayIsReference, org.apache.commons.math.random.AbstractRandomGeneratorTest#testConfig, org.apache.commons.math.random.MersenneTwisterTest#testNexBoolean, org.apache.commons.math.linear.BigMatrixImplTest#testOperate, org.apache.commons.math.util.TransformerMapTest#testClasses, org.apache.commons.math.linear.SparseRealVectorTest#testMapFunctions, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testCovarianceConsistency, org.apache.commons.math.distribution.FDistributionTest#testCumulativeProbabilities, org.apache.commons.math.complex.ComplexTest#testSqrt1zNaN, org.apache.commons.math.stat.correlation.CovarianceTest#testConsistency, org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math.util.MathUtilsTest#testSignShort, org.apache.commons.math.stat.descriptive.summary.SumTest#testSerial, org.apache.commons.math.special.ErfTest#testErf1960, org.apache.commons.math.util.MathUtilsTest#testHash, org.apache.commons.math.linear.RealVectorFormatTest#testSimpleNoDecimals, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, org.apache.commons.math.fraction.FractionTest#testReciprocal, org.apache.commons.math.linear.BlockRealMatrixTest#testNorm, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testEvaluation, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testMomentSmallSamples, org.apache.commons.math.linear.ArrayFieldVectorTest#testMisc, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testDimensions, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testIncrementation, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testInconsistentEquations, org.apache.commons.math.fraction.BigFractionTest#testConstructor, org.apache.commons.math.complex.ComplexTest#testGetArgumentInf, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testStats, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest#dimension2, org.apache.commons.math.stat.FrequencyTest#testIntegerValues, org.apache.commons.math.linear.SparseRealMatrixTest#testPlusMinus, org.apache.commons.math.linear.QRSolverTest#testSolveDimensionErrors, org.apache.commons.math.estimation.EstimatedParameterTest#testConstruction, org.apache.commons.math.genetics.BinaryMutationTest#testMutate, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math.linear.BigMatrixImplTest#testGetRowMatrix, org.apache.commons.math.fraction.FractionTest#testIntValue, org.apache.commons.math.util.OpenIntToFieldTest#testRemoveAbsent, org.apache.commons.math.complex.ComplexTest#testAcosNaN, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testSerial, org.apache.commons.math.complex.ComplexTest#testAddInfinite, org.apache.commons.math.stat.descriptive.rank.MinTest#testSpecialValues, org.apache.commons.math.linear.SparseRealMatrixTest#testGetVectors, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testDimension, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testQRColumnsPermutation, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testNonInversible, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testToString, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetSubMatrix, org.apache.commons.math.distribution.FDistributionTest#testLargeDegreesOfFreedom, org.apache.commons.math.random.MersenneTwisterTest#testNextInt, org.apache.commons.math.linear.FieldMatrixImplTest#testWalk, org.apache.commons.math.complex.ComplexTest#testLog, org.apache.commons.math.distribution.CauchyDistributionTest#testCumulativeProbabilities, org.apache.commons.math.complex.ComplexTest#testScalarMultiplyNaN, org.apache.commons.math.linear.SparseRealMatrixTest#testPremultiplyVector, org.apache.commons.math.linear.MatrixUtilsTest#testCreateRealMatrix, org.apache.commons.math.distribution.GammaDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.linear.BlockRealMatrixTest#testExamples, org.apache.commons.math.genetics.BinaryChromosomeTest#testIsSame, org.apache.commons.math.linear.RealVectorFormatTest#testParseNonDefaultSetting, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testEvaluation, org.apache.commons.math.fraction.FractionFieldTest#testOne, org.apache.commons.math.linear.BlockRealMatrixTest#testAddFail, org.apache.commons.math.estimation.MinpackTest#testMinpackKowalikOsborne, org.apache.commons.math.MathExceptionTest#testConstructorPatternArgumentsCause, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureLong, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testTrivial, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testNoReset, org.apache.commons.math.fraction.BigFractionTest#testBigDecimalValue, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testRootMatrix, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testChebyshevBounds, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testCopy, org.apache.commons.math.util.MathUtilsTest#testMulAndCheckLong, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testConstant, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextUniform, org.apache.commons.math.complex.ComplexFormatTest#testParsePositiveInfinity, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseIgnoredWhitespace, org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumn, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testRedundantEquations, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareIndependence, org.apache.commons.math.util.ResizableDoubleArrayTest#testWithInitialCapacityAndExpansionFactor, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuadraticFunction, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMath209, org.apache.commons.math.linear.RealMatrixImplTest#testPremultiply, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testCopy, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testNullEmpty, org.apache.commons.math.complex.ComplexTest#testEqualsSame, org.apache.commons.math.random.EmpiricalDistributionTest#testNext, org.apache.commons.math.util.MathUtilsTest#testRoundDouble, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumnMatrix, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSerialization, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest#testConstructor, org.apache.commons.math.complex.ComplexTest#testMultiplyNaNInf, org.apache.commons.math.linear.FieldMatrixImplTest#testPlusMinus, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveNull, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinear, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testCopy, org.apache.commons.math.stat.descriptive.rank.MaxTest#testSerial, org.apache.commons.math.complex.ComplexFormatTest#testGetRealFormat, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testNullIntervalCheck, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testPercentile, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregateSpecialValues, org.apache.commons.math.util.ResizableDoubleArrayTest#testGetValues, org.apache.commons.math.linear.RealMatrixImplTest#testGetColumnMatrix, org.apache.commons.math.fraction.BigFractionFormatTest#testParseNegative, org.apache.commons.math.complex.ComplexFormatTest#testParseDifferentImaginaryChar, org.apache.commons.math.linear.CholeskySolverTest#testSolve, org.apache.commons.math.fraction.FractionTest#testToString, org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullURL, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonUnEqualCounts, org.apache.commons.math.random.RandomDataTest#testNextExponential, org.apache.commons.math.linear.BlockRealMatrixTest#testFrobeniusNorm, org.apache.commons.math.fraction.BigFractionTest#testEpsilonLimitConstructor, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregationConsistency, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleWithDecimals, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnVectorLarge, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testShuffledStatistics, org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientFail, org.apache.commons.math.util.MathUtilsTest#testRoundFloat, org.apache.commons.math.distribution.NormalDistributionTest#testSetStandardDeviation, org.apache.commons.math.stat.descriptive.summary.ProductTest#testMomentSmallSamples, org.apache.commons.math.complex.ComplexTest#testLogInf, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testShuffledStatistics, org.apache.commons.math.util.ResizableDoubleArrayTest#testSubstitute, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testParameters, org.apache.commons.math.linear.RealMatrixImplTest#testPlusMinus, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregate, org.apache.commons.math.estimation.MinpackTest#testMinpackPowellSingular, org.apache.commons.math.complex.ComplexTest#testCoshNaN, org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testSinMin, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPoisson, org.apache.commons.math.ode.FirstOrderConverterTest#testBigStep, org.apache.commons.math.linear.SparseRealMatrixTest#testPremultiply, org.apache.commons.math.linear.LUSolverTest#testSolve, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testCentroid, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testEqualsAndHashCode, org.apache.commons.math.linear.InvalidMatrixExceptionTest#testConstructorMessage, org.apache.commons.math.distribution.NormalDistributionTest#testIllegalArguments, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewBisectionSolverValid, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testIllConditioned, org.apache.commons.math.transform.FastCosineTransformerTest#testParameters, org.apache.commons.math.linear.QRDecompositionImplTest#testAEqualQR, org.apache.commons.math.fraction.BigFractionFormatTest#testNumeratorFormat, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testEvents, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testMath274, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnMatrixLarge, org.apache.commons.math.complex.FrenchComplexFormatTest#testSetRealFormatNull, org.apache.commons.math.special.GammaTest#testLogGammaNegative, org.apache.commons.math.transform.FastFourierTransformerTest#testAdHocData, org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeAll, org.apache.commons.math.linear.BigMatrixImplTest#testCopyFunctions, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstLegendrePolynomials, org.apache.commons.math.linear.BlockFieldMatrixTest#testPremultiplyVector, org.apache.commons.math.fraction.BigFractionTest#testReciprocal, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowVectorLarge, org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbabilityExtremes, org.apache.commons.math.random.RandomAdaptorTest#testNextSecureHex, org.apache.commons.math.random.UniformRandomGeneratorTest#testMeanAndStandardDeviation, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testMismatch, org.apache.commons.math.linear.SparseRealVectorTest#testBasicFunctions, org.apache.commons.math.distribution.PascalDistributionTest#testIllegalArguments, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testParameters, org.apache.commons.math.linear.RealVectorFormatTest#testPositiveInfinity, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testLLowerTriangular, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testCopy, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#serialization, org.apache.commons.math.estimation.EstimatedParameterTest#testBound, org.apache.commons.math.transform.FastHadamardTransformerTest#test8Points, org.apache.commons.math.stat.ranking.NaturalRankingTest#testDefault, org.apache.commons.math.util.ResizableDoubleArrayTest#testConstructors, org.apache.commons.math.transform.FastSineTransformerTest#testAdHocData, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleNoDecimals, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddNullYSampleData, org.apache.commons.math.linear.BigMatrixImplTest#testGetVectors, org.apache.commons.math.distribution.TDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAbsentOnExisting, org.apache.commons.math.complex.ComplexFormatTest#testPositiveInfinity, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testControlParameters, org.apache.commons.math.genetics.TournamentSelectionTest#testSelect, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testPopulation, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregation, org.apache.commons.math.distribution.PoissonDistributionTest#testCumulativeProbabilities, org.apache.commons.math.linear.FieldMatrixImplTest#testGetRowMatrix, org.apache.commons.math.distribution.TDistributionTest#testIllegalArguments, org.apache.commons.math.complex.FrenchComplexFormatTest#testForgottenImaginaryCharacter, org.apache.commons.math.fraction.FractionFormatTest#testFormat, org.apache.commons.math.analysis.solvers.BrentSolverTest#testRootEndpoints, org.apache.commons.math.optimization.general.MinpackTest#testMinpackWatson, org.apache.commons.math.fraction.BigFractionTest#testDoubleConstructor, org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryFormatNull, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#polynomial, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testNoDependency, org.apache.commons.math.optimization.linear.SimplexSolverTest#testModelWithNoArtificialVars, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testCopyFunctions, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testSingular, org.apache.commons.math.linear.FieldMatrixImplTest#testCopySubMatrix, org.apache.commons.math.complex.ComplexTest#testEqualsImaginaryDifference, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testEqualsAndHashCode, org.apache.commons.math.optimization.general.MinpackTest#testMinpackFreudensteinRoth, org.apache.commons.math.fraction.FractionTest#testDivide, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveSingle, org.apache.commons.math.complex.ComplexTest#testAbs, org.apache.commons.math.linear.ArrayRealVectorTest#testMapFunctions, org.apache.commons.math.distribution.WeibullDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.random.RandomAdaptorTest#testAdaptor, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNonSquare, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testCircleFitting, org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares3, org.apache.commons.math.distribution.ExponentialDistributionTest#testMeanAccessors, org.apache.commons.math.complex.ComplexTest#testGetArgument, org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares1, org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares2, org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumnMatrix, org.apache.commons.math.random.RandomDataTest#testNextInt, org.apache.commons.math.stat.inference.TestUtilsTest#testSmallSamples, org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullDoubleArray, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testDecreasingSteps, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testToString, org.apache.commons.math.linear.BlockRealMatrixTest#testMath209, org.apache.commons.math.estimation.MinpackTest#testMinpackBox3Dimensional, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRowMatrix, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMultiply, org.apache.commons.math.distribution.FDistributionTest#testCumulativeProbabilityExtremes, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSerialization, org.apache.commons.math.complex.ComplexTest#testDivideNaNInf, org.apache.commons.math.linear.FieldMatrixImplTest#testExamples, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRow, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSmallStep, org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension4WithoutSplit, org.apache.commons.math.distribution.ZipfDistributionTest#testIllegalArguments, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetSubMatrix, org.apache.commons.math.complex.ComplexTest#testSqrtNaN, org.apache.commons.math.distribution.NormalDistributionTest#testGetStandardDeviation, org.apache.commons.math.linear.MatrixIndexExceptionTest#testConstructorMessage, org.apache.commons.math.distribution.HypergeometricDistributionTest#testDensities, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testDecreasingSteps, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testParameters, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareIndependence, org.apache.commons.math.fraction.BigFractionTest#testConstructorDouble, org.apache.commons.math.stat.descriptive.rank.MaxTest#testConsistency, org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsRemovedTiesSequential, org.apache.commons.math.fraction.FractionFormatTest#testNumeratorFormat, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMatricesValues1, org.apache.commons.math.util.OpenIntToFieldTest#testPutAbsentOnExisting, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMatricesValues2, org.apache.commons.math.linear.BigMatrixImplTest#testDeterminant, org.apache.commons.math.complex.ComplexTest#testEqualsClass, org.apache.commons.math.fraction.BigFractionTest#testEqualsAndHashCode, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollision2, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testStepSize, org.apache.commons.math.complex.ComplexTest#testCoshInf, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMoreColumns, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultiple, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetAbsoluteAccuracy, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testSetterInjection, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSingleton, org.apache.commons.math.fraction.BigFractionFormatTest#testLongFormat, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#notEnoughData, org.apache.commons.math.distribution.TDistributionTest#testCumulativeProbabilityAgaintStackOverflow, org.apache.commons.math.stat.inference.TestUtilsTest#testOneWayAnovaUtils, org.apache.commons.math.optimization.direct.NelderMeadTest#testPowell, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testIllConditioned, org.apache.commons.math.geometry.Vector3DFormatTest#testParseZeroX, org.apache.commons.math.util.MathUtilsTest#testL2DistanceDouble, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testLongly, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testHighPercentile, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testMinStep, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveSin, org.apache.commons.math.util.MathUtilsTest#testNextAfter, org.apache.commons.math.linear.LUDecompositionImplTest#testSingular, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testGetValues, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonEqualCounts, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemoveFromEmpty, org.apache.commons.math.geometry.Vector3DTest#testCoordinates, org.apache.commons.math.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollisions, org.apache.commons.math.complex.ComplexTest#testAsinNaN, org.apache.commons.math.util.MathUtilsTest#testIndicatorDouble, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testTwoSets, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextLongExtremeValues, org.apache.commons.math.random.RandomDataTest#testNextSecureLong, org.apache.commons.math.linear.SparseFieldMatrixTest#testScalarAdd, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateResiduals, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testOneSet, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testDecreasingSteps, org.apache.commons.math.stat.descriptive.summary.SumTest#testMomentSmallSamples, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testBackward, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testNaN, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersUnsorted, org.apache.commons.math.linear.MatrixUtilsTest#testFractionConverter, org.apache.commons.math.util.BigRealFieldTest#testSerial, org.apache.commons.math.random.RandomAdaptorTest#testNextLong, org.apache.commons.math.stat.descriptive.rank.MinTest#testEqualsAndHashCode, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testPAEqualLU, org.apache.commons.math.distribution.PoissonDistributionTest#testMean, org.apache.commons.math.distribution.PoissonDistributionTest#testIllegalArguments, org.apache.commons.math.stat.descriptive.rank.MedianTest#testCopy, org.apache.commons.math.distribution.FDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.analysis.solvers.BrentSolverTest#testSinZero, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testNonInversible, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testProductAndGeometricMean, org.apache.commons.math.util.ResizableDoubleArrayTest#testEqualsAndHashCode, org.apache.commons.math.complex.ComplexTest#testAdd, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareLargeTestStatistic, org.apache.commons.math.special.GammaTest#testRegularizedGammaNegativePositive, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testBigStep, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#checkClone, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuinticFunction, org.apache.commons.math.complex.ComplexTest#testSqrtInf, org.apache.commons.math.distribution.NormalDistributionTest#testConsistency, org.apache.commons.math.complex.ComplexTest#testAbsInfinite, org.apache.commons.math.complex.ComplexFieldTest#testZero, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataWithSampleSizeMismatch, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#exceedMaxEvaluations, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testStdErrorConsistency, org.apache.commons.math.fraction.BigFractionFormatTest#testFormatImproper, org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGetWithExpectedSize, org.apache.commons.math.random.MersenneTwisterTest#testFloat, org.apache.commons.math.stat.descriptive.rank.MaxTest#testEvaluation, org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_realPartZero, org.apache.commons.math.complex.ComplexTest#testEqualsNaN, org.apache.commons.math.complex.ComplexTest#testSqrtImaginaryZero, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math.stat.descriptive.moment.MeanTest#testCopyConsistency, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testEvaluation, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextFloat, org.apache.commons.math.stat.inference.TTestTest#testPaired, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testImpossibleSerialization, org.apache.commons.math.complex.FrenchComplexFormatTest#testZeroImaginary, org.apache.commons.math.linear.QRDecompositionImplTest#testDimensions, org.apache.commons.math.distribution.GammaDistributionTest#testParameterAccessors, org.apache.commons.math.random.ValueServerTest#testNextDigestFail, org.apache.commons.math.fraction.BigFractionFormatTest#testParseProperInvalidMinus, org.apache.commons.math.complex.ComplexFormatTest#testNegativeBoth, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testMomentSmallSamples, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testEqualsAndHashCode, org.apache.commons.math.linear.SparseRealVectorTest#testDataInOut, org.apache.commons.math.random.RandomAdaptorTest#testNextUniformExclusiveEndpoints, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testBackward, org.apache.commons.math.complex.FrenchComplexFormatTest#testParsePositiveInfinity, org.apache.commons.math.stat.StatUtilsTest#testMax, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testCopyConsistency, org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testSerialization, org.apache.commons.math.stat.correlation.CovarianceTest#testInsufficientData, org.apache.commons.math.optimization.linear.SimplexTableauTest#testInitialization, org.apache.commons.math.linear.EigenSolverTest#testNonInvertible, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveXY, org.apache.commons.math.linear.RealMatrixImplTest#testGetRowMatrix, org.apache.commons.math.ode.ContinuousOutputModelTest#testModelsMerging, org.apache.commons.math.stat.FrequencyTest#testToString, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testEqualsAndHashCode, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNonDefaultSetting, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testStats, org.apache.commons.math.complex.ComplexTest#testPowInf, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest#testValues, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#noReset, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testRedundantEquations, org.apache.commons.math.stat.descriptive.summary.ProductTest#testEvaluation, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimals, org.apache.commons.math.transform.FastCosineTransformerTest#testAdHocData, org.apache.commons.math.distribution.ChiSquareDistributionTest#testIllegalArguments, org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryCharacterNull, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testIncrementation, org.apache.commons.math.complex.ComplexTest#testTanh, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testConsistency, org.apache.commons.math.stat.descriptive.summary.ProductTest#testSerial, org.apache.commons.math.stat.descriptive.summary.ProductTest#testSerialization, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testIncrementation, org.apache.commons.math.linear.RealMatrixImplTest#testGetColumn, org.apache.commons.math.linear.RealMatrixImplTest#testMath209, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#serialization, org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testQuinticMax, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testN0andN1Conditions, org.apache.commons.math.util.OpenIntToFieldTest#testRemove2, org.apache.commons.math.complex.ComplexTest#testSqrtRealNegative, org.apache.commons.math.MathConfigurationExceptionTest#testConstructorPatternArguments, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testUOrthogonal, org.apache.commons.math.linear.BiDiagonalTransformerTest#testBBiDiagonal, org.apache.commons.math.linear.BigMatrixImplTest#testGetColumnMatrix, org.apache.commons.math.complex.ComplexTest#testpowNull, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testBigStep, org.apache.commons.math.stat.descriptive.summary.SumTest#testSpecialValues, org.apache.commons.math.linear.BlockRealMatrixTest#testScalarAdd, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSerialization, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testEqualsAndHashCode, org.apache.commons.math.fraction.FractionTest#testConstructor, org.apache.commons.math.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetMatrixLarge, org.apache.commons.math.linear.EigenDecompositionImplTest#testVOrthogonal, org.apache.commons.math.distribution.PoissonDistributionTest#testDegenerateInverseCumulativeProbability, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#polynomial, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSinZero, org.apache.commons.math.fraction.FractionTest#testGetReducedFraction, org.apache.commons.math.distribution.FDistributionTest#testConsistency, org.apache.commons.math.analysis.solvers.BrentSolverTest#testDeprecated, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testMatricesValues2, org.apache.commons.math.fraction.FractionFormatTest#testParseInteger, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testStaticFormatRealVectorImpl, org.apache.commons.math.estimation.MinpackTest#testMinpackMeyer, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testMatricesValues1, org.apache.commons.math.random.RandomAdaptorTest#testNextGaussian, org.apache.commons.math.util.BigRealTest#testDoubleValue, org.apache.commons.math.linear.FieldMatrixImplTest#testSerial, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveNanPositive, org.apache.commons.math.linear.FieldMatrixImplTest#testDimensions, org.apache.commons.math.linear.RealMatrixImplTest#testGetSubMatrix, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetMaximalIterationCount, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterInjection, org.apache.commons.math.linear.TriDiagonalTransformerTest#testTTriDiagonal, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testRedundantEquations, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveAccuracyNull, org.apache.commons.math.complex.ComplexTest#testConstructorNaN, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMoreEstimatedParametersSimple, org.apache.commons.math.stat.descriptive.summary.SumTest#testConsistency, org.apache.commons.math.fraction.BigFractionFieldTest#testZero, org.apache.commons.math.linear.MatrixUtilsTest#testCreateBigIdentityMatrix, org.apache.commons.math.linear.SparseRealVectorTest#testPredicates, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testLinearFunction, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositivePositive, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testStepSize, org.apache.commons.math.linear.SparseFieldMatrixTest#testOperate, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testCopyConsistency, org.apache.commons.math.linear.BlockRealMatrixTest#testSetRow, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest#testMeanAndCorrelation, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testConcurrentModification, org.apache.commons.math.stat.descriptive.summary.ProductTest#testCopyConsistency, org.apache.commons.math.linear.SparseFieldMatrixTest#testTranspose, org.apache.commons.math.optimization.general.MinpackTest#testMinpackRosenbrok, org.apache.commons.math.util.MathUtilsTest#testSignFloat, org.apache.commons.math.util.MathUtilsTest#testSignDouble, org.apache.commons.math.fraction.FractionFormatTest#testParseInvalid, org.apache.commons.math.linear.FieldMatrixImplTest#testSetRowVector, org.apache.commons.math.geometry.RotationTest#testVectorTwoPairs, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetVectors, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#serialization, org.apache.commons.math.distribution.NormalDistributionTest#testExtremeValues, org.apache.commons.math.linear.LUSolverTest#testThreshold, org.apache.commons.math.geometry.RotationOrderTest#testName, org.apache.commons.math.util.MathUtilsTest#testIndicatorShort, org.apache.commons.math.distribution.PoissonDistributionTest#testLargeMeanCumulativeProbability, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testTrivial, org.apache.commons.math.util.OpenIntToFieldTest#testPutKeysWithCollisions, org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeInfinity, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#testMinStep, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testConsistency, org.apache.commons.math.complex.ComplexFormatTest#testStaticFormatComplex, org.apache.commons.math.linear.TriDiagonalTransformerTest#testAEqualQTQt, org.apache.commons.math.stat.descriptive.rank.MaxTest#testSerialization, org.apache.commons.math.util.MathUtilsTest#testSinh, org.apache.commons.math.complex.FrenchComplexFormatTest#testGetImaginaryFormat, org.apache.commons.math.distribution.GammaDistributionTest#testIllegalArguments, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testKepler, org.apache.commons.math.linear.BlockFieldMatrixTest#testEqualsAndHashCode, org.apache.commons.math.linear.SparseRealMatrixTest#testAddFail, org.apache.commons.math.linear.BlockRealMatrixTest#testSetSubMatrix, org.apache.commons.math.complex.ComplexTest#testTanNaN, org.apache.commons.math.genetics.RandomKeyTest#testInducedPermutation, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testTrace, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnVectorLarge, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenSeparator, org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaPValue, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#dimensionCheck, org.apache.commons.math.ConvergenceExceptionTest#testConstructorCause, org.apache.commons.math.linear.SparseRealMatrixTest#testGetColumnMatrix, org.apache.commons.math.estimation.MinpackTest#testMinpackRosenbrok, org.apache.commons.math.fraction.BigFractionTest#testAdd, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testNaNContracts, org.apache.commons.math.random.RandomDataTest#testNextSample, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseZeroReal, org.apache.commons.math.linear.RealVectorFormatTest#testParseIgnoredWhitespace, org.apache.commons.math.distribution.PoissonDistributionTest#testFloatingPointArguments, org.apache.commons.math.linear.CholeskySolverTest#testSolveDimensionErrors, org.apache.commons.math.linear.EigenDecompositionImplTest#testBigMatrix, org.apache.commons.math.linear.QRSolverTest#testRank, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddXSampleData, org.apache.commons.math.linear.EigenDecompositionImplTest#testAEqualVDVt, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSubMatrix, org.apache.commons.math.distribution.CauchyDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.geometry.RotationTest#testSingularities, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testSerialization, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullCovarianceData, org.apache.commons.math.fraction.BigFractionFormatTest#testDoubleFormat, org.apache.commons.math.util.MathUtilsTest#testFactorialFail, org.apache.commons.math.linear.FieldMatrixImplTest#testMultiply2, org.apache.commons.math.linear.TriDiagonalTransformerTest#testQTOrthogonal, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testSimplistic, org.apache.commons.math.fraction.BigFractionTest#testAbs, org.apache.commons.math.linear.SparseFieldMatrixTest#testAdd, org.apache.commons.math.analysis.solvers.RiddersSolverTest#testParameters, org.apache.commons.math.linear.RealMatrixImplTest#testCopySubMatrix, org.apache.commons.math.distribution.WeibullDistributionTest#testSetAlpha, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testLaguerreDifferentials, org.apache.commons.math.complex.ComplexFieldTest#testOne, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, org.apache.commons.math.linear.RealMatrixImplTest#testSetRowVector, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest#testTrivial, org.apache.commons.math.linear.BigMatrixImplTest#testTrace, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenSuffix, org.apache.commons.math.linear.FieldMatrixImplTest#testGetEntry, org.apache.commons.math.linear.SparseRealMatrixTest#testExamples, org.apache.commons.math.distribution.NormalDistributionTest#testDensity, org.apache.commons.math.geometry.Vector3DTest#testNormInf, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSerial, org.apache.commons.math.random.MersenneTwisterTest#testMakotoNishimura, org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testRedundantSolvable, org.apache.commons.math.linear.SparseRealMatrixTest#testGetRowMatrix, org.apache.commons.math.linear.BlockFieldMatrixTest#testMultiply, org.apache.commons.math.complex.ComplexTest#testLogNaN, org.apache.commons.math.distribution.ZipfDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.fraction.FractionFormatTest#testFormatImproperNegative, org.apache.commons.math.transform.FastHadamardTransformerTest#testNoIntInverse, org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryCharacterEmpty, org.apache.commons.math.random.EmpiricalDistributionTest#testBinIndexOverflow, org.apache.commons.math.fraction.FractionTest#testEpsilonLimitConstructor, org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaFValue, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testSwissFertility, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBackward, org.apache.commons.math.util.MathUtilsTest#testFactorial, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterIllegalState, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testStats, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testLegendreDifferentials, org.apache.commons.math.linear.SparseFieldVectorTest#testMisc, org.apache.commons.math.linear.BlockRealMatrixTest#testGetEntry, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testCopyConsistency, org.apache.commons.math.fraction.FractionFormatTest#testFormatNegative, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentSizes, org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testQuinticMin, org.apache.commons.math.random.RandomDataTest#testNextUniformExclusiveEndpoints, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#derivativesConsistency, org.apache.commons.math.optimization.general.MinpackTest#testMinpackJennrichSampson, org.apache.commons.math.distribution.ChiSquareDistributionTest#testSampling, org.apache.commons.math.distribution.PascalDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateTwoSegment, org.apache.commons.math.linear.RealMatrixImplTest#testSetColumn, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testBoundParameters, org.apache.commons.math.linear.RealMatrixImplTest#testGetVectors, org.apache.commons.math.analysis.solvers.MullerSolverTest#testExpm1Function, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testTwoSets, org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleWithDecimals, org.apache.commons.math.estimation.MinpackTest#testMinpackFreudensteinRoth, org.apache.commons.math.MathExceptionTest#testConstructor, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testEqualsAndHashCode, org.apache.commons.math.random.RandomDataTest#testNextPoissonLargeMean, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateResiduals, org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math.random.RandomDataTest#testNextLong, org.apache.commons.math.util.MathUtilsTest#testIndicatorByte, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testAEqualLLT, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testIncrementation, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testKepler, org.apache.commons.math.util.OpenIntToFieldTest#testPutKeysWithCollision2, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testDimensionCheck, org.apache.commons.math.analysis.solvers.RiddersSolverTest#testDeprecated, org.apache.commons.math.geometry.RotationTest#testComposeInverse, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#testMinStep, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGetWithExpectedSize, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNan, org.apache.commons.math.estimation.MinpackTest#testMinpackBrownDennis, org.apache.commons.math.linear.LUSolverTest#testSingular, org.apache.commons.math.stat.descriptive.InteractionTest#testInteraction, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testBasicStats, org.apache.commons.math.stat.descriptive.summary.SumTest#testEvaluation, org.apache.commons.math.util.MathUtilsTest#testAddAndCheckLong, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testCopy, org.apache.commons.math.analysis.solvers.MullerSolverTest#testParameters, org.apache.commons.math.random.RandomAdaptorTest#testNextPoissonLargeMean, org.apache.commons.math.random.RandomDataTest#testNextSecureHex, org.apache.commons.math.random.RandomAdaptorTest#testNextHex, org.apache.commons.math.complex.FrenchComplexFormatTest#testFormatNumber, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testToString, org.apache.commons.math.MathConfigurationExceptionTest#testConstructor, org.apache.commons.math.util.BigRealFieldTest#testZero, org.apache.commons.math.linear.QRDecompositionImplTest#testMatricesValues, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testEqualsAndHashCode, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMoreEstimatedParametersUnsorted, org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeBoth, org.apache.commons.math.linear.SparseFieldMatrixTest#testMultiply2, org.apache.commons.math.fraction.BigFractionTest#testMultiply, org.apache.commons.math.util.ResizableDoubleArrayTest#testDiscard, org.apache.commons.math.util.ResizableDoubleArrayTest#testAdd1000, org.apache.commons.math.distribution.TDistributionTest#testSmallDf, org.apache.commons.math.distribution.HypergeometricDistributionTest#testFloatingPointArguments, org.apache.commons.math.linear.RealMatrixImplTest#testWalk, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextUniformExclusiveEndpoints, org.apache.commons.math.special.GammaTest#testRegularizedGammaZeroPositive, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testSkewAndKurtosis, org.apache.commons.math.MathExceptionTest#testConstructorPatternArguments, org.apache.commons.math.util.TransformerMapTest#testSerial, org.apache.commons.math.linear.RealMatrixImplTest#testCopyFunctions, org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnFieldMatrix, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMoreEstimatedParametersUnsorted, org.apache.commons.math.fraction.FractionTest#testIntegerOverflow, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testConsistency, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testPopulation, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testIncreasingRobustnessItersIncreasesSmoothnessWithOutliers, org.apache.commons.math.distribution.BinomialDistributionTest#testFloatingPointArguments, org.apache.commons.math.linear.SparseRealMatrixTest#testDimensions, org.apache.commons.math.complex.ComplexTest#testSinInf, org.apache.commons.math.special.GammaTest#testRegularizedGammaNanPositive, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParsePositiveInfinity, org.apache.commons.math.linear.RealVectorFormatTest#testForgottenPrefix, org.apache.commons.math.complex.ComplexFormatTest#testNegativeReal, org.apache.commons.math.optimization.direct.MultiDirectionalTest#testFunctionEvaluationExceptions, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBracketEndpointRoot, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testNoDependency, org.apache.commons.math.complex.ComplexFormatTest#testParseNan, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSerialization, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testPositiveInfinity, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGetWith0ExpectedSize, org.apache.commons.math.stat.descriptive.rank.MedianTest#testEvaluation, org.apache.commons.math.MathConfigurationExceptionTest#testConstructorPatternArgumentsCause, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testInconsistentEquations, org.apache.commons.math.util.TransformerMapTest#testContainsTransformer, org.apache.commons.math.linear.TriDiagonalTransformerTest#testMatricesValues5, org.apache.commons.math.linear.TriDiagonalTransformerTest#testMatricesValues3, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest#testTestPositive, org.apache.commons.math.linear.SparseRealMatrixTest#testOperate, org.apache.commons.math.linear.FieldMatrixImplTest#testGetSubMatrix, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testControlParameters, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeInfinity, org.apache.commons.math.complex.ComplexTest#testAsin, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeInfinity, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowVectorLarge, org.apache.commons.math.fraction.BigFractionFormatTest#testParseInvalidDenominator, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, org.apache.commons.math.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testLinear, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testHat, org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_NAN_Inf, org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveZero, org.apache.commons.math.linear.FieldMatrixImplTest#testTranspose, org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsAndInfs, org.apache.commons.math.geometry.RotationTest#testAxisAngle, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetRelativeAccuracy, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstHermitePolynomials, org.apache.commons.math.stat.inference.TTestFactoryTest#testPaired, org.apache.commons.math.geometry.RotationTest#testRevert, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testSerial, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFitting, org.apache.commons.math.optimization.linear.SimplexSolverTest#testLargeModel, org.apache.commons.math.geometry.Vector3DTest#testVectorialProducts, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSerial, org.apache.commons.math.genetics.OnePointCrossoverTest#testCrossover, org.apache.commons.math.util.OpenIntToFieldTest#testRemove, org.apache.commons.math.optimization.direct.MultiDirectionalTest#testMath283, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowMatrixLarge, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#exceedMaxEvaluations, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testConditionNumber, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testParameters, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testStaticFormatVector3D, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest#derivativesConsistency, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureInt, org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumnVector, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations#test, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testRedundantEquations, org.apache.commons.math.linear.LUSolverTest#testSolveSingularityErrors, org.apache.commons.math.analysis.solvers.NewtonSolverTest#testDeprecated, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testLinearFunction, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonBadCounts, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testPercentileSetter, org.apache.commons.math.util.MathUtilsTest#testCoshNaN, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseDifferentImaginaryChar, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testPositiveInfinity, org.apache.commons.math.complex.ComplexTest#testPowNaNExponent, org.apache.commons.math.stat.StatUtilsTest#testSumLog, org.apache.commons.math.complex.ComplexFormatTest#testDifferentImaginaryChar, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testBackward, org.apache.commons.math.linear.BlockFieldMatrixTest#testMath209, org.apache.commons.math.transform.FastSineTransformerTest#testParameters, org.apache.commons.math.util.DefaultTransformerTest#testTransformNull, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest#testNoOptimum, org.apache.commons.math.linear.BigMatrixImplTest#testAdd, org.apache.commons.math.complex.ComplexTest#testPowZero, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testOneSet, org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom, org.apache.commons.math.fraction.BigFractionFormatTest#testParseProper, org.apache.commons.math.optimization.linear.SimplexSolverTest#testSingleVariableAndConstraint, org.apache.commons.math.geometry.Vector3DTest#testDistance1, org.apache.commons.math.linear.RealMatrixImplTest#testFrobeniusNorm, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveNegativePositive, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareZeroCount, org.apache.commons.math.linear.RealMatrixImplTest#testPremultiplyVector, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#interpolationAtBounds, org.apache.commons.math.stat.descriptive.rank.MinTest#testCopy, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeY, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeZ, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNan, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testSerial, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeX, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveObsFromEmpty, org.apache.commons.math.optimization.general.MinpackTest#testMinpackMeyer, org.apache.commons.math.stat.inference.TestUtilsTest#testOneSampleTTest, org.apache.commons.math.complex.ComplexFormatTest#testSimpleWithDecimals, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testNonInversible, org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleWithDecimals, org.apache.commons.math.fraction.FractionTest#testFloatValue, org.apache.commons.math.complex.ComplexTest#testDivide, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testGetAbsent, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testOneSet, org.apache.commons.math.random.MersenneTwisterTest#testNextIntN, org.apache.commons.math.complex.ComplexTest#testSubtract, org.apache.commons.math.linear.LUDecompositionImplTest#testPPermutation, org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateNoFailures, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRow, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testKepler, org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testUnsorted, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest#testCircleFitting, org.apache.commons.math.fraction.FractionTest#testMultiply, org.apache.commons.math.estimation.WeightedMeasurementTest#testIgnored, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testCopyConsistency, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPremultiply, org.apache.commons.math.fraction.BigFractionTest#testFloatValue, org.apache.commons.math.distribution.FDistributionTest#testSmallDegreesOfFreedom, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testExpm1Function, org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testCopyConsistency, org.apache.commons.math.analysis.solvers.MullerSolverTest#testExpm1Function2, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleWithDecimals, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#testIncreasingTolerance, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testMinStep, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testKepler, org.apache.commons.math.complex.ComplexTest#testAtan, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testIncrementation, org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuadraticFunction, org.apache.commons.math.distribution.TDistributionTest#testDfAccessors, org.apache.commons.math.distribution.CauchyDistributionTest#testConsistency, org.apache.commons.math.special.BetaTest#testLogBetaPositivePositive, org.apache.commons.math.util.OpenIntToFieldTest#testPutOnExisting, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testProductAndGeometricMean, org.apache.commons.math.estimation.MinpackTest#testMinpackBard, org.apache.commons.math.random.MersenneTwisterTest#testNextLong, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testLTTransposed, org.apache.commons.math.linear.TriDiagonalTransformerTest#testNoAccessBelowDiagonal, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testRank, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testAEqualUSVt, org.apache.commons.math.stat.descriptive.moment.MeanTest#testConsistency, org.apache.commons.math.stat.descriptive.rank.MinTest#testSerial, org.apache.commons.math.transform.FastFourierTransformerTest#test2DData, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateThreeSegment, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextInt, org.apache.commons.math.linear.SparseRealMatrixTest#testEqualsAndHashCode, org.apache.commons.math.linear.RealMatrixImplTest#testSerial, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testSkewAndKurtosis, org.apache.commons.math.stat.StatUtilsTest#testMean, org.apache.commons.math.linear.SingularValueSolverTest#testConditionNumber, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testCopy, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testCircleFittingBadInit, org.apache.commons.math.fraction.FractionFormatTest#testParseNegative, org.apache.commons.math.stat.descriptive.moment.MeanTest#testSerial, org.apache.commons.math.linear.FieldMatrixImplTest#testPremultiplyVector, org.apache.commons.math.util.ResizableDoubleArrayTest#testMutators, org.apache.commons.math.linear.SparseFieldMatrixTest#testEqualsAndHashCode, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRow, org.apache.commons.math.util.ContinuedFractionTest#testGoldenRatio, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testEvents, org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testParameters, org.apache.commons.math.stat.StatUtilsTest#testDifferenceStats, org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testInitialGuess, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testSmallStep, org.apache.commons.math.complex.ComplexTest#testSin, org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateFullSample, org.apache.commons.math.stat.inference.TestUtilsTest#testTwoSampleTHomoscedastic, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMath199, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextExponential, org.apache.commons.math.linear.RealMatrixImplTest#testExamples, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSerialization, org.apache.commons.math.complex.ComplexTest#testExpNaN, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testSmallStep, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRowMatrix, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetFunctionValueAccuracy, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testAddition, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testSerial, org.apache.commons.math.fraction.BigFractionTest#testIntValue, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testHighDegreeLegendre, org.apache.commons.math.optimization.fitting.HarmonicFitterTest#test1PercentError, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testEqualsAndHashCode, org.apache.commons.math.estimation.MinpackTest#testMinpackJennrichSampson, org.apache.commons.math.linear.SparseRealMatrixTest#testGetRowVector, org.apache.commons.math.util.BigRealTest#testBigDecimalValue, org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleNoDecimals, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#serialization, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testQRColumnsPermutation, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testMomentSmallSamples, org.apache.commons.math.linear.EigenSolverTest#testInvertible, org.apache.commons.math.linear.BlockRealMatrixTest#testTranspose, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testNoDenseOutput, org.apache.commons.math.distribution.BinomialDistributionTest#testIllegalArguments, org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullFile, org.apache.commons.math.util.MathUtilsTest#testPow, org.apache.commons.math.linear.SparseFieldMatrixTest#testGetColumnVector, org.apache.commons.math.stat.descriptive.rank.MaxTest#testCopyConsistency, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testN0andN1Conditions, org.apache.commons.math.distribution.ChiSquareDistributionTest#testCumulativeProbabilities, org.apache.commons.math.distribution.HypergeometricDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.analysis.solvers.RiddersSolverTest#testSinFunction, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenPrefix, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testRemoval, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testScalarAdd, org.apache.commons.math.stat.inference.TTestTest#testTwoSampleTHomoscedastic, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testNoDependency, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testEvaluation, org.apache.commons.math.distribution.ExponentialDistributionTest#testDensity, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnMatrixLarge, org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexIllegalModulus, org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryCharacterNull, org.apache.commons.math.linear.RealVectorFormatTest#testParseNoComponents, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumnVector, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testInsufficientData, org.apache.commons.math.estimation.MinpackTest#testMinpackWatson, org.apache.commons.math.linear.SparseRealMatrixTest#testCopyFunctions, org.apache.commons.math.geometry.RotationTest#testIdentity, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testLongly, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testColumnsPermutation, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testDimensions, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayPatternArguments, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testCopy, org.apache.commons.math.random.ValueServerTest#testNextDigest, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorPatternArgumentsCause, org.apache.commons.math.random.EmpiricalDistributionTest#testGridTooFine, org.apache.commons.math.random.RandomDataTest#testNextGaussian, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testIterator, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testQuadratic, org.apache.commons.math.distribution.GammaDistributionTest#testProbabilities, org.apache.commons.math.linear.RealMatrixImplTest#testNorm, org.apache.commons.math.stat.inference.TestUtilsTest#testPaired, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testTrivial, org.apache.commons.math.MathExceptionTest#testPrintStackTrace, org.apache.commons.math.util.OpenIntToFieldTest#testConcurrentModification, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleNoDecimals, org.apache.commons.math.fraction.BigFractionFormatTest#testParseProperNegative, org.apache.commons.math.complex.ComplexFormatTest#testNan, org.apache.commons.math.random.RandomDataTest#testNextPermutation, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenPrefix, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testEmptyData, org.apache.commons.math.linear.BlockFieldMatrixTest#testWalk, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleWithDecimals, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testQuinticZero, org.apache.commons.math.complex.ComplexTest#testEqualsRealDifference, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultipleToEmpty, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressandVariance, org.apache.commons.math.util.MathUtilsTest#testAddAndCheck, org.apache.commons.math.special.ErfTest#testErf2576, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullYSampleData, org.apache.commons.math.stat.descriptive.summary.ProductTest#testIncrementation, org.apache.commons.math.linear.BigMatrixImplTest#testSetSubMatrix, org.apache.commons.math.geometry.Vector3DFormatTest#testNonDefaultSetting, org.apache.commons.math.distribution.CauchyDistributionTest#testMedian, org.apache.commons.math.linear.SparseRealMatrixTest#testGetColumnVector, org.apache.commons.math.linear.BigMatrixImplTest#testScalarAdd, org.apache.commons.math.util.MathUtilsTest#testCompareTo, org.apache.commons.math.linear.BlockRealMatrixTest#testMultiply2, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest#serialization, org.apache.commons.math.random.RandomAdaptorTest#testNextLongExtremeValues, org.apache.commons.math.util.MathUtilsTest#testArrayHash, org.apache.commons.math.distribution.BinomialDistributionTest#testCumulativeProbabilities, org.apache.commons.math.distribution.WeibullDistributionTest#testBeta, org.apache.commons.math.util.MathUtilsTest#testLcm, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#dimensionCheck, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testBackward, org.apache.commons.math.util.MathUtilsTest#testIndicatorFloat, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testNaN, org.apache.commons.math.linear.BlockRealMatrixTest#testEqualsAndHashCode, org.apache.commons.math.random.EmpiricalDistributionTest#testLoad, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveZero, org.apache.commons.math.linear.SparseFieldMatrixTest#testExamples, org.apache.commons.math.complex.FrenchComplexFormatTest#testDifferentImaginaryChar, org.apache.commons.math.complex.FrenchComplexFormatTest#testZeroReal, org.apache.commons.math.complex.ComplexTest#testTanInf, org.apache.commons.math.complex.ComplexFormatTest#testForgottenImaginaryCharacter, org.apache.commons.math.linear.RealVectorFormatTest#testForgottenSuffix, org.apache.commons.math.complex.ComplexTest#testSerial, org.apache.commons.math.linear.SparseFieldMatrixTest#testGetVectors, org.apache.commons.math.ode.FirstOrderConverterTest#testDoubleDimension, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testEqualsAndHashCode, org.apache.commons.math.complex.ComplexTest#testTanhInf, org.apache.commons.math.stat.FrequencyTest#testCounts, org.apache.commons.math.linear.SparseFieldVectorTest#testPredicates, org.apache.commons.math.linear.BigMatrixImplTest#testSolve, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParameters, org.apache.commons.math.geometry.Vector3DFormatTest#testConstructorSingleFormat, org.apache.commons.math.util.ResizableDoubleArrayTest#testSetNumberOfElements, org.apache.commons.math.optimization.general.MinpackTest#testMinpackKowalikOsborne, org.apache.commons.math.linear.EigenDecompositionImplTest#testEigenvectors, org.apache.commons.math.distribution.PoissonDistributionTest#testLargeMeanInverseCumulativeProbability, org.apache.commons.math.linear.SparseRealMatrixTest#testAdd, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testConsistency, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testMomentSmallSamples, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumnMatrix, org.apache.commons.math.fraction.BigFractionFormatTest#testParse, org.apache.commons.math.fraction.BigFractionTest#testCompareTo, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testCopy, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testSerialization, org.apache.commons.math.complex.ComplexTest#testTanhNaN, org.apache.commons.math.distribution.FDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testUnstableDerivative, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testEvaluation, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testN0andN1Conditions, org.apache.commons.math.util.MathUtilsTest#testSubAndCheckErrorMessage, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testCopy, org.apache.commons.math.fraction.FractionTest#testAbs, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#derivativesConsistency, org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testMinEndpoints, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testEqualsAndHashCode, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testEvaluation, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testIncrementation, org.apache.commons.math.stat.descriptive.rank.MinTest#testSerialization, org.apache.commons.math.fraction.FractionFormatTest#testParseProperNegative, org.apache.commons.math.util.MathUtilsTest#testEquals, org.apache.commons.math.random.EmpiricalDistributionTest#testNexFail, org.apache.commons.math.complex.ComplexFormatTest#testFormatNumber, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testHadamard, org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testDecreasingSteps, org.apache.commons.math.stat.descriptive.moment.MeanTest#testSmallSamples, org.apache.commons.math.util.DefaultTransformerTest#testTransformBigDecimal, org.apache.commons.math.linear.BigMatrixImplTest#testDimensions, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSetterIllegalState, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testColumnsPermutation, org.apache.commons.math.optimization.direct.NelderMeadTest#testFunctionEvaluationExceptions, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumn, org.apache.commons.math.complex.FrenchComplexFormatTest#testGetRealFormat, org.apache.commons.math.complex.ComplexTest#testSqrtRealPositive, org.apache.commons.math.linear.BlockFieldMatrixTest#testToString, org.apache.commons.math.linear.BlockRealMatrixTest#testPremultiply, org.apache.commons.math.linear.BigMatrixImplTest#testAddFail, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultiplePastEmpty, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSpecialValues, org.apache.commons.math.linear.FieldMatrixImplTest#testMultiply, org.apache.commons.math.util.MathUtilsTest#testLog, org.apache.commons.math.transform.FastFourierTransformerTest#testParameters, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testFormatObject, org.apache.commons.math.linear.FieldMatrixImplTest#testGetRowVector, org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleNoDecimals, org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveNan, org.apache.commons.math.util.MathUtilsTest#testSignLong, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testUnequalSizeArguments, org.apache.commons.math.complex.ComplexTest#testMultiply, org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleNoDecimals, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testMomentSmallSamples, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testBasicStats, org.apache.commons.math.random.GaussianRandomGeneratorTest#testMeanAndStandardDeviation, org.apache.commons.math.util.OpenIntToFieldTest#testRemoveFromEmpty, org.apache.commons.math.util.MathUtilsTest#testMulAndCheck, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testIncreasingTolerance, org.apache.commons.math.stat.StatUtilsTest#testGeometricMean, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEvents, org.apache.commons.math.fraction.FractionTest#testAdd, org.apache.commons.math.complex.ComplexTest#testNegate, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testSerial, org.apache.commons.math.linear.SparseFieldMatrixTest#testGetRowVector, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testConsistency, org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficient, org.apache.commons.math.linear.FieldMatrixImplTest#testSetRow, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testConsistency, org.apache.commons.math.complex.ComplexTest#testSinhInf, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testDimensionCheck, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testOneSet, org.apache.commons.math.analysis.solvers.MullerSolverTest#testQuinticFunction2, org.apache.commons.math.distribution.ExponentialDistributionTest#testConsistency, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeZ, org.apache.commons.math.complex.ComplexFormatTest#testZeroReal, org.apache.commons.math.linear.SparseFieldMatrixTest#testTrace, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testLLowerTriangular, org.apache.commons.math.linear.FieldMatrixImplTest#testAddFail, org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testSmallError, org.apache.commons.math.distribution.ZipfDistributionTest#testFloatingPointArguments, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testCopyConsistency, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeX, org.apache.commons.math.linear.BlockRealMatrixTest#testGetRow, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeY, org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleNoDecimals, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testPPermutation, org.apache.commons.math.stat.descriptive.summary.SumTest#testIncrementation, org.apache.commons.math.util.MathUtilsTest#testL1DistanceDouble, org.apache.commons.math.optimization.direct.MultiDirectionalTest#testRosenbrock, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testConsistency, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#test20090720, org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testLinearFunction, org.apache.commons.math.optimization.linear.SimplexSolverTest#testUnboundedSolution, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewSecantSolverValid, org.apache.commons.math.distribution.FDistributionTest#testIllegalArguments, org.apache.commons.math.stat.StatUtilsTest#testSumSq, org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryFormatNull, org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testNoError, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testN0andN1Conditions, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testShuffledStatistics, org.apache.commons.math.complex.ComplexTest#testAcos, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemoveAbsent, org.apache.commons.math.ode.FirstOrderConverterTest#testDecreasingSteps, org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeReal, org.apache.commons.math.stat.inference.TestUtilsTest#testOneSampleT, org.apache.commons.math.ode.sampling.StepNormalizerTest#testBeforeEnd, org.apache.commons.math.util.DefaultTransformerTest#testSerial, org.apache.commons.math.linear.SparseRealVectorTest#testConstructors, org.apache.commons.math.util.DefaultTransformerTest#testTransformInteger, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testNoDependency, org.apache.commons.math.complex.ComplexTest#testConjugateInfiinite, org.apache.commons.math.util.OpenIntToFieldTest#testCopy, org.apache.commons.math.optimization.linear.SimplexSolverTest#testSimplexSolver, org.apache.commons.math.linear.RealVectorFormatTest#testStaticFormatRealVectorImpl, org.apache.commons.math.linear.BigMatrixImplTest#testMultiply, org.apache.commons.math.fraction.FractionFormatTest#testParseInvalidDenominator, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumnVector, org.apache.commons.math.linear.SparseFieldMatrixTest#testDimensions, org.apache.commons.math.util.ResizableDoubleArrayTest#testAddElementRolling, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testBigStep, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testIncrementation, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddXSampleData, org.apache.commons.math.linear.BlockRealMatrixTest#testSeveralBlocks, org.apache.commons.math.distribution.PascalDistributionTest#testDensities, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeAll, org.apache.commons.math.complex.FrenchComplexFormatTest#testPaseNegativeInfinity, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest#testDerivativesConsistency, org.apache.commons.math.linear.BlockRealMatrixTest#testToString, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArray, org.apache.commons.math.linear.RealVectorFormatTest#testNegativeX, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testDimensionCheck, org.apache.commons.math.complex.ComplexTest#testTanCritical, org.apache.commons.math.complex.ComplexFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math.linear.RealMatrixImplTest#testGetColumnVector, org.apache.commons.math.complex.ComplexFormatTest#testSimpleNoDecimals, org.apache.commons.math.linear.RealVectorFormatTest#testNegativeZ, org.apache.commons.math.geometry.RotationTest#testApplyInverseTo, org.apache.commons.math.linear.RealVectorFormatTest#testNegativeY, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeZ, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveNan, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersSimple, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testMeanAndCovariance, org.apache.commons.math.complex.ComplexTest#testExp, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testEvents, org.apache.commons.math.stat.StatUtilsTest#testMin, org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumn, org.apache.commons.math.util.OpenIntToFieldTest#testGetFromEmpty, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeX, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeY, org.apache.commons.math.stat.inference.TTestFactoryTest#testSmallSamples, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareZeroCount, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParameters, org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumnVector, org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveNegative, org.apache.commons.math.MathConfigurationExceptionTest#testConstructorCause, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleNoDecimals, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testQuinticFunction, org.apache.commons.math.fraction.FractionTest#testConstructorDouble, org.apache.commons.math.transform.FastHadamardTransformerTest#test4Points, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSpecialValues, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testEvaluation, org.apache.commons.math.util.DefaultTransformerTest#testTransformObject, org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareZeroCount, org.apache.commons.math.fraction.FractionTest#testSubtract, org.apache.commons.math.distribution.NormalDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemove, org.apache.commons.math.linear.BlockRealMatrixTest#testSetRowMatrix, org.apache.commons.math.geometry.Vector3DFormatTest#testStaticFormatVector3D, org.apache.commons.math.complex.ComplexTest#testPowNaNBase, org.apache.commons.math.linear.LUDecompositionImplTest#testPAEqualLU, org.apache.commons.math.genetics.RandomKeyTest#testRandomPermutation, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testAddFail, org.apache.commons.math.linear.SparseRealVectorTest#testSerial, org.apache.commons.math.stat.regression.SimpleRegressionTest#testPerfectNegative, org.apache.commons.math.distribution.TDistributionTest#testCumulativeProbabilities, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testSwiss, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testBackward, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testFormatObject, org.apache.commons.math.genetics.ChromosomeTest#testCompareTo, org.apache.commons.math.special.GammaTest#testLogGammaNan, org.apache.commons.math.linear.SparseFieldMatrixTest#testMultiply, org.apache.commons.math.linear.FieldMatrixImplTest#testScalarAdd, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testMomentSmallSamples, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNoComponents, org.apache.commons.math.util.MathUtilsTest#testSinhNaN, org.apache.commons.math.random.RandomDataTest#testNextHex, org.apache.commons.math.analysis.solvers.BrentSolverTest#testBadEndpoints, org.apache.commons.math.linear.MatrixUtilsTest#testcreateFieldIdentityMatrix, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextBoolean, org.apache.commons.math.fraction.BigFractionTest#testLongValue, org.apache.commons.math.stat.inference.TTestFactoryTest#testTwoSampleTHomoscedastic, org.apache.commons.math.distribution.HypergeometricDistributionTest#testPopulationSize, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testSinFunction, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquare, org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeBoth, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testCopy, org.apache.commons.math.linear.BlockRealMatrixTest#testOperate, org.apache.commons.math.stat.descriptive.rank.MaxTest#testCopy, org.apache.commons.math.linear.FieldMatrixImplTest#testAdd, org.apache.commons.math.random.ValueServerTest#testModes, org.apache.commons.math.fraction.FractionTest#testSerial, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testfirstDerivativeComparison, org.apache.commons.math.stat.regression.SimpleRegressionTest#testNaNs, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testSerial, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMoreEstimatedParametersSimple, org.apache.commons.math.linear.RealVectorFormatTest#testParsePositiveInfinity, org.apache.commons.math.fraction.FractionTest#testLongValue, org.apache.commons.math.analysis.solvers.RiddersSolverTest#testExpm1Function, org.apache.commons.math.random.RandomDataTest#testNextIntExtremeValues, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testInsufficientData, org.apache.commons.math.ArgumentOutsideDomainExceptionTest#testConstructor, org.apache.commons.math.distribution.WeibullDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.fraction.BigFractionFieldTest#testOne, org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbabilities, org.apache.commons.math.transform.FastHadamardTransformerTest#test3Points, org.apache.commons.math.optimization.general.MinpackTest#testMinpackHelicalValley, org.apache.commons.math.linear.SparseRealMatrixTest#testScalarAdd, org.apache.commons.math.geometry.Vector3DFormatTest#testFormatObject, org.apache.commons.math.util.MathUtilsTest#testEqualsWithAllowedDelta, org.apache.commons.math.stat.data.LewTest#testCertifiedValues, org.apache.commons.math.analysis.solvers.NewtonSolverTest#testQuinticZero, org.apache.commons.math.analysis.solvers.MullerSolverTest#testSinFunction, org.apache.commons.math.optimization.direct.MultiDirectionalTest#testPowell, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testIncreasingBandwidthIncreasesSmoothness, org.apache.commons.math.linear.FieldMatrixImplTest#testTrace, org.apache.commons.math.fraction.FractionFormatTest#testDenominatorFormat, org.apache.commons.math.optimization.direct.NelderMeadTest#testMaxEvaluations, org.apache.commons.math.linear.RealVectorFormatTest#testConstructorSingleFormat, org.apache.commons.math.linear.SparseRealMatrixTest#testGetEntry, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testStdErrorConsistency, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNonDefaultSetting, org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumnMatrix, org.apache.commons.math.stat.CertifiedDataTest#testDescriptiveStatistics, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testSmallStep, org.apache.commons.math.linear.QRSolverTest#testUnderdetermined, org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testExactIntegration, org.apache.commons.math.linear.SparseFieldMatrixTest#testSetSubMatrix, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testSerialization, org.apache.commons.math.distribution.ZipfDistributionTest#testDensities, org.apache.commons.math.estimation.MinpackTest#testMinpackLinearRank1, org.apache.commons.math.linear.SingularValueSolverTest#testSolve, org.apache.commons.math.fraction.FractionTest#testGoldenRatio, org.apache.commons.math.linear.BiDiagonalTransformerTest#testAEqualUSVt, org.apache.commons.math.random.EmpiricalDistributionTest#testSerialization, org.apache.commons.math.stat.descriptive.moment.MeanTest#testMomentSmallSamples, org.apache.commons.math.complex.ComplexFieldTest#testSerial, org.apache.commons.math.random.EmpiricalDistributionTest#testDoubleLoad, org.apache.commons.math.util.MathUtilsTest#testLInfDistanceDouble, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testConstructorSingleFormat, org.apache.commons.math.optimization.general.MinpackTest#testMinpackBard, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testSinFunction, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNonStrictlyIncreasing, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testSubtraction, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeAll, org.apache.commons.math.special.ErfTest#testErf0, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayArgumentCause, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testBackward, org.apache.commons.math.fraction.FractionTest#testNegate, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSubMatrix, org.apache.commons.math.estimation.MinpackTest#testMinpackChebyquad, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowMatrixLarge, org.apache.commons.math.linear.BlockFieldMatrixTest#testOperate, org.apache.commons.math.random.ValueServerTest#testEmptyReplayFile], jUnit5Tests=[], jacocoIncludes=[org.apache.commons.*], jacocoExcludes=[java.*], family=SPECTRUM_BASED, spectrumFormula=OP2, computeSpoonResults=false}
Computing tests from config.
Running TestContext{testMethods=[[Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL2DistanceInt, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testOverdetermined, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testSolveSingularityErrors, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testPow, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testCompose, [Manual]TestMethod=org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowFieldMatrix, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension4WithSplit, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNotPositiveDefinite, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeReal, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testCorr, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testNextAfterSpecialCases, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testPerfectFit, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testConfig, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMultiplyNaN, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSubAndCheckLong, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testGetValues, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSanityChecks, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testReplay, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignInt, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnLarge, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#checkClone, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest#testTestNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewNewtonSolverValid, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testGetArgumentNaN, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAdd, [Manual]TestMethod=org.apache.commons.math.transform.FastSineTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositiveZero, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testString, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTan, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testIsSingular, [Manual]TestMethod=org.apache.commons.math.MaxIterationsExceededExceptionTest#testSimpleConstructor, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateSin, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonEqualCounts, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaNanPositive, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testSimplistic, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testPermutedArrayHash, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowLarge, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNorm, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCosNaN, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.linear.CholeskySolverTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataThatIsNotSquare, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testIsSame, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNotSymmetricMatrixException, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testdiscardArtificialVariables, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextUniform, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatImproper, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.stat.CertifiedDataTest#testSummaryStatistics, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonUnEqualCounts, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEventsErrors, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testToString, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearFullRank, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideInfinite, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDoubleConstructor, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testCompletelyIncorrectBandwidth, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyMutationTest#testMutate, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testEpsilon, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.estimation.WeightedMeasurementTest#testTheory, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSubtractNaN, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtRealZero, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatImproperNegative, [Manual]TestMethod=org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveBadParameters, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testGetImaginaryFormat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSetQuantile, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtImaginaryNegative, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testAddNonComparable, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinhNaN, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testWindowSize, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testEigenvalues, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testDegenerate1, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testGetSummary, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testDegenerate0, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowLarge, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testGetFromEmpty, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaNegativePositivePositive, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testTridiagonal, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testAngles, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPoissonLargeMean, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testSolutionWithNegativeDecisionVariable, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testMultiplication, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstLaguerrePolynomials, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testRandomAccess, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testIdentityPermutation, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testCovarianceConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.BetaDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseBig, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testSanityChecks, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testSolveRankErrors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistanceSq, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testHermiteDifferentials, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testGetMean, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testComparatorPermutation, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIntegratorControls, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testSSENonNegative, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension1, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testTrivialModel, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension2, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest#testDerivativesConsistency, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension3, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseProperInvalidMinus, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackOsborne2, [Manual]TestMethod=org.apache.commons.math.genetics.GeneticAlgorithmTestBinary#test, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanhCritical, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregateDegenerate, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackOsborne1, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSample, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetFunctionValueAccuracy, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnBigMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaPositive, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testProduct, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCosInf, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBrownAlmostLinear, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBrownAlmostLinear, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryChromosomeTest#testInvalidConstructor, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNormalize, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction2, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testEqualRepr, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testStaticFormatComplex, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testConstant, [Manual]TestMethod=org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaTest, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutOnExisting, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseZeroReal, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAngular, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testWithInitialCapacity, [Manual]TestMethod=org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBracketSin, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testGcd, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testValues, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeBoth, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.genetics.FitnessCachingTest#testFitnessCaching, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextUniform, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSample, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateNoSuccesses, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.distribution.BetaDistributionTest#testCumulative, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetMatrixLarge, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testLargeValues, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#backward, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest#testQuinticMin, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testDegenerate1, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaNegativePositive, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testDegenerate0, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testScale, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSubAndCheck, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testNegate, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testExpInf, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testNorris, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseZeroImaginary, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testDecode, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackChebyquad, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateBigMatrix, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testConstant, [Manual]TestMethod=org.apache.commons.math.analysis.integration.RombergIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBadParameters, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.genetics.FixedGenerationCountTest#testIsSatisfied, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGet, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveZeroPositive, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstChebyshevPolynomials, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testTrace, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testMinimizeMaximize, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testNaN, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testGetAbsent, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testTransformers, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testIterator, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testConstants, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_normal_fourthRoot, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testDigammaSmallArgs, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testInference, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#test5, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testClear, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaZeroPositivePositive, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testInfeasibleSolution, [Manual]TestMethod=org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNextIntNeg, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsTrue, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsNull, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArgumentCause, [Manual]TestMethod=org.apache.commons.math.util.BigRealFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testScalarMultiply, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveObsFromSingle, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testClear, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtPolar, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testFill, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatZero, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testSmallDf, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL1DistanceInt, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testMath280, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDistinctEigenvalues, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testDoubleFormat, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testMath226, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.genetics.ElitisticListPopulationTest#testNextGeneration, [Manual]TestMethod=org.apache.commons.math.analysis.integration.RombergIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureHex, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexNaN, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#checklone, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackHelicalValley, [Manual]TestMethod=org.apache.commons.math.genetics.ListPopulationTest#testGetFittestChromosome, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testLongly, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowBigMatrix, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLInfDistanceInt, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testUOrthogonal, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowRealMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testDeprecated2, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseManyComponents, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositivePositive, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testPutTransformer, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testDimension, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testWholeFormat, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testNormalizeAngle, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructorCause, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAbsNaN, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorInt, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaZero, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testPercentile, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testOperate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testLongly, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testErrorConditions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testZeroImaginary, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseInteger, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNexBytes, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2Complex, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testPercentileSetter, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMath221, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrt1z, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnDistortedSine, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testQuaternion, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testDataInOut, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testHTrapezoidal, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveNoRoot, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.analysis.integration.RombergIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testQOrthogonal, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testMismatch, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatZero, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testSetBeta, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math.stat.data.LotteryTest#testCertifiedValues, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testFixedState, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testGetReducedFraction, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testSmallLastStep, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testContainsClass, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSeveralBlocks, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testGridTooFat, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetAbsoluteAccuracy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextHex, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMinimization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#test0Choose0, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformString, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testSetMean, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testRepeatedEigenvalue, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.genetics.ChromosomeTest#testFindSameChromosome, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testOperatePremultiplyLarge, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDigitLimitConstructor, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressandVariance, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConjugate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testChebyshevDifferentials, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEventsNoConvergence, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testAlpha, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEqualsWithAllowedUlps, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetRelativeAccuracy, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveAccuracySin, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testEmptyDigestFile, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDivide, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseZeroImaginary, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testNullIntervalCheck, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testTrigamma, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateIdentityMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemove2, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseInvalid, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testQuantiles, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testDigammaLargeArgs, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRandom, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testRemoval, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetMaximalIterationCount, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideNaN, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnTwoPoints, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testNoError, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseProper, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testScalarProduct, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.transform.FastCosineTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testVectorOnePair, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testQOrthogonal, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositiveNan, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositiveNegative, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testWrongDerivative, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testNormalApproximateProbability, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMaximalTiesMinimum, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#interpolationInside, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNegateNaN, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testDenominatorFormat, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinNaN, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testScalarMultiplyInf, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testMatricesValues2, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testInconsistentSizes, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testConstructor2, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testConstructor1, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLogZero, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testMinMax, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testUUpperTriangular, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCosh, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackLinearFullRank, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testNaNs, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testCopy, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testPerfect, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseManyComponents, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnLarge, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParse, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testNorm, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDigitLimitConstructor, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testBigFractionConverter, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#test20090720, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGet, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMath199, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testStats, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testContainsKey, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetRealFormatNull, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testRedundantUnsolvable, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonBadCounts, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#backward, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.NewtonSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testToString, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testOperateLarge, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBox3Dimensional, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearRank1, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testOperateLarge, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistanceInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testDataInOut, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnOnePoint, [Manual]TestMethod=org.apache.commons.math.ode.sampling.StepNormalizerTest#testBoundaries, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAngularSeparation, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSecureInt, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testInverse, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformDouble, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testCosh, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testTableauWithNoArtificialVars, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testScalb, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryChromosomeTest#testRandomConstructor, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.estimation.EstimatedParameterTest#testEstimate, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackPowellSingular, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testContainsKey, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testUUpperTriangular, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_normal_thirdRoot, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testToString, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath272, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeReal, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testMinimizeMaximize, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnStraightLine, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinh, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testArrayIndexConditions, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testNaN, [Manual]TestMethod=org.apache.commons.math.estimation.WeightedMeasurementTest#testConstruction, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testGetSummary, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath288, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDiagonal, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath286, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testInitialGuess, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnRealMatrix, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormat, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignByte, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testBoundaries, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testPaseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSecureLong, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testOperate, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGetWith0ExpectedSize, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf3291, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testHashCode, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAddNaN, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackOsborne2, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testDistance, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testRUpperTriangular, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackOsborne1, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testOperatePremultiplyLarge, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConjugateNaN, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testMath209, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMoreRows, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testMath209, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCos, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaNanPositivePositive, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testQuintic, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#checklone, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest#testSinMin, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testConfig, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAsinInf, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testNISTExample, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAtanNaN, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbability2, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAcosInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testInsufficientBandwidth, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryCharacterEmpty, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testMoreLargeValues, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPow, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testArrayEquals, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBrownDennis, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesMaximum, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSecureInt, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testOrthogonal, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistance, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testSetScale, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testEmptyTable, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaZeroPositive, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatNegative, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientLarge, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testWindowSize, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesAverage, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testWholeFormat, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testVariance, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorLong, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testNaNs, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testRemoveTransformer, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testcreateFieldMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testUpperOrLower, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testDouble, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.MaxIterationsExceededExceptionTest#testComplexConstructor, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testPcts, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAngle, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testGaussian, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testSinFunction2, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewBrentSolverValid, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testLongFormat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testLUDecomposition, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testProperties, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNorm1, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAtanInf, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf2807, [Manual]TestMethod=org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testArrayIsReference, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testConfig, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNexBoolean, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testOperate, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testClasses, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testCovarianceConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrt1zNaN, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignShort, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testSerial, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf1960, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testHash, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testGetArgumentInf, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest#dimension2, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testIntegerValues, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.estimation.EstimatedParameterTest#testConstruction, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryMutationTest#testMutate, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testIntValue, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemoveAbsent, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAcosNaN, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testSerial, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAddInfinite, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testDimension, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testLargeDegreesOfFreedom, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testWalk, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLog, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testScalarMultiplyNaN, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRealMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryChromosomeTest#testIsSame, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackKowalikOsborne, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureLong, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testNoReset, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testBigDecimalValue, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testRootMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testChebyshevBounds, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testMulAndCheckLong, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testConstant, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextUniform, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testWithInitialCapacityAndExpansionFactor, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testNullEmpty, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsSame, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testNext, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testRoundDouble, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.DuplicateSampleAbscissaExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMultiplyNaNInf, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveNull, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinear, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testSerial, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testGetRealFormat, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testNullIntervalCheck, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testPercentile, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregateSpecialValues, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testGetValues, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseNegative, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.linear.CholeskySolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testToString, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullURL, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonUnEqualCounts, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testEpsilonLimitConstructor, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregationConsistency, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnVectorLarge, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientFail, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testRoundFloat, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testSetStandardDeviation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLogInf, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testSubstitute, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregate, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackPowellSingular, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCoshNaN, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testSinMin, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testCentroid, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.InvalidMatrixExceptionTest#testConstructorMessage, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewBisectionSolverValid, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.transform.FastCosineTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testAEqualQR, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testNumeratorFormat, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testMath274, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnMatrixLarge, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetRealFormatNull, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaNegative, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstLegendrePolynomials, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowVectorLarge, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSecureHex, [Manual]TestMethod=org.apache.commons.math.random.UniformRandomGeneratorTest#testMeanAndStandardDeviation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testMismatch, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testCopy, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.estimation.EstimatedParameterTest#testBound, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#test8Points, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testDefault, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.transform.FastSineTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddNullYSampleData, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAbsentOnExisting, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testControlParameters, [Manual]TestMethod=org.apache.commons.math.genetics.TournamentSelectionTest#testSelect, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testPopulation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregation, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testForgottenImaginaryCharacter, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormat, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testRootEndpoints, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackWatson, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDoubleConstructor, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryFormatNull, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#polynomial, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testModelWithNoArtificialVars, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testSingular, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsImaginaryDifference, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackFreudensteinRoth, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDivide, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveSingle, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAbs, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testAdaptor, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares3, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testMeanAccessors, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testGetArgument, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares1, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares2, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullDoubleArray, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBox3Dimensional, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideNaNInf, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testExamples, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension4WithoutSplit, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtNaN, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testGetStandardDeviation, [Manual]TestMethod=org.apache.commons.math.linear.MatrixIndexExceptionTest#testConstructorMessage, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testConstructorDouble, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsRemovedTiesSequential, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testNumeratorFormat, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAbsentOnExisting, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMatricesValues2, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsClass, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollision2, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCoshInf, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMoreColumns, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultiple, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetAbsoluteAccuracy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSingleton, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testLongFormat, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#notEnoughData, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testCumulativeProbabilityAgaintStackOverflow, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testOneWayAnovaUtils, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testPowell, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL2DistanceDouble, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testLongly, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testHighPercentile, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveSin, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testNextAfter, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testSingular, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testGetValues, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonEqualCounts, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemoveFromEmpty, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testCoordinates, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollisions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAsinNaN, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorDouble, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSecureLong, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateResiduals, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testNaN, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testFractionConverter, [Manual]TestMethod=org.apache.commons.math.util.BigRealFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testPAEqualLU, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testMean, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MedianTest#testCopy, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAdd, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaNegativePositive, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#checkClone, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtInf, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAbsInfinite, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataWithSampleSizeMismatch, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#exceedMaxEvaluations, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testStdErrorConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatImproper, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGetWithExpectedSize, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testFloat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_realPartZero, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsNaN, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtImaginaryZero, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextFloat, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testPaired, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testImpossibleSerialization, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testZeroImaginary, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testParameterAccessors, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testNextDigestFail, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseProperInvalidMinus, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeBoth, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testDataInOut, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testMax, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testInitialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testNonInvertible, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveXY, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testModelsMerging, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testToString, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowInf, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest#testValues, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#noReset, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.transform.FastCosineTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryCharacterNull, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanh, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testMath209, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testQuinticMax, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemove2, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtRealNegative, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testUOrthogonal, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testBBiDiagonal, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testpowNull, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetMatrixLarge, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testDegenerateInverseCumulativeProbability, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#polynomial, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testGetReducedFraction, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testMatricesValues2, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseInteger, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testStaticFormatRealVectorImpl, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackMeyer, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSerial, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveNanPositive, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetMaximalIterationCount, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testTTriDiagonal, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveAccuracyNull, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConstructorNaN, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateBigIdentityMatrix, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositivePositive, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest#testMeanAndCorrelation, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testConcurrentModification, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackRosenbrok, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignFloat, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignDouble, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseInvalid, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testVectorTwoPairs, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testExtremeValues, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testThreshold, [Manual]TestMethod=org.apache.commons.math.geometry.RotationOrderTest#testName, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorShort, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testLargeMeanCumulativeProbability, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutKeysWithCollisions, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testStaticFormatComplex, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testAEqualQTQt, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSinh, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testGetImaginaryFormat, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanNaN, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testInducedPermutation, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnVectorLarge, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaPValue, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#dimensionCheck, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructorCause, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackRosenbrok, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testAdd, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSample, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseZeroReal, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.linear.CholeskySolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testBigMatrix, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testRank, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddXSampleData, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testAEqualVDVt, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testSingularities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullCovarianceData, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testDoubleFormat, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testFactorialFail, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testQTOrthogonal, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testSimplistic, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testAbs, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testSetAlpha, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testLaguerreDifferentials, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testTrace, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNormInf, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testMakotoNishimura, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testRedundantSolvable, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLogNaN, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatImproperNegative, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#testNoIntInverse, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryCharacterEmpty, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testBinIndexOverflow, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testEpsilonLimitConstructor, [Manual]TestMethod=org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaFValue, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testFactorial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testLegendreDifferentials, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatNegative, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentSizes, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testQuinticMin, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackJennrichSampson, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateTwoSegment, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testBoundParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackFreudensteinRoth, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextPoissonLargeMean, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateResiduals, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorByte, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testAEqualLLT, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutKeysWithCollision2, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testComposeInverse, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGetWithExpectedSize, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBrownDennis, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSingular, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.InteractionTest#testInteraction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testBasicStats, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testAddAndCheckLong, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testCopy, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextPoissonLargeMean, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSecureHex, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextHex, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testFormatNumber, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.util.BigRealFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeBoth, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testDiscard, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testAdd1000, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testSmallDf, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testWalk, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaZeroPositive, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testSkewAndKurtosis, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnFieldMatrix, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testIntegerOverflow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testPopulation, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testIncreasingRobustnessItersIncreasesSmoothnessWithOutliers, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinInf, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaNanPositive, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeReal, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testFunctionEvaluationExceptions, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBracketEndpointRoot, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGetWith0ExpectedSize, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MedianTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testContainsTransformer, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testMatricesValues5, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testMatricesValues3, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest#testTestPositive, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testControlParameters, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAsin, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowVectorLarge, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseInvalidDenominator, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testLinear, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testHat, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_NAN_Inf, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveZero, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsAndInfs, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testAxisAngle, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetRelativeAccuracy, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstHermitePolynomials, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testPaired, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testRevert, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testSerial, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testLargeModel, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testVectorialProducts, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math.genetics.OnePointCrossoverTest#testCrossover, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemove, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testMath283, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowMatrixLarge, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#exceedMaxEvaluations, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testConditionNumber, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testParameters, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testStaticFormatVector3D, [Manual]TestMethod=org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureInt, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations#test, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSolveSingularityErrors, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.NewtonSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonBadCounts, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testPercentileSetter, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testCoshNaN, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowNaNExponent, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testSumLog, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.transform.FastSineTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformNull, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest#testNoOptimum, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testAdd, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowZero, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseProper, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testSingleVariableAndConstraint, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistance1, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveNegativePositive, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#interpolationAtBounds, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testCopy, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveObsFromEmpty, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackMeyer, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testFloatValue, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivide, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testGetAbsent, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNextIntN, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testPPermutation, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateNoFailures, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testUnsorted, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.estimation.WeightedMeasurementTest#testIgnored, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testFloatValue, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testSmallDegreesOfFreedom, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testExpm1Function2, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAtan, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositivePositive, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutOnExisting, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBard, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testLTTransposed, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testNoAccessBelowDiagonal, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testRank, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testAEqualUSVt, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testSerial, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#test2DData, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateThreeSegment, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testSkewAndKurtosis, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testMean, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testConditionNumber, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testCopy, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testMutators, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.util.ContinuedFractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testDifferenceStats, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testInitialGuess, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSin, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateFullSample, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMath199, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testExamples, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testExpNaN, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetFunctionValueAccuracy, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testAddition, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testIntValue, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testHighDegreeLegendre, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#test1PercentError, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackJennrichSampson, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testBigDecimalValue, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testInvertible, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testNoDenseOutput, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullFile, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testPow, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testRemoval, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnMatrixLarge, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexIllegalModulus, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryCharacterNull, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNoComponents, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackWatson, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testIdentity, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testLongly, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayPatternArguments, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testCopy, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testNextDigest, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testGridTooFine, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testIterator, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testQuadratic, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testNorm, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testPaired, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testPrintStackTrace, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testConcurrentModification, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseProperNegative, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testEmptyData, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsRealDifference, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultipleToEmpty, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressandVariance, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testAddAndCheck, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf2576, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullYSampleData, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testMedian, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testArrayHash, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testBeta, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLcm, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#dimensionCheck, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorFloat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testNaN, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoad, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveZero, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testZeroReal, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanInf, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testForgottenImaginaryCharacter, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testDoubleDimension, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanhInf, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testCounts, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testSolve, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParameters, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testSetNumberOfElements, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackKowalikOsborne, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testEigenvectors, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testLargeMeanInverseCumulativeProbability, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParse, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanhNaN, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSubAndCheckErrorMessage, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testCopy, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testAbs, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testMinEndpoints, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseProperNegative, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEquals, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testNexFail, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testFormatNumber, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testHadamard, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformBigDecimal, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testFunctionEvaluationExceptions, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testGetRealFormat, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtRealPositive, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultiplePastEmpty, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLog, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveNan, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignLong, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testUnequalSizeArguments, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testBasicStats, [Manual]TestMethod=org.apache.commons.math.random.GaussianRandomGeneratorTest#testMeanAndStandardDeviation, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemoveFromEmpty, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testMulAndCheck, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testGeometricMean, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testAdd, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNegate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficient, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinhInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testQuinticFunction2, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testZeroReal, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testSmallError, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testPPermutation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL1DistanceDouble, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#test20090720, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testUnboundedSolution, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewSecantSolverValid, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testSumSq, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryFormatNull, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testNoError, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAcos, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemoveAbsent, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeReal, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math.ode.sampling.StepNormalizerTest#testBeforeEnd, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformInteger, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConjugateInfiinite, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testCopy, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testSimplexSolver, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testStaticFormatRealVectorImpl, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseInvalidDenominator, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testAddElementRolling, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddXSampleData, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSeveralBlocks, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testPaseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest#testDerivativesConsistency, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArray, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanCritical, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testApplyInverseTo, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveNan, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testMeanAndCovariance, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testExp, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testMin, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testGetFromEmpty, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParameters, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveNegative, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructorCause, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testConstructorDouble, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#test4Points, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformObject, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemove, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testStaticFormatVector3D, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowNaNBase, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testPAEqualLU, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testRandomPermutation, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testPerfectNegative, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testSwiss, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.genetics.ChromosomeTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaNan, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNoComponents, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSinhNaN, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextHex, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testBadEndpoints, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testcreateFieldIdentityMatrix, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextBoolean, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testLongValue, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testPopulationSize, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeBoth, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testAdd, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testModes, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testfirstDerivativeComparison, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testNaNs, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testLongValue, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math.ArgumentOutsideDomainExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#test3Points, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackHelicalValley, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEqualsWithAllowedDelta, [Manual]TestMethod=org.apache.commons.math.stat.data.LewTest#testCertifiedValues, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.NewtonSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testPowell, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testIncreasingBandwidthIncreasesSmoothness, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testTrace, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testDenominatorFormat, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testMaxEvaluations, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testStdErrorConsistency, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.stat.CertifiedDataTest#testDescriptiveStatistics, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testUnderdetermined, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, [Manual]TestMethod=org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testExactIntegration, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackLinearRank1, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testAEqualUSVt, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testDoubleLoad, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLInfDistanceDouble, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBard, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNonStrictlyIncreasing, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testSubtraction, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf0, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayArgumentCause, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testNegate, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackChebyquad, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowMatrixLarge, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testEmptyReplayFile], testFrameworkStrategy=fr.spoonlabs.flacoco.core.coverage.framework.JUnit4Strategy@2a39fe6a}
Running TestContext{testMethods=[[Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL2DistanceInt, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testOverdetermined, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testSolveSingularityErrors, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testPow, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testCompose, [Manual]TestMethod=org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowFieldMatrix, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension4WithSplit, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNotPositiveDefinite, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeReal, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testCorr, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testNextAfterSpecialCases, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testPerfectFit, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testConfig, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMultiplyNaN, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSubAndCheckLong, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testGetValues, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSanityChecks, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testReplay, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignInt, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnLarge, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#checkClone, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest#testTestNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewNewtonSolverValid, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testGetArgumentNaN, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAdd, [Manual]TestMethod=org.apache.commons.math.transform.FastSineTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositiveZero, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testString, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTan, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testIsSingular, [Manual]TestMethod=org.apache.commons.math.MaxIterationsExceededExceptionTest#testSimpleConstructor, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateSin, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonEqualCounts, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaNanPositive, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testSimplistic, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testPermutedArrayHash, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowLarge, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNorm, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCosNaN, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.linear.CholeskySolverTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataThatIsNotSquare, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testIsSame, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNotSymmetricMatrixException, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testdiscardArtificialVariables, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextUniform, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatImproper, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.stat.CertifiedDataTest#testSummaryStatistics, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonUnEqualCounts, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEventsErrors, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testToString, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearFullRank, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideInfinite, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDoubleConstructor, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testCompletelyIncorrectBandwidth, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyMutationTest#testMutate, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testEpsilon, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.estimation.WeightedMeasurementTest#testTheory, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSubtractNaN, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtRealZero, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatImproperNegative, [Manual]TestMethod=org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveBadParameters, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testGetImaginaryFormat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSetQuantile, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtImaginaryNegative, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testAddNonComparable, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinhNaN, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testWindowSize, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testEigenvalues, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testDegenerate1, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testGetSummary, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testDegenerate0, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowLarge, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testGetFromEmpty, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaNegativePositivePositive, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testTridiagonal, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testAngles, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPoissonLargeMean, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testSolutionWithNegativeDecisionVariable, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testMultiplication, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstLaguerrePolynomials, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testRandomAccess, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testIdentityPermutation, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testCovarianceConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.BetaDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseBig, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testSanityChecks, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testSolveRankErrors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistanceSq, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testHermiteDifferentials, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testGetMean, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testComparatorPermutation, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIntegratorControls, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testSSENonNegative, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension1, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testTrivialModel, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension2, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest#testDerivativesConsistency, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension3, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseProperInvalidMinus, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackOsborne2, [Manual]TestMethod=org.apache.commons.math.genetics.GeneticAlgorithmTestBinary#test, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanhCritical, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregateDegenerate, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackOsborne1, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSample, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetFunctionValueAccuracy, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnBigMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaPositive, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testProduct, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCosInf, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBrownAlmostLinear, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBrownAlmostLinear, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryChromosomeTest#testInvalidConstructor, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNormalize, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction2, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testEqualRepr, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testStaticFormatComplex, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testConstant, [Manual]TestMethod=org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaTest, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutOnExisting, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseZeroReal, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAngular, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testWithInitialCapacity, [Manual]TestMethod=org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBracketSin, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testGcd, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testValues, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeBoth, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.genetics.FitnessCachingTest#testFitnessCaching, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextUniform, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSample, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateNoSuccesses, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.distribution.BetaDistributionTest#testCumulative, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetMatrixLarge, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testLargeValues, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#backward, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest#testQuinticMin, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testDegenerate1, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaNegativePositive, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testDegenerate0, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testScale, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSubAndCheck, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testNegate, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testExpInf, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testNorris, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseZeroImaginary, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testDecode, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackChebyquad, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateBigMatrix, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testConstant, [Manual]TestMethod=org.apache.commons.math.analysis.integration.RombergIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBadParameters, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.genetics.FixedGenerationCountTest#testIsSatisfied, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGet, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveZeroPositive, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstChebyshevPolynomials, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testTrace, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testMinimizeMaximize, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testNaN, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testGetAbsent, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testTransformers, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testIterator, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testConstants, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_normal_fourthRoot, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testDigammaSmallArgs, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testInference, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#test5, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testClear, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaZeroPositivePositive, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testInfeasibleSolution, [Manual]TestMethod=org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNextIntNeg, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsTrue, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsNull, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArgumentCause, [Manual]TestMethod=org.apache.commons.math.util.BigRealFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testScalarMultiply, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveObsFromSingle, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testClear, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtPolar, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testFill, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatZero, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testSmallDf, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL1DistanceInt, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testMath280, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDistinctEigenvalues, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testDoubleFormat, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testMath226, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.genetics.ElitisticListPopulationTest#testNextGeneration, [Manual]TestMethod=org.apache.commons.math.analysis.integration.RombergIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureHex, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexNaN, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#checklone, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackHelicalValley, [Manual]TestMethod=org.apache.commons.math.genetics.ListPopulationTest#testGetFittestChromosome, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testLongly, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowBigMatrix, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLInfDistanceInt, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testUOrthogonal, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowRealMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testDeprecated2, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseManyComponents, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositivePositive, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testPutTransformer, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testDimension, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testWholeFormat, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testNormalizeAngle, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructorCause, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAbsNaN, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorInt, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaZero, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testPercentile, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testOperate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testLongly, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testErrorConditions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testZeroImaginary, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseInteger, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNexBytes, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2Complex, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testPercentileSetter, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMath221, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrt1z, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnDistortedSine, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testQuaternion, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testDataInOut, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testHTrapezoidal, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveNoRoot, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.analysis.integration.RombergIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testQOrthogonal, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testMismatch, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatZero, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testSetBeta, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math.stat.data.LotteryTest#testCertifiedValues, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testFixedState, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testGetReducedFraction, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testSmallLastStep, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testContainsClass, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSeveralBlocks, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testGridTooFat, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetAbsoluteAccuracy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextHex, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMinimization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#test0Choose0, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformString, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testSetMean, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testRepeatedEigenvalue, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.genetics.ChromosomeTest#testFindSameChromosome, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testOperatePremultiplyLarge, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDigitLimitConstructor, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressandVariance, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConjugate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testChebyshevDifferentials, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEventsNoConvergence, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testAlpha, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEqualsWithAllowedUlps, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetRelativeAccuracy, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveAccuracySin, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testEmptyDigestFile, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDivide, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseZeroImaginary, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testNullIntervalCheck, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testTrigamma, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateIdentityMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemove2, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseInvalid, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testQuantiles, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testDigammaLargeArgs, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRandom, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testRemoval, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetMaximalIterationCount, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideNaN, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnTwoPoints, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testNoError, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseProper, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testScalarProduct, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.transform.FastCosineTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testVectorOnePair, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testQOrthogonal, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositiveNan, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositiveNegative, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testWrongDerivative, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testNormalApproximateProbability, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMaximalTiesMinimum, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#interpolationInside, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNegateNaN, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testDenominatorFormat, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinNaN, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testScalarMultiplyInf, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testMatricesValues2, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testInconsistentSizes, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testConstructor2, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testConstructor1, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLogZero, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testMinMax, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testUUpperTriangular, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCosh, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackLinearFullRank, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testNaNs, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testCopy, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testPerfect, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseManyComponents, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnLarge, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParse, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testNorm, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDigitLimitConstructor, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testBigFractionConverter, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#test20090720, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGet, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMath199, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testStats, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testContainsKey, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetRealFormatNull, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testRedundantUnsolvable, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonBadCounts, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#backward, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.NewtonSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testToString, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testOperateLarge, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBox3Dimensional, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearRank1, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testOperateLarge, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistanceInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testDataInOut, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnOnePoint, [Manual]TestMethod=org.apache.commons.math.ode.sampling.StepNormalizerTest#testBoundaries, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAngularSeparation, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSecureInt, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testInverse, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformDouble, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testCosh, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testTableauWithNoArtificialVars, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testScalb, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryChromosomeTest#testRandomConstructor, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.estimation.EstimatedParameterTest#testEstimate, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackPowellSingular, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testContainsKey, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testUUpperTriangular, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_normal_thirdRoot, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testToString, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath272, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeReal, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testMinimizeMaximize, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnStraightLine, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinh, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testArrayIndexConditions, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testNaN, [Manual]TestMethod=org.apache.commons.math.estimation.WeightedMeasurementTest#testConstruction, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testGetSummary, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath288, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDiagonal, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath286, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testInitialGuess, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnRealMatrix, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormat, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignByte, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testBoundaries, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testPaseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSecureLong, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testOperate, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGetWith0ExpectedSize, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf3291, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testHashCode, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAddNaN, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackOsborne2, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testDistance, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testRUpperTriangular, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackOsborne1, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testOperatePremultiplyLarge, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConjugateNaN, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testMath209, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMoreRows, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testMath209, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCos, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaNanPositivePositive, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testQuintic, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#checklone, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest#testSinMin, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testConfig, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAsinInf, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testNISTExample, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAtanNaN, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbability2, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAcosInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testInsufficientBandwidth, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryCharacterEmpty, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testMoreLargeValues, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPow, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testArrayEquals, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBrownDennis, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesMaximum, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSecureInt, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testOrthogonal, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistance, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testSetScale, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testEmptyTable, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaZeroPositive, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatNegative, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientLarge, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testWindowSize, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesAverage, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testWholeFormat, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testVariance, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorLong, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testNaNs, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testRemoveTransformer, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testcreateFieldMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testUpperOrLower, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testDouble, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.MaxIterationsExceededExceptionTest#testComplexConstructor, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testPcts, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAngle, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testGaussian, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testSinFunction2, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewBrentSolverValid, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testLongFormat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testLUDecomposition, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testProperties, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNorm1, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAtanInf, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf2807, [Manual]TestMethod=org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testArrayIsReference, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testConfig, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNexBoolean, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testOperate, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testClasses, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testCovarianceConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrt1zNaN, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignShort, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testSerial, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf1960, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testHash, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testGetArgumentInf, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest#dimension2, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testIntegerValues, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.estimation.EstimatedParameterTest#testConstruction, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryMutationTest#testMutate, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testIntValue, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemoveAbsent, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAcosNaN, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testSerial, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAddInfinite, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testDimension, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testLargeDegreesOfFreedom, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testWalk, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLog, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testScalarMultiplyNaN, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRealMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryChromosomeTest#testIsSame, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackKowalikOsborne, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureLong, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testNoReset, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testBigDecimalValue, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testRootMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testChebyshevBounds, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testMulAndCheckLong, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testConstant, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextUniform, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testWithInitialCapacityAndExpansionFactor, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testNullEmpty, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsSame, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testNext, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testRoundDouble, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.DuplicateSampleAbscissaExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMultiplyNaNInf, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveNull, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinear, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testSerial, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testGetRealFormat, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testNullIntervalCheck, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testPercentile, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregateSpecialValues, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testGetValues, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseNegative, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.linear.CholeskySolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testToString, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullURL, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonUnEqualCounts, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testEpsilonLimitConstructor, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregationConsistency, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnVectorLarge, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientFail, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testRoundFloat, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testSetStandardDeviation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLogInf, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testSubstitute, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregate, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackPowellSingular, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCoshNaN, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testSinMin, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testCentroid, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.InvalidMatrixExceptionTest#testConstructorMessage, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewBisectionSolverValid, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.transform.FastCosineTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testAEqualQR, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testNumeratorFormat, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testMath274, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnMatrixLarge, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetRealFormatNull, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaNegative, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstLegendrePolynomials, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowVectorLarge, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSecureHex, [Manual]TestMethod=org.apache.commons.math.random.UniformRandomGeneratorTest#testMeanAndStandardDeviation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testMismatch, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testCopy, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.estimation.EstimatedParameterTest#testBound, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#test8Points, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testDefault, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.transform.FastSineTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddNullYSampleData, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAbsentOnExisting, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testControlParameters, [Manual]TestMethod=org.apache.commons.math.genetics.TournamentSelectionTest#testSelect, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testPopulation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregation, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testForgottenImaginaryCharacter, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormat, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testRootEndpoints, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackWatson, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDoubleConstructor, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryFormatNull, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#polynomial, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testModelWithNoArtificialVars, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testSingular, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsImaginaryDifference, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackFreudensteinRoth, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDivide, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveSingle, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAbs, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testAdaptor, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares3, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testMeanAccessors, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testGetArgument, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares1, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares2, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullDoubleArray, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBox3Dimensional, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideNaNInf, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testExamples, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension4WithoutSplit, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtNaN, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testGetStandardDeviation, [Manual]TestMethod=org.apache.commons.math.linear.MatrixIndexExceptionTest#testConstructorMessage, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testConstructorDouble, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsRemovedTiesSequential, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testNumeratorFormat, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAbsentOnExisting, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMatricesValues2, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsClass, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollision2, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCoshInf, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMoreColumns, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultiple, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetAbsoluteAccuracy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSingleton, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testLongFormat, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#notEnoughData, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testCumulativeProbabilityAgaintStackOverflow, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testOneWayAnovaUtils, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testPowell, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL2DistanceDouble, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testLongly, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testHighPercentile, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveSin, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testNextAfter, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testSingular, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testGetValues, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonEqualCounts, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemoveFromEmpty, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testCoordinates, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollisions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAsinNaN, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorDouble, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSecureLong, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateResiduals, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testNaN, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testFractionConverter, [Manual]TestMethod=org.apache.commons.math.util.BigRealFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testPAEqualLU, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testMean, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MedianTest#testCopy, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAdd, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaNegativePositive, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#checkClone, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtInf, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAbsInfinite, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataWithSampleSizeMismatch, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#exceedMaxEvaluations, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testStdErrorConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatImproper, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGetWithExpectedSize, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testFloat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_realPartZero, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsNaN, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtImaginaryZero, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextFloat, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testPaired, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testImpossibleSerialization, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testZeroImaginary, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testParameterAccessors, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testNextDigestFail, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseProperInvalidMinus, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeBoth, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testDataInOut, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testMax, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testInitialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testNonInvertible, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveXY, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testModelsMerging, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testToString, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowInf, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest#testValues, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#noReset, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.transform.FastCosineTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryCharacterNull, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanh, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testMath209, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testQuinticMax, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemove2, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtRealNegative, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testUOrthogonal, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testBBiDiagonal, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testpowNull, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetMatrixLarge, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testDegenerateInverseCumulativeProbability, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#polynomial, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testGetReducedFraction, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testMatricesValues2, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseInteger, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testStaticFormatRealVectorImpl, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackMeyer, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSerial, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveNanPositive, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetMaximalIterationCount, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testTTriDiagonal, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveAccuracyNull, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConstructorNaN, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateBigIdentityMatrix, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositivePositive, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest#testMeanAndCorrelation, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testConcurrentModification, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackRosenbrok, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignFloat, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignDouble, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseInvalid, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testVectorTwoPairs, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testExtremeValues, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testThreshold, [Manual]TestMethod=org.apache.commons.math.geometry.RotationOrderTest#testName, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorShort, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testLargeMeanCumulativeProbability, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutKeysWithCollisions, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testStaticFormatComplex, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testAEqualQTQt, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSinh, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testGetImaginaryFormat, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanNaN, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testInducedPermutation, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnVectorLarge, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaPValue, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#dimensionCheck, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructorCause, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackRosenbrok, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testAdd, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSample, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseZeroReal, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.linear.CholeskySolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testBigMatrix, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testRank, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddXSampleData, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testAEqualVDVt, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testSingularities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullCovarianceData, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testDoubleFormat, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testFactorialFail, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testQTOrthogonal, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testSimplistic, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testAbs, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testSetAlpha, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testLaguerreDifferentials, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testTrace, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNormInf, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testMakotoNishimura, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testRedundantSolvable, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLogNaN, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatImproperNegative, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#testNoIntInverse, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryCharacterEmpty, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testBinIndexOverflow, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testEpsilonLimitConstructor, [Manual]TestMethod=org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaFValue, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testFactorial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testLegendreDifferentials, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatNegative, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentSizes, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testQuinticMin, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackJennrichSampson, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateTwoSegment, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testBoundParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackFreudensteinRoth, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextPoissonLargeMean, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateResiduals, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorByte, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testAEqualLLT, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutKeysWithCollision2, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testComposeInverse, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGetWithExpectedSize, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBrownDennis, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSingular, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.InteractionTest#testInteraction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testBasicStats, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testAddAndCheckLong, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testCopy, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextPoissonLargeMean, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSecureHex, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextHex, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testFormatNumber, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.util.BigRealFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeBoth, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testDiscard, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testAdd1000, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testSmallDf, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testWalk, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaZeroPositive, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testSkewAndKurtosis, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnFieldMatrix, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testIntegerOverflow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testPopulation, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testIncreasingRobustnessItersIncreasesSmoothnessWithOutliers, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinInf, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaNanPositive, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeReal, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testFunctionEvaluationExceptions, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBracketEndpointRoot, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGetWith0ExpectedSize, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MedianTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testContainsTransformer, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testMatricesValues5, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testMatricesValues3, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest#testTestPositive, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testControlParameters, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAsin, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowVectorLarge, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseInvalidDenominator, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testLinear, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testHat, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_NAN_Inf, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveZero, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsAndInfs, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testAxisAngle, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetRelativeAccuracy, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstHermitePolynomials, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testPaired, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testRevert, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testSerial, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testLargeModel, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testVectorialProducts, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math.genetics.OnePointCrossoverTest#testCrossover, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemove, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testMath283, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowMatrixLarge, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#exceedMaxEvaluations, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testConditionNumber, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testParameters, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testStaticFormatVector3D, [Manual]TestMethod=org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureInt, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations#test, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSolveSingularityErrors, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.NewtonSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonBadCounts, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testPercentileSetter, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testCoshNaN, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowNaNExponent, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testSumLog, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.transform.FastSineTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformNull, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest#testNoOptimum, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testAdd, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowZero, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseProper, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testSingleVariableAndConstraint, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistance1, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveNegativePositive, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#interpolationAtBounds, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testCopy, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveObsFromEmpty, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackMeyer, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testFloatValue, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivide, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testGetAbsent, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNextIntN, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testPPermutation, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateNoFailures, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testUnsorted, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.estimation.WeightedMeasurementTest#testIgnored, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testFloatValue, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testSmallDegreesOfFreedom, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testExpm1Function2, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAtan, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositivePositive, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutOnExisting, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBard, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testLTTransposed, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testNoAccessBelowDiagonal, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testRank, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testAEqualUSVt, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testSerial, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#test2DData, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateThreeSegment, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testSkewAndKurtosis, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testMean, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testConditionNumber, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testCopy, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testMutators, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.util.ContinuedFractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testDifferenceStats, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testInitialGuess, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSin, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateFullSample, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMath199, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testExamples, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testExpNaN, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetFunctionValueAccuracy, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testAddition, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testIntValue, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testHighDegreeLegendre, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#test1PercentError, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackJennrichSampson, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testBigDecimalValue, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testInvertible, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testNoDenseOutput, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullFile, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testPow, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testRemoval, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnMatrixLarge, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexIllegalModulus, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryCharacterNull, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNoComponents, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackWatson, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testIdentity, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testLongly, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayPatternArguments, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testCopy, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testNextDigest, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testGridTooFine, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testIterator, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testQuadratic, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testNorm, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testPaired, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testPrintStackTrace, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testConcurrentModification, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseProperNegative, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testEmptyData, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsRealDifference, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultipleToEmpty, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressandVariance, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testAddAndCheck, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf2576, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullYSampleData, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testMedian, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testArrayHash, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testBeta, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLcm, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#dimensionCheck, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorFloat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testNaN, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoad, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveZero, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testZeroReal, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanInf, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testForgottenImaginaryCharacter, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testDoubleDimension, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanhInf, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testCounts, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testSolve, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParameters, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testSetNumberOfElements, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackKowalikOsborne, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testEigenvectors, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testLargeMeanInverseCumulativeProbability, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParse, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanhNaN, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSubAndCheckErrorMessage, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testCopy, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testAbs, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testMinEndpoints, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseProperNegative, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEquals, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testNexFail, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testFormatNumber, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testHadamard, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformBigDecimal, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testFunctionEvaluationExceptions, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testGetRealFormat, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtRealPositive, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultiplePastEmpty, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLog, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveNan, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignLong, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testUnequalSizeArguments, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testBasicStats, [Manual]TestMethod=org.apache.commons.math.random.GaussianRandomGeneratorTest#testMeanAndStandardDeviation, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemoveFromEmpty, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testMulAndCheck, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testGeometricMean, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testAdd, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNegate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficient, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinhInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testQuinticFunction2, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testZeroReal, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testSmallError, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testPPermutation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL1DistanceDouble, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#test20090720, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testUnboundedSolution, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewSecantSolverValid, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testSumSq, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryFormatNull, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testNoError, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAcos, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemoveAbsent, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeReal, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math.ode.sampling.StepNormalizerTest#testBeforeEnd, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformInteger, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConjugateInfiinite, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testCopy, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testSimplexSolver, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testStaticFormatRealVectorImpl, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseInvalidDenominator, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testAddElementRolling, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddXSampleData, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSeveralBlocks, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testPaseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest#testDerivativesConsistency, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArray, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanCritical, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testApplyInverseTo, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveNan, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testMeanAndCovariance, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testExp, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testMin, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testGetFromEmpty, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParameters, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveNegative, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructorCause, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testConstructorDouble, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#test4Points, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformObject, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemove, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testStaticFormatVector3D, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowNaNBase, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testPAEqualLU, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testRandomPermutation, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testPerfectNegative, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testSwiss, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.genetics.ChromosomeTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaNan, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNoComponents, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSinhNaN, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextHex, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testBadEndpoints, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testcreateFieldIdentityMatrix, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextBoolean, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testLongValue, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testPopulationSize, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeBoth, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testAdd, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testModes, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testfirstDerivativeComparison, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testNaNs, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testLongValue, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math.ArgumentOutsideDomainExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#test3Points, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackHelicalValley, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEqualsWithAllowedDelta, [Manual]TestMethod=org.apache.commons.math.stat.data.LewTest#testCertifiedValues, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.NewtonSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testPowell, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testIncreasingBandwidthIncreasesSmoothness, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testTrace, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testDenominatorFormat, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testMaxEvaluations, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testStdErrorConsistency, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.stat.CertifiedDataTest#testDescriptiveStatistics, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testUnderdetermined, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, [Manual]TestMethod=org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testExactIntegration, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackLinearRank1, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testAEqualUSVt, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testDoubleLoad, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLInfDistanceDouble, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBard, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNonStrictlyIncreasing, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testSubtraction, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf0, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayArgumentCause, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testNegate, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackChebyquad, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowMatrixLarge, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testEmptyReplayFile], testFrameworkStrategy=fr.spoonlabs.flacoco.core.coverage.framework.JUnit4Strategy@2a39fe6a}
Path to runner Classes: /Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
Tests found: 2059
Tests executed: 2059
Suspicious: 1 line org.apache.commons.math.optimization.linear.SimplexSolver l: 169, susp 0.9990262901655307
Suspicious: 2 line org.apache.commons.math.optimization.linear.SimplexTableau l: 308, susp 0.9990262901655307
Suspicious: 3 line org.apache.commons.math.optimization.linear.SimplexSolver l: 191, susp 0.9965920155793574
Suspicious: 4 line org.apache.commons.math.optimization.linear.SimplexSolver l: 152, susp 0.9961051606621227
Suspicious: 5 line org.apache.commons.math.optimization.linear.SimplexTableau l: 297, susp 0.9951314508276533
Suspicious: 6 line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 92, susp 0.9946445959104186
Suspicious: 7 line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 106, susp 0.9946445959104186
Suspicious: 8 line org.apache.commons.math.optimization.linear.SimplexSolver l: 155, susp 0.9946445959104186
Suspicious: 9 line org.apache.commons.math.optimization.linear.SimplexSolver l: 193, susp 0.9946445959104186
Suspicious: 10 line org.apache.commons.math.optimization.linear.SimplexTableau l: 282, susp 0.9946445959104186
Suspicious: 11 line org.apache.commons.math.optimization.linear.SimplexTableau l: 340, susp 0.9946445959104186
Suspicious: 12 line org.apache.commons.math.optimization.linear.SimplexTableau l: 341, susp 0.9946445959104186
Suspicious: 13 line org.apache.commons.math.optimization.linear.SimplexTableau l: 342, susp 0.9946445959104186
Suspicious: 14 line org.apache.commons.math.optimization.linear.SimplexTableau l: 343, susp 0.9946445959104186
Suspicious: 15 line org.apache.commons.math.optimization.linear.SimplexTableau l: 344, susp 0.9946445959104186
Suspicious: 16 line org.apache.commons.math.optimization.linear.SimplexTableau l: 345, susp 0.9946445959104186
Suspicious: 17 line org.apache.commons.math.optimization.linear.SimplexTableau l: 346, susp 0.9946445959104186
Suspicious: 18 line org.apache.commons.math.optimization.linear.SimplexTableau l: 351, susp 0.9946445959104186
Suspicious: 19 line org.apache.commons.math.optimization.linear.SimplexTableau l: 352, susp 0.9946445959104186
Suspicious: 20 line org.apache.commons.math.optimization.linear.SimplexTableau l: 353, susp 0.9946445959104186
Suspicious: 21 line org.apache.commons.math.optimization.linear.SimplexTableau l: 357, susp 0.9946445959104186
Suspicious: 22 line org.apache.commons.math.optimization.linear.SimplexTableau l: 458, susp 0.9946445959104186
Suspicious: 23 line org.apache.commons.math.optimization.linear.SimplexTableau l: 481, susp 0.9946445959104186
Suspicious: 24 line org.apache.commons.math.optimization.linear.SimplexSolver l: 147, susp 0.994157740993184
Suspicious: 25 line org.apache.commons.math.optimization.linear.SimplexSolver l: 150, susp 0.994157740993184
Suspicious: 26 line org.apache.commons.math.optimization.linear.SimplexSolver l: 151, susp 0.994157740993184
Suspicious: 27 line org.apache.commons.math.optimization.linear.SimplexTableau l: 170, susp 0.994157740993184
Suspicious: 28 line org.apache.commons.math.optimization.linear.SimplexSolver l: 188, susp 0.994157740993184
Suspicious: 29 line org.apache.commons.math.optimization.linear.SimplexSolver l: 189, susp 0.994157740993184
Suspicious: 30 line org.apache.commons.math.optimization.linear.SimplexSolver l: 190, susp 0.994157740993184
Suspicious: 31 line org.apache.commons.math.optimization.linear.SimplexSolver l: 42, susp 0.9936708860759493
Suspicious: 32 line org.apache.commons.math.optimization.linear.SimplexSolver l: 43, susp 0.9936708860759493
Suspicious: 33 line org.apache.commons.math.optimization.linear.SimplexSolver l: 49, susp 0.9936708860759493
Suspicious: 34 line org.apache.commons.math.optimization.linear.SimplexSolver l: 50, susp 0.9936708860759493
Suspicious: 35 line org.apache.commons.math.optimization.linear.SimplexSolver l: 51, susp 0.9936708860759493
Suspicious: 36 line org.apache.commons.math.optimization.linear.SimplexSolver l: 59, susp 0.9936708860759493
Suspicious: 37 line org.apache.commons.math.optimization.linear.SimplexSolver l: 60, susp 0.9936708860759493
Suspicious: 38 line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 61, susp 0.9936708860759493
Suspicious: 39 line org.apache.commons.math.optimization.linear.SimplexSolver l: 61, susp 0.9936708860759493
Suspicious: 40 line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 62, susp 0.9936708860759493
Suspicious: 41 line org.apache.commons.math.optimization.linear.SimplexSolver l: 62, susp 0.9936708860759493
Suspicious: 42 line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 63, susp 0.9936708860759493
Suspicious: 43 line org.apache.commons.math.optimization.linear.SimplexSolver l: 63, susp 0.9936708860759493
Suspicious: 44 line org.apache.commons.math.optimization.linear.SimplexSolver l: 64, susp 0.9936708860759493
Suspicious: 45 line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 67, susp 0.9936708860759493
Suspicious: 46 line org.apache.commons.math.optimization.linear.SimplexSolver l: 67, susp 0.9936708860759493
Suspicious: 47 line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 68, susp 0.9936708860759493
Suspicious: 48 line org.apache.commons.math.optimization.linear.SimplexSolver l: 77, susp 0.9936708860759493
Suspicious: 49 line org.apache.commons.math.optimization.linear.SimplexSolver l: 78, susp 0.9936708860759493
Suspicious: 50 line org.apache.commons.math.optimization.linear.SimplexSolver l: 79, susp 0.9936708860759493
Suspicious: 51 line org.apache.commons.math.optimization.linear.SimplexSolver l: 80, susp 0.9936708860759493
Suspicious: 52 line org.apache.commons.math.optimization.linear.SimplexSolver l: 81, susp 0.9936708860759493
Suspicious: 53 line org.apache.commons.math.optimization.linear.SimplexSolver l: 82, susp 0.9936708860759493
Suspicious: 54 line org.apache.commons.math.optimization.linear.SimplexSolver l: 83, susp 0.9936708860759493
Suspicious: 55 line org.apache.commons.math.optimization.linear.SimplexSolver l: 84, susp 0.9936708860759493
Suspicious: 56 line org.apache.commons.math.optimization.linear.SimplexSolver l: 85, susp 0.9936708860759493
Suspicious: 57 line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 86, susp 0.9936708860759493
Suspicious: 58 line org.apache.commons.math.optimization.linear.SimplexSolver l: 86, susp 0.9936708860759493
Suspicious: 59 line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 89, susp 0.9936708860759493
Suspicious: 60 line org.apache.commons.math.optimization.linear.SimplexSolver l: 90, susp 0.9936708860759493
Suspicious: 61 line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 98, susp 0.9936708860759493
Suspicious: 62 line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 99, susp 0.9936708860759493
Suspicious: 63 line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 100, susp 0.9936708860759493
Suspicious: 64 line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 101, susp 0.9936708860759493
Suspicious: 65 line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 103, susp 0.9936708860759493
Suspicious: 66 line org.apache.commons.math.optimization.linear.SimplexSolver l: 103, susp 0.9936708860759493
Suspicious: 67 line org.apache.commons.math.optimization.linear.SimplexSolver l: 105, susp 0.9936708860759493
Suspicious: 68 line org.apache.commons.math.optimization.linear.SimplexSolver l: 106, susp 0.9936708860759493
Suspicious: 69 line org.apache.commons.math.optimization.linear.SimplexSolver l: 107, susp 0.9936708860759493
Suspicious: 70 line org.apache.commons.math.optimization.linear.SimplexSolver l: 112, susp 0.9936708860759493
Suspicious: 71 line org.apache.commons.math.optimization.linear.SimplexSolver l: 113, susp 0.9936708860759493
Suspicious: 72 line org.apache.commons.math.optimization.linear.SimplexSolver l: 116, susp 0.9936708860759493
Suspicious: 73 line org.apache.commons.math.optimization.linear.SimplexSolver l: 117, susp 0.9936708860759493
Suspicious: 74 line org.apache.commons.math.optimization.linear.SimplexSolver l: 118, susp 0.9936708860759493
Suspicious: 75 line org.apache.commons.math.optimization.linear.SimplexSolver l: 119, susp 0.9936708860759493
Suspicious: 76 line org.apache.commons.math.optimization.linear.SimplexSolver l: 122, susp 0.9936708860759493
Suspicious: 77 line org.apache.commons.math.optimization.linear.SimplexSolver l: 168, susp 0.9936708860759493
Suspicious: 78 line org.apache.commons.math.optimization.linear.SimplexSolver l: 186, susp 0.9936708860759493
Suspicious: 79 line org.apache.commons.math.optimization.linear.SimplexTableau l: 307, susp 0.9936708860759493
Suspicious: 80 line org.apache.commons.math.optimization.linear.SimplexTableau l: 370, susp 0.9936708860759493
Suspicious: 81 line org.apache.commons.math.optimization.linear.SimplexTableau l: 371, susp 0.9936708860759493
Suspicious: 82 line org.apache.commons.math.optimization.linear.SimplexTableau l: 373, susp 0.9936708860759493
Suspicious: 83 line org.apache.commons.math.optimization.linear.SimplexTableau l: 497, susp 0.9936708860759493
Suspicious: 84 line org.apache.commons.math.optimization.linear.SimplexTableau l: 177, susp 0.9931840311587147
Suspicious: 85 line org.apache.commons.math.util.MathUtils l: 367, susp 0.9931840311587147
Suspicious: 86 line org.apache.commons.math.util.MathUtils l: 368, susp 0.9931840311587147
Suspicious: 87 line org.apache.commons.math.util.MathUtils l: 369, susp 0.9931840311587147
Suspicious: 88 line org.apache.commons.math.util.MathUtils l: 370, susp 0.9931840311587147
Suspicious: 89 line org.apache.commons.math.util.MathUtils l: 372, susp 0.9931840311587147
Suspicious: 90 line org.apache.commons.math.optimization.linear.SimplexTableau l: 449, susp 0.9931840311587147
Suspicious: 91 line org.apache.commons.math.optimization.linear.SimplexTableau l: 296, susp 0.99269717624148
Suspicious: 92 line org.apache.commons.math.optimization.linear.SimplexTableau l: 433, susp 0.99269717624148
Suspicious: 93 line org.apache.commons.math.linear.ArrayRealVector l: 884, susp 0.99269717624148
Suspicious: 94 line org.apache.commons.math.linear.ArrayRealVector l: 885, susp 0.99269717624148
Suspicious: 95 line org.apache.commons.math.linear.ArrayRealVector l: 886, susp 0.99269717624148
Suspicious: 96 line org.apache.commons.math.linear.ArrayRealVector l: 887, susp 0.99269717624148
Suspicious: 97 line org.apache.commons.math.linear.ArrayRealVector l: 889, susp 0.99269717624148
Suspicious: 98 line org.apache.commons.math.optimization.linear.LinearConstraint l: 81, susp 0.9922103213242454
Suspicious: 99 line org.apache.commons.math.optimization.linear.LinearConstraint l: 82, susp 0.9922103213242454
Suspicious: 100 line org.apache.commons.math.optimization.linear.SimplexTableau l: 291, susp 0.9922103213242454
Suspicious: 101 line org.apache.commons.math.optimization.linear.SimplexTableau l: 292, susp 0.9922103213242454
Suspicious: 102 line org.apache.commons.math.optimization.linear.SimplexTableau l: 293, susp 0.9922103213242454
Suspicious: 103 line org.apache.commons.math.optimization.linear.SimplexTableau l: 294, susp 0.9922103213242454
Suspicious: 104 line org.apache.commons.math.optimization.linear.SimplexTableau l: 295, susp 0.9922103213242454
Suspicious: 105 line org.apache.commons.math.optimization.linear.SimplexTableau l: 300, susp 0.9922103213242454
Suspicious: 106 line org.apache.commons.math.linear.ArrayRealVector l: 338, susp 0.9922103213242454
Suspicious: 107 line org.apache.commons.math.linear.ArrayRealVector l: 339, susp 0.9922103213242454
Suspicious: 108 line org.apache.commons.math.linear.ArrayRealVector l: 340, susp 0.9922103213242454
Suspicious: 109 line org.apache.commons.math.linear.ArrayRealVector l: 342, susp 0.9922103213242454
Suspicious: 110 line org.apache.commons.math.optimization.linear.SimplexTableau l: 387, susp 0.9922103213242454
Suspicious: 111 line org.apache.commons.math.optimization.linear.SimplexTableau l: 388, susp 0.9922103213242454
Suspicious: 112 line org.apache.commons.math.optimization.linear.SimplexTableau l: 389, susp 0.9922103213242454
Suspicious: 113 line org.apache.commons.math.optimization.linear.SimplexTableau l: 391, susp 0.9922103213242454
Suspicious: 114 line org.apache.commons.math.optimization.linear.SimplexTableau l: 398, susp 0.9922103213242454
Suspicious: 115 line org.apache.commons.math.optimization.linear.SimplexTableau l: 406, susp 0.9922103213242454
Suspicious: 116 line org.apache.commons.math.optimization.linear.SimplexTableau l: 415, susp 0.9922103213242454
Suspicious: 117 line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 58, susp 0.9917234664070107
Suspicious: 118 line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 59, susp 0.9917234664070107
Suspicious: 119 line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 65, susp 0.9917234664070107
Suspicious: 120 line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 66, susp 0.9917234664070107
Suspicious: 121 line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 67, susp 0.9917234664070107
Suspicious: 122 line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 68, susp 0.9917234664070107
Suspicious: 123 line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 75, susp 0.9917234664070107
Suspicious: 124 line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 83, susp 0.9917234664070107
Suspicious: 125 line org.apache.commons.math.optimization.linear.LinearConstraint l: 99, susp 0.9917234664070107
Suspicious: 126 line org.apache.commons.math.optimization.linear.LinearConstraint l: 100, susp 0.9917234664070107
Suspicious: 127 line org.apache.commons.math.optimization.linear.LinearConstraint l: 101, susp 0.9917234664070107
Suspicious: 128 line org.apache.commons.math.optimization.linear.LinearConstraint l: 102, susp 0.9917234664070107
Suspicious: 129 line org.apache.commons.math.optimization.linear.LinearConstraint l: 103, susp 0.9917234664070107
Suspicious: 130 line org.apache.commons.math.optimization.linear.SimplexTableau l: 104, susp 0.9917234664070107
Suspicious: 131 line org.apache.commons.math.optimization.linear.SimplexTableau l: 105, susp 0.9917234664070107
Suspicious: 132 line org.apache.commons.math.optimization.linear.SimplexTableau l: 106, susp 0.9917234664070107
Suspicious: 133 line org.apache.commons.math.optimization.linear.SimplexTableau l: 107, susp 0.9917234664070107
Suspicious: 134 line org.apache.commons.math.optimization.linear.SimplexTableau l: 108, susp 0.9917234664070107
Suspicious: 135 line org.apache.commons.math.optimization.linear.SimplexTableau l: 109, susp 0.9917234664070107
Suspicious: 136 line org.apache.commons.math.optimization.linear.SimplexTableau l: 110, susp 0.9917234664070107
Suspicious: 137 line org.apache.commons.math.optimization.linear.SimplexTableau l: 111, susp 0.9917234664070107
Suspicious: 138 line org.apache.commons.math.optimization.linear.SimplexTableau l: 112, susp 0.9917234664070107
Suspicious: 139 line org.apache.commons.math.optimization.linear.SimplexTableau l: 113, susp 0.9917234664070107
Suspicious: 140 line org.apache.commons.math.optimization.linear.SimplexTableau l: 114, susp 0.9917234664070107
Suspicious: 141 line org.apache.commons.math.optimization.linear.SimplexTableau l: 115, susp 0.9917234664070107
Suspicious: 142 line org.apache.commons.math.optimization.linear.SimplexTableau l: 116, susp 0.9917234664070107
Suspicious: 143 line org.apache.commons.math.optimization.linear.SimplexTableau l: 126, susp 0.9917234664070107
Suspicious: 144 line org.apache.commons.math.optimization.linear.SimplexTableau l: 127, susp 0.9917234664070107
Suspicious: 145 line org.apache.commons.math.optimization.linear.SimplexTableau l: 128, susp 0.9917234664070107
Suspicious: 146 line org.apache.commons.math.optimization.linear.SimplexTableau l: 129, susp 0.9917234664070107
Suspicious: 147 line org.apache.commons.math.optimization.linear.SimplexTableau l: 130, susp 0.9917234664070107
Suspicious: 148 line org.apache.commons.math.optimization.linear.SimplexTableau l: 133, susp 0.9917234664070107
Suspicious: 149 line org.apache.commons.math.optimization.linear.SimplexTableau l: 136, susp 0.9917234664070107
Suspicious: 150 line org.apache.commons.math.optimization.linear.SimplexTableau l: 137, susp 0.9917234664070107
Suspicious: 151 line org.apache.commons.math.optimization.linear.SimplexTableau l: 138, susp 0.9917234664070107
Suspicious: 152 line org.apache.commons.math.optimization.linear.SimplexTableau l: 139, susp 0.9917234664070107
Suspicious: 153 line org.apache.commons.math.optimization.linear.SimplexTableau l: 140, susp 0.9917234664070107
Suspicious: 154 line org.apache.commons.math.optimization.linear.SimplexTableau l: 141, susp 0.9917234664070107
Suspicious: 155 line org.apache.commons.math.optimization.linear.SimplexTableau l: 142, susp 0.9917234664070107
Suspicious: 156 line org.apache.commons.math.optimization.linear.SimplexTableau l: 144, susp 0.9917234664070107
Suspicious: 157 line org.apache.commons.math.optimization.linear.SimplexTableau l: 150, susp 0.9917234664070107
Suspicious: 158 line org.apache.commons.math.optimization.linear.SimplexTableau l: 151, susp 0.9917234664070107
Suspicious: 159 line org.apache.commons.math.optimization.linear.SimplexTableau l: 152, susp 0.9917234664070107
Suspicious: 160 line org.apache.commons.math.optimization.linear.SimplexTableau l: 153, susp 0.9917234664070107
Suspicious: 161 line org.apache.commons.math.optimization.linear.SimplexTableau l: 154, susp 0.9917234664070107
Suspicious: 162 line org.apache.commons.math.optimization.linear.SimplexTableau l: 157, susp 0.9917234664070107
Suspicious: 163 line org.apache.commons.math.optimization.linear.SimplexTableau l: 160, susp 0.9917234664070107
Suspicious: 164 line org.apache.commons.math.optimization.linear.SimplexTableau l: 166, susp 0.9917234664070107
Suspicious: 165 line org.apache.commons.math.optimization.linear.LinearConstraint l: 168, susp 0.9917234664070107
Suspicious: 166 line org.apache.commons.math.optimization.linear.SimplexTableau l: 169, susp 0.9917234664070107
Suspicious: 167 line org.apache.commons.math.optimization.linear.LinearConstraint l: 176, susp 0.9917234664070107
Suspicious: 168 line org.apache.commons.math.optimization.linear.SimplexTableau l: 176, susp 0.9917234664070107
Suspicious: 169 line org.apache.commons.math.optimization.linear.SimplexTableau l: 183, susp 0.9917234664070107
Suspicious: 170 line org.apache.commons.math.optimization.linear.LinearConstraint l: 184, susp 0.9917234664070107
Suspicious: 171 line org.apache.commons.math.optimization.linear.SimplexTableau l: 190, susp 0.9917234664070107
Suspicious: 172 line org.apache.commons.math.optimization.linear.SimplexTableau l: 198, susp 0.9917234664070107
Suspicious: 173 line org.apache.commons.math.optimization.linear.SimplexTableau l: 199, susp 0.9917234664070107
Suspicious: 174 line org.apache.commons.math.optimization.linear.SimplexTableau l: 200, susp 0.9917234664070107
Suspicious: 175 line org.apache.commons.math.optimization.linear.SimplexTableau l: 201, susp 0.9917234664070107
Suspicious: 176 line org.apache.commons.math.optimization.linear.SimplexTableau l: 202, susp 0.9917234664070107
Suspicious: 177 line org.apache.commons.math.optimization.linear.SimplexTableau l: 211, susp 0.9917234664070107
Suspicious: 178 line org.apache.commons.math.optimization.linear.SimplexTableau l: 216, susp 0.9917234664070107
Suspicious: 179 line org.apache.commons.math.optimization.linear.SimplexTableau l: 217, susp 0.9917234664070107
Suspicious: 180 line org.apache.commons.math.optimization.linear.SimplexTableau l: 225, susp 0.9917234664070107
Suspicious: 181 line org.apache.commons.math.optimization.linear.SimplexTableau l: 234, susp 0.9917234664070107
Suspicious: 182 line org.apache.commons.math.optimization.linear.SimplexTableau l: 235, susp 0.9917234664070107
Suspicious: 183 line org.apache.commons.math.optimization.linear.SimplexTableau l: 236, susp 0.9917234664070107
Suspicious: 184 line org.apache.commons.math.optimization.linear.SimplexTableau l: 237, susp 0.9917234664070107
Suspicious: 185 line org.apache.commons.math.optimization.linear.SimplexTableau l: 239, susp 0.9917234664070107
Suspicious: 186 line org.apache.commons.math.optimization.linear.SimplexTableau l: 240, susp 0.9917234664070107
Suspicious: 187 line org.apache.commons.math.optimization.linear.SimplexTableau l: 248, susp 0.9917234664070107
Suspicious: 188 line org.apache.commons.math.optimization.linear.SimplexTableau l: 252, susp 0.9917234664070107
Suspicious: 189 line org.apache.commons.math.optimization.linear.SimplexTableau l: 331, susp 0.9917234664070107
Suspicious: 190 line org.apache.commons.math.optimization.linear.SimplexTableau l: 332, susp 0.9917234664070107
Suspicious: 191 line org.apache.commons.math.util.MathUtils l: 411, susp 0.991236611489776
Suspicious: 192 line org.apache.commons.math.linear.ArrayRealVector l: 854, susp 0.9824732229795521
Suspicious: 193 line org.apache.commons.math.optimization.RealPointValuePair l: 48, susp 0.9810126582278481
Suspicious: 194 line org.apache.commons.math.optimization.RealPointValuePair l: 49, susp 0.9810126582278481
Suspicious: 195 line org.apache.commons.math.optimization.RealPointValuePair l: 50, susp 0.9810126582278481
Suspicious: 196 line org.apache.commons.math.optimization.RealPointValuePair l: 51, susp 0.9810126582278481
Suspicious: 197 line org.apache.commons.math.optimization.RealPointValuePair l: 86, susp 0.9810126582278481
Suspicious: 198 line org.apache.commons.math.linear.ArrayRealVector l: 1292, susp 0.9810126582278481
Suspicious: 199 line org.apache.commons.math.linear.ArrayRealVector l: 1287, susp 0.9805258033106135
Suspicious: 200 line org.apache.commons.math.util.MathUtils l: 395, susp 0.950827653359299
Suspicious: 201 line org.apache.commons.math.linear.ArrayRealVector l: 1157, susp 0.9498539435248297
Suspicious: 202 line org.apache.commons.math.linear.ArrayRealVector l: 77, susp 0.9371957156767283
Suspicious: 203 line org.apache.commons.math.linear.ArrayRealVector l: 78, susp 0.9371957156767283
Suspicious: 204 line org.apache.commons.math.linear.ArrayRealVector l: 79, susp 0.9371957156767283
Suspicious: 205 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 354, susp 0.9269717624148004
Suspicious: 206 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 367, susp 0.9225900681596884
Suspicious: 207 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 372, susp 0.9225900681596884
Suspicious: 208 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 373, susp 0.9225900681596884
Suspicious: 209 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 94, susp 0.9162609542356378
Suspicious: 210 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 95, susp 0.9162609542356378
Suspicious: 211 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 96, susp 0.9162609542356378
Suspicious: 212 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 314, susp 0.9157740993184031
Suspicious: 213 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 315, susp 0.9157740993184031
Suspicious: 214 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 320, susp 0.9157740993184031
Suspicious: 215 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 325, susp 0.9157740993184031
Suspicious: 216 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 326, susp 0.9157740993184031
Suspicious: 217 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 330, susp 0.9157740993184031
Suspicious: 218 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 331, susp 0.9157740993184031
Suspicious: 219 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 334, susp 0.9157740993184031
Suspicious: 220 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 335, susp 0.9157740993184031
Suspicious: 221 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 336, susp 0.9157740993184031
Suspicious: 222 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 341, susp 0.9157740993184031
Suspicious: 223 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 343, susp 0.9157740993184031
Suspicious: 224 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 347, susp 0.9157740993184031
Suspicious: 225 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 622, susp 0.9157740993184031
Suspicious: 226 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 623, susp 0.9157740993184031
Suspicious: 227 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 410, susp 0.8958130477117818
Suspicious: 228 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 404, susp 0.8953261927945473
Suspicious: 229 line org.apache.commons.math.linear.AbstractRealMatrix l: 43, susp 0.8758519961051606
Suspicious: 230 line org.apache.commons.math.linear.AbstractRealMatrix l: 44, susp 0.8758519961051606
Suspicious: 231 line org.apache.commons.math.linear.AbstractRealMatrix l: 45, susp 0.8758519961051606
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 169, susp 0.9990262901655307
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 308, susp 0.9990262901655307
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 191, susp 0.9965920155793574
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 152, susp 0.9961051606621227
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 297, susp 0.9951314508276533
Suspicious:  line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 92, susp 0.9946445959104186
Suspicious:  line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 106, susp 0.9946445959104186
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 155, susp 0.9946445959104186
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 193, susp 0.9946445959104186
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 282, susp 0.9946445959104186
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 340, susp 0.9946445959104186
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 341, susp 0.9946445959104186
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 342, susp 0.9946445959104186
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 343, susp 0.9946445959104186
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 344, susp 0.9946445959104186
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 345, susp 0.9946445959104186
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 346, susp 0.9946445959104186
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 351, susp 0.9946445959104186
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 352, susp 0.9946445959104186
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 353, susp 0.9946445959104186
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 357, susp 0.9946445959104186
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 458, susp 0.9946445959104186
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 481, susp 0.9946445959104186
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 147, susp 0.994157740993184
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 150, susp 0.994157740993184
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 151, susp 0.994157740993184
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 170, susp 0.994157740993184
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 188, susp 0.994157740993184
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 189, susp 0.994157740993184
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 190, susp 0.994157740993184
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 42, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 43, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 49, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 50, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 51, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 59, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 60, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 61, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 61, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 62, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 62, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 63, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 63, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 64, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 67, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 67, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 68, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 77, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 78, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 79, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 80, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 81, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 82, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 83, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 84, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 85, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 86, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 86, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 89, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 90, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 98, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 99, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 100, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 101, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 103, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 103, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 105, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 106, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 107, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 112, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 113, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 116, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 117, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 118, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 119, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 122, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 168, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 186, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 307, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 370, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 371, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 373, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 497, susp 0.9936708860759493
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 177, susp 0.9931840311587147
Suspicious:  line org.apache.commons.math.util.MathUtils l: 367, susp 0.9931840311587147
Suspicious:  line org.apache.commons.math.util.MathUtils l: 368, susp 0.9931840311587147
Suspicious:  line org.apache.commons.math.util.MathUtils l: 369, susp 0.9931840311587147
Suspicious:  line org.apache.commons.math.util.MathUtils l: 370, susp 0.9931840311587147
Suspicious:  line org.apache.commons.math.util.MathUtils l: 372, susp 0.9931840311587147
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 449, susp 0.9931840311587147
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 296, susp 0.99269717624148
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 433, susp 0.99269717624148
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 884, susp 0.99269717624148
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 885, susp 0.99269717624148
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 886, susp 0.99269717624148
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 887, susp 0.99269717624148
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 889, susp 0.99269717624148
Suspicious:  line org.apache.commons.math.optimization.linear.LinearConstraint l: 81, susp 0.9922103213242454
Suspicious:  line org.apache.commons.math.optimization.linear.LinearConstraint l: 82, susp 0.9922103213242454
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 291, susp 0.9922103213242454
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 292, susp 0.9922103213242454
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 293, susp 0.9922103213242454
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 294, susp 0.9922103213242454
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 295, susp 0.9922103213242454
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 300, susp 0.9922103213242454
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 338, susp 0.9922103213242454
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 339, susp 0.9922103213242454
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 340, susp 0.9922103213242454
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 342, susp 0.9922103213242454
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 387, susp 0.9922103213242454
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 388, susp 0.9922103213242454
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 389, susp 0.9922103213242454
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 391, susp 0.9922103213242454
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 398, susp 0.9922103213242454
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 406, susp 0.9922103213242454
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 415, susp 0.9922103213242454
Suspicious:  line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 58, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 59, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 65, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 66, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 67, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 68, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 75, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 83, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.LinearConstraint l: 99, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.LinearConstraint l: 100, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.LinearConstraint l: 101, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.LinearConstraint l: 102, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.LinearConstraint l: 103, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 104, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 105, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 106, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 107, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 108, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 109, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 110, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 111, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 112, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 113, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 114, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 115, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 116, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 126, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 127, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 128, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 129, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 130, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 133, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 136, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 137, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 138, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 139, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 140, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 141, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 142, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 144, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 150, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 151, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 152, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 153, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 154, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 157, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 160, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 166, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.LinearConstraint l: 168, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 169, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.LinearConstraint l: 176, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 176, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 183, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.LinearConstraint l: 184, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 190, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 198, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 199, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 200, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 201, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 202, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 211, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 216, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 217, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 225, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 234, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 235, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 236, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 237, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 239, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 240, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 248, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 252, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 331, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 332, susp 0.9917234664070107
Suspicious:  line org.apache.commons.math.util.MathUtils l: 411, susp 0.991236611489776
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 854, susp 0.9824732229795521
Suspicious:  line org.apache.commons.math.optimization.RealPointValuePair l: 48, susp 0.9810126582278481
Suspicious:  line org.apache.commons.math.optimization.RealPointValuePair l: 49, susp 0.9810126582278481
Suspicious:  line org.apache.commons.math.optimization.RealPointValuePair l: 50, susp 0.9810126582278481
Suspicious:  line org.apache.commons.math.optimization.RealPointValuePair l: 51, susp 0.9810126582278481
Suspicious:  line org.apache.commons.math.optimization.RealPointValuePair l: 86, susp 0.9810126582278481
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 1292, susp 0.9810126582278481
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 1287, susp 0.9805258033106135
Suspicious:  line org.apache.commons.math.util.MathUtils l: 395, susp 0.950827653359299
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 1157, susp 0.9498539435248297
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 77, susp 0.9371957156767283
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 78, susp 0.9371957156767283
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 79, susp 0.9371957156767283
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 354, susp 0.9269717624148004
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 367, susp 0.9225900681596884
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 372, susp 0.9225900681596884
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 373, susp 0.9225900681596884
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 94, susp 0.9162609542356378
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 95, susp 0.9162609542356378
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 96, susp 0.9162609542356378
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 314, susp 0.9157740993184031
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 315, susp 0.9157740993184031
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 320, susp 0.9157740993184031
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 325, susp 0.9157740993184031
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 326, susp 0.9157740993184031
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 330, susp 0.9157740993184031
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 331, susp 0.9157740993184031
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 334, susp 0.9157740993184031
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 335, susp 0.9157740993184031
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 336, susp 0.9157740993184031
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 341, susp 0.9157740993184031
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 343, susp 0.9157740993184031
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 347, susp 0.9157740993184031
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 622, susp 0.9157740993184031
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 623, susp 0.9157740993184031
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 410, susp 0.8958130477117818
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 404, susp 0.8953261927945473
Suspicious:  line org.apache.commons.math.linear.AbstractRealMatrix l: 43, susp 0.8758519961051606
Suspicious:  line org.apache.commons.math.linear.AbstractRealMatrix l: 44, susp 0.8758519961051606
Suspicious:  line org.apache.commons.math.linear.AbstractRealMatrix l: 45, susp 0.8758519961051606
Executing time Fault localization: 51 sec
Setting up the max to 513830 milliseconds (513 sec)
---- Initial suspicious size: 231
Creating variant 1
--ModifPoint:CtReturnImpl, suspValue 0.9990262901655307, line 169, file SimplexSolver.java
--ModifPoint:CtReturnImpl, suspValue 0.9990262901655307, line 308, file SimplexTableau.java
--ModifPoint:CtInvocationImpl, suspValue 0.9965920155793574, line 191, file SimplexSolver.java
--ModifPoint:CtReturnImpl, suspValue 0.9961051606621227, line 152, file SimplexSolver.java
--ModifPoint:CtReturnImpl, suspValue 0.9951314508276533, line 297, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.9946445959104186, line 92, file LinearObjectiveFunction.java
--ModifPoint:CtReturnImpl, suspValue 0.9946445959104186, line 106, file AbstractLinearOptimizer.java
--ModifPoint:CtReturnImpl, suspValue 0.9946445959104186, line 155, file SimplexSolver.java
--ModifPoint:CtReturnImpl, suspValue 0.9946445959104186, line 193, file SimplexSolver.java
--ModifPoint:CtReturnImpl, suspValue 0.9946445959104186, line 282, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9946445959104186, line 340, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9946445959104186, line 341, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9946445959104186, line 342, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9946445959104186, line 343, file SimplexTableau.java
--ModifPoint:CtForImpl, suspValue 0.9946445959104186, line 344, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9946445959104186, line 345, file SimplexTableau.java
--ModifPoint:CtIfImpl, suspValue 0.9946445959104186, line 346, file SimplexTableau.java
--ModifPoint:CtInvocationImpl, suspValue 0.9946445959104186, line 351, file SimplexTableau.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9946445959104186, line 352, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.9946445959104186, line 357, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.9946445959104186, line 458, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.9946445959104186, line 481, file SimplexTableau.java
--ModifPoint:CtIfImpl, suspValue 0.994157740993184, line 147, file SimplexSolver.java
--ModifPoint:CtForImpl, suspValue 0.994157740993184, line 150, file SimplexSolver.java
--ModifPoint:CtIfImpl, suspValue 0.994157740993184, line 151, file SimplexSolver.java
--ModifPoint:CtAssignmentImpl, suspValue 0.994157740993184, line 170, file SimplexTableau.java
--ModifPoint:CtInvocationImpl, suspValue 0.994157740993184, line 188, file SimplexSolver.java
--ModifPoint:CtInvocationImpl, suspValue 0.994157740993184, line 189, file SimplexSolver.java
--ModifPoint:CtWhileImpl, suspValue 0.994157740993184, line 190, file SimplexSolver.java
--ModifPoint:CtInvocationImpl, suspValue 0.9936708860759493, line 42, file SimplexSolver.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9936708860759493, line 50, file SimplexSolver.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9936708860759493, line 59, file SimplexSolver.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9936708860759493, line 60, file SimplexSolver.java
--ModifPoint:CtForImpl, suspValue 0.9936708860759493, line 61, file SimplexSolver.java
--ModifPoint:CtInvocationImpl, suspValue 0.9936708860759493, line 62, file AbstractLinearOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.9936708860759493, line 62, file SimplexSolver.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9936708860759493, line 63, file SimplexSolver.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9936708860759493, line 64, file SimplexSolver.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9936708860759493, line 67, file AbstractLinearOptimizer.java
--ModifPoint:CtReturnImpl, suspValue 0.9936708860759493, line 67, file SimplexSolver.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9936708860759493, line 77, file SimplexSolver.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9936708860759493, line 78, file SimplexSolver.java
--ModifPoint:CtForImpl, suspValue 0.9936708860759493, line 79, file SimplexSolver.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9936708860759493, line 80, file SimplexSolver.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9936708860759493, line 81, file SimplexSolver.java
--ModifPoint:CtIfImpl, suspValue 0.9936708860759493, line 82, file SimplexSolver.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9936708860759493, line 83, file SimplexSolver.java
--ModifPoint:CtIfImpl, suspValue 0.9936708860759493, line 84, file SimplexSolver.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9936708860759493, line 85, file SimplexSolver.java
--ModifPoint:CtIfImpl, suspValue 0.9936708860759493, line 86, file AbstractLinearOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9936708860759493, line 86, file SimplexSolver.java
--ModifPoint:CtReturnImpl, suspValue 0.9936708860759493, line 90, file SimplexSolver.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9936708860759493, line 98, file AbstractLinearOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9936708860759493, line 99, file AbstractLinearOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9936708860759493, line 100, file AbstractLinearOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9936708860759493, line 101, file AbstractLinearOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9936708860759493, line 103, file AbstractLinearOptimizer.java
--ModifPoint:CtInvocationImpl, suspValue 0.9936708860759493, line 103, file SimplexSolver.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9936708860759493, line 105, file SimplexSolver.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9936708860759493, line 106, file SimplexSolver.java
--ModifPoint:CtIfImpl, suspValue 0.9936708860759493, line 107, file SimplexSolver.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9936708860759493, line 112, file SimplexSolver.java
--ModifPoint:CtInvocationImpl, suspValue 0.9936708860759493, line 113, file SimplexSolver.java
--ModifPoint:CtForImpl, suspValue 0.9936708860759493, line 116, file SimplexSolver.java
--ModifPoint:CtIfImpl, suspValue 0.9936708860759493, line 117, file SimplexSolver.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9936708860759493, line 118, file SimplexSolver.java
--ModifPoint:CtInvocationImpl, suspValue 0.9936708860759493, line 119, file SimplexSolver.java
--ModifPoint:CtIfImpl, suspValue 0.9936708860759493, line 168, file SimplexSolver.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9936708860759493, line 186, file SimplexSolver.java
--ModifPoint:CtIfImpl, suspValue 0.9936708860759493, line 307, file SimplexTableau.java
--ModifPoint:CtForImpl, suspValue 0.9936708860759493, line 370, file SimplexTableau.java
--ModifPoint:CtInvocationImpl, suspValue 0.9936708860759493, line 371, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.9936708860759493, line 497, file SimplexTableau.java
--ModifPoint:CtIfImpl, suspValue 0.9931840311587147, line 367, file MathUtils.java
--ModifPoint:CtReturnImpl, suspValue 0.9931840311587147, line 368, file MathUtils.java
--ModifPoint:CtIfImpl, suspValue 0.9931840311587147, line 369, file MathUtils.java
--ModifPoint:CtReturnImpl, suspValue 0.9931840311587147, line 370, file MathUtils.java
--ModifPoint:CtReturnImpl, suspValue 0.9931840311587147, line 372, file MathUtils.java
--ModifPoint:CtReturnImpl, suspValue 0.9931840311587147, line 449, file SimplexTableau.java
--ModifPoint:CtIfImpl, suspValue 0.99269717624148, line 296, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.99269717624148, line 433, file SimplexTableau.java
--ModifPoint:CtInvocationImpl, suspValue 0.99269717624148, line 884, file ArrayRealVector.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.99269717624148, line 885, file ArrayRealVector.java
--ModifPoint:CtForImpl, suspValue 0.99269717624148, line 886, file ArrayRealVector.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.99269717624148, line 887, file ArrayRealVector.java
--ModifPoint:CtReturnImpl, suspValue 0.99269717624148, line 889, file ArrayRealVector.java
--ModifPoint:CtInvocationImpl, suspValue 0.9922103213242454, line 81, file LinearConstraint.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9922103213242454, line 291, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9922103213242454, line 292, file SimplexTableau.java
--ModifPoint:CtForImpl, suspValue 0.9922103213242454, line 293, file SimplexTableau.java
--ModifPoint:CtIfImpl, suspValue 0.9922103213242454, line 294, file SimplexTableau.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9922103213242454, line 295, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.9922103213242454, line 300, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9922103213242454, line 338, file ArrayRealVector.java
--ModifPoint:CtForImpl, suspValue 0.9922103213242454, line 339, file ArrayRealVector.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9922103213242454, line 340, file ArrayRealVector.java
--ModifPoint:CtReturnImpl, suspValue 0.9922103213242454, line 342, file ArrayRealVector.java
--ModifPoint:CtForImpl, suspValue 0.9922103213242454, line 387, file SimplexTableau.java
--ModifPoint:CtInvocationImpl, suspValue 0.9922103213242454, line 388, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.9922103213242454, line 398, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.9922103213242454, line 406, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.9922103213242454, line 415, file SimplexTableau.java
--ModifPoint:CtInvocationImpl, suspValue 0.9917234664070107, line 58, file LinearObjectiveFunction.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9917234664070107, line 66, file LinearObjectiveFunction.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9917234664070107, line 67, file LinearObjectiveFunction.java
--ModifPoint:CtReturnImpl, suspValue 0.9917234664070107, line 75, file LinearObjectiveFunction.java
--ModifPoint:CtReturnImpl, suspValue 0.9917234664070107, line 83, file LinearObjectiveFunction.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9917234664070107, line 100, file LinearConstraint.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9917234664070107, line 101, file LinearConstraint.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9917234664070107, line 102, file LinearConstraint.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9917234664070107, line 105, file SimplexTableau.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9917234664070107, line 106, file SimplexTableau.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9917234664070107, line 107, file SimplexTableau.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9917234664070107, line 108, file SimplexTableau.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9917234664070107, line 109, file SimplexTableau.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9917234664070107, line 110, file SimplexTableau.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9917234664070107, line 112, file SimplexTableau.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9917234664070107, line 114, file SimplexTableau.java
--ModifPoint:CtInvocationImpl, suspValue 0.9917234664070107, line 115, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9917234664070107, line 126, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9917234664070107, line 127, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9917234664070107, line 129, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9917234664070107, line 130, file SimplexTableau.java
--ModifPoint:CtIfImpl, suspValue 0.9917234664070107, line 133, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9917234664070107, line 136, file SimplexTableau.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9917234664070107, line 137, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9917234664070107, line 138, file SimplexTableau.java
--ModifPoint:CtInvocationImpl, suspValue 0.9917234664070107, line 140, file SimplexTableau.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9917234664070107, line 141, file SimplexTableau.java
--ModifPoint:CtIfImpl, suspValue 0.9917234664070107, line 144, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9917234664070107, line 150, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9917234664070107, line 151, file SimplexTableau.java
--ModifPoint:CtForImpl, suspValue 0.9917234664070107, line 152, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9917234664070107, line 153, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9917234664070107, line 154, file SimplexTableau.java
--ModifPoint:CtInvocationImpl, suspValue 0.9917234664070107, line 157, file SimplexTableau.java
--ModifPoint:CtIfImpl, suspValue 0.9917234664070107, line 160, file SimplexTableau.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9917234664070107, line 166, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.9917234664070107, line 168, file LinearConstraint.java
--ModifPoint:CtIfImpl, suspValue 0.9917234664070107, line 169, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.9917234664070107, line 176, file LinearConstraint.java
--ModifPoint:CtIfImpl, suspValue 0.9917234664070107, line 176, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.9917234664070107, line 183, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.9917234664070107, line 184, file LinearConstraint.java
--ModifPoint:CtReturnImpl, suspValue 0.9917234664070107, line 190, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9917234664070107, line 198, file SimplexTableau.java
--ModifPoint:CtForEachImpl, suspValue 0.9917234664070107, line 199, file SimplexTableau.java
--ModifPoint:CtInvocationImpl, suspValue 0.9917234664070107, line 200, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.9917234664070107, line 202, file SimplexTableau.java
--ModifPoint:CtIfImpl, suspValue 0.9917234664070107, line 211, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.9917234664070107, line 216, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.9917234664070107, line 225, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9917234664070107, line 234, file SimplexTableau.java
--ModifPoint:CtForEachImpl, suspValue 0.9917234664070107, line 235, file SimplexTableau.java
--ModifPoint:CtIfImpl, suspValue 0.9917234664070107, line 236, file SimplexTableau.java
--ModifPoint:CtUnaryOperatorImpl, suspValue 0.9917234664070107, line 237, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.9917234664070107, line 240, file SimplexTableau.java
--ModifPoint:CtForImpl, suspValue 0.9917234664070107, line 248, file SimplexTableau.java
--ModifPoint:CtInvocationImpl, suspValue 0.9917234664070107, line 331, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.991236611489776, line 411, file MathUtils.java
--ModifPoint:CtReturnImpl, suspValue 0.9824732229795521, line 854, file ArrayRealVector.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9810126582278481, line 49, file RealPointValuePair.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9810126582278481, line 50, file RealPointValuePair.java
--ModifPoint:CtReturnImpl, suspValue 0.9810126582278481, line 86, file RealPointValuePair.java
--ModifPoint:CtIfImpl, suspValue 0.9805258033106135, line 1287, file ArrayRealVector.java
--ModifPoint:CtReturnImpl, suspValue 0.950827653359299, line 395, file MathUtils.java
--ModifPoint:CtReturnImpl, suspValue 0.9498539435248297, line 1157, file ArrayRealVector.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9371957156767283, line 78, file ArrayRealVector.java
--ModifPoint:CtReturnImpl, suspValue 0.9269717624148004, line 354, file Array2DRowRealMatrix.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9225900681596884, line 367, file Array2DRowRealMatrix.java
--ModifPoint:CtInvocationImpl, suspValue 0.9162609542356378, line 95, file Array2DRowRealMatrix.java
--ModifPoint:CtIfImpl, suspValue 0.9157740993184031, line 314, file Array2DRowRealMatrix.java
--ModifPoint:CtIfImpl, suspValue 0.9157740993184031, line 315, file Array2DRowRealMatrix.java
--ModifPoint:CtIfImpl, suspValue 0.9157740993184031, line 320, file Array2DRowRealMatrix.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9157740993184031, line 325, file Array2DRowRealMatrix.java
--ModifPoint:CtIfImpl, suspValue 0.9157740993184031, line 326, file Array2DRowRealMatrix.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9157740993184031, line 330, file Array2DRowRealMatrix.java
--ModifPoint:CtIfImpl, suspValue 0.9157740993184031, line 331, file Array2DRowRealMatrix.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9157740993184031, line 334, file Array2DRowRealMatrix.java
--ModifPoint:CtForImpl, suspValue 0.9157740993184031, line 335, file Array2DRowRealMatrix.java
--ModifPoint:CtIfImpl, suspValue 0.9157740993184031, line 336, file Array2DRowRealMatrix.java
--ModifPoint:CtInvocationImpl, suspValue 0.9157740993184031, line 341, file Array2DRowRealMatrix.java
--ModifPoint:CtInvocationImpl, suspValue 0.9157740993184031, line 622, file Array2DRowRealMatrix.java
--ModifPoint:CtReturnImpl, suspValue 0.8958130477117818, line 410, file Array2DRowRealMatrix.java
--ModifPoint:CtReturnImpl, suspValue 0.8953261927945473, line 404, file Array2DRowRealMatrix.java
--ModifPoint:CtAssignmentImpl, suspValue 0.8758519961051606, line 44, file AbstractRealMatrix.java
Total suspicious from FL: 231,  186
Total ModPoint created: 186
Creating program variant #1, [Variant id: 1, #gens: 186, #ops: 0, parent:-]
Calculating fitness
Calculating fitness for original program variant.
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Test Failing is passing, Executing regression
Executing process: (timeout513secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.stat.data.LotteryTest  org.apache.commons.math.linear.FieldMatrixImplTest  org.apache.commons.math.ode.sampling.StepNormalizerTest  org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest  org.apache.commons.math.geometry.RotationOrderTest  org.apache.commons.math.analysis.solvers.NewtonSolverTest  org.apache.commons.math.estimation.EstimatedParameterTest  org.apache.commons.math.linear.CholeskyDecompositionImplTest  org.apache.commons.math.linear.Array2DRowRealMatrixTest  org.apache.commons.math.linear.SparseRealMatrixTest  org.apache.commons.math.util.OpenIntToFieldTest  org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest  org.apache.commons.math.optimization.fitting.PolynomialFitterTest  org.apache.commons.math.linear.ArrayRealVectorTest  org.apache.commons.math.distribution.HypergeometricDistributionTest  org.apache.commons.math.random.RandomAdaptorTest  org.apache.commons.math.ode.FirstOrderConverterTest  org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest  org.apache.commons.math.stat.inference.TestUtilsTest  org.apache.commons.math.stat.data.LewTest  org.apache.commons.math.distribution.GammaDistributionTest  org.apache.commons.math.stat.descriptive.rank.MedianTest  org.apache.commons.math.distribution.ZipfDistributionTest  org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest  org.apache.commons.math.stat.CertifiedDataTest  org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest  org.apache.commons.math.complex.FrenchComplexFormatTest  org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest  org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest  org.apache.commons.math.DuplicateSampleAbscissaExceptionTest  org.apache.commons.math.estimation.MinpackTest  org.apache.commons.math.genetics.FixedGenerationCountTest  org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest  org.apache.commons.math.fraction.BigFractionFormatTest  org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest  org.apache.commons.math.random.RandomDataTest  org.apache.commons.math.distribution.FDistributionTest  org.apache.commons.math.FunctionEvaluationExceptionTest  org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest  org.apache.commons.math.stat.inference.TTestFactoryTest  org.apache.commons.math.stat.descriptive.moment.SkewnessTest  org.apache.commons.math.special.GammaTest  org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest  org.apache.commons.math.analysis.integration.RombergIntegratorTest  org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest  org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest  org.apache.commons.math.stat.descriptive.SummaryStatisticsTest  org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest  org.apache.commons.math.stat.descriptive.moment.FirstMomentTest  org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest  org.apache.commons.math.complex.ComplexTest  org.apache.commons.math.distribution.BetaDistributionTest  org.apache.commons.math.special.ErfTest  org.apache.commons.math.special.BetaTest  org.apache.commons.math.ode.nonstiff.GillIntegratorTest  org.apache.commons.math.random.EmpiricalDistributionTest  org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest  org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest  org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest  org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest  org.apache.commons.math.random.AbstractRandomGeneratorTest  org.apache.commons.math.fraction.BigFractionFieldTest  org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest  org.apache.commons.math.genetics.GeneticAlgorithmTestBinary  org.apache.commons.math.linear.BiDiagonalTransformerTest  org.apache.commons.math.util.DefaultTransformerTest  org.apache.commons.math.linear.LUDecompositionImplTest  org.apache.commons.math.random.ValueServerTest  org.apache.commons.math.stat.descriptive.moment.MeanTest  org.apache.commons.math.util.BigRealFieldTest  org.apache.commons.math.linear.QRDecompositionImplTest  org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest  org.apache.commons.math.stat.descriptive.moment.VarianceTest  org.apache.commons.math.genetics.OnePointCrossoverTest  org.apache.commons.math.stat.ranking.NaturalRankingTest  org.apache.commons.math.optimization.linear.SimplexSolverTest  org.apache.commons.math.stat.descriptive.moment.FourthMomentTest  org.apache.commons.math.linear.BlockRealMatrixTest  org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest  org.apache.commons.math.random.MersenneTwisterTest  org.apache.commons.math.genetics.RandomKeyTest  org.apache.commons.math.stat.descriptive.summary.ProductTest  org.apache.commons.math.fraction.FractionTest  org.apache.commons.math.util.OpenIntToDoubleHashMapTest  org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest  org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest  org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest  org.apache.commons.math.genetics.ChromosomeTest  org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest  org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest  org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest  org.apache.commons.math.geometry.Vector3DTest  org.apache.commons.math.stat.descriptive.rank.MinTest  org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest  org.apache.commons.math.linear.FieldLUDecompositionImplTest  org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest  org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest  org.apache.commons.math.transform.FastHadamardTransformerTest  org.apache.commons.math.optimization.fitting.HarmonicFitterTest  org.apache.commons.math.stat.correlation.PearsonsCorrelationTest  org.apache.commons.math.random.GaussianRandomGeneratorTest  org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest  org.apache.commons.math.linear.FrenchRealVectorFormatTest  org.apache.commons.math.fraction.BigFractionTest  org.apache.commons.math.util.ContinuedFractionTest  org.apache.commons.math.util.TransformerMapTest  org.apache.commons.math.analysis.solvers.BisectionSolverTest  org.apache.commons.math.genetics.BinaryChromosomeTest  org.apache.commons.math.linear.BlockFieldMatrixTest  org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest  org.apache.commons.math.linear.SingularValueDecompositionImplTest  org.apache.commons.math.distribution.TDistributionTest  org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest  org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest  org.apache.commons.math.linear.InvalidMatrixExceptionTest  org.apache.commons.math.distribution.BinomialDistributionTest  org.apache.commons.math.linear.EigenSolverTest  org.apache.commons.math.stat.inference.TTestTest  org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest  org.apache.commons.math.random.UniformRandomGeneratorTest  org.apache.commons.math.stat.descriptive.rank.PercentileTest  org.apache.commons.math.analysis.solvers.RiddersSolverTest  org.apache.commons.math.linear.ArrayFieldVectorTest  org.apache.commons.math.ode.ContinuousOutputModelTest  org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest  org.apache.commons.math.optimization.linear.SimplexTableauTest  org.apache.commons.math.ConvergenceExceptionTest  org.apache.commons.math.util.ResizableDoubleArrayTest  org.apache.commons.math.complex.ComplexFormatTest  org.apache.commons.math.linear.RealMatrixImplTest  org.apache.commons.math.stat.descriptive.summary.SumTest  org.apache.commons.math.linear.SparseFieldVectorTest  org.apache.commons.math.genetics.ElitisticListPopulationTest  org.apache.commons.math.stat.descriptive.summary.SumSqTest  org.apache.commons.math.linear.SparseRealVectorTest  org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest  org.apache.commons.math.linear.EigenDecompositionImplTest  org.apache.commons.math.analysis.integration.SimpsonIntegratorTest  org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest  org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations  org.apache.commons.math.stat.descriptive.moment.KurtosisTest  org.apache.commons.math.transform.FastFourierTransformerTest  org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest  org.apache.commons.math.distribution.NormalDistributionTest  org.apache.commons.math.distribution.PoissonDistributionTest  org.apache.commons.math.geometry.Vector3DFormatTest  org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest  org.apache.commons.math.genetics.TournamentSelectionTest  org.apache.commons.math.optimization.general.MinpackTest  org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest  org.apache.commons.math.analysis.solvers.BrentSolverTest  org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest  org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest  org.apache.commons.math.estimation.WeightedMeasurementTest  org.apache.commons.math.stat.inference.ChiSquareTestTest  org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest  org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest  org.apache.commons.math.linear.MatrixIndexExceptionTest  org.apache.commons.math.genetics.BinaryMutationTest  org.apache.commons.math.fraction.FractionFormatTest  org.apache.commons.math.distribution.PascalDistributionTest  org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest  org.apache.commons.math.util.MathUtilsTest  org.apache.commons.math.complex.ComplexUtilsTest  org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest  org.apache.commons.math.optimization.direct.MultiDirectionalTest  org.apache.commons.math.genetics.FitnessCachingTest  org.apache.commons.math.linear.BigMatrixImplTest  org.apache.commons.math.stat.inference.ChiSquareFactoryTest  org.apache.commons.math.fraction.FractionFieldTest  org.apache.commons.math.stat.descriptive.InteractionTest  org.apache.commons.math.stat.correlation.CovarianceTest  org.apache.commons.math.optimization.univariate.BrentMinimizerTest  org.apache.commons.math.linear.QRSolverTest  org.apache.commons.math.linear.RealVectorFormatTest  org.apache.commons.math.analysis.solvers.LaguerreSolverTest  org.apache.commons.math.linear.CholeskySolverTest  org.apache.commons.math.distribution.WeibullDistributionTest  org.apache.commons.math.stat.StatUtilsTest  org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest  org.apache.commons.math.analysis.solvers.MullerSolverTest  org.apache.commons.math.linear.TriDiagonalTransformerTest  org.apache.commons.math.distribution.ChiSquareDistributionTest  org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest  org.apache.commons.math.transform.FastSineTransformerTest  org.apache.commons.math.stat.inference.OneWayAnovaTest  org.apache.commons.math.transform.FastCosineTransformerTest  org.apache.commons.math.ArgumentOutsideDomainExceptionTest  org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest  org.apache.commons.math.ode.nonstiff.EulerIntegratorTest  org.apache.commons.math.stat.descriptive.rank.MaxTest  org.apache.commons.math.complex.ComplexFieldTest  org.apache.commons.math.stat.descriptive.ListUnivariateImplTest  org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest  org.apache.commons.math.MaxIterationsExceededExceptionTest  org.apache.commons.math.linear.MatrixUtilsTest  org.apache.commons.math.optimization.direct.NelderMeadTest  org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest  org.apache.commons.math.geometry.RotationTest  org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest  org.apache.commons.math.linear.SingularValueSolverTest  org.apache.commons.math.genetics.RandomKeyMutationTest  org.apache.commons.math.util.BigRealTest  org.apache.commons.math.distribution.ExponentialDistributionTest  org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest  org.apache.commons.math.geometry.FrenchVector3DFormatTest  org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest  org.apache.commons.math.stat.regression.SimpleRegressionTest  org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest  org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest  org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest  org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest  org.apache.commons.math.linear.LUSolverTest  org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest  org.apache.commons.math.MathConfigurationExceptionTest  org.apache.commons.math.estimation.GaussNewtonEstimatorTest  org.apache.commons.math.genetics.ListPopulationTest  org.apache.commons.math.MathExceptionTest  org.apache.commons.math.distribution.CauchyDistributionTest  org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest  org.apache.commons.math.linear.SparseFieldMatrixTest  org.apache.commons.math.stat.descriptive.summary.SumLogTest  org.apache.commons.math.stat.FrequencyTest  org.apache.commons.math.stat.descriptive.moment.SecondMomentTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 2059] ,[]
The original fitness is : 1.0
----------------------------
---Configuration properties
p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
p:alternativecompliancelevel= 8
p:ignoredTestCases= 
p:workingDirectory= /Users/marekmazur/astor/./output_astor
p:manipulatesuper= false
p:validation= process
p:jvm4testexecution= /Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin
p:operatorspace= irr-statements
p:diffcontext= 0
p:binjavafolder= /target/classes/
p:synthesis_depth= 3
p:gzoltartestpackagetoexclude= junit.framework
p:skipfitnessinitialpopulation= false
p:evosuiteresultfolder= evosuite
p:flthreshold= 0
p:regressionforfaultlocalization= true
p:collectonlyusedmethod= false
p:folderDiff= ./diffSolutions
p:preservelinenumbers= true
p:tmax2= 513830
p:tmax1= 10000
p:probagenmutation= false
p:nomodificationconvergence= 100
p:diff_type= relative
p:nolog= False
p:targetelementprocessor= statements
p:srctestfolder= /src/test/
p:forceExecuteRegression= false
p:clusteringfilename= clustering.csv
p:failing= org.apache.commons.math.optimization.linear.SimplexSolverTest
p:logtestexecution= false
p:evo_buggy_class= true
p:numberExecutions= 1
p:maxnumbersolutions= 1000000
p:evo_affected_by_op= true
p:population= 1
p:maxCombinationVariableLimit= false
p:savesolution= true
p:javacompliancelevel= 8
p:uniqueoptogen= false
p:gzoltarpackagetonotinstrument= junit.framework
p:projectIdentifier= 
p:modificationpointnavigation= weight
p:stopfirst= true
p:multipointmodification= false
p:elementsToMutate= 10
p:jsonoutputname= astor_output
p:evoDSE= false
p:bintestfolder= /target/test-classes/
p:testbystep= false
p:version-location= ./math-version/
p:gzoltarVersion= 1.7.3
p:locationGzoltarJar= ./lib/
p:reintroduce= PARENTS:ORIGINAL
p:executorjar= ./lib/jtestex7.jar
p:maxGeneration= 1000000
p:max_synthesis_step= 10000
p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
p:maxVarCombination= 1000
p:includeZeros= false
p:maxtime= 60
p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
p:jvmversion= 1.8.0_202
p:commandTrunk= 50000
p:faultlocalization= flacoco
p:resetmodel= true
p:maxsuspcandidates= 1000
p:mode= jgenprog
p:learningdir= 
p:jvm4evosuitetestexecution= /Users/marekmazur/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin
p:filterfaultlocalization= true
p:mutationrate= 1 
p:pathToMVNRepository= 
p:resourcesfolder= /src/main/resources:/src/test/resources:
p:timezone= America/Los_Angeles
p:runjava7code= false
p:evoRunOnBuggyClass= true
p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
p:limitbysuspicious= true
p:logsattemps= true
p:dependenciespath= /Users/marekmazur/astor/examples/libs/junit-4.4.jar
p:packageToInstrument= org.apache.commons
p:skipfaultlocalization= false
p:scope= local
p:transformingredient= false
p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
p:maxnumvariablesperingredient= 10
p:parsesourcefromoriginal= true
p:pvariantfoldername= variant-
p:savespoonmodelondisk= false
p:srcjavafolder= /src/java/
p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
p:ignoreflakyinfl= false
p:cleantemplates= true
p:applyCrossover= false
p:maxmodificationpoints= 1000
p:duplicateingredientsinspace= false
p:metid= 0
p:continuewhenmodelfail= true
p:saveall= false
p:seed= 10
p:savecompletepatched= true
p:resetoperations= false
p:keepcomments= true
p:processoutputinfile= false
p:location= /Users/marekmazur/astor/defects4j/math-82
p:probabilistictransformation= true
p:overridemaxtime= true
p:outputjsonresult= true
p:allpoints= false
p:antipattern= false
p:bugId= 280
p:evosuitetimeout= 120
p:maxtimefactor= 10
p:nrPlaceholders= 1
p:forcesubprocesskilling= false
----------------------------
----Starting Solution Search
----------Running generation: 1, population size: 1

***** Generation 1 : 0
**Parent Variant: [Variant id: 1, #gens: 186, #ops: 0, parent:-]

--Child created id: 2
--Creating new operations for variant [Variant id: 2, #gens: 186, #ops: 0, parent:1]
---analyzing modificationPoint position: 134
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [matrix, artificialVar]
--> var from patch: matrix spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: artificialVar spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java154
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int row = getNumObjectiveFunctions() + i ` -topatch--> `matrix[0][getArtificialVariableOffset() + artificialVar] = 1` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 154, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int row = getNumObjectiveFunctions() + i ` -topatch--> `matrix[0][getArtificialVariableOffset() + artificialVar] = 1` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 2, #gens: 187, #ops: 1, parent:1] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 2
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-2/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 14] ,[]
-Valid?: |false|13|14|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(1): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int row = getNumObjectiveFunctions() + i ` -topatch--> `matrix[0][getArtificialVariableOffset() + artificialVar] = 1` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1(f=1.0), 2(f=13.0), )
Selected to next generation: IDs2--> (1(f=1.0), )
----------Running generation: 2, population size: 1

***** Generation 2 : 0
**Parent Variant: [Variant id: 3, #gens: 186, #ops: 0, parent:-]

--Child created id: 4
--Creating new operations for variant [Variant id: 4, #gens: 186, #ops: 0, parent:3]
---analyzing modificationPoint position: 119
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  // create a matrix of the correct size java.util.List<org.apache.commons.math.optimization.linear.Li[...]
---analyzing modificationPoint position: 40
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [java.lang.Double.MAX_VALUE]
--> var from patch: java.lang.Double.MAX_VALUE spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java77
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double minRatio = java.lang.Double.MAX_VALUE ` -topatch--> `double minRatio = java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 77, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double minRatio = java.lang.Double.MAX_VALUE ` -topatch--> `double minRatio = java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 4, #gens: 187, #ops: 1, parent:3] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 4, errors: [SimplexSolver.java:79: error: variable minRatio is already defined in method getPivotRow(int,org.apache.commons.math.optimization.linear.SimplexTableau)
	 */ 	private java.lang.Integer getPivotRow(final int col, final org.apache.commons.math.optimization.linear.SimplexTableau tableau) { 		double minRatio = java.lang.Double.MAX_VALUE; 		double minRatio = java.lang.Double.MAX_VALUE; 		java.lang.Integer minRatioPos = null;
	    	                                                                                                                                 		                                              		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(2): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double minRatio = java.lang.Double.MAX_VALUE ` -topatch--> `double minRatio = java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (3(f=1.0), 4(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (3(f=1.0), )
----------Running generation: 3, population size: 1

***** Generation 3 : 0
**Parent Variant: [Variant id: 5, #gens: 186, #ops: 0, parent:-]

--Child created id: 6
--Creating new operations for variant [Variant id: 6, #gens: 186, #ops: 0, parent:5]
---analyzing modificationPoint position: 124
---modifPoint 0 not mutation generated in  int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1
---analyzing modificationPoint position: 117
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 1 not mutation generated in  this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(createTableau(goalType == org[...]
---analyzing modificationPoint position: 91
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 2 not mutation generated in  row = i
---analyzing modificationPoint position: 156
---modifPoint 3 not mutation generated in  return count
---analyzing modificationPoint position: 98
location: SimplexTableau.java388
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -  (multiple * tableau.getEntry(subt[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 6, #gens: 185, #ops: 1, parent:5] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 6
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-6/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(3): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -  (multiple * tableau.getEntry(subt[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (5(f=1.0), 6(f=14.0), )
Selected to next generation: IDs2--> (5(f=1.0), )
----------Running generation: 4, population size: 1

***** Generation 4 : 0
**Parent Variant: [Variant id: 7, #gens: 186, #ops: 0, parent:-]

--Child created id: 8
--Creating new operations for variant [Variant id: 8, #gens: 186, #ops: 0, parent:7]
---analyzing modificationPoint position: 134
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [numDecisionVariables, numSlackVariables]
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numSlackVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java154
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int row = getNumObjectiveFunctions() + i ` -topatch--> `return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 154, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int row = getNumObjectiveFunctions() + i ` -topatch--> `return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 8, #gens: 187, #ops: 1, parent:7] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 8, errors: [SimplexTableau.java:514: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:514: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:514: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:514: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:514: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:514: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:516: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:516: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:516: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:516: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:516: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:516: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:516: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:518: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:518: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:519: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:520: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:520: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:521: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:521: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:522: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:523: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:523: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:523: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:524: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:524: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:524: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:524: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:524: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:524: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:537: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:537: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:537: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:537: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:537: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:537: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:541: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:541: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:545: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:545: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:553: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:553: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:553: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:553: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:562: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:562: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:562: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:562: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:562: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:566: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:566: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:570: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:570: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:574: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:574: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:579: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:579: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:589: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:589: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:594: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:594: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:598: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:598: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:602: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:602: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:606: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:606: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:608: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:608: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:611: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:618: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:618: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:618: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:618: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:618: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:618: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:627: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:627: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:627: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:627: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:627: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:627: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:627: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:627: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:627: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(4): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int row = getNumObjectiveFunctions() + i ` -topatch--> `return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (7(f=1.0), 8(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (7(f=1.0), )
----------Running generation: 5, population size: 1

***** Generation 5 : 0
**Parent Variant: [Variant id: 9, #gens: 186, #ops: 0, parent:-]

--Child created id: 10
--Creating new operations for variant [Variant id: 10, #gens: 186, #ops: 0, parent:9]
---analyzing modificationPoint position: 137
location: SimplexTableau.java166
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// RHS matrix[row][width - 1] = constraint.getValue() ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 10, #gens: 185, #ops: 1, parent:9] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 10
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-10/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 14] ,[]
-Valid?: |false|12|14|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(5): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// RHS matrix[row][width - 1] = constraint.getValue() ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (9(f=1.0), 10(f=12.0), )
Selected to next generation: IDs2--> (9(f=1.0), )
----------Running generation: 6, population size: 1

***** Generation 6 : 0
**Parent Variant: [Variant id: 11, #gens: 186, #ops: 0, parent:-]

--Child created id: 12
--Creating new operations for variant [Variant id: 12, #gens: 186, #ops: 0, parent:11]
---analyzing modificationPoint position: 92
---modifPoint 0 not mutation generated in  return row
---analyzing modificationPoint position: 164
Templates availables16
Attempts Base Ingredients  1 total 16
---modifPoint 1 not mutation generated in  if (data.length != n) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentExc[...]
---analyzing modificationPoint position: 43
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 2 not mutation generated in  final double rhs = tableau.getEntry(i, tableau.getWidth() - 1)
---analyzing modificationPoint position: 113
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 3 not mutation generated in  this.epsilon = epsilon
---analyzing modificationPoint position: 153
Templates availables3
Attempts Base Ingredients  1 total 3
---modifPoint 4 not mutation generated in  for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { [...]
---analyzing modificationPoint position: 179
Templates availables120
Attempts Base Ingredients  1 total 120
---modifPoint 5 not mutation generated in  for (int i = 0; i < data.length; ++i) { 	if (subMatrix[i].length != nCols) { 		throw org.apache.comm[...]
---analyzing modificationPoint position: 71
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 6 not mutation generated in  tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor)
---analyzing modificationPoint position: 30
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java50
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.epsilon = epsilon ` -topatch--> `throw new org.apache.commons.math.optimization.linear.UnboundedSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 50, pointed element: CtThrowImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.epsilon = epsilon ` -topatch--> `throw new org.apache.commons.math.optimization.linear.UnboundedSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 

--Summary Creation: for variant [Variant id: 12, #gens: 187, #ops: 1, parent:11] gen mutated: 1 , gen not mut: 7, gen not applied  0
-The child does NOT compile: 12, errors: [SimplexSolver.java:109: error: unreported exception org.apache.commons.math.optimization.linear.UnboundedSolutionException; must be caught or declared to be thrown
		throw new org.apache.commons.math.optimization.linear.UnboundedSolutionException();} 	/**
		^]
Ingredient counter is Zero
---Undoing: gnrtn(6): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.epsilon = epsilon ` -topatch--> `throw new org.apache.commons.math.optimization.linear.UnboundedSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (11(f=1.0), 12(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (11(f=1.0), )
----------Running generation: 7, population size: 1

***** Generation 7 : 0
**Parent Variant: [Variant id: 13, #gens: 186, #ops: 0, parent:-]

--Child created id: 14
--Creating new operations for variant [Variant id: 14, #gens: 186, #ops: 0, parent:13]
---analyzing modificationPoint position: 116
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 0 not mutation generated in  this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...]
---analyzing modificationPoint position: 89
location: SimplexTableau.java293
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = start; i < getHeight(); i++) { 	if (org.apache.commons.math.util.MathUtils.equals(getEn[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 14, #gens: 185, #ops: 1, parent:13] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 14
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-14/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(7): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = start; i < getHeight(); i++) { 	if (org.apache.commons.math.util.MathUtils.equals(getEn[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (13(f=1.0), 14(f=14.0), )
Selected to next generation: IDs2--> (13(f=1.0), )
----------Running generation: 8, population size: 1

***** Generation 8 : 0
**Parent Variant: [Variant id: 15, #gens: 186, #ops: 0, parent:-]

--Child created id: 16
--Creating new operations for variant [Variant id: 16, #gens: 186, #ops: 0, parent:15]
---analyzing modificationPoint position: 127
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions())
---analyzing modificationPoint position: 16
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  if (basicRows.contains(basicRow)) { 	// if multiple variables can take a given value 	// then we cho[...]
---analyzing modificationPoint position: 159
Templates availables259
Attempts Base Ingredients  1 total 259
---modifPoint 2 not mutation generated in  return org.apache.commons.math.util.MathUtils.equals(x, y) || (java.lang.Math.abs(y - x) <= eps)
---analyzing modificationPoint position: 171
Templates availables120
Attempts Base Ingredients  1 total 120
vars from patch [column]
--> var from patch: column spoon.support.reflect.code.CtVariableReadImpl
location: Array2DRowRealMatrix.java314
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (data == null) { 	if (row > 0) { 		throw org.apache.commons.math.MathRuntimeException.createIlleg[...] ` -topatch--> `throw org.apache.commons.math.MathRuntimeException.createIllegalStateException( "first {0} columns a[...]` (spoon.support.reflect.code.CtThrowImpl) 
---MP=org.apache.commons.math.linear.Array2DRowRealMatrix line: 314, pointed element: CtThrowImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (data == null) { 	if (row > 0) { 		throw org.apache.commons.math.MathRuntimeException.createIlleg[...] ` -topatch--> `throw org.apache.commons.math.MathRuntimeException.createIllegalStateException( "first {0} columns a[...]` (spoon.support.reflect.code.CtThrowImpl) 

--Summary Creation: for variant [Variant id: 16, #gens: 187, #ops: 1, parent:15] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 16
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-16/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(8): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (data == null) { 	if (row > 0) { 		throw org.apache.commons.math.MathRuntimeException.createIlleg[...] ` -topatch--> `throw org.apache.commons.math.MathRuntimeException.createIllegalStateException( "first {0} columns a[...]` (spoon.support.reflect.code.CtThrowImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (15(f=1.0), 16(f=14.0), )
Selected to next generation: IDs2--> (15(f=1.0), )
----------Running generation: 9, population size: 1

***** Generation 9 : 0
**Parent Variant: [Variant id: 17, #gens: 186, #ops: 0, parent:-]

--Child created id: 18
--Creating new operations for variant [Variant id: 18, #gens: 186, #ops: 0, parent:17]
---analyzing modificationPoint position: 97
location: SimplexTableau.java387
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow,[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 18, #gens: 185, #ops: 1, parent:17] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 18
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-18/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(9): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow,[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (17(f=1.0), 18(f=14.0), )
Selected to next generation: IDs2--> (17(f=1.0), )
----------Running generation: 10, population size: 1

***** Generation 10 : 0
**Parent Variant: [Variant id: 19, #gens: 186, #ops: 0, parent:-]

--Child created id: 20
--Creating new operations for variant [Variant id: 20, #gens: 186, #ops: 0, parent:19]
---analyzing modificationPoint position: 129
location: SimplexTableau.java144
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (!restrictToNonNegative) { 	matrix[zIndex][getSlackVariableOffset() - 1] =  	org.apache.commons.m[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 20, #gens: 185, #ops: 1, parent:19] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 20
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-20/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 6, was successful: false, cases executed: 14] ,[]
-Valid?: |false|6|14|[]|, fitness 6.0
Ingredient counter is Zero
---Undoing: gnrtn(10): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (!restrictToNonNegative) { 	matrix[zIndex][getSlackVariableOffset() - 1] =  	org.apache.commons.m[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (19(f=1.0), 20(f=6.0), )
Selected to next generation: IDs2--> (19(f=1.0), )
----------Running generation: 11, population size: 1

***** Generation 11 : 0
**Parent Variant: [Variant id: 21, #gens: 186, #ops: 0, parent:-]

--Child created id: 22
--Creating new operations for variant [Variant id: 22, #gens: 186, #ops: 0, parent:21]
---analyzing modificationPoint position: 41
---modifPoint 0 not mutation generated in  java.lang.Integer minRatioPos = null
---analyzing modificationPoint position: 81
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 1 not mutation generated in  checkVectorDimensions(v.length)
---analyzing modificationPoint position: 153
location: SimplexTableau.java235
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { [...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 22, #gens: 185, #ops: 1, parent:21] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 22
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-22/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 14] ,[]
-Valid?: |false|13|14|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(11): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { [...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (21(f=1.0), 22(f=13.0), )
Selected to next generation: IDs2--> (21(f=1.0), )
----------Running generation: 12, population size: 1

***** Generation 12 : 0
**Parent Variant: [Variant id: 23, #gens: 186, #ops: 0, parent:-]

--Child created id: 24
--Creating new operations for variant [Variant id: 24, #gens: 186, #ops: 0, parent:23]
---analyzing modificationPoint position: 133
---modifPoint 0 not mutation generated in  org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i)
---analyzing modificationPoint position: 67
Templates availables10
Attempts Base Ingredients  1 total 10
---modifPoint 1 not mutation generated in  // make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }
---analyzing modificationPoint position: 116
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 2 not mutation generated in  this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...]
---analyzing modificationPoint position: 177
Templates availables120
Attempts Base Ingredients  1 total 120
---modifPoint 3 not mutation generated in  if (nCols == 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException[...]
---analyzing modificationPoint position: 35
location: SimplexSolver.java62
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 24, #gens: 185, #ops: 1, parent:23] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 24
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-24/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(12): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (23(f=1.0), 24(f=14.0), )
Selected to next generation: IDs2--> (23(f=1.0), )
----------Running generation: 13, population size: 1

***** Generation 13 : 0
**Parent Variant: [Variant id: 25, #gens: 186, #ops: 0, parent:-]

--Child created id: 26
--Creating new operations for variant [Variant id: 26, #gens: 186, #ops: 0, parent:25]
---analyzing modificationPoint position: 168
Templates availables16
Attempts Base Ingredients  1 total 16
---modifPoint 0 not mutation generated in  return data[row][column]
---analyzing modificationPoint position: 124
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch []
location: SimplexTableau.java136
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1 ` -topatch--> `int height = getHeight() - 1` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 136, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1 ` -topatch--> `int height = getHeight() - 1` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 26, #gens: 186, #ops: 1, parent:25] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 26, errors: [SimplexTableau.java:317: error: illegal start of type
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		^, SimplexTableau.java:317: error: ';' expected
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		      ^, SimplexTableau.java:321: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	       ^, SimplexTableau.java:321: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	                               		                                          ^, SimplexTableau.java:325: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	       ^, SimplexTableau.java:325: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		^, SimplexTableau.java:325: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                      ^, SimplexTableau.java:325: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                        		                  ^, SimplexTableau.java:331: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                     ^, SimplexTableau.java:331: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                         ^, SimplexTableau.java:331: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                           		                                                                                                                                                           ^, SimplexTableau.java:335: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                ^, SimplexTableau.java:335: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                                                 		                                               ^, SimplexTableau.java:341: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                          ^, SimplexTableau.java:341: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		^, SimplexTableau.java:341: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		           ^, SimplexTableau.java:341: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				        ^, SimplexTableau.java:341: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				           		             ^, SimplexTableau.java:344: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                            ^, SimplexTableau.java:344: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                    ^, SimplexTableau.java:344: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			^, SimplexTableau.java:344: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			                         ^, SimplexTableau.java:350: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                         ^, SimplexTableau.java:350: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		^, SimplexTableau.java:350: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                   ^, SimplexTableau.java:350: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                     		           ^, SimplexTableau.java:356: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                            ^, SimplexTableau.java:356: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                                       		                              ^, SimplexTableau.java:362: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                       ^, SimplexTableau.java:362: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                                  		                               ^, SimplexTableau.java:368: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                            ^, SimplexTableau.java:368: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		^, SimplexTableau.java:368: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		^, SimplexTableau.java:368: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                    ^, SimplexTableau.java:368: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                     ^, SimplexTableau.java:368: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				        ^, SimplexTableau.java:368: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				            ^, SimplexTableau.java:368: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				               		           ^, SimplexTableau.java:370: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			       ^, SimplexTableau.java:370: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		^, SimplexTableau.java:370: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		^, SimplexTableau.java:370: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		^, SimplexTableau.java:370: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                ^, SimplexTableau.java:370: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                            ^, SimplexTableau.java:370: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                ^, SimplexTableau.java:370: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                 ^, SimplexTableau.java:370: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                      ^, SimplexTableau.java:370: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                       ^, SimplexTableau.java:370: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		^, SimplexTableau.java:370: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		                                ^, SimplexTableau.java:379: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                             ^, SimplexTableau.java:379: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                 ^, SimplexTableau.java:379: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                      ^, SimplexTableau.java:379: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:383: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		^, SimplexTableau.java:383: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		^, SimplexTableau.java:383: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		^, SimplexTableau.java:383: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		^, SimplexTableau.java:383: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                ^, SimplexTableau.java:383: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                         ^, SimplexTableau.java:383: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                                			                                                                                     			^, SimplexTableau.java:390: error: class, interface, or enum expected
	 * @param dividendRow
	          ^, SimplexTableau.java:392: error: class, interface, or enum expected
	 * @param divisor
	          ^, SimplexTableau.java:394: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                               ^, SimplexTableau.java:394: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                      ^, SimplexTableau.java:394: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                ^, SimplexTableau.java:394: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                ^, SimplexTableau.java:394: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                       			                                                                             ^, SimplexTableau.java:407: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                 ^, SimplexTableau.java:407: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                       ^, SimplexTableau.java:407: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                ^, SimplexTableau.java:407: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                ^, SimplexTableau.java:407: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                ^, SimplexTableau.java:407: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                       			                                                                                                                   ^, SimplexTableau.java:411: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                ^, SimplexTableau.java:411: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                                 		                                    ^, SimplexTableau.java:415: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                ^, SimplexTableau.java:415: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                                  		                                 ^, SimplexTableau.java:423: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                ^, SimplexTableau.java:423: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                      ^, SimplexTableau.java:423: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                     ^, SimplexTableau.java:423: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                                   		                                     ^, SimplexTableau.java:432: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                ^, SimplexTableau.java:432: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                    ^, SimplexTableau.java:432: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                   ^, SimplexTableau.java:432: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                     ^, SimplexTableau.java:432: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                     		                                     ^, SimplexTableau.java:436: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;}
	    	                ^, SimplexTableau.java:436: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;}
	    	                                               		                                                         ^, SimplexTableau.java:441: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() {
	    	                ^, SimplexTableau.java:443: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:449: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() {
	    	                ^, SimplexTableau.java:451: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:458: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() {
	    	                ^, SimplexTableau.java:460: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:472: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() {
	    	                ^, SimplexTableau.java:474: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:481: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() {
	    	                ^, SimplexTableau.java:483: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:489: error: class, interface, or enum expected
	 */ 	protected final int getNumSlackVariables() {
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(13): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1 ` -topatch--> `int height = getHeight() - 1` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (25(f=1.0), 26(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (25(f=1.0), )
----------Running generation: 14, population size: 1

***** Generation 14 : 0
**Parent Variant: [Variant id: 27, #gens: 186, #ops: 0, parent:-]

--Child created id: 28
--Creating new operations for variant [Variant id: 28, #gens: 186, #ops: 0, parent:27]
---analyzing modificationPoint position: 76
Templates availables68
Attempts Base Ingredients  1 total 68
vars from patch []
location: MathUtils.java370
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return -1 ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.util.MathUtils line: 370, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return -1 ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 28, #gens: 186, #ops: 1, parent:27] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 28, errors: [MathUtils.java:463: error: incompatible types: boolean cannot be converted to int
			return false;} 		return 1;} 	/**
			       ^]
Ingredient counter is Zero
---Undoing: gnrtn(14): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return -1 ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (27(f=1.0), 28(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (27(f=1.0), )
----------Running generation: 15, population size: 1

***** Generation 15 : 0
**Parent Variant: [Variant id: 29, #gens: 186, #ops: 0, parent:-]

--Child created id: 30
--Creating new operations for variant [Variant id: 30, #gens: 186, #ops: 0, parent:29]
---analyzing modificationPoint position: 166
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 0 not mutation generated in  return data.length
---analyzing modificationPoint position: 63
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java116
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `// set the rest of the pivot column to 0 for (int i = 0; i < tableau.getHeight(); i++) { 	if (i != p[...] ` -topatch--> `if (tableau.getNumArtificialVariables() > 0) { 	return false; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 116, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `// set the rest of the pivot column to 0 for (int i = 0; i < tableau.getHeight(); i++) { 	if (i != p[...] ` -topatch--> `if (tableau.getNumArtificialVariables() > 0) { 	return false; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 30, #gens: 187, #ops: 1, parent:29] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 30, errors: [SimplexSolver.java:149: error: incompatible types: unexpected return value
			return false;
			       ^]
Ingredient counter is Zero
---Undoing: gnrtn(15): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `// set the rest of the pivot column to 0 for (int i = 0; i < tableau.getHeight(); i++) { 	if (i != p[...] ` -topatch--> `if (tableau.getNumArtificialVariables() > 0) { 	return false; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (29(f=1.0), 30(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (29(f=1.0), )
----------Running generation: 16, population size: 1

***** Generation 16 : 0
**Parent Variant: [Variant id: 31, #gens: 186, #ops: 0, parent:-]

--Child created id: 32
--Creating new operations for variant [Variant id: 32, #gens: 186, #ops: 0, parent:31]
---analyzing modificationPoint position: 90
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) [...]
---analyzing modificationPoint position: 180
location: Array2DRowRealMatrix.java336
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (subMatrix[i].length != nCols) { 	throw org.apache.commons.math.MathRuntimeException.createIllega[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 32, #gens: 185, #ops: 1, parent:31] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 32
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-32/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(16): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (subMatrix[i].length != nCols) { 	throw org.apache.commons.math.MathRuntimeException.createIllega[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (31(f=1.0), 32(f=1.0), )
Selected to next generation: IDs2--> (31(f=1.0), )
----------Running generation: 17, population size: 1

***** Generation 17 : 0
**Parent Variant: [Variant id: 33, #gens: 186, #ops: 0, parent:-]

--Child created id: 34
--Creating new operations for variant [Variant id: 34, #gens: 186, #ops: 0, parent:33]
---analyzing modificationPoint position: 139
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java169
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...] ` -topatch--> `return tableau.getColumnDimension()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 169, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...] ` -topatch--> `return tableau.getColumnDimension()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 34, #gens: 187, #ops: 1, parent:33] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 34, errors: [SimplexTableau.java:467: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:467: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:467: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:467: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:467: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:467: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:469: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:469: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:469: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:469: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:469: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:469: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:469: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:471: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:471: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:472: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:473: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:473: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:474: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:474: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:475: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:476: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:476: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:476: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:477: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:477: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:477: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:477: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:477: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:477: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:490: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:490: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:490: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:490: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:490: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:490: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:494: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:494: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:498: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:498: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:506: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:506: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:506: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:506: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:515: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:515: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:515: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:515: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:515: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:519: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:519: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:523: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:523: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:527: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:527: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:532: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:532: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:542: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:542: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:547: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:547: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:551: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:551: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:555: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:555: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:559: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:559: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:561: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:561: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:564: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:571: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:571: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:571: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:571: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:571: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:571: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:580: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:580: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:580: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:580: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:580: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:580: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:580: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:580: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:580: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(17): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...] ` -topatch--> `return tableau.getColumnDimension()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (33(f=1.0), 34(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (33(f=1.0), )
----------Running generation: 18, population size: 1

***** Generation 18 : 0
**Parent Variant: [Variant id: 35, #gens: 186, #ops: 0, parent:-]

--Child created id: 36
--Creating new operations for variant [Variant id: 36, #gens: 186, #ops: 0, parent:35]
---analyzing modificationPoint position: 81
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 0 not mutation generated in  checkVectorDimensions(v.length)
---analyzing modificationPoint position: 98
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java388
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -  (multiple * tableau.getEntry(subt[...] ` -topatch--> `int height = getHeight() - 1` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 388, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -  (multiple * tableau.getEntry(subt[...] ` -topatch--> `int height = getHeight() - 1` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 36, #gens: 187, #ops: 1, parent:35] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 36
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-36/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(18): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -  (multiple * tableau.getEntry(subt[...] ` -topatch--> `int height = getHeight() - 1` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (35(f=1.0), 36(f=1.0), )
Selected to next generation: IDs2--> (35(f=1.0), )
----------Running generation: 19, population size: 1

***** Generation 19 : 0
**Parent Variant: [Variant id: 37, #gens: 186, #ops: 0, parent:-]

--Child created id: 38
--Creating new operations for variant [Variant id: 38, #gens: 186, #ops: 0, parent:37]
---analyzing modificationPoint position: 28
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  while (!isOptimal(tableau)) { 	doIteration(tableau); } 
---analyzing modificationPoint position: 145
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch []
location: SimplexTableau.java198
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...] ` -topatch--> `// initialize the constraint rows int slackVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 198, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...] ` -topatch--> `// initialize the constraint rows int slackVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 38, #gens: 186, #ops: 1, parent:37] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 38, errors: [SimplexTableau.java:201: error: cannot find symbol
			normalized.add(normalize(constraint));
			^
  symbol:   variable normalized
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:203: error: cannot find symbol
		return normalized;
		       ^
  symbol:   variable normalized
  location: class org.apache.commons.math.optimization.linear.SimplexTableau]
Ingredient counter is Zero
---Undoing: gnrtn(19): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...] ` -topatch--> `// initialize the constraint rows int slackVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (37(f=1.0), 38(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (37(f=1.0), )
----------Running generation: 20, population size: 1

***** Generation 20 : 0
**Parent Variant: [Variant id: 39, #gens: 186, #ops: 0, parent:-]

--Child created id: 40
--Creating new operations for variant [Variant id: 40, #gens: 186, #ops: 0, parent:39]
---analyzing modificationPoint position: 32
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java60
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer minPos = null ` -topatch--> `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 60, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer minPos = null ` -topatch--> `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 40, #gens: 187, #ops: 1, parent:39] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 40, errors: [SimplexSolver.java:170: error: incompatible types: missing return value
			return;
			^]
Ingredient counter is Zero
---Undoing: gnrtn(20): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer minPos = null ` -topatch--> `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (39(f=1.0), 40(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (39(f=1.0), )
----------Running generation: 21, population size: 1

***** Generation 21 : 0
**Parent Variant: [Variant id: 41, #gens: 186, #ops: 0, parent:-]

--Child created id: 42
--Creating new operations for variant [Variant id: 42, #gens: 186, #ops: 0, parent:41]
---analyzing modificationPoint position: 53
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [maxIterations]
--> var from patch: maxIterations spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLinearOptimizer.java99
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `return maxIterations` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 99, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `return maxIterations` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 42, #gens: 187, #ops: 1, parent:41] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 42, errors: [AbstractLinearOptimizer.java:100: error: incompatible types: int cannot be converted to org.apache.commons.math.optimization.RealPointValuePair
		this.constraints = constraints; 		return maxIterations;
		                                		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(21): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `return maxIterations` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (41(f=1.0), 42(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (41(f=1.0), )
----------Running generation: 22, population size: 1

***** Generation 22 : 0
**Parent Variant: [Variant id: 43, #gens: 186, #ops: 0, parent:-]

--Child created id: 44
--Creating new operations for variant [Variant id: 44, #gens: 186, #ops: 0, parent:43]
---analyzing modificationPoint position: 103
Templates availables2
Attempts Base Ingredients  1 total 2
vars from patch [this.constantTerm]
--> var from patch: this.constantTerm spoon.support.reflect.code.CtFieldWriteImpl
SameName: double constantTerm
SameName: double constantTerm
Transforming shadowed variable in constantTerm = constantTerm
location: LinearObjectiveFunction.java66
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.coefficients = coefficients ` -topatch--> `constantTerm = constantTerm` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearObjectiveFunction line: 66, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.coefficients = coefficients ` -topatch--> `constantTerm = constantTerm` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 44, #gens: 186, #ops: 1, parent:43] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 44, errors: [LinearObjectiveFunction.java:69: error: variable coefficients might not have been initialized
	 */ 	public LinearObjectiveFunction(org.apache.commons.math.linear.RealVector coefficients, double constantTerm) { 		constantTerm = constantTerm; 		this.constantTerm = constantTerm;}
	    	                                                                                                              		                             		                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(22): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.coefficients = coefficients ` -topatch--> `constantTerm = constantTerm` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (43(f=1.0), 44(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (43(f=1.0), )
----------Running generation: 23, population size: 1

***** Generation 23 : 0
**Parent Variant: [Variant id: 45, #gens: 186, #ops: 0, parent:-]

--Child created id: 46
--Creating new operations for variant [Variant id: 46, #gens: 186, #ops: 0, parent:45]
---analyzing modificationPoint position: 70
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRo[...]
---analyzing modificationPoint position: 53
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [this.maxIterations]
--> var from patch: this.maxIterations spoon.support.reflect.code.CtFieldWriteImpl
location: AbstractLinearOptimizer.java99
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 99, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 46, #gens: 187, #ops: 1, parent:45] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 46
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-46/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(23): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (45(f=1.0), 46(f=1.0), )
Selected to next generation: IDs2--> (45(f=1.0), )
----------Running generation: 24, population size: 1

***** Generation 24 : 0
**Parent Variant: [Variant id: 47, #gens: 186, #ops: 0, parent:-]

--Child created id: 48
--Creating new operations for variant [Variant id: 48, #gens: 186, #ops: 0, parent:47]
---analyzing modificationPoint position: 178
Templates availables12
Attempts Base Ingredients  1 total 12
---modifPoint 0 not mutation generated in  data = new double[subMatrix.length][nCols]
---analyzing modificationPoint position: 29
location: SimplexSolver.java42
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 48, #gens: 185, #ops: 1, parent:47] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 48, errors: [SimplexSolver.java:44: error: variable epsilon might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(24): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (47(f=1.0), 48(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (47(f=1.0), )
----------Running generation: 25, population size: 1

***** Generation 25 : 0
**Parent Variant: [Variant id: 49, #gens: 186, #ops: 0, parent:-]

--Child created id: 50
--Creating new operations for variant [Variant id: 50, #gens: 186, #ops: 0, parent:49]
---analyzing modificationPoint position: 182
Templates availables120
Attempts Base Ingredients  1 total 120
---modifPoint 0 not mutation generated in  setSubMatrix(in, 0, 0)
---analyzing modificationPoint position: 107
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 1 not mutation generated in  this.coefficients = coefficients
---analyzing modificationPoint position: 143
Templates availables8
Attempts Base Ingredients  1 total 8
vars from patch [coefficients]
--> var from patch: coefficients spoon.support.reflect.code.CtFieldReadImpl
location: LinearConstraint.java184
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return value ` -topatch--> `return coefficients` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearConstraint line: 184, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return value ` -topatch--> `return coefficients` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 50, #gens: 186, #ops: 1, parent:49] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 50, errors: [LinearConstraint.java:184: error: incompatible types: org.apache.commons.math.linear.RealVector cannot be converted to double
	 */ 	public double getValue() { 		return coefficients;
	    	                           		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(25): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return value ` -topatch--> `return coefficients` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (49(f=1.0), 50(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (49(f=1.0), )
----------Running generation: 26, population size: 1

***** Generation 26 : 0
**Parent Variant: [Variant id: 51, #gens: 186, #ops: 0, parent:-]

--Child created id: 52
--Creating new operations for variant [Variant id: 52, #gens: 186, #ops: 0, parent:51]
---analyzing modificationPoint position: 73
Templates availables259
Attempts Base Ingredients  1 total 259
vars from patch [x]
--> var from patch: x spoon.support.reflect.code.CtVariableReadImpl
location: MathUtils.java367
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.equals(x, y, eps)) { 	return 0; } else if (x < y) { 	retu[...] ` -topatch--> `return x` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.util.MathUtils line: 367, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.equals(x, y, eps)) { 	return 0; } else if (x < y) { 	retu[...] ` -topatch--> `return x` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 52, #gens: 187, #ops: 1, parent:51] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 52, errors: [MathUtils.java:1178: error: illegal start of type
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		^, MathUtils.java:1178: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		     ^, MathUtils.java:1178: error: ';' expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		        ^, MathUtils.java:1178: error: illegal start of type
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		           ^, MathUtils.java:1178: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		            ^, MathUtils.java:1178: error: ';' expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		              ^, MathUtils.java:1178: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                            ^, MathUtils.java:1178: error: illegal start of type
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                             ^, MathUtils.java:1178: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                                                                 ^, MathUtils.java:1178: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                                                                    ^, MathUtils.java:1179: error: class, interface, or enum expected
		do { 			/* assert u<0 && v<0; */ 			// B4/B3: cast out twos from t.
		^, MathUtils.java:1182: error: class, interface, or enum expected
			if (t > 0) { 				u = -t;} else { 				v = t;} 			// B6/B3. at this point both u and v should be odd. 			t = (v - u) / 2; 			// |u| larger: t positive (replace u) 			// |v| larger: t negative (replace v)} while (t != 0 ); 		return (-u) * (1 << k);// gcd is u*2^k
			             				       ^, MathUtils.java:1182: error: class, interface, or enum expected
			if (t > 0) { 				u = -t;} else { 				v = t;} 			// B6/B3. at this point both u and v should be odd. 			t = (v - u) / 2; 			// |u| larger: t positive (replace u) 			// |v| larger: t negative (replace v)} while (t != 0 ); 		return (-u) * (1 << k);// gcd is u*2^k
			             				                				      ^, MathUtils.java:1189: error: class, interface, or enum expected
	 */ 	public static int hash(double value) { 		return new java.lang.Double(value).hashCode();} 	/**
	    	              ^, MathUtils.java:1189: error: class, interface, or enum expected
	 */ 	public static int hash(double value) { 		return new java.lang.Double(value).hashCode();} 	/**
	    	                                       		                                              ^, MathUtils.java:1196: error: class, interface, or enum expected
	 */ 	public static int hash(double[] value) { 		return java.util.Arrays.hashCode(value);} 	/**
	    	              ^, MathUtils.java:1196: error: class, interface, or enum expected
	 */ 	public static int hash(double[] value) { 		return java.util.Arrays.hashCode(value);} 	/**
	    	                                         		                                        ^, MathUtils.java:1203: error: class, interface, or enum expected
	 */ 	public static byte indicator(final byte x) { 		return x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	/**
	    	              ^, MathUtils.java:1203: error: class, interface, or enum expected
	 */ 	public static byte indicator(final byte x) { 		return x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	/**
	    	                                   ^, MathUtils.java:1203: error: class, interface, or enum expected
	 */ 	public static byte indicator(final byte x) { 		return x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	/**
	    	                                             		                                                                                                                                              ^, MathUtils.java:1211: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	              ^, MathUtils.java:1211: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	                                     ^, MathUtils.java:1211: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	                                                 		                                 			                            ^, MathUtils.java:1211: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	                                                 		                                 			                              		                             ^, MathUtils.java:1218: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	              ^, MathUtils.java:1218: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	                                    ^, MathUtils.java:1218: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	                                               		                                			                           ^, MathUtils.java:1218: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	                                               		                                			                             		                                ^, MathUtils.java:1224: error: class, interface, or enum expected
	 */ 	public static int indicator(final int x) { 		return x >= 0 ? 1 : -1;} 	/**
	    	              ^, MathUtils.java:1224: error: class, interface, or enum expected
	 */ 	public static int indicator(final int x) { 		return x >= 0 ? 1 : -1;} 	/**
	    	                                  ^, MathUtils.java:1224: error: class, interface, or enum expected
	 */ 	public static int indicator(final int x) { 		return x >= 0 ? 1 : -1;} 	/**
	    	                                           		                       ^, MathUtils.java:1230: error: class, interface, or enum expected
	 */ 	public static long indicator(final long x) { 		return x >= 0L ? 1L : -1L;} 	/**
	    	              ^, MathUtils.java:1230: error: class, interface, or enum expected
	 */ 	public static long indicator(final long x) { 		return x >= 0L ? 1L : -1L;} 	/**
	    	                                   ^, MathUtils.java:1230: error: class, interface, or enum expected
	 */ 	public static long indicator(final long x) { 		return x >= 0L ? 1L : -1L;} 	/**
	    	                                             		                          ^, MathUtils.java:1237: error: class, interface, or enum expected
	 */ 	public static short indicator(final short x) { 		return x >= org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} 	/**
	    	              ^, MathUtils.java:1237: error: class, interface, or enum expected
	 */ 	public static short indicator(final short x) { 		return x >= org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} 	/**
	    	                                    ^, MathUtils.java:1237: error: class, interface, or enum expected
	 */ 	public static short indicator(final short x) { 		return x >= org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} 	/**
	    	                                               		                                                                                                                                              ^, MathUtils.java:1261: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	              ^, MathUtils.java:1261: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			         ^, MathUtils.java:1261: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			           		                                                                                                                                           		^, MathUtils.java:1261: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			           		                                                                                                                                           		                                          			                                                                 ^, MathUtils.java:1261: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			           		                                                                                                                                           		                                          			                                                                   		           ^, MathUtils.java:1278: error: class, interface, or enum expected
	 */ 	public static double log(double base, double x) { 		return java.lang.Math.log(x) / java.lang.Math.log(base);} 	/**
	    	              ^, MathUtils.java:1278: error: class, interface, or enum expected
	 */ 	public static double log(double base, double x) { 		return java.lang.Math.log(x) / java.lang.Math.log(base);} 	/**
	    	                                                  		                                                        ^, MathUtils.java:1290: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	              ^, MathUtils.java:1290: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	                                              		                                      		^, MathUtils.java:1290: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	                                              		                                      		                                                                              			                                                         ^, MathUtils.java:1290: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	                                              		                                      		                                                                              			                                                           		                   ^, MathUtils.java:1302: error: class, interface, or enum expected
	 */ 	public static long mulAndCheck(long a, long b) { 		long ret; 		java.lang.String msg = "overflow: multiply"; 		if (a > b) { 			// use symmetry to reduce boundary cases 			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);} else if (a < 0) { 			if (b < 0) { 				// check for positive overflow with negative a, negative b
	    	              ^, MathUtils.java:1302: error: class, interface, or enum expected
	 */ 	public static long mulAndCheck(long a, long b) { 		long ret; 		java.lang.String msg = "overflow: multiply"; 		if (a > b) { 			// use symmetry to reduce boundary cases 			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);} else if (a < 0) { 			if (b < 0) { 				// check for positive overflow with negative a, negative b
	    	                                                 		          		^, MathUtils.java:1302: error: class, interface, or enum expected
	 */ 	public static long mulAndCheck(long a, long b) { 		long ret; 		java.lang.String msg = "overflow: multiply"; 		if (a > b) { 			// use symmetry to reduce boundary cases 			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);} else if (a < 0) { 			if (b < 0) { 				// check for positive overflow with negative a, negative b
	    	                                                 		          		                                             		^, MathUtils.java:1303: error: class, interface, or enum expected
				if (a >= (java.lang.Long.MAX_VALUE / b)) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else if (b > 0) { 				// check for negative overflow with negative a, positive b
				                                           					            ^, MathUtils.java:1303: error: class, interface, or enum expected
				if (a >= (java.lang.Long.MAX_VALUE / b)) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else if (b > 0) { 				// check for negative overflow with negative a, positive b
				                                           					                     					                                             ^, MathUtils.java:1304: error: class, interface, or enum expected
				if ((java.lang.Long.MIN_VALUE / b) <= a) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else { 				// assert b == 0 				ret = 0;}} else if (a > 0) { 			// assert a > 0 			// assert b > 0 			// check for positive overflow with positive a, positive b
				                                           					            ^, MathUtils.java:1304: error: class, interface, or enum expected
				if ((java.lang.Long.MIN_VALUE / b) <= a) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else { 				// assert b == 0 				ret = 0;}} else if (a > 0) { 			// assert a > 0 			// assert b > 0 			// check for positive overflow with positive a, positive b
				                                           					                     					                                             ^, MathUtils.java:1305: error: class, interface, or enum expected
			if (a <= (java.lang.Long.MAX_VALUE / b)) { 				ret = a * b;} else { 				throw new java.lang.ArithmeticException(msg);}} else { 			// assert a == 0 			ret = 0;} 		return ret;} 	/**
			                                           				            ^, MathUtils.java:1305: error: class, interface, or enum expected
			if (a <= (java.lang.Long.MAX_VALUE / b)) { 				ret = a * b;} else { 				throw new java.lang.ArithmeticException(msg);}} else { 			// assert a == 0 			ret = 0;} 		return ret;} 	/**
			                                           				                     				                                             ^, MathUtils.java:1311: error: class, interface, or enum expected
	 * <code>d</code> is returned; otherwise the largest representable number
	                               ^, MathUtils.java:1316: error: class, interface, or enum expected
	 * @param d
	          ^, MathUtils.java:1318: error: class, interface, or enum expected
	 * @param direction
	          ^, MathUtils.java:1321: error: <identifier> expected
	 * @return the next machine representable number in the specified direction
	    ^, MathUtils.java:1321: error: class, interface, or enum expected
	 * @return the next machine representable number in the specified direction
	           ^, MathUtils.java:1322: error: class, interface, or enum expected
	 * @since 1.2
	          ^, MathUtils.java:1323: error: class, interface, or enum expected
	 */ 	public static double nextAfter(double d, double direction) { 		// handling of some important special cases
	    	              ^, MathUtils.java:1324: error: class, interface, or enum expected
		if (java.lang.Double.isNaN(d) || java.lang.Double.isInfinite(d)) { 			return d;} else if (d == 0) { 			return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;} 		// special cases MAX_VALUE to infinity and  MIN_VALUE to 0 		// are handled just as normal numbers 		// split the double in raw components 		long bits = java.lang.Double.doubleToLongBits(d); 		long sign = bits & 0x8000000000000000L; 		long exponent = bits & 0x7ff0000000000000L; 		long mantissa = bits & 0xfffffffffffffL; 		if ((d * (direction - d)) >= 0) { 			// we should increase the mantissa
		                                                                   			         ^, MathUtils.java:1324: error: class, interface, or enum expected
		if (java.lang.Double.isNaN(d) || java.lang.Double.isInfinite(d)) { 			return d;} else if (d == 0) { 			return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;} 		// special cases MAX_VALUE to infinity and  MIN_VALUE to 0 		// are handled just as normal numbers 		// split the double in raw components 		long bits = java.lang.Double.doubleToLongBits(d); 		long sign = bits & 0x8000000000000000L; 		long exponent = bits & 0x7ff0000000000000L; 		long mantissa = bits & 0xfffffffffffffL; 		if ((d * (direction - d)) >= 0) { 			// we should increase the mantissa
		                                                                   			                              			                                                                                ^, MathUtils.java:1325: error: class, interface, or enum expected
			if (mantissa == 0xfffffffffffffL) { 				return java.lang.Double.longBitsToDouble(sign | (exponent + 0x10000000000000L));} else { 				return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa + 1));}} else // we should decrease the mantissa
			                                    				                                                                                ^, MathUtils.java:1325: error: class, interface, or enum expected
			if (mantissa == 0xfffffffffffffL) { 				return java.lang.Double.longBitsToDouble(sign | (exponent + 0x10000000000000L));} else { 				return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa + 1));}} else // we should decrease the mantissa
			                                    				                                                                                         				                                                                             ^, MathUtils.java:1326: error: class, interface, or enum expected
		if (mantissa == 0L) { 			return java.lang.Double.longBitsToDouble((sign | (exponent - 0x10000000000000L)) | 0xfffffffffffffL);} else { 			return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa - 1));}} 	/**
		                      			                                                                                                     ^, MathUtils.java:1326: error: class, interface, or enum expected
		if (mantissa == 0L) { 			return java.lang.Double.longBitsToDouble((sign | (exponent - 0x10000000000000L)) | 0xfffffffffffffL);} else { 			return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa - 1));}} 	/**
		                      			                                                                                                              			                                                                             ^, MathUtils.java:1336: error: class, interface, or enum expected
	 */ 	public static double scalb(final double d, final int scaleFactor) { 		// handling of some important special cases
	    	              ^, MathUtils.java:1336: error: class, interface, or enum expected
	 */ 	public static double scalb(final double d, final int scaleFactor) { 		// handling of some important special cases
	    	                                 ^, MathUtils.java:1336: error: class, interface, or enum expected
	 */ 	public static double scalb(final double d, final int scaleFactor) { 		// handling of some important special cases
	    	                                                 ^, MathUtils.java:1337: error: class, interface, or enum expected
		if (((d == 0) || java.lang.Double.isNaN(d)) || java.lang.Double.isInfinite(d)) { 			return d;} 		// split the double in raw components 		final long bits = java.lang.Double.doubleToLongBits(d); 		final long exponent = bits & 0x7ff0000000000000L; 		final long rest = bits & 0x800fffffffffffffL; 		// shift the exponent 		final long newBits = rest | (exponent + (((long) (scaleFactor)) << 52)); 		return java.lang.Double.longBitsToDouble(newBits);} 	/**
		                                                                                 			         ^, MathUtils.java:1341: error: class, interface, or enum expected
	 *   <li>normalize an angle between 0 and 2&pi;:<br/>
	                                               ^, MathUtils.java:1342: error: class, interface, or enum expected
	 *       <code>a = MathUtils.normalizeAngle(a, Math.PI);</code></li>
	                                                        ^, MathUtils.java:1343: error: class, interface, or enum expected
	 *   <li>normalize an angle between -&pi; and +&pi;<br/>
	                                          ^, MathUtils.java:1343: error: class, interface, or enum expected
	 *   <li>normalize an angle between -&pi; and +&pi;<br/>
	                                                   ^, MathUtils.java:1344: error: class, interface, or enum expected
	 *       <code>a = MathUtils.normalizeAngle(a, 0.0);</code></li>
	                                                    ^, MathUtils.java:1346: error: class, interface, or enum expected
	 *       <code>angle = MathUtils.normalizeAngle(end, start) - start;</code></li>
	                                                                    ^, MathUtils.java:1348: error: class, interface, or enum expected
	 * <p>Note that due to numerical accuracy and since &pi; cannot be represented
	                                                         ^, MathUtils.java:1352: error: class, interface, or enum expected
	 * @param a
	          ^, MathUtils.java:1354: error: class, interface, or enum expected
	 * @param center
	          ^, MathUtils.java:1355: error: class, interface, or enum expected
	 * 		center of the desired 2&pi; interval for the result
	   		                            ^, MathUtils.java:1356: error: <identifier> expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	    ^, MathUtils.java:1356: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	           ^, MathUtils.java:1356: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                    ^, MathUtils.java:1356: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                   ^, MathUtils.java:1356: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                       ^, MathUtils.java:1356: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                                  ^, MathUtils.java:1356: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                                      ^, MathUtils.java:1357: error: class, interface, or enum expected
	 * @since 1.2
	 ^, MathUtils.java:1357: error: class, interface, or enum expected
	 * @since 1.2
	          ^, MathUtils.java:1358: error: class, interface, or enum expected
	 */ 	public static double normalizeAngle(double a, double center) { 		return a - (org.apache.commons.math.util.MathUtils.TWO_PI * java.lang.Math.floor(((a + java.lang.Math.PI) - center) / org.apache.commons.math.util.MathUtils.TWO_PI));} 	/**
	    	              ^, MathUtils.java:1358: error: class, interface, or enum expected
	 */ 	public static double normalizeAngle(double a, double center) { 		return a - (org.apache.commons.math.util.MathUtils.TWO_PI * java.lang.Math.floor(((a + java.lang.Math.PI) - center) / org.apache.commons.math.util.MathUtils.TWO_PI));} 	/**
	    	                                                               		                                                                                                                                                                      ^, MathUtils.java:1368: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale) { 		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} 	/**
	    	              ^, MathUtils.java:1368: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale) { 		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} 	/**
	    	                                                  		                                                                                                  ^, MathUtils.java:1382: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale, int roundingMethod) { 		try { 			return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { 			if (java.lang.Double.isInfinite(x)) { 				return x;} else { 				return java.lang.Double.NaN;}}} 	/**
	    	              ^, MathUtils.java:1382: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale, int roundingMethod) { 		try { 			return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { 			if (java.lang.Double.isInfinite(x)) { 				return x;} else { 				return java.lang.Double.NaN;}}} 	/**
	    	                                                                      		      			                                                                                                            ^, MathUtils.java:1382: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale, int roundingMethod) { 		try { 			return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { 			if (java.lang.Double.isInfinite(x)) { 				return x;} else { 				return java.lang.Double.NaN;}}} 	/**
	    	                                                                      		      			                                                                                                                                                           			                                      				         ^]
Ingredient counter is Zero
---Undoing: gnrtn(26): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.equals(x, y, eps)) { 	return 0; } else if (x < y) { 	retu[...] ` -topatch--> `return x` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (51(f=1.0), 52(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (51(f=1.0), )
----------Running generation: 27, population size: 1

***** Generation 27 : 0
**Parent Variant: [Variant id: 53, #gens: 186, #ops: 0, parent:-]

--Child created id: 54
--Creating new operations for variant [Variant id: 54, #gens: 186, #ops: 0, parent:53]
---analyzing modificationPoint position: 28
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  while (!isOptimal(tableau)) { 	doIteration(tableau); } 
---analyzing modificationPoint position: 29
Templates availables7
Attempts Base Ingredients  1 total 7
vars from patch []
location: SimplexSolver.java42
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON) ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 42, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON) ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 54, #gens: 186, #ops: 1, parent:53] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 54, errors: [SimplexSolver.java:104: error: variable epsilon might not have been initialized
		incrementIterationsCounter();} 	/**
		                             ^, SimplexSolver.java:104: error: unreported exception org.apache.commons.math.optimization.OptimizationException; must be caught or declared to be thrown
		incrementIterationsCounter();} 	/**
		                          ^]
Ingredient counter is Zero
---Undoing: gnrtn(27): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON) ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (53(f=1.0), 54(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (53(f=1.0), )
----------Running generation: 28, population size: 1

***** Generation 28 : 0
**Parent Variant: [Variant id: 55, #gens: 186, #ops: 0, parent:-]

--Child created id: 56
--Creating new operations for variant [Variant id: 56, #gens: 186, #ops: 0, parent:55]
---analyzing modificationPoint position: 116
location: SimplexTableau.java112
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 56, #gens: 185, #ops: 1, parent:55] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 56
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-56/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 11, was successful: false, cases executed: 14] ,[]
-Valid?: |false|11|14|[]|, fitness 11.0
Ingredient counter is Zero
---Undoing: gnrtn(28): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (55(f=1.0), 56(f=11.0), )
Selected to next generation: IDs2--> (55(f=1.0), )
----------Running generation: 29, population size: 1

***** Generation 29 : 0
**Parent Variant: [Variant id: 57, #gens: 186, #ops: 0, parent:-]

--Child created id: 58
--Creating new operations for variant [Variant id: 58, #gens: 186, #ops: 0, parent:57]
---analyzing modificationPoint position: 13
---modifPoint 0 not mutation generated in  java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>()
---analyzing modificationPoint position: 39
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 1 not mutation generated in  return minPos
---analyzing modificationPoint position: 183
---modifPoint 2 not mutation generated in  return (data == null) || (data[0] == null) ? 0 : data[0].length
---analyzing modificationPoint position: 181
Templates availables12
Attempts Base Ingredients  1 total 12
---modifPoint 3 not mutation generated in  java.lang.System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols)
---analyzing modificationPoint position: 161
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch [point]
--> var from patch: point spoon.support.reflect.code.CtFieldReadImpl
SameName: final 














































double[] point
SameName: final 














































double[] point
Transforming shadowed variable in return point.clone()
location: RealPointValuePair.java49
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = point.clone() ` -topatch--> `return point.clone()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.RealPointValuePair line: 49, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = point.clone() ` -topatch--> `return point.clone()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 58, #gens: 187, #ops: 1, parent:57] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 58, errors: [RealPointValuePair.java:71: error: incompatible types: unexpected return value
		return point.clone(); 		this.value = value;} 	/**
		                  ^]
Ingredient counter is Zero
---Undoing: gnrtn(29): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = point.clone() ` -topatch--> `return point.clone()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (57(f=1.0), 58(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (57(f=1.0), )
----------Running generation: 30, population size: 1

***** Generation 30 : 0
**Parent Variant: [Variant id: 59, #gens: 186, #ops: 0, parent:-]

--Child created id: 60
--Creating new operations for variant [Variant id: 60, #gens: 186, #ops: 0, parent:59]
---analyzing modificationPoint position: 13
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [this.constraints]
--> var from patch: this.constraints spoon.support.reflect.code.CtFieldWriteImpl
location: SimplexTableau.java343
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>() ` -topatch--> `this.constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 343, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>() ` -topatch--> `this.constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 60, #gens: 187, #ops: 1, parent:59] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 60, errors: [SimplexTableau.java:343: error: cannot assign a value to final variable constraints
		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		this.constraints = constraints;
		                                                                                                         		    ^]
Ingredient counter is Zero
---Undoing: gnrtn(30): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>() ` -topatch--> `this.constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (59(f=1.0), 60(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (59(f=1.0), )
----------Running generation: 31, population size: 1

***** Generation 31 : 0
**Parent Variant: [Variant id: 61, #gens: 186, #ops: 0, parent:-]

--Child created id: 62
--Creating new operations for variant [Variant id: 62, #gens: 186, #ops: 0, parent:61]
---analyzing modificationPoint position: 171
Templates availables11
Attempts Base Ingredients  1 total 11
---modifPoint 0 not mutation generated in  if (data == null) { 	if (row > 0) { 		throw org.apache.commons.math.MathRuntimeException.createIlleg[...]
---analyzing modificationPoint position: 37
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 1 not mutation generated in  minPos = i
---analyzing modificationPoint position: 158
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java331
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length) ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 331, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length) ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 62, #gens: 187, #ops: 1, parent:61] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 62, errors: [SimplexTableau.java:540: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:540: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:540: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:540: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:540: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:540: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:542: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:542: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:542: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:542: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:542: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:542: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:542: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:544: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:544: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:545: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:546: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:546: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:547: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:547: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:548: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:549: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:549: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:549: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:550: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:550: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:550: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:550: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:550: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:550: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:563: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:563: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:563: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:563: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:563: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:563: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:567: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:567: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:571: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:571: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:579: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:579: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:579: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:579: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:588: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:588: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:588: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:588: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:588: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:592: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:592: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:596: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:596: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:600: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:600: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:605: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:605: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:615: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:615: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:620: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:620: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:624: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:624: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:628: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:628: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:632: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:632: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:634: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:634: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:637: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:644: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:644: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:644: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:644: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:644: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:644: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:653: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:653: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:653: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:653: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:653: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:653: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:653: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:653: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:653: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(31): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length) ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (61(f=1.0), 62(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (61(f=1.0), )
----------Running generation: 32, population size: 1

***** Generation 32 : 0
**Parent Variant: [Variant id: 63, #gens: 186, #ops: 0, parent:-]

--Child created id: 64
--Creating new operations for variant [Variant id: 64, #gens: 186, #ops: 0, parent:63]
---analyzing modificationPoint position: 166
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 0 not mutation generated in  return data.length
---analyzing modificationPoint position: 31
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java59
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double minValue = 0 ` -topatch--> `while (!isPhase1Solved(tableau)) { 	doIteration(tableau); } ` (spoon.support.reflect.code.CtWhileImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 59, pointed element: CtWhileImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double minValue = 0 ` -topatch--> `while (!isPhase1Solved(tableau)) { 	doIteration(tableau); } ` (spoon.support.reflect.code.CtWhileImpl) 

--Summary Creation: for variant [Variant id: 64, #gens: 187, #ops: 1, parent:63] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 64, errors: [SimplexSolver.java:174: error: unreported exception org.apache.commons.math.optimization.OptimizationException; must be caught or declared to be thrown
			doIteration(tableau);
			           ^]
Ingredient counter is Zero
---Undoing: gnrtn(32): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double minValue = 0 ` -topatch--> `while (!isPhase1Solved(tableau)) { 	doIteration(tableau); } ` (spoon.support.reflect.code.CtWhileImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (63(f=1.0), 64(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (63(f=1.0), )
----------Running generation: 33, population size: 1

***** Generation 33 : 0
**Parent Variant: [Variant id: 65, #gens: 186, #ops: 0, parent:-]

--Child created id: 66
--Creating new operations for variant [Variant id: 66, #gens: 186, #ops: 0, parent:65]
---analyzing modificationPoint position: 153
location: SimplexTableau.java235
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { [...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 66, #gens: 185, #ops: 1, parent:65] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 66
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-66/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 14] ,[]
-Valid?: |false|13|14|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(33): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { [...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (65(f=1.0), 66(f=13.0), )
Selected to next generation: IDs2--> (65(f=1.0), )
----------Running generation: 34, population size: 1

***** Generation 34 : 0
**Parent Variant: [Variant id: 67, #gens: 186, #ops: 0, parent:-]

--Child created id: 68
--Creating new operations for variant [Variant id: 68, #gens: 186, #ops: 0, parent:67]
---analyzing modificationPoint position: 66
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [this.epsilon]
--> var from patch: this.epsilon spoon.support.reflect.code.CtFieldWriteImpl
location: SimplexSolver.java119
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.subtractRow(i, pivotRow, multiplier) ` -topatch--> `this.epsilon = epsilon` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 119, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.subtractRow(i, pivotRow, multiplier) ` -topatch--> `this.epsilon = epsilon` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 68, #gens: 187, #ops: 1, parent:67] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 68, errors: [SimplexSolver.java:119: error: cannot assign a value to final variable epsilon
				double multiplier = tableau.getEntry(i, pivotCol); 				this.epsilon = epsilon;
				                                                   				    ^]
Ingredient counter is Zero
---Undoing: gnrtn(34): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.subtractRow(i, pivotRow, multiplier) ` -topatch--> `this.epsilon = epsilon` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (67(f=1.0), 68(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (67(f=1.0), )
----------Running generation: 35, population size: 1

***** Generation 35 : 0
**Parent Variant: [Variant id: 69, #gens: 186, #ops: 0, parent:-]

--Child created id: 70
--Creating new operations for variant [Variant id: 70, #gens: 186, #ops: 0, parent:69]
---analyzing modificationPoint position: 164
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 0 not mutation generated in  if (data.length != n) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentExc[...]
---analyzing modificationPoint position: 147
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  normalized.add(normalize(constraint))
---analyzing modificationPoint position: 63
Templates availables4
Attempts Base Ingredients  1 total 4
---modifPoint 2 not mutation generated in  // set the rest of the pivot column to 0 for (int i = 0; i < tableau.getHeight(); i++) { 	if (i != p[...]
---analyzing modificationPoint position: 73
Templates availables259
Attempts Base Ingredients  1 total 259
vars from patch []
location: MathUtils.java367
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.equals(x, y, eps)) { 	return 0; } else if (x < y) { 	retu[...] ` -topatch--> `// |v| larger: t negative (replace v)` (spoon.support.reflect.code.CtCommentImpl) 
---MP=org.apache.commons.math.util.MathUtils line: 367, pointed element: CtCommentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.equals(x, y, eps)) { 	return 0; } else if (x < y) { 	retu[...] ` -topatch--> `// |v| larger: t negative (replace v)` (spoon.support.reflect.code.CtCommentImpl) 

--Summary Creation: for variant [Variant id: 70, #gens: 187, #ops: 1, parent:69] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 70, errors: [MathUtils.java:662: error: illegal start of expression
	 * Returns the <a href="http://mathworld.wolfram.com/HyperbolicCosine.html">
	 ^, MathUtils.java:662: error: ';' expected
	 * Returns the <a href="http://mathworld.wolfram.com/HyperbolicCosine.html">
	          ^, MathUtils.java:662: error: > expected
	 * Returns the <a href="http://mathworld.wolfram.com/HyperbolicCosine.html">
	                  ^, MathUtils.java:663: error: illegal start of expression
	 * hyperbolic cosine</a> of x.
	 ^, MathUtils.java:663: error: ';' expected
	 * hyperbolic cosine</a> of x.
	             ^, MathUtils.java:663: error: illegal start of type
	 * hyperbolic cosine</a> of x.
	                     ^, MathUtils.java:663: error: ';' expected
	 * hyperbolic cosine</a> of x.
	                       ^, MathUtils.java:663: error: ';' expected
	 * hyperbolic cosine</a> of x.
	                             ^, MathUtils.java:665: error: <identifier> expected
	 * @param x
	           ^, MathUtils.java:666: error: ';' expected
	 * 		double value for which to find the hyperbolic cosine
	   		            ^, MathUtils.java:666: error: '(' expected
	 * 		double value for which to find the hyperbolic cosine
	   		                ^, MathUtils.java:666: error: ';' expected
	 * 		double value for which to find the hyperbolic cosine
	   		                         ^, MathUtils.java:666: error: ';' expected
	 * 		double value for which to find the hyperbolic cosine
	   		                              ^, MathUtils.java:666: error: not a statement
	 * 		double value for which to find the hyperbolic cosine
	   		                               ^, MathUtils.java:666: error: ')' expected
	 * 		double value for which to find the hyperbolic cosine
	   		                                  ^, MathUtils.java:666: error: ';' expected
	 * 		double value for which to find the hyperbolic cosine
	   		                                                    ^, MathUtils.java:666: error: variable declaration not allowed here
	 * 		double value for which to find the hyperbolic cosine
	   		                                              ^, MathUtils.java:667: error: <identifier> expected
	 * @return hyperbolic cosine of x
	    ^, MathUtils.java:667: error: ';' expected
	 * @return hyperbolic cosine of x
	                     ^, MathUtils.java:667: error: ';' expected
	 * @return hyperbolic cosine of x
	                               ^, MathUtils.java:668: error: illegal start of expression
	 */ 	public static double cosh(double x) { 		return (java.lang.Math.exp(x) + java.lang.Math.exp(-x)) / 2.0;} 	/**
	  ^, MathUtils.java:668: error: illegal start of expression
	 */ 	public static double cosh(double x) { 		return (java.lang.Math.exp(x) + java.lang.Math.exp(-x)) / 2.0;} 	/**
	    	^, MathUtils.java:668: error: illegal start of expression
	 */ 	public static double cosh(double x) { 		return (java.lang.Math.exp(x) + java.lang.Math.exp(-x)) / 2.0;} 	/**
	    	       ^, MathUtils.java:668: error: ';' expected
	 */ 	public static double cosh(double x) { 		return (java.lang.Math.exp(x) + java.lang.Math.exp(-x)) / 2.0;} 	/**
	    	             ^, MathUtils.java:668: error: '.class' expected
	 */ 	public static double cosh(double x) { 		return (java.lang.Math.exp(x) + java.lang.Math.exp(-x)) / 2.0;} 	/**
	    	                                 ^, MathUtils.java:668: error: ';' expected
	 */ 	public static double cosh(double x) { 		return (java.lang.Math.exp(x) + java.lang.Math.exp(-x)) / 2.0;} 	/**
	    	                                  ^, MathUtils.java:677: error: illegal start of expression
	 */ 	public static boolean equals(double x, double y) { 		return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || (x == y);} 	/**
	    	^, MathUtils.java:677: error: illegal start of expression
	 */ 	public static boolean equals(double x, double y) { 		return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || (x == y);} 	/**
	    	       ^, MathUtils.java:677: error: ';' expected
	 */ 	public static boolean equals(double x, double y) { 		return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || (x == y);} 	/**
	    	             ^, MathUtils.java:677: error: '.class' expected
	 */ 	public static boolean equals(double x, double y) { 		return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || (x == y);} 	/**
	    	                                    ^, MathUtils.java:677: error: ';' expected
	 */ 	public static boolean equals(double x, double y) { 		return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || (x == y);} 	/**
	    	                                     ^, MathUtils.java:677: error: ';' expected
	 */ 	public static boolean equals(double x, double y) { 		return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || (x == y);} 	/**
	    	                                               ^, MathUtils.java:691: error: illegal start of expression
	 */ 	public static boolean equals(double x, double y, double eps) { 		return org.apache.commons.math.util.MathUtils.equals(x, y) || (java.lang.Math.abs(y - x) <= eps);} 	/**
	    	^, MathUtils.java:691: error: illegal start of expression
	 */ 	public static boolean equals(double x, double y, double eps) { 		return org.apache.commons.math.util.MathUtils.equals(x, y) || (java.lang.Math.abs(y - x) <= eps);} 	/**
	    	       ^, MathUtils.java:691: error: ';' expected
	 */ 	public static boolean equals(double x, double y, double eps) { 		return org.apache.commons.math.util.MathUtils.equals(x, y) || (java.lang.Math.abs(y - x) <= eps);} 	/**
	    	             ^, MathUtils.java:691: error: '.class' expected
	 */ 	public static boolean equals(double x, double y, double eps) { 		return org.apache.commons.math.util.MathUtils.equals(x, y) || (java.lang.Math.abs(y - x) <= eps);} 	/**
	    	                                    ^, MathUtils.java:691: error: ';' expected
	 */ 	public static boolean equals(double x, double y, double eps) { 		return org.apache.commons.math.util.MathUtils.equals(x, y) || (java.lang.Math.abs(y - x) <= eps);} 	/**
	    	                                     ^, MathUtils.java:691: error: <identifier> expected
	 */ 	public static boolean equals(double x, double y, double eps) { 		return org.apache.commons.math.util.MathUtils.equals(x, y) || (java.lang.Math.abs(y - x) <= eps);} 	/**
	    	                                                ^, MathUtils.java:691: error: not a statement
	 */ 	public static boolean equals(double x, double y, double eps) { 		return org.apache.commons.math.util.MathUtils.equals(x, y) || (java.lang.Math.abs(y - x) <= eps);} 	/**
	    	                                                        ^, MathUtils.java:691: error: ';' expected
	 */ 	public static boolean equals(double x, double y, double eps) { 		return org.apache.commons.math.util.MathUtils.equals(x, y) || (java.lang.Math.abs(y - x) <= eps);} 	/**
	    	                                                           ^, MathUtils.java:707: error: illegal start of expression
	 */ 	public static boolean equals(double x, double y, int maxUlps) { 		// Check that "maxUlps" is non-negative and small enough so that the 		// default NAN won't compare as equal to anything.
	    	^, MathUtils.java:707: error: illegal start of expression
	 */ 	public static boolean equals(double x, double y, int maxUlps) { 		// Check that "maxUlps" is non-negative and small enough so that the 		// default NAN won't compare as equal to anything.
	    	       ^, MathUtils.java:707: error: ';' expected
	 */ 	public static boolean equals(double x, double y, int maxUlps) { 		// Check that "maxUlps" is non-negative and small enough so that the 		// default NAN won't compare as equal to anything.
	    	             ^, MathUtils.java:707: error: '.class' expected
	 */ 	public static boolean equals(double x, double y, int maxUlps) { 		// Check that "maxUlps" is non-negative and small enough so that the 		// default NAN won't compare as equal to anything.
	    	                                    ^, MathUtils.java:707: error: ';' expected
	 */ 	public static boolean equals(double x, double y, int maxUlps) { 		// Check that "maxUlps" is non-negative and small enough so that the 		// default NAN won't compare as equal to anything.
	    	                                     ^, MathUtils.java:707: error: <identifier> expected
	 */ 	public static boolean equals(double x, double y, int maxUlps) { 		// Check that "maxUlps" is non-negative and small enough so that the 		// default NAN won't compare as equal to anything.
	    	                                                ^, MathUtils.java:707: error: not a statement
	 */ 	public static boolean equals(double x, double y, int maxUlps) { 		// Check that "maxUlps" is non-negative and small enough so that the 		// default NAN won't compare as equal to anything.
	    	                                                     ^, MathUtils.java:707: error: ';' expected
	 */ 	public static boolean equals(double x, double y, int maxUlps) { 		// Check that "maxUlps" is non-negative and small enough so that the 		// default NAN won't compare as equal to anything.
	    	                                                            ^, MathUtils.java:720: error: illegal start of expression
	 */ 	public static boolean equals(double[] x, double[] y) { 		if ((x == null) || (y == null)) { 			return !((x == null) ^ (y == null));} 		if (x.length != y.length) { 			return false;} 		for (int i = 0; i < x.length; ++i) { 			if (!org.apache.commons.math.util.MathUtils.equals(x[i], y[i])) { 				return false;}} 		return true;} 	/**
	    	^, MathUtils.java:720: error: illegal start of expression
	 */ 	public static boolean equals(double[] x, double[] y) { 		if ((x == null) || (y == null)) { 			return !((x == null) ^ (y == null));} 		if (x.length != y.length) { 			return false;} 		for (int i = 0; i < x.length; ++i) { 			if (!org.apache.commons.math.util.MathUtils.equals(x[i], y[i])) { 				return false;}} 		return true;} 	/**
	    	       ^, MathUtils.java:720: error: ';' expected
	 */ 	public static boolean equals(double[] x, double[] y) { 		if ((x == null) || (y == null)) { 			return !((x == null) ^ (y == null));} 		if (x.length != y.length) { 			return false;} 		for (int i = 0; i < x.length; ++i) { 			if (!org.apache.commons.math.util.MathUtils.equals(x[i], y[i])) { 				return false;}} 		return true;} 	/**
	    	             ^, MathUtils.java:720: error: '.class' expected
	 */ 	public static boolean equals(double[] x, double[] y) { 		if ((x == null) || (y == null)) { 			return !((x == null) ^ (y == null));} 		if (x.length != y.length) { 			return false;} 		for (int i = 0; i < x.length; ++i) { 			if (!org.apache.commons.math.util.MathUtils.equals(x[i], y[i])) { 				return false;}} 		return true;} 	/**
	    	                                      ^, MathUtils.java:720: error: ';' expected
	 */ 	public static boolean equals(double[] x, double[] y) { 		if ((x == null) || (y == null)) { 			return !((x == null) ^ (y == null));} 		if (x.length != y.length) { 			return false;} 		for (int i = 0; i < x.length; ++i) { 			if (!org.apache.commons.math.util.MathUtils.equals(x[i], y[i])) { 				return false;}} 		return true;} 	/**
	    	                                       ^, MathUtils.java:720: error: ';' expected
	 */ 	public static boolean equals(double[] x, double[] y) { 		if ((x == null) || (y == null)) { 			return !((x == null) ^ (y == null));} 		if (x.length != y.length) { 			return false;} 		for (int i = 0; i < x.length; ++i) { 			if (!org.apache.commons.math.util.MathUtils.equals(x[i], y[i])) { 				return false;}} 		return true;} 	/**
	    	                                                   ^, MathUtils.java:722: error: illegal start of expression
	 */ 	private static final long[] factorials = new long[]{ 1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800L, 87178291200L, 1307674368000L, 20922789888000L, 355687428096000L, 6402373705728000L, 121645100408832000L, 2432902008176640000L }; 	/**
	    	^, MathUtils.java:722: error: illegal start of expression
	 */ 	private static final long[] factorials = new long[]{ 1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800L, 87178291200L, 1307674368000L, 20922789888000L, 355687428096000L, 6402373705728000L, 121645100408832000L, 2432902008176640000L }; 	/**
	    	        ^, MathUtils.java:722: error: ';' expected
	 */ 	private static final long[] factorials = new long[]{ 1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600, 6227020800L, 87178291200L, 1307674368000L, 20922789888000L, 355687428096000L, 6402373705728000L, 121645100408832000L, 2432902008176640000L }; 	/**
	    	              ^, MathUtils.java:746: error: illegal start of expression
	 */ 	public static long factorial(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}", n);} 		if (n > 20) { 			throw new java.lang.ArithmeticException("factorial value is too large to fit in a long");} 		return org.apache.commons.math.util.MathUtils.factorials[n];} 	/**
	    	^, MathUtils.java:746: error: illegal start of expression
	 */ 	public static long factorial(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}", n);} 		if (n > 20) { 			throw new java.lang.ArithmeticException("factorial value is too large to fit in a long");} 		return org.apache.commons.math.util.MathUtils.factorials[n];} 	/**
	    	       ^, MathUtils.java:746: error: ';' expected
	 */ 	public static long factorial(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}", n);} 		if (n > 20) { 			throw new java.lang.ArithmeticException("factorial value is too large to fit in a long");} 		return org.apache.commons.math.util.MathUtils.factorials[n];} 	/**
	    	             ^, MathUtils.java:746: error: illegal start of expression
	 */ 	public static long factorial(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}", n);} 		if (n > 20) { 			throw new java.lang.ArithmeticException("factorial value is too large to fit in a long");} 		return org.apache.commons.math.util.MathUtils.factorials[n];} 	/**
	    	                             ^, MathUtils.java:746: error: ';' expected
	 */ 	public static long factorial(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}", n);} 		if (n > 20) { 			throw new java.lang.ArithmeticException("factorial value is too large to fit in a long");} 		return org.apache.commons.math.util.MathUtils.factorials[n];} 	/**
	    	                                  ^, MathUtils.java:746: error: not a statement
	 */ 	public static long factorial(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}", n);} 		if (n > 20) { 			throw new java.lang.ArithmeticException("factorial value is too large to fit in a long");} 		return org.apache.commons.math.util.MathUtils.factorials[n];} 	/**
	    	                                       ^, MathUtils.java:746: error: ';' expected
	 */ 	public static long factorial(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}", n);} 		if (n > 20) { 			throw new java.lang.ArithmeticException("factorial value is too large to fit in a long");} 		return org.apache.commons.math.util.MathUtils.factorials[n];} 	/**
	    	                                        ^, MathUtils.java:767: error: illegal start of expression
	 */ 	public static double factorialDouble(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}", n);} 		if (n < 21) { 			return org.apache.commons.math.util.MathUtils.factorial(n);} 		return java.lang.Math.floor(java.lang.Math.exp(org.apache.commons.math.util.MathUtils.factorialLog(n)) + 0.5);} 	/**
	    	^, MathUtils.java:767: error: illegal start of expression
	 */ 	public static double factorialDouble(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}", n);} 		if (n < 21) { 			return org.apache.commons.math.util.MathUtils.factorial(n);} 		return java.lang.Math.floor(java.lang.Math.exp(org.apache.commons.math.util.MathUtils.factorialLog(n)) + 0.5);} 	/**
	    	       ^, MathUtils.java:767: error: ';' expected
	 */ 	public static double factorialDouble(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}", n);} 		if (n < 21) { 			return org.apache.commons.math.util.MathUtils.factorial(n);} 		return java.lang.Math.floor(java.lang.Math.exp(org.apache.commons.math.util.MathUtils.factorialLog(n)) + 0.5);} 	/**
	    	             ^, MathUtils.java:767: error: illegal start of expression
	 */ 	public static double factorialDouble(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}", n);} 		if (n < 21) { 			return org.apache.commons.math.util.MathUtils.factorial(n);} 		return java.lang.Math.floor(java.lang.Math.exp(org.apache.commons.math.util.MathUtils.factorialLog(n)) + 0.5);} 	/**
	    	                                     ^, MathUtils.java:767: error: ';' expected
	 */ 	public static double factorialDouble(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}", n);} 		if (n < 21) { 			return org.apache.commons.math.util.MathUtils.factorial(n);} 		return java.lang.Math.floor(java.lang.Math.exp(org.apache.commons.math.util.MathUtils.factorialLog(n)) + 0.5);} 	/**
	    	                                          ^, MathUtils.java:767: error: not a statement
	 */ 	public static double factorialDouble(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}", n);} 		if (n < 21) { 			return org.apache.commons.math.util.MathUtils.factorial(n);} 		return java.lang.Math.floor(java.lang.Math.exp(org.apache.commons.math.util.MathUtils.factorialLog(n)) + 0.5);} 	/**
	    	                                               ^, MathUtils.java:767: error: ';' expected
	 */ 	public static double factorialDouble(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}", n);} 		if (n < 21) { 			return org.apache.commons.math.util.MathUtils.factorial(n);} 		return java.lang.Math.floor(java.lang.Math.exp(org.apache.commons.math.util.MathUtils.factorialLog(n)) + 0.5);} 	/**
	    	                                                ^, MathUtils.java:781: error: illegal start of expression
	 */ 	public static double factorialLog(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}", n);} 		if (n < 21) { 			return java.lang.Math.log(org.apache.commons.math.util.MathUtils.factorial(n));} 		double logSum = 0; 		for (int i = 2; i <= n; i++) { 			logSum += java.lang.Math.log(i);} 		return logSum;} 	/**
	    	^, MathUtils.java:781: error: illegal start of expression
	 */ 	public static double factorialLog(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}", n);} 		if (n < 21) { 			return java.lang.Math.log(org.apache.commons.math.util.MathUtils.factorial(n));} 		double logSum = 0; 		for (int i = 2; i <= n; i++) { 			logSum += java.lang.Math.log(i);} 		return logSum;} 	/**
	    	       ^, MathUtils.java:781: error: ';' expected
	 */ 	public static double factorialLog(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}", n);} 		if (n < 21) { 			return java.lang.Math.log(org.apache.commons.math.util.MathUtils.factorial(n));} 		double logSum = 0; 		for (int i = 2; i <= n; i++) { 			logSum += java.lang.Math.log(i);} 		return logSum;} 	/**
	    	             ^, MathUtils.java:781: error: illegal start of expression
	 */ 	public static double factorialLog(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}", n);} 		if (n < 21) { 			return java.lang.Math.log(org.apache.commons.math.util.MathUtils.factorial(n));} 		double logSum = 0; 		for (int i = 2; i <= n; i++) { 			logSum += java.lang.Math.log(i);} 		return logSum;} 	/**
	    	                                  ^, MathUtils.java:781: error: ';' expected
	 */ 	public static double factorialLog(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}", n);} 		if (n < 21) { 			return java.lang.Math.log(org.apache.commons.math.util.MathUtils.factorial(n));} 		double logSum = 0; 		for (int i = 2; i <= n; i++) { 			logSum += java.lang.Math.log(i);} 		return logSum;} 	/**
	    	                                       ^, MathUtils.java:781: error: not a statement
	 */ 	public static double factorialLog(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}", n);} 		if (n < 21) { 			return java.lang.Math.log(org.apache.commons.math.util.MathUtils.factorial(n));} 		double logSum = 0; 		for (int i = 2; i <= n; i++) { 			logSum += java.lang.Math.log(i);} 		return logSum;} 	/**
	    	                                            ^, MathUtils.java:781: error: ';' expected
	 */ 	public static double factorialLog(final int n) { 		if (n < 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("must have n >= 0 for n!, got n = {0}", n);} 		if (n < 21) { 			return java.lang.Math.log(org.apache.commons.math.util.MathUtils.factorial(n));} 		double logSum = 0; 		for (int i = 2; i <= n; i++) { 			logSum += java.lang.Math.log(i);} 		return logSum;} 	/**
	    	                                             ^, MathUtils.java:812: error: illegal start of expression
	 */ 	public static int gcd(final int p, final int q) { 		int u = p; 		int v = q; 		if ((u == 0) || (v == 0)) { 			if ((u == java.lang.Integer.MIN_VALUE) || (v == java.lang.Integer.MIN_VALUE)) { 				throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 			return java.lang.Math.abs(u) + java.lang.Math.abs(v);} 		// keep u and v negative, as negative integers range down to 		// -2^31, while positive numbers can only be as large as 2^31-1 		// (i.e. we can't necessarily negate a negative number without 		// overflow) 		/* assert u!=0 && v!=0; */
	    	^, MathUtils.java:812: error: illegal start of expression
	 */ 	public static int gcd(final int p, final int q) { 		int u = p; 		int v = q; 		if ((u == 0) || (v == 0)) { 			if ((u == java.lang.Integer.MIN_VALUE) || (v == java.lang.Integer.MIN_VALUE)) { 				throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 			return java.lang.Math.abs(u) + java.lang.Math.abs(v);} 		// keep u and v negative, as negative integers range down to 		// -2^31, while positive numbers can only be as large as 2^31-1 		// (i.e. we can't necessarily negate a negative number without 		// overflow) 		/* assert u!=0 && v!=0; */
	    	       ^, MathUtils.java:812: error: ';' expected
	 */ 	public static int gcd(final int p, final int q) { 		int u = p; 		int v = q; 		if ((u == 0) || (v == 0)) { 			if ((u == java.lang.Integer.MIN_VALUE) || (v == java.lang.Integer.MIN_VALUE)) { 				throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 			return java.lang.Math.abs(u) + java.lang.Math.abs(v);} 		// keep u and v negative, as negative integers range down to 		// -2^31, while positive numbers can only be as large as 2^31-1 		// (i.e. we can't necessarily negate a negative number without 		// overflow) 		/* assert u!=0 && v!=0; */
	    	             ^, MathUtils.java:812: error: illegal start of expression
	 */ 	public static int gcd(final int p, final int q) { 		int u = p; 		int v = q; 		if ((u == 0) || (v == 0)) { 			if ((u == java.lang.Integer.MIN_VALUE) || (v == java.lang.Integer.MIN_VALUE)) { 				throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 			return java.lang.Math.abs(u) + java.lang.Math.abs(v);} 		// keep u and v negative, as negative integers range down to 		// -2^31, while positive numbers can only be as large as 2^31-1 		// (i.e. we can't necessarily negate a negative number without 		// overflow) 		/* assert u!=0 && v!=0; */
	    	                      ^, MathUtils.java:812: error: ';' expected
	 */ 	public static int gcd(final int p, final int q) { 		int u = p; 		int v = q; 		if ((u == 0) || (v == 0)) { 			if ((u == java.lang.Integer.MIN_VALUE) || (v == java.lang.Integer.MIN_VALUE)) { 				throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 			return java.lang.Math.abs(u) + java.lang.Math.abs(v);} 		// keep u and v negative, as negative integers range down to 		// -2^31, while positive numbers can only be as large as 2^31-1 		// (i.e. we can't necessarily negate a negative number without 		// overflow) 		/* assert u!=0 && v!=0; */
	    	                           ^, MathUtils.java:812: error: not a statement
	 */ 	public static int gcd(final int p, final int q) { 		int u = p; 		int v = q; 		if ((u == 0) || (v == 0)) { 			if ((u == java.lang.Integer.MIN_VALUE) || (v == java.lang.Integer.MIN_VALUE)) { 				throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 			return java.lang.Math.abs(u) + java.lang.Math.abs(v);} 		// keep u and v negative, as negative integers range down to 		// -2^31, while positive numbers can only be as large as 2^31-1 		// (i.e. we can't necessarily negate a negative number without 		// overflow) 		/* assert u!=0 && v!=0; */
	    	                                ^, MathUtils.java:812: error: ';' expected
	 */ 	public static int gcd(final int p, final int q) { 		int u = p; 		int v = q; 		if ((u == 0) || (v == 0)) { 			if ((u == java.lang.Integer.MIN_VALUE) || (v == java.lang.Integer.MIN_VALUE)) { 				throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 			return java.lang.Math.abs(u) + java.lang.Math.abs(v);} 		// keep u and v negative, as negative integers range down to 		// -2^31, while positive numbers can only be as large as 2^31-1 		// (i.e. we can't necessarily negate a negative number without 		// overflow) 		/* assert u!=0 && v!=0; */
	    	                                 ^, MathUtils.java:812: error: ';' expected
	 */ 	public static int gcd(final int p, final int q) { 		int u = p; 		int v = q; 		if ((u == 0) || (v == 0)) { 			if ((u == java.lang.Integer.MIN_VALUE) || (v == java.lang.Integer.MIN_VALUE)) { 				throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 			return java.lang.Math.abs(u) + java.lang.Math.abs(v);} 		// keep u and v negative, as negative integers range down to 		// -2^31, while positive numbers can only be as large as 2^31-1 		// (i.e. we can't necessarily negate a negative number without 		// overflow) 		/* assert u!=0 && v!=0; */
	    	                                              ^, MathUtils.java:819: error: while expected
	} 	/**
	 ^, MathUtils.java:825: error: illegal start of expression
	 */ 	public static int hash(double value) { 		return new java.lang.Double(value).hashCode();} 	/**
	    	       ^, MathUtils.java:825: error: ')' expected
	 */ 	public static int hash(double value) { 		return new java.lang.Double(value).hashCode();} 	/**
	    	             ^, MathUtils.java:825: error: ';' expected
	 */ 	public static int hash(double value) { 		return new java.lang.Double(value).hashCode();} 	/**
	    	                 ^, MathUtils.java:825: error: -> expected
	 */ 	public static int hash(double value) { 		return new java.lang.Double(value).hashCode();} 	/**
	    	                                    ^, MathUtils.java:825: error: not a statement
	 */ 	public static int hash(double value) { 		return new java.lang.Double(value).hashCode();} 	/**
	    	                      ^, MathUtils.java:825: error: ';' expected
	 */ 	public static int hash(double value) { 		return new java.lang.Double(value).hashCode();} 	/**
	    	                                       		                                               ^, MathUtils.java:832: error: illegal start of expression
	 */ 	public static int hash(double[] value) { 		return java.util.Arrays.hashCode(value);} 	/**
	    	^, MathUtils.java:832: error: ';' expected
	 */ 	public static int hash(double[] value) { 		return java.util.Arrays.hashCode(value);} 	/**
	    	      ^, MathUtils.java:832: error: ';' expected
	 */ 	public static int hash(double[] value) { 		return java.util.Arrays.hashCode(value);} 	/**
	    	                      ^, MathUtils.java:832: error: ';' expected
	 */ 	public static int hash(double[] value) { 		return java.util.Arrays.hashCode(value);} 	/**
	    	                                     ^, MathUtils.java:839: error: illegal start of expression
	 */ 	public static byte indicator(final byte x) { 		return x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	/**
	    	^, MathUtils.java:839: error: illegal start of expression
	 */ 	public static byte indicator(final byte x) { 		return x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	/**
	    	       ^, MathUtils.java:839: error: ';' expected
	 */ 	public static byte indicator(final byte x) { 		return x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	/**
	    	             ^]
Ingredient counter is Zero
---Undoing: gnrtn(35): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.equals(x, y, eps)) { 	return 0; } else if (x < y) { 	retu[...] ` -topatch--> `// |v| larger: t negative (replace v)` (spoon.support.reflect.code.CtCommentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (69(f=1.0), 70(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (69(f=1.0), )
----------Running generation: 36, population size: 1

***** Generation 36 : 0
**Parent Variant: [Variant id: 71, #gens: 186, #ops: 0, parent:-]

--Child created id: 72
--Creating new operations for variant [Variant id: 72, #gens: 186, #ops: 0, parent:71]
---analyzing modificationPoint position: 37
Templates availables5
Attempts Base Ingredients  1 total 5
---modifPoint 0 not mutation generated in  minPos = i
---analyzing modificationPoint position: 157
Templates availables8
Attempts Base Ingredients  1 total 8
vars from patch [artificialVar, numArtificialVariables, row]
--> var from patch: artificialVar spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: row spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java248
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 248, pointed element: CtForImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 72, #gens: 186, #ops: 1, parent:71] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 72
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-72/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(36): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (71(f=1.0), 72(f=1.0), )
Selected to next generation: IDs2--> (71(f=1.0), )
----------Running generation: 37, population size: 1

***** Generation 37 : 0
**Parent Variant: [Variant id: 73, #gens: 186, #ops: 0, parent:-]

--Child created id: 74
--Creating new operations for variant [Variant id: 74, #gens: 186, #ops: 0, parent:73]
---analyzing modificationPoint position: 35
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau, i, epsilon]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: i spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java62
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)[...] ` -topatch--> `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 62, pointed element: CtForImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)[...] ` -topatch--> `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 74, #gens: 187, #ops: 1, parent:73] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 74, errors: [SimplexSolver.java:134: error: variable i is already defined in method getPivotColumn(org.apache.commons.math.optimization.linear.SimplexTableau)
			for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) {
			         ^, SimplexSolver.java:136: error: incompatible types: boolean cannot be converted to java.lang.Integer
					return false;
					       ^]
Ingredient counter is Zero
---Undoing: gnrtn(37): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)[...] ` -topatch--> `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (73(f=1.0), 74(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (73(f=1.0), )
----------Running generation: 38, population size: 1

***** Generation 38 : 0
**Parent Variant: [Variant id: 75, #gens: 186, #ops: 0, parent:-]

--Child created id: 76
--Creating new operations for variant [Variant id: 76, #gens: 186, #ops: 0, parent:75]
---analyzing modificationPoint position: 8
---modifPoint 0 not mutation generated in  return tableau.getSolution()
---analyzing modificationPoint position: 159
---modifPoint 1 not mutation generated in  return org.apache.commons.math.util.MathUtils.equals(x, y) || (java.lang.Math.abs(y - x) <= eps)
---analyzing modificationPoint position: 108
Templates availables7
Attempts Base Ingredients  1 total 7
vars from patch [this.relationship]
--> var from patch: this.relationship spoon.support.reflect.code.CtFieldWriteImpl
SameName: final 
































































































org.apache.commons.math.optimization.linear.Relationship relationship
SameName: final 
































































































org.apache.commons.math.optimization.linear.Relationship relationship
Transforming shadowed variable in relationship = relationship
location: LinearConstraint.java101
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.relationship = relationship ` -topatch--> `relationship = relationship` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearConstraint line: 101, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.relationship = relationship ` -topatch--> `relationship = relationship` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 76, #gens: 186, #ops: 1, parent:75] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 76, errors: [LinearConstraint.java:102: error: final parameter relationship may not be assigned
	 */ 	public LinearConstraint(final org.apache.commons.math.linear.RealVector coefficients, final org.apache.commons.math.optimization.linear.Relationship relationship, final double value) { 		this.coefficients = coefficients; 		relationship = relationship;
	    	                                                                                                                                                                                         		                                  		^, LinearConstraint.java:104: error: variable relationship might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(38): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.relationship = relationship ` -topatch--> `relationship = relationship` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (75(f=1.0), 76(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (75(f=1.0), )
----------Running generation: 39, population size: 1

***** Generation 39 : 0
**Parent Variant: [Variant id: 77, #gens: 186, #ops: 0, parent:-]

--Child created id: 78
--Creating new operations for variant [Variant id: 78, #gens: 186, #ops: 0, parent:77]
---analyzing modificationPoint position: 163
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch [point]
--> var from patch: point spoon.support.reflect.code.CtVariableReadImpl
location: RealPointValuePair.java86
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return value ` -topatch--> `return point.clone()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.RealPointValuePair line: 86, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return value ` -topatch--> `return point.clone()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 78, #gens: 187, #ops: 1, parent:77] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 78, errors: [RealPointValuePair.java:87: error: incompatible types: double[] cannot be converted to double
	 */ 	public double getValue() { 		return point.clone(); 		return value;
	    	                           		                  ^]
Ingredient counter is Zero
---Undoing: gnrtn(39): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return value ` -topatch--> `return point.clone()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (77(f=1.0), 78(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (77(f=1.0), )
----------Running generation: 40, population size: 1

***** Generation 40 : 0
**Parent Variant: [Variant id: 79, #gens: 186, #ops: 0, parent:-]

--Child created id: 80
--Creating new operations for variant [Variant id: 80, #gens: 186, #ops: 0, parent:79]
---analyzing modificationPoint position: 60
location: SimplexSolver.java107
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (pivotRow == null) { 	throw new org.apache.commons.math.optimization.linear.UnboundedSolutionExce[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 80, #gens: 185, #ops: 1, parent:79] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 80
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-80/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 14] ,[]
-Valid?: |false|2|14|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(40): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (pivotRow == null) { 	throw new org.apache.commons.math.optimization.linear.UnboundedSolutionExce[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (79(f=1.0), 80(f=2.0), )
Selected to next generation: IDs2--> (79(f=1.0), )
----------Running generation: 41, population size: 1

***** Generation 41 : 0
**Parent Variant: [Variant id: 81, #gens: 186, #ops: 0, parent:-]

--Child created id: 82
--Creating new operations for variant [Variant id: 82, #gens: 186, #ops: 0, parent:81]
---analyzing modificationPoint position: 16
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  if (basicRows.contains(basicRow)) { 	// if multiple variables can take a given value 	// then we cho[...]
---analyzing modificationPoint position: 85
---modifPoint 1 not mutation generated in  return dot
---analyzing modificationPoint position: 66
Templates availables7
Attempts Base Ingredients  1 total 7
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java119
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.subtractRow(i, pivotRow, multiplier) ` -topatch--> `solvePhase1(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 119, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.subtractRow(i, pivotRow, multiplier) ` -topatch--> `solvePhase1(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 82, #gens: 186, #ops: 1, parent:81] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 82
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-82/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(41): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.subtractRow(i, pivotRow, multiplier) ` -topatch--> `solvePhase1(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (81(f=1.0), 82(f=14.0), )
Selected to next generation: IDs2--> (81(f=1.0), )
----------Running generation: 42, population size: 1

***** Generation 42 : 0
**Parent Variant: [Variant id: 83, #gens: 186, #ops: 0, parent:-]

--Child created id: 84
--Creating new operations for variant [Variant id: 84, #gens: 186, #ops: 0, parent:83]
---analyzing modificationPoint position: 69
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 0 not mutation generated in  if (numArtificialVariables == 0) { 	return; }
---analyzing modificationPoint position: 122
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch [numDecisionVariables, numSlackVariables, numArtificialVariables]
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numSlackVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java130
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[][] matrix = new double[height][width] ` -topatch--> `int width = (((numDecisionVariables + numSlackVariables) +  numArtificialVariables) + getNumObjectiv[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 130, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[][] matrix = new double[height][width] ` -topatch--> `int width = (((numDecisionVariables + numSlackVariables) +  numArtificialVariables) + getNumObjectiv[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 84, #gens: 186, #ops: 1, parent:83] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 84, errors: [SimplexTableau.java:130: error: variable width is already defined in method createTableau(boolean)
		int height = constraints.size() + getNumObjectiveFunctions(); 		int width = (((numDecisionVariables + numSlackVariables) + numArtificialVariables) + getNumObjectiveFunctions()) + 1;// + 1 is for RHS
		                                                              		    ^, SimplexTableau.java:135: error: cannot find symbol
			matrix[0][0] = -1;
			^
  symbol:   variable matrix
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:138: error: cannot find symbol
		matrix[zIndex][zIndex] = (maximize) ? 1 : -1;
		^
  symbol:   variable matrix
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:141: error: cannot find symbol
		copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());
		                                           ^
  symbol:   variable matrix
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:142: error: cannot find symbol
		matrix[zIndex][width - 1] = 
		^
  symbol:   variable matrix
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:146: error: cannot find symbol
			matrix[zIndex][getSlackVariableOffset() - 1] = 
			^
  symbol:   variable matrix
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:158: error: cannot find symbol
			copyArray(constraint.getCoefficients().getData(), matrix[row], 1);
			                                                  ^
  symbol:   variable matrix
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:162: error: cannot find symbol
				matrix[row][getSlackVariableOffset() - 1] = 
				^
  symbol:   variable matrix
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:167: error: cannot find symbol
			matrix[row][width - 1] = constraint.getValue();
			^
  symbol:   variable matrix
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:171: error: cannot find symbol
				matrix[row][getSlackVariableOffset() + (slackVar++)] = 1;// slack
				^
  symbol:   variable matrix
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:173: error: cannot find symbol
				matrix[row][getSlackVariableOffset() + (slackVar++)] = -1;// excess
				^
  symbol:   variable matrix
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:179: error: cannot find symbol
				matrix[0][getArtificialVariableOffset() + artificialVar] = 1;
				^
  symbol:   variable matrix
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:180: error: cannot find symbol
				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;
				^
  symbol:   variable matrix
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:184: error: cannot find symbol
		return matrix;
		       ^
  symbol:   variable matrix
  location: class org.apache.commons.math.optimization.linear.SimplexTableau]
Ingredient counter is Zero
---Undoing: gnrtn(42): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[][] matrix = new double[height][width] ` -topatch--> `int width = (((numDecisionVariables + numSlackVariables) +  numArtificialVariables) + getNumObjectiv[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (83(f=1.0), 84(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (83(f=1.0), )
----------Running generation: 43, population size: 1

***** Generation 43 : 0
**Parent Variant: [Variant id: 85, #gens: 186, #ops: 0, parent:-]

--Child created id: 86
--Creating new operations for variant [Variant id: 86, #gens: 186, #ops: 0, parent:85]
---analyzing modificationPoint position: 160
---modifPoint 0 not mutation generated in  return data.clone()
---analyzing modificationPoint position: 14
location: SimplexTableau.java344
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < coefficients.length; i++) { 	java.lang.Integer basicRow = getBasicRowForSolution[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 86, #gens: 185, #ops: 1, parent:85] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 86
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-86/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 11, was successful: false, cases executed: 14] ,[]
-Valid?: |false|11|14|[]|, fitness 11.0
Ingredient counter is Zero
---Undoing: gnrtn(43): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < coefficients.length; i++) { 	java.lang.Integer basicRow = getBasicRowForSolution[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (85(f=1.0), 86(f=11.0), )
Selected to next generation: IDs2--> (85(f=1.0), )
----------Running generation: 44, population size: 1

***** Generation 44 : 0
**Parent Variant: [Variant id: 87, #gens: 186, #ops: 0, parent:-]

--Child created id: 88
--Creating new operations for variant [Variant id: 88, #gens: 186, #ops: 0, parent:87]
---analyzing modificationPoint position: 28
Templates availables2
Attempts Base Ingredients  1 total 2
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java190
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtWhileImpl) `while (!isOptimal(tableau)) { 	doIteration(tableau); }  ` -topatch--> `while (!isOptimal(tableau)) { 	doIteration(tableau); } ` (spoon.support.reflect.code.CtWhileImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 190, pointed element: CtWhileImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtWhileImpl) `while (!isOptimal(tableau)) { 	doIteration(tableau); }  ` -topatch--> `while (!isOptimal(tableau)) { 	doIteration(tableau); } ` (spoon.support.reflect.code.CtWhileImpl) 

--Summary Creation: for variant [Variant id: 88, #gens: 186, #ops: 1, parent:87] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 88
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-88/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(44): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtWhileImpl) `while (!isOptimal(tableau)) { 	doIteration(tableau); }  ` -topatch--> `while (!isOptimal(tableau)) { 	doIteration(tableau); } ` (spoon.support.reflect.code.CtWhileImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (87(f=1.0), 88(f=1.0), )
Selected to next generation: IDs2--> (87(f=1.0), )
----------Running generation: 45, population size: 1

***** Generation 45 : 0
**Parent Variant: [Variant id: 89, #gens: 186, #ops: 0, parent:-]

--Child created id: 90
--Creating new operations for variant [Variant id: 90, #gens: 186, #ops: 0, parent:89]
---analyzing modificationPoint position: 139
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [numDecisionVariables]
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java169
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...] ` -topatch--> `return getNumObjectiveFunctions() + numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 169, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...] ` -topatch--> `return getNumObjectiveFunctions() + numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 90, #gens: 187, #ops: 1, parent:89] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 90, errors: [SimplexTableau.java:502: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:502: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:502: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:502: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:502: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:502: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:504: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:504: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:504: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:504: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:504: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:504: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:504: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:506: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:506: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:507: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:508: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:508: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:509: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:509: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:510: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:511: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:511: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:511: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:512: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:512: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:512: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:512: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:512: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:512: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:525: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:525: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:525: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:525: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:525: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:525: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:529: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:529: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:533: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:533: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:541: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:541: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:541: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:541: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:550: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:550: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:550: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:550: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:550: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:554: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:554: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:558: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:558: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:562: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:562: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:567: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:567: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:577: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:577: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:582: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:582: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:586: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:586: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:590: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:590: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:594: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:594: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:596: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:596: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:599: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:606: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:606: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:606: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:606: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:606: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:606: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:615: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:615: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:615: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:615: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:615: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:615: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:615: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:615: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:615: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(45): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...] ` -topatch--> `return getNumObjectiveFunctions() + numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (89(f=1.0), 90(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (89(f=1.0), )
----------Running generation: 46, population size: 1

***** Generation 46 : 0
**Parent Variant: [Variant id: 91, #gens: 186, #ops: 0, parent:-]

--Child created id: 92
--Creating new operations for variant [Variant id: 92, #gens: 186, #ops: 0, parent:91]
---analyzing modificationPoint position: 59
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  java.lang.Integer pivotRow = getPivotRow(pivotCol, tableau)
---analyzing modificationPoint position: 60
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java107
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (pivotRow == null) { 	throw new org.apache.commons.math.optimization.linear.UnboundedSolutionExce[...] ` -topatch--> `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 107, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (pivotRow == null) { 	throw new org.apache.commons.math.optimization.linear.UnboundedSolutionExce[...] ` -topatch--> `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 92, #gens: 187, #ops: 1, parent:91] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 92
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-92/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 9, was successful: false, cases executed: 14] ,[]
-Valid?: |false|9|14|[]|, fitness 9.0
Ingredient counter is Zero
---Undoing: gnrtn(46): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (pivotRow == null) { 	throw new org.apache.commons.math.optimization.linear.UnboundedSolutionExce[...] ` -topatch--> `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (91(f=1.0), 92(f=9.0), )
Selected to next generation: IDs2--> (91(f=1.0), )
----------Running generation: 47, population size: 1

***** Generation 47 : 0
**Parent Variant: [Variant id: 93, #gens: 186, #ops: 0, parent:-]

--Child created id: 94
--Creating new operations for variant [Variant id: 94, #gens: 186, #ops: 0, parent:93]
---analyzing modificationPoint position: 159
Templates availables68
Attempts Base Ingredients  1 total 68
vars from patch [x]
--> var from patch: x spoon.support.reflect.code.CtVariableReadImpl
location: MathUtils.java411
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math.util.MathUtils.equals(x, y) || (java.lang.Math.abs(y - x) <= eps) ` -topatch--> `return x == 0.0 ? 0.0 : x > 0.0 ? 1.0 : -1.0` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.util.MathUtils line: 411, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math.util.MathUtils.equals(x, y) || (java.lang.Math.abs(y - x) <= eps) ` -topatch--> `return x == 0.0 ? 0.0 : x > 0.0 ? 1.0 : -1.0` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 94, #gens: 186, #ops: 1, parent:93] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 94, errors: [MathUtils.java:1310: error: illegal start of type
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		^, MathUtils.java:1310: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		     ^, MathUtils.java:1310: error: ';' expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		        ^, MathUtils.java:1310: error: illegal start of type
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		           ^, MathUtils.java:1310: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		            ^, MathUtils.java:1310: error: ';' expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		              ^, MathUtils.java:1310: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                            ^, MathUtils.java:1310: error: illegal start of type
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                             ^, MathUtils.java:1310: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                                                                 ^, MathUtils.java:1310: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                                                                    ^, MathUtils.java:1311: error: class, interface, or enum expected
		do { 			/* assert u<0 && v<0; */ 			// B4/B3: cast out twos from t.
		^, MathUtils.java:1314: error: class, interface, or enum expected
			if (t > 0) { 				u = -t;} else { 				v = t;} 			// B6/B3. at this point both u and v should be odd. 			t = (v - u) / 2; 			// |u| larger: t positive (replace u) 			// |v| larger: t negative (replace v)} while (t != 0 ); 		return (-u) * (1 << k);// gcd is u*2^k
			             				       ^, MathUtils.java:1314: error: class, interface, or enum expected
			if (t > 0) { 				u = -t;} else { 				v = t;} 			// B6/B3. at this point both u and v should be odd. 			t = (v - u) / 2; 			// |u| larger: t positive (replace u) 			// |v| larger: t negative (replace v)} while (t != 0 ); 		return (-u) * (1 << k);// gcd is u*2^k
			             				                				      ^, MathUtils.java:1321: error: class, interface, or enum expected
	 */ 	public static int hash(double value) { 		return new java.lang.Double(value).hashCode();} 	/**
	    	              ^, MathUtils.java:1321: error: class, interface, or enum expected
	 */ 	public static int hash(double value) { 		return new java.lang.Double(value).hashCode();} 	/**
	    	                                       		                                              ^, MathUtils.java:1328: error: class, interface, or enum expected
	 */ 	public static int hash(double[] value) { 		return java.util.Arrays.hashCode(value);} 	/**
	    	              ^, MathUtils.java:1328: error: class, interface, or enum expected
	 */ 	public static int hash(double[] value) { 		return java.util.Arrays.hashCode(value);} 	/**
	    	                                         		                                        ^, MathUtils.java:1335: error: class, interface, or enum expected
	 */ 	public static byte indicator(final byte x) { 		return x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	/**
	    	              ^, MathUtils.java:1335: error: class, interface, or enum expected
	 */ 	public static byte indicator(final byte x) { 		return x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	/**
	    	                                   ^, MathUtils.java:1335: error: class, interface, or enum expected
	 */ 	public static byte indicator(final byte x) { 		return x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	/**
	    	                                             		                                                                                                                                              ^, MathUtils.java:1343: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	              ^, MathUtils.java:1343: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	                                     ^, MathUtils.java:1343: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	                                                 		                                 			                            ^, MathUtils.java:1343: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	                                                 		                                 			                              		                             ^, MathUtils.java:1350: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	              ^, MathUtils.java:1350: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	                                    ^, MathUtils.java:1350: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	                                               		                                			                           ^, MathUtils.java:1350: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	                                               		                                			                             		                                ^, MathUtils.java:1356: error: class, interface, or enum expected
	 */ 	public static int indicator(final int x) { 		return x >= 0 ? 1 : -1;} 	/**
	    	              ^, MathUtils.java:1356: error: class, interface, or enum expected
	 */ 	public static int indicator(final int x) { 		return x >= 0 ? 1 : -1;} 	/**
	    	                                  ^, MathUtils.java:1356: error: class, interface, or enum expected
	 */ 	public static int indicator(final int x) { 		return x >= 0 ? 1 : -1;} 	/**
	    	                                           		                       ^, MathUtils.java:1362: error: class, interface, or enum expected
	 */ 	public static long indicator(final long x) { 		return x >= 0L ? 1L : -1L;} 	/**
	    	              ^, MathUtils.java:1362: error: class, interface, or enum expected
	 */ 	public static long indicator(final long x) { 		return x >= 0L ? 1L : -1L;} 	/**
	    	                                   ^, MathUtils.java:1362: error: class, interface, or enum expected
	 */ 	public static long indicator(final long x) { 		return x >= 0L ? 1L : -1L;} 	/**
	    	                                             		                          ^, MathUtils.java:1369: error: class, interface, or enum expected
	 */ 	public static short indicator(final short x) { 		return x >= org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} 	/**
	    	              ^, MathUtils.java:1369: error: class, interface, or enum expected
	 */ 	public static short indicator(final short x) { 		return x >= org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} 	/**
	    	                                    ^, MathUtils.java:1369: error: class, interface, or enum expected
	 */ 	public static short indicator(final short x) { 		return x >= org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} 	/**
	    	                                               		                                                                                                                                              ^, MathUtils.java:1393: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	              ^, MathUtils.java:1393: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			         ^, MathUtils.java:1393: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			           		                                                                                                                                           		^, MathUtils.java:1393: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			           		                                                                                                                                           		                                          			                                                                 ^, MathUtils.java:1393: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			           		                                                                                                                                           		                                          			                                                                   		           ^, MathUtils.java:1410: error: class, interface, or enum expected
	 */ 	public static double log(double base, double x) { 		return java.lang.Math.log(x) / java.lang.Math.log(base);} 	/**
	    	              ^, MathUtils.java:1410: error: class, interface, or enum expected
	 */ 	public static double log(double base, double x) { 		return java.lang.Math.log(x) / java.lang.Math.log(base);} 	/**
	    	                                                  		                                                        ^, MathUtils.java:1422: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	              ^, MathUtils.java:1422: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	                                              		                                      		^, MathUtils.java:1422: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	                                              		                                      		                                                                              			                                                         ^, MathUtils.java:1422: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	                                              		                                      		                                                                              			                                                           		                   ^, MathUtils.java:1434: error: class, interface, or enum expected
	 */ 	public static long mulAndCheck(long a, long b) { 		long ret; 		java.lang.String msg = "overflow: multiply"; 		if (a > b) { 			// use symmetry to reduce boundary cases 			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);} else if (a < 0) { 			if (b < 0) { 				// check for positive overflow with negative a, negative b
	    	              ^, MathUtils.java:1434: error: class, interface, or enum expected
	 */ 	public static long mulAndCheck(long a, long b) { 		long ret; 		java.lang.String msg = "overflow: multiply"; 		if (a > b) { 			// use symmetry to reduce boundary cases 			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);} else if (a < 0) { 			if (b < 0) { 				// check for positive overflow with negative a, negative b
	    	                                                 		          		^, MathUtils.java:1434: error: class, interface, or enum expected
	 */ 	public static long mulAndCheck(long a, long b) { 		long ret; 		java.lang.String msg = "overflow: multiply"; 		if (a > b) { 			// use symmetry to reduce boundary cases 			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);} else if (a < 0) { 			if (b < 0) { 				// check for positive overflow with negative a, negative b
	    	                                                 		          		                                             		^, MathUtils.java:1435: error: class, interface, or enum expected
				if (a >= (java.lang.Long.MAX_VALUE / b)) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else if (b > 0) { 				// check for negative overflow with negative a, positive b
				                                           					            ^, MathUtils.java:1435: error: class, interface, or enum expected
				if (a >= (java.lang.Long.MAX_VALUE / b)) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else if (b > 0) { 				// check for negative overflow with negative a, positive b
				                                           					                     					                                             ^, MathUtils.java:1436: error: class, interface, or enum expected
				if ((java.lang.Long.MIN_VALUE / b) <= a) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else { 				// assert b == 0 				ret = 0;}} else if (a > 0) { 			// assert a > 0 			// assert b > 0 			// check for positive overflow with positive a, positive b
				                                           					            ^, MathUtils.java:1436: error: class, interface, or enum expected
				if ((java.lang.Long.MIN_VALUE / b) <= a) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else { 				// assert b == 0 				ret = 0;}} else if (a > 0) { 			// assert a > 0 			// assert b > 0 			// check for positive overflow with positive a, positive b
				                                           					                     					                                             ^, MathUtils.java:1437: error: class, interface, or enum expected
			if (a <= (java.lang.Long.MAX_VALUE / b)) { 				ret = a * b;} else { 				throw new java.lang.ArithmeticException(msg);}} else { 			// assert a == 0 			ret = 0;} 		return ret;} 	/**
			                                           				            ^, MathUtils.java:1437: error: class, interface, or enum expected
			if (a <= (java.lang.Long.MAX_VALUE / b)) { 				ret = a * b;} else { 				throw new java.lang.ArithmeticException(msg);}} else { 			// assert a == 0 			ret = 0;} 		return ret;} 	/**
			                                           				                     				                                             ^, MathUtils.java:1443: error: class, interface, or enum expected
	 * <code>d</code> is returned; otherwise the largest representable number
	                               ^, MathUtils.java:1448: error: class, interface, or enum expected
	 * @param d
	          ^, MathUtils.java:1450: error: class, interface, or enum expected
	 * @param direction
	          ^, MathUtils.java:1453: error: <identifier> expected
	 * @return the next machine representable number in the specified direction
	    ^, MathUtils.java:1453: error: class, interface, or enum expected
	 * @return the next machine representable number in the specified direction
	           ^, MathUtils.java:1454: error: class, interface, or enum expected
	 * @since 1.2
	          ^, MathUtils.java:1455: error: class, interface, or enum expected
	 */ 	public static double nextAfter(double d, double direction) { 		// handling of some important special cases
	    	              ^, MathUtils.java:1456: error: class, interface, or enum expected
		if (java.lang.Double.isNaN(d) || java.lang.Double.isInfinite(d)) { 			return d;} else if (d == 0) { 			return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;} 		// special cases MAX_VALUE to infinity and  MIN_VALUE to 0 		// are handled just as normal numbers 		// split the double in raw components 		long bits = java.lang.Double.doubleToLongBits(d); 		long sign = bits & 0x8000000000000000L; 		long exponent = bits & 0x7ff0000000000000L; 		long mantissa = bits & 0xfffffffffffffL; 		if ((d * (direction - d)) >= 0) { 			// we should increase the mantissa
		                                                                   			         ^, MathUtils.java:1456: error: class, interface, or enum expected
		if (java.lang.Double.isNaN(d) || java.lang.Double.isInfinite(d)) { 			return d;} else if (d == 0) { 			return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;} 		// special cases MAX_VALUE to infinity and  MIN_VALUE to 0 		// are handled just as normal numbers 		// split the double in raw components 		long bits = java.lang.Double.doubleToLongBits(d); 		long sign = bits & 0x8000000000000000L; 		long exponent = bits & 0x7ff0000000000000L; 		long mantissa = bits & 0xfffffffffffffL; 		if ((d * (direction - d)) >= 0) { 			// we should increase the mantissa
		                                                                   			                              			                                                                                ^, MathUtils.java:1457: error: class, interface, or enum expected
			if (mantissa == 0xfffffffffffffL) { 				return java.lang.Double.longBitsToDouble(sign | (exponent + 0x10000000000000L));} else { 				return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa + 1));}} else // we should decrease the mantissa
			                                    				                                                                                ^, MathUtils.java:1457: error: class, interface, or enum expected
			if (mantissa == 0xfffffffffffffL) { 				return java.lang.Double.longBitsToDouble(sign | (exponent + 0x10000000000000L));} else { 				return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa + 1));}} else // we should decrease the mantissa
			                                    				                                                                                         				                                                                             ^, MathUtils.java:1458: error: class, interface, or enum expected
		if (mantissa == 0L) { 			return java.lang.Double.longBitsToDouble((sign | (exponent - 0x10000000000000L)) | 0xfffffffffffffL);} else { 			return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa - 1));}} 	/**
		                      			                                                                                                     ^, MathUtils.java:1458: error: class, interface, or enum expected
		if (mantissa == 0L) { 			return java.lang.Double.longBitsToDouble((sign | (exponent - 0x10000000000000L)) | 0xfffffffffffffL);} else { 			return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa - 1));}} 	/**
		                      			                                                                                                              			                                                                             ^, MathUtils.java:1468: error: class, interface, or enum expected
	 */ 	public static double scalb(final double d, final int scaleFactor) { 		// handling of some important special cases
	    	              ^, MathUtils.java:1468: error: class, interface, or enum expected
	 */ 	public static double scalb(final double d, final int scaleFactor) { 		// handling of some important special cases
	    	                                 ^, MathUtils.java:1468: error: class, interface, or enum expected
	 */ 	public static double scalb(final double d, final int scaleFactor) { 		// handling of some important special cases
	    	                                                 ^, MathUtils.java:1469: error: class, interface, or enum expected
		if (((d == 0) || java.lang.Double.isNaN(d)) || java.lang.Double.isInfinite(d)) { 			return d;} 		// split the double in raw components 		final long bits = java.lang.Double.doubleToLongBits(d); 		final long exponent = bits & 0x7ff0000000000000L; 		final long rest = bits & 0x800fffffffffffffL; 		// shift the exponent 		final long newBits = rest | (exponent + (((long) (scaleFactor)) << 52)); 		return java.lang.Double.longBitsToDouble(newBits);} 	/**
		                                                                                 			         ^, MathUtils.java:1473: error: class, interface, or enum expected
	 *   <li>normalize an angle between 0 and 2&pi;:<br/>
	                                               ^, MathUtils.java:1474: error: class, interface, or enum expected
	 *       <code>a = MathUtils.normalizeAngle(a, Math.PI);</code></li>
	                                                        ^, MathUtils.java:1475: error: class, interface, or enum expected
	 *   <li>normalize an angle between -&pi; and +&pi;<br/>
	                                          ^, MathUtils.java:1475: error: class, interface, or enum expected
	 *   <li>normalize an angle between -&pi; and +&pi;<br/>
	                                                   ^, MathUtils.java:1476: error: class, interface, or enum expected
	 *       <code>a = MathUtils.normalizeAngle(a, 0.0);</code></li>
	                                                    ^, MathUtils.java:1478: error: class, interface, or enum expected
	 *       <code>angle = MathUtils.normalizeAngle(end, start) - start;</code></li>
	                                                                    ^, MathUtils.java:1480: error: class, interface, or enum expected
	 * <p>Note that due to numerical accuracy and since &pi; cannot be represented
	                                                         ^, MathUtils.java:1484: error: class, interface, or enum expected
	 * @param a
	          ^, MathUtils.java:1486: error: class, interface, or enum expected
	 * @param center
	          ^, MathUtils.java:1487: error: class, interface, or enum expected
	 * 		center of the desired 2&pi; interval for the result
	   		                            ^, MathUtils.java:1488: error: <identifier> expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	    ^, MathUtils.java:1488: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	           ^, MathUtils.java:1488: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                    ^, MathUtils.java:1488: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                   ^, MathUtils.java:1488: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                       ^, MathUtils.java:1488: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                                  ^, MathUtils.java:1488: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                                      ^, MathUtils.java:1489: error: class, interface, or enum expected
	 * @since 1.2
	 ^, MathUtils.java:1489: error: class, interface, or enum expected
	 * @since 1.2
	          ^, MathUtils.java:1490: error: class, interface, or enum expected
	 */ 	public static double normalizeAngle(double a, double center) { 		return a - (org.apache.commons.math.util.MathUtils.TWO_PI * java.lang.Math.floor(((a + java.lang.Math.PI) - center) / org.apache.commons.math.util.MathUtils.TWO_PI));} 	/**
	    	              ^, MathUtils.java:1490: error: class, interface, or enum expected
	 */ 	public static double normalizeAngle(double a, double center) { 		return a - (org.apache.commons.math.util.MathUtils.TWO_PI * java.lang.Math.floor(((a + java.lang.Math.PI) - center) / org.apache.commons.math.util.MathUtils.TWO_PI));} 	/**
	    	                                                               		                                                                                                                                                                      ^, MathUtils.java:1500: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale) { 		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} 	/**
	    	              ^, MathUtils.java:1500: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale) { 		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} 	/**
	    	                                                  		                                                                                                  ^, MathUtils.java:1514: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale, int roundingMethod) { 		try { 			return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { 			if (java.lang.Double.isInfinite(x)) { 				return x;} else { 				return java.lang.Double.NaN;}}} 	/**
	    	              ^, MathUtils.java:1514: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale, int roundingMethod) { 		try { 			return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { 			if (java.lang.Double.isInfinite(x)) { 				return x;} else { 				return java.lang.Double.NaN;}}} 	/**
	    	                                                                      		      			                                                                                                            ^, MathUtils.java:1514: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale, int roundingMethod) { 		try { 			return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { 			if (java.lang.Double.isInfinite(x)) { 				return x;} else { 				return java.lang.Double.NaN;}}} 	/**
	    	                                                                      		      			                                                                                                                                                           			                                      				         ^]
Ingredient counter is Zero
---Undoing: gnrtn(47): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math.util.MathUtils.equals(x, y) || (java.lang.Math.abs(y - x) <= eps) ` -topatch--> `return x == 0.0 ? 0.0 : x > 0.0 ? 1.0 : -1.0` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (93(f=1.0), 94(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (93(f=1.0), )
----------Running generation: 48, population size: 1

***** Generation 48 : 0
**Parent Variant: [Variant id: 95, #gens: 186, #ops: 0, parent:-]

--Child created id: 96
--Creating new operations for variant [Variant id: 96, #gens: 186, #ops: 0, parent:95]
---analyzing modificationPoint position: 1
Templates availables31
Attempts Base Ingredients  1 total 31
vars from patch [numSlackVariables]
--> var from patch: numSlackVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java308
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `return numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 308, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `return numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 96, #gens: 186, #ops: 1, parent:95] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 96, errors: [SimplexTableau.java:504: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:504: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:504: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:504: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:504: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:504: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:506: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:506: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:506: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:506: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:506: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:506: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:506: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:508: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:508: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:509: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:510: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:510: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:511: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:511: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:512: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:513: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:513: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:513: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:514: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:514: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:514: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:514: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:514: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:514: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:527: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:527: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:527: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:527: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:527: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:527: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:531: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:531: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:535: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:535: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:543: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:543: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:543: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:543: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:552: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:552: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:552: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:552: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:552: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:556: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:556: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:560: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:560: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:564: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:564: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:569: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:569: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:579: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:579: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:584: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:584: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:588: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:588: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:592: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:592: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:596: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:596: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:598: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:598: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:601: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:608: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:608: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:608: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:608: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:608: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:608: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:617: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:617: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:617: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:617: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:617: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:617: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:617: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:617: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:617: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(48): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `return numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (95(f=1.0), 96(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (95(f=1.0), )
----------Running generation: 49, population size: 1

***** Generation 49 : 0
**Parent Variant: [Variant id: 97, #gens: 186, #ops: 0, parent:-]

--Child created id: 98
--Creating new operations for variant [Variant id: 98, #gens: 186, #ops: 0, parent:97]
---analyzing modificationPoint position: 181
location: Array2DRowRealMatrix.java341
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `java.lang.System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 98, #gens: 185, #ops: 1, parent:97] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 98
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-98/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(49): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `java.lang.System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (97(f=1.0), 98(f=14.0), )
Selected to next generation: IDs2--> (97(f=1.0), )
----------Running generation: 50, population size: 1

***** Generation 50 : 0
**Parent Variant: [Variant id: 99, #gens: 186, #ops: 0, parent:-]

--Child created id: 100
--Creating new operations for variant [Variant id: 100, #gens: 186, #ops: 0, parent:99]
---analyzing modificationPoint position: 104
Templates availables18
Attempts Base Ingredients  1 total 18
---modifPoint 0 not mutation generated in  this.constantTerm = constantTerm
---analyzing modificationPoint position: 132
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [this.restrictToNonNegative]
--> var from patch: this.restrictToNonNegative spoon.support.reflect.code.CtFieldWriteImpl
location: SimplexTableau.java152
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < constraints.size(); i++) { 	org.apache.commons.math.optimization.linear.LinearCo[...] ` -topatch--> `this.restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 152, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < constraints.size(); i++) { 	org.apache.commons.math.optimization.linear.LinearCo[...] ` -topatch--> `this.restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 100, #gens: 187, #ops: 1, parent:99] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 100, errors: [SimplexTableau.java:152: error: cannot assign a value to final variable restrictToNonNegative
		int artificialVar = 0; 		this.restrictToNonNegative = restrictToNonNegative;
		                       		    ^]
Ingredient counter is Zero
---Undoing: gnrtn(50): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < constraints.size(); i++) { 	org.apache.commons.math.optimization.linear.LinearCo[...] ` -topatch--> `this.restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (99(f=1.0), 100(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (99(f=1.0), )
----------Running generation: 51, population size: 1

***** Generation 51 : 0
**Parent Variant: [Variant id: 101, #gens: 186, #ops: 0, parent:-]

--Child created id: 102
--Creating new operations for variant [Variant id: 102, #gens: 186, #ops: 0, parent:101]
---analyzing modificationPoint position: 105
---modifPoint 0 not mutation generated in  return coefficients
---analyzing modificationPoint position: 164
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 1 not mutation generated in  if (data.length != n) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentExc[...]
---analyzing modificationPoint position: 166
---modifPoint 2 not mutation generated in  return data.length
---analyzing modificationPoint position: 2
location: SimplexSolver.java191
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `doIteration(tableau) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 102, #gens: 185, #ops: 1, parent:101] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 102
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-102/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
-Killed id: pid->10199
The Process that runs JUnit test cases did not terminate within waitTime of 10 seconds
Killed the Process that runs JUnit test cases 10199
**The validation 1 have not finished well**
-Valid?: null, fitness 1.7976931348623157E308
Ingredient counter is Zero
---Undoing: gnrtn(51): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `doIteration(tableau) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (101(f=1.0), 102(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (101(f=1.0), )
----------Running generation: 52, population size: 1

***** Generation 52 : 0
**Parent Variant: [Variant id: 103, #gens: 186, #ops: 0, parent:-]

--Child created id: 104
--Creating new operations for variant [Variant id: 104, #gens: 186, #ops: 0, parent:103]
---analyzing modificationPoint position: 20
---modifPoint 0 not mutation generated in  return getNumObjectiveFunctions() + getOriginalNumDecisionVariables()
---analyzing modificationPoint position: 68
Templates availables12
Attempts Base Ingredients  1 total 12
---modifPoint 1 not mutation generated in  final org.apache.commons.math.optimization.linear.SimplexTableau tableau =  new org.apache.commons.m[...]
---analyzing modificationPoint position: 112
location: SimplexTableau.java107
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 104, #gens: 185, #ops: 1, parent:103] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 104, errors: [SimplexTableau.java:117: error: variable restrictToNonNegative might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(52): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (103(f=1.0), 104(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (103(f=1.0), )
----------Running generation: 53, population size: 1

***** Generation 53 : 0
**Parent Variant: [Variant id: 105, #gens: 186, #ops: 0, parent:-]

--Child created id: 106
--Creating new operations for variant [Variant id: 106, #gens: 186, #ops: 0, parent:105]
---analyzing modificationPoint position: 76
Templates availables259
Attempts Base Ingredients  1 total 259
---modifPoint 0 not mutation generated in  return -1
---analyzing modificationPoint position: 39
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java67
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return minPos ` -topatch--> `return tableau.getSolution()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 67, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return minPos ` -topatch--> `return tableau.getSolution()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 106, #gens: 186, #ops: 1, parent:105] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 106, errors: [SimplexSolver.java:194: error: incompatible types: org.apache.commons.math.optimization.RealPointValuePair cannot be converted to java.lang.Integer
		return tableau.getSolution();} 	/**
		                          ^]
Ingredient counter is Zero
---Undoing: gnrtn(53): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return minPos ` -topatch--> `return tableau.getSolution()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (105(f=1.0), 106(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (105(f=1.0), )
----------Running generation: 54, population size: 1

***** Generation 54 : 0
**Parent Variant: [Variant id: 107, #gens: 186, #ops: 0, parent:-]

--Child created id: 108
--Creating new operations for variant [Variant id: 108, #gens: 186, #ops: 0, parent:107]
---analyzing modificationPoint position: 132
Templates availables8
Attempts Base Ingredients  1 total 8
vars from patch [i, height, j, width, matrix]
--> var from patch: i spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: height spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: j spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: width spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: matrix spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java152
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < constraints.size(); i++) { 	org.apache.commons.math.optimization.linear.LinearCo[...] ` -topatch--> `for (int i = 0; i < height; i++) { 	for (int j = 0; j < (width - 1); j++) { 		matrix[i][j] = getEntr[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 152, pointed element: CtForImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < constraints.size(); i++) { 	org.apache.commons.math.optimization.linear.LinearCo[...] ` -topatch--> `for (int i = 0; i < height; i++) { 	for (int j = 0; j < (width - 1); j++) { 		matrix[i][j] = getEntr[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 108, #gens: 186, #ops: 1, parent:107] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 108, errors: [SimplexTableau.java:386: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:386: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:386: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:386: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:386: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:386: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:388: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:388: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:388: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:388: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:388: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:388: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:388: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:390: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:390: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:391: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:392: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:392: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:393: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:393: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:394: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:395: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:395: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:395: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:396: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:396: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:396: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:396: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:396: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:396: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:409: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:409: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:409: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:409: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:409: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:409: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:413: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:413: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:417: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:417: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:425: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:425: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:425: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:425: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:434: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:434: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:434: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:434: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:434: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:438: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:438: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:442: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;
	    	^, SimplexTableau.java:442: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;
	    	                                               ^, SimplexTableau.java:449: error: illegal start of expression
	 */ 	protected final int getRhsOffset() {
	    	^, SimplexTableau.java:449: error: ';' expected
	 */ 	protected final int getRhsOffset() {
	    	                                ^, SimplexTableau.java:458: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() {
	    	^, SimplexTableau.java:458: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() {
	    	                                                     ^, SimplexTableau.java:472: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() {
	    	^, SimplexTableau.java:472: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() {
	    	                                           ^, SimplexTableau.java:481: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() {
	    	^, SimplexTableau.java:481: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() {
	    	                                                   ^, SimplexTableau.java:489: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() {
	    	^, SimplexTableau.java:489: error: ';' expected
	 */ 	protected final int getNumSlackVariables() {
	    	                                        ^, SimplexTableau.java:497: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() {
	    	^, SimplexTableau.java:497: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() {
	    	                                             ^, SimplexTableau.java:505: error: illegal start of expression
	 */ 	protected final double[][] getData() {
	    	^, SimplexTableau.java:505: error: ';' expected
	 */ 	protected final double[][] getData() {
	    	                                  ^, SimplexTableau.java:511: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) {
	    	                    	                     ^, SimplexTableau.java:511: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) {
	    	                    	                                            ^, SimplexTableau.java:542: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() {
	    	                    	                   ^, SimplexTableau.java:560: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	^, SimplexTableau.java:560: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	        ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                        ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                       ^, SimplexTableau.java:560: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                                       ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                                                   ^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	        ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                     ^, SimplexTableau.java:572: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                              ^, SimplexTableau.java:572: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                                                   ^, SimplexTableau.java:573: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(54): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < constraints.size(); i++) { 	org.apache.commons.math.optimization.linear.LinearCo[...] ` -topatch--> `for (int i = 0; i < height; i++) { 	for (int j = 0; j < (width - 1); j++) { 		matrix[i][j] = getEntr[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (107(f=1.0), 108(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (107(f=1.0), )
----------Running generation: 55, population size: 1

***** Generation 55 : 0
**Parent Variant: [Variant id: 109, #gens: 186, #ops: 0, parent:-]

--Child created id: 110
--Creating new operations for variant [Variant id: 110, #gens: 186, #ops: 0, parent:109]
---analyzing modificationPoint position: 70
location: SimplexTableau.java370
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRo[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 110, #gens: 185, #ops: 1, parent:109] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 110
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-110/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 14] ,[]
-Valid?: |false|4|14|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(55): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRo[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (109(f=1.0), 110(f=4.0), )
Selected to next generation: IDs2--> (109(f=1.0), )
----------Running generation: 56, population size: 1

***** Generation 56 : 0
**Parent Variant: [Variant id: 111, #gens: 186, #ops: 0, parent:-]

--Child created id: 112
--Creating new operations for variant [Variant id: 112, #gens: 186, #ops: 0, parent:111]
---analyzing modificationPoint position: 4
Templates availables31
Attempts Base Ingredients  1 total 31
---modifPoint 0 not mutation generated in  return null
---analyzing modificationPoint position: 119
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  // create a matrix of the correct size java.util.List<org.apache.commons.math.optimization.linear.Li[...]
---analyzing modificationPoint position: 46
Templates availables12
Attempts Base Ingredients  1 total 12
---modifPoint 2 not mutation generated in  final double ratio = rhs / entry
---analyzing modificationPoint position: 38
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch [this.restrictToNonNegative]
--> var from patch: this.restrictToNonNegative spoon.support.reflect.code.CtFieldWriteImpl
location: AbstractLinearOptimizer.java67
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `this.restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 67, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `this.restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 112, #gens: 186, #ops: 1, parent:111] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 112
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-112/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(56): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `this.restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (111(f=1.0), 112(f=14.0), )
Selected to next generation: IDs2--> (111(f=1.0), )
----------Running generation: 57, population size: 1

***** Generation 57 : 0
**Parent Variant: [Variant id: 113, #gens: 186, #ops: 0, parent:-]

--Child created id: 114
--Creating new operations for variant [Variant id: 114, #gens: 186, #ops: 0, parent:113]
---analyzing modificationPoint position: 26
location: SimplexSolver.java188
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 114, #gens: 185, #ops: 1, parent:113] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 114
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-114/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 5, was successful: false, cases executed: 14] ,[]
-Valid?: |false|5|14|[]|, fitness 5.0
Ingredient counter is Zero
---Undoing: gnrtn(57): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (113(f=1.0), 114(f=5.0), )
Selected to next generation: IDs2--> (113(f=1.0), )
----------Running generation: 58, population size: 1

***** Generation 58 : 0
**Parent Variant: [Variant id: 115, #gens: 186, #ops: 0, parent:-]

--Child created id: 116
--Creating new operations for variant [Variant id: 116, #gens: 186, #ops: 0, parent:115]
---analyzing modificationPoint position: 157
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...]
---analyzing modificationPoint position: 153
Templates availables3
Attempts Base Ingredients  1 total 3
vars from patch [constraints, constraint, relationship, count]
--> var from patch: constraints spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: constraint spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: relationship spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: count spoon.support.reflect.code.CtVariableWriteImpl
location: SimplexTableau.java235
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForEachImpl) `for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { [...] ` -topatch--> `for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { [...]` (spoon.support.reflect.code.CtForEachImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 235, pointed element: CtForEachImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForEachImpl) `for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { [...] ` -topatch--> `for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { [...]` (spoon.support.reflect.code.CtForEachImpl) 

--Summary Creation: for variant [Variant id: 116, #gens: 186, #ops: 1, parent:115] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 116
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-116/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(58): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForEachImpl) `for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { [...] ` -topatch--> `for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { [...]` (spoon.support.reflect.code.CtForEachImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (115(f=1.0), 116(f=1.0), )
Selected to next generation: IDs2--> (115(f=1.0), )
----------Running generation: 59, population size: 1

***** Generation 59 : 0
**Parent Variant: [Variant id: 117, #gens: 186, #ops: 0, parent:-]

--Child created id: 118
--Creating new operations for variant [Variant id: 118, #gens: 186, #ops: 0, parent:117]
---analyzing modificationPoint position: 166
---modifPoint 0 not mutation generated in  return data.length
---analyzing modificationPoint position: 28
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java190
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtWhileImpl) `while (!isOptimal(tableau)) { 	doIteration(tableau); }  ` -topatch--> `while (!isOptimal(tableau)) { 	doIteration(tableau); } ` (spoon.support.reflect.code.CtWhileImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 190, pointed element: CtWhileImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtWhileImpl) `while (!isOptimal(tableau)) { 	doIteration(tableau); }  ` -topatch--> `while (!isOptimal(tableau)) { 	doIteration(tableau); } ` (spoon.support.reflect.code.CtWhileImpl) 

--Summary Creation: for variant [Variant id: 118, #gens: 187, #ops: 1, parent:117] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 118
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-118/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(59): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtWhileImpl) `while (!isOptimal(tableau)) { 	doIteration(tableau); }  ` -topatch--> `while (!isOptimal(tableau)) { 	doIteration(tableau); } ` (spoon.support.reflect.code.CtWhileImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (117(f=1.0), 118(f=1.0), )
Selected to next generation: IDs2--> (117(f=1.0), )
----------Running generation: 60, population size: 1

***** Generation 60 : 0
**Parent Variant: [Variant id: 119, #gens: 186, #ops: 0, parent:-]

--Child created id: 120
--Creating new operations for variant [Variant id: 120, #gens: 186, #ops: 0, parent:119]
---analyzing modificationPoint position: 164
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 0 not mutation generated in  if (data.length != n) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentExc[...]
---analyzing modificationPoint position: 154
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  if (constraint.getRelationship() == relationship) { 	++count; }
---analyzing modificationPoint position: 90
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 2 not mutation generated in  if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) [...]
---analyzing modificationPoint position: 25
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 3 not mutation generated in  matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack 
---analyzing modificationPoint position: 142
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java183
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return matrix ` -topatch--> `int artificialVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 183, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return matrix ` -topatch--> `int artificialVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 120, #gens: 187, #ops: 1, parent:119] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 120, errors: [SimplexTableau.java:182: error: variable artificialVar is already defined in method createTableau(boolean)
		} 		int artificialVar = 0;
		  		    ^]
Ingredient counter is Zero
---Undoing: gnrtn(60): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return matrix ` -topatch--> `int artificialVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (119(f=1.0), 120(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (119(f=1.0), )
----------Running generation: 61, population size: 1

***** Generation 61 : 0
**Parent Variant: [Variant id: 121, #gens: 186, #ops: 0, parent:-]

--Child created id: 122
--Creating new operations for variant [Variant id: 122, #gens: 186, #ops: 0, parent:121]
---analyzing modificationPoint position: 183
Templates availables120
Attempts Base Ingredients  1 total 120
---modifPoint 0 not mutation generated in  return (data == null) || (data[0] == null) ? 0 : data[0].length
---analyzing modificationPoint position: 147
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  normalized.add(normalize(constraint))
---analyzing modificationPoint position: 76
Templates availables68
Attempts Base Ingredients  1 total 68
---modifPoint 2 not mutation generated in  return -1
---analyzing modificationPoint position: 111
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [restrictToNonNegative, numDecisionVariables]
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtFieldReadImpl
SameName: final 





































































































boolean restrictToNonNegative
SameName: final 





































































































boolean restrictToNonNegative
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
Transforming shadowed variable in return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1
location: SimplexTableau.java106
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 106, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 122, #gens: 187, #ops: 1, parent:121] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 122, errors: [SimplexTableau.java:494: error: illegal start of type
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		^, SimplexTableau.java:494: error: ';' expected
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		      ^, SimplexTableau.java:498: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	       ^, SimplexTableau.java:498: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	                               		                                          ^, SimplexTableau.java:502: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	       ^, SimplexTableau.java:502: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		^, SimplexTableau.java:502: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                      ^, SimplexTableau.java:502: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                        		                  ^, SimplexTableau.java:508: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                     ^, SimplexTableau.java:508: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                         ^, SimplexTableau.java:508: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                           		                                                                                                                                                           ^, SimplexTableau.java:512: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                ^, SimplexTableau.java:512: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                                                 		                                               ^, SimplexTableau.java:518: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                          ^, SimplexTableau.java:518: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		^, SimplexTableau.java:518: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		           ^, SimplexTableau.java:518: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				        ^, SimplexTableau.java:518: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				           		             ^, SimplexTableau.java:521: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                            ^, SimplexTableau.java:521: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                    ^, SimplexTableau.java:521: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			^, SimplexTableau.java:521: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			                         ^, SimplexTableau.java:527: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                         ^, SimplexTableau.java:527: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		^, SimplexTableau.java:527: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                   ^, SimplexTableau.java:527: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                     		           ^, SimplexTableau.java:533: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                            ^, SimplexTableau.java:533: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                                       		                              ^, SimplexTableau.java:539: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                       ^, SimplexTableau.java:539: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                                  		                               ^, SimplexTableau.java:545: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                            ^, SimplexTableau.java:545: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		^, SimplexTableau.java:545: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		^, SimplexTableau.java:545: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                    ^, SimplexTableau.java:545: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                     ^, SimplexTableau.java:545: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				        ^, SimplexTableau.java:545: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				            ^, SimplexTableau.java:545: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				               		           ^, SimplexTableau.java:547: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			       ^, SimplexTableau.java:547: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		^, SimplexTableau.java:547: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		^, SimplexTableau.java:547: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		^, SimplexTableau.java:547: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                ^, SimplexTableau.java:547: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                            ^, SimplexTableau.java:547: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                ^, SimplexTableau.java:547: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                 ^, SimplexTableau.java:547: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                      ^, SimplexTableau.java:547: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                       ^, SimplexTableau.java:547: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		^, SimplexTableau.java:547: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		                                ^, SimplexTableau.java:556: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                             ^, SimplexTableau.java:556: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                 ^, SimplexTableau.java:556: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                      ^, SimplexTableau.java:556: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:560: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		^, SimplexTableau.java:560: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		^, SimplexTableau.java:560: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		^, SimplexTableau.java:560: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		^, SimplexTableau.java:560: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                ^, SimplexTableau.java:560: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                         ^, SimplexTableau.java:560: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                                			                                                                                     			^, SimplexTableau.java:567: error: class, interface, or enum expected
	 * @param dividendRow
	          ^, SimplexTableau.java:569: error: class, interface, or enum expected
	 * @param divisor
	          ^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                               ^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                      ^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                ^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                ^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                       			                                                                             ^, SimplexTableau.java:584: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                 ^, SimplexTableau.java:584: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                       ^, SimplexTableau.java:584: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                ^, SimplexTableau.java:584: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                ^, SimplexTableau.java:584: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                ^, SimplexTableau.java:584: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                       			                                                                                                                   ^, SimplexTableau.java:588: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                ^, SimplexTableau.java:588: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                                 		                                    ^, SimplexTableau.java:592: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                ^, SimplexTableau.java:592: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                                  		                                 ^, SimplexTableau.java:600: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                ^, SimplexTableau.java:600: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                      ^, SimplexTableau.java:600: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                     ^, SimplexTableau.java:600: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                                   		                                     ^, SimplexTableau.java:609: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                ^, SimplexTableau.java:609: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                    ^, SimplexTableau.java:609: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                   ^, SimplexTableau.java:609: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                     ^, SimplexTableau.java:609: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                     		                                     ^, SimplexTableau.java:613: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:613: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                               		                                                         ^, SimplexTableau.java:617: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                ^, SimplexTableau.java:617: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                                    		                                                                               ^, SimplexTableau.java:621: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                ^, SimplexTableau.java:621: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                     		                      ^, SimplexTableau.java:626: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                ^, SimplexTableau.java:626: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                          		                                                                      ^, SimplexTableau.java:636: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:636: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                                		                            ^, SimplexTableau.java:641: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                ^, SimplexTableau.java:641: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                        		                                                                               ^, SimplexTableau.java:645: error: class, interface, or enum expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(61): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (121(f=1.0), 122(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (121(f=1.0), )
----------Running generation: 62, population size: 1

***** Generation 62 : 0
**Parent Variant: [Variant id: 123, #gens: 186, #ops: 0, parent:-]

--Child created id: 124
--Creating new operations for variant [Variant id: 124, #gens: 186, #ops: 0, parent:123]
---analyzing modificationPoint position: 76
Templates availables259
Attempts Base Ingredients  1 total 259
vars from patch []
location: MathUtils.java370
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return -1 ` -topatch--> `double sum = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.util.MathUtils line: 370, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return -1 ` -topatch--> `double sum = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 124, #gens: 187, #ops: 1, parent:123] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 124, errors: [MathUtils.java:1667: error: illegal start of type
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		^, MathUtils.java:1667: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		     ^, MathUtils.java:1667: error: ';' expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		        ^, MathUtils.java:1667: error: illegal start of type
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		           ^, MathUtils.java:1667: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		            ^, MathUtils.java:1667: error: ';' expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		              ^, MathUtils.java:1667: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                            ^, MathUtils.java:1667: error: illegal start of type
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                             ^, MathUtils.java:1667: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                                                                 ^, MathUtils.java:1667: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                                                                    ^, MathUtils.java:1668: error: class, interface, or enum expected
		do { 			/* assert u<0 && v<0; */ 			// B4/B3: cast out twos from t.
		^, MathUtils.java:1671: error: class, interface, or enum expected
			if (t > 0) { 				u = -t;} else { 				v = t;} 			// B6/B3. at this point both u and v should be odd. 			t = (v - u) / 2; 			// |u| larger: t positive (replace u) 			// |v| larger: t negative (replace v)} while (t != 0 ); 		return (-u) * (1 << k);// gcd is u*2^k
			             				       ^, MathUtils.java:1671: error: class, interface, or enum expected
			if (t > 0) { 				u = -t;} else { 				v = t;} 			// B6/B3. at this point both u and v should be odd. 			t = (v - u) / 2; 			// |u| larger: t positive (replace u) 			// |v| larger: t negative (replace v)} while (t != 0 ); 		return (-u) * (1 << k);// gcd is u*2^k
			             				                				      ^, MathUtils.java:1678: error: class, interface, or enum expected
	 */ 	public static int hash(double value) { 		return new java.lang.Double(value).hashCode();} 	/**
	    	              ^, MathUtils.java:1678: error: class, interface, or enum expected
	 */ 	public static int hash(double value) { 		return new java.lang.Double(value).hashCode();} 	/**
	    	                                       		                                              ^, MathUtils.java:1685: error: class, interface, or enum expected
	 */ 	public static int hash(double[] value) { 		return java.util.Arrays.hashCode(value);} 	/**
	    	              ^, MathUtils.java:1685: error: class, interface, or enum expected
	 */ 	public static int hash(double[] value) { 		return java.util.Arrays.hashCode(value);} 	/**
	    	                                         		                                        ^, MathUtils.java:1692: error: class, interface, or enum expected
	 */ 	public static byte indicator(final byte x) { 		return x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	/**
	    	              ^, MathUtils.java:1692: error: class, interface, or enum expected
	 */ 	public static byte indicator(final byte x) { 		return x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	/**
	    	                                   ^, MathUtils.java:1692: error: class, interface, or enum expected
	 */ 	public static byte indicator(final byte x) { 		return x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	/**
	    	                                             		                                                                                                                                              ^, MathUtils.java:1700: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	              ^, MathUtils.java:1700: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	                                     ^, MathUtils.java:1700: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	                                                 		                                 			                            ^, MathUtils.java:1700: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	                                                 		                                 			                              		                             ^, MathUtils.java:1707: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	              ^, MathUtils.java:1707: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	                                    ^, MathUtils.java:1707: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	                                               		                                			                           ^, MathUtils.java:1707: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	                                               		                                			                             		                                ^, MathUtils.java:1713: error: class, interface, or enum expected
	 */ 	public static int indicator(final int x) { 		return x >= 0 ? 1 : -1;} 	/**
	    	              ^, MathUtils.java:1713: error: class, interface, or enum expected
	 */ 	public static int indicator(final int x) { 		return x >= 0 ? 1 : -1;} 	/**
	    	                                  ^, MathUtils.java:1713: error: class, interface, or enum expected
	 */ 	public static int indicator(final int x) { 		return x >= 0 ? 1 : -1;} 	/**
	    	                                           		                       ^, MathUtils.java:1719: error: class, interface, or enum expected
	 */ 	public static long indicator(final long x) { 		return x >= 0L ? 1L : -1L;} 	/**
	    	              ^, MathUtils.java:1719: error: class, interface, or enum expected
	 */ 	public static long indicator(final long x) { 		return x >= 0L ? 1L : -1L;} 	/**
	    	                                   ^, MathUtils.java:1719: error: class, interface, or enum expected
	 */ 	public static long indicator(final long x) { 		return x >= 0L ? 1L : -1L;} 	/**
	    	                                             		                          ^, MathUtils.java:1726: error: class, interface, or enum expected
	 */ 	public static short indicator(final short x) { 		return x >= org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} 	/**
	    	              ^, MathUtils.java:1726: error: class, interface, or enum expected
	 */ 	public static short indicator(final short x) { 		return x >= org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} 	/**
	    	                                    ^, MathUtils.java:1726: error: class, interface, or enum expected
	 */ 	public static short indicator(final short x) { 		return x >= org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} 	/**
	    	                                               		                                                                                                                                              ^, MathUtils.java:1750: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	              ^, MathUtils.java:1750: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			         ^, MathUtils.java:1750: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			           		                                                                                                                                           		^, MathUtils.java:1750: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			           		                                                                                                                                           		                                          			                                                                 ^, MathUtils.java:1750: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			           		                                                                                                                                           		                                          			                                                                   		           ^, MathUtils.java:1767: error: class, interface, or enum expected
	 */ 	public static double log(double base, double x) { 		return java.lang.Math.log(x) / java.lang.Math.log(base);} 	/**
	    	              ^, MathUtils.java:1767: error: class, interface, or enum expected
	 */ 	public static double log(double base, double x) { 		return java.lang.Math.log(x) / java.lang.Math.log(base);} 	/**
	    	                                                  		                                                        ^, MathUtils.java:1779: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	              ^, MathUtils.java:1779: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	                                              		                                      		^, MathUtils.java:1779: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	                                              		                                      		                                                                              			                                                         ^, MathUtils.java:1779: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	                                              		                                      		                                                                              			                                                           		                   ^, MathUtils.java:1791: error: class, interface, or enum expected
	 */ 	public static long mulAndCheck(long a, long b) { 		long ret; 		java.lang.String msg = "overflow: multiply"; 		if (a > b) { 			// use symmetry to reduce boundary cases 			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);} else if (a < 0) { 			if (b < 0) { 				// check for positive overflow with negative a, negative b
	    	              ^, MathUtils.java:1791: error: class, interface, or enum expected
	 */ 	public static long mulAndCheck(long a, long b) { 		long ret; 		java.lang.String msg = "overflow: multiply"; 		if (a > b) { 			// use symmetry to reduce boundary cases 			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);} else if (a < 0) { 			if (b < 0) { 				// check for positive overflow with negative a, negative b
	    	                                                 		          		^, MathUtils.java:1791: error: class, interface, or enum expected
	 */ 	public static long mulAndCheck(long a, long b) { 		long ret; 		java.lang.String msg = "overflow: multiply"; 		if (a > b) { 			// use symmetry to reduce boundary cases 			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);} else if (a < 0) { 			if (b < 0) { 				// check for positive overflow with negative a, negative b
	    	                                                 		          		                                             		^, MathUtils.java:1792: error: class, interface, or enum expected
				if (a >= (java.lang.Long.MAX_VALUE / b)) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else if (b > 0) { 				// check for negative overflow with negative a, positive b
				                                           					            ^, MathUtils.java:1792: error: class, interface, or enum expected
				if (a >= (java.lang.Long.MAX_VALUE / b)) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else if (b > 0) { 				// check for negative overflow with negative a, positive b
				                                           					                     					                                             ^, MathUtils.java:1793: error: class, interface, or enum expected
				if ((java.lang.Long.MIN_VALUE / b) <= a) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else { 				// assert b == 0 				ret = 0;}} else if (a > 0) { 			// assert a > 0 			// assert b > 0 			// check for positive overflow with positive a, positive b
				                                           					            ^, MathUtils.java:1793: error: class, interface, or enum expected
				if ((java.lang.Long.MIN_VALUE / b) <= a) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else { 				// assert b == 0 				ret = 0;}} else if (a > 0) { 			// assert a > 0 			// assert b > 0 			// check for positive overflow with positive a, positive b
				                                           					                     					                                             ^, MathUtils.java:1794: error: class, interface, or enum expected
			if (a <= (java.lang.Long.MAX_VALUE / b)) { 				ret = a * b;} else { 				throw new java.lang.ArithmeticException(msg);}} else { 			// assert a == 0 			ret = 0;} 		return ret;} 	/**
			                                           				            ^, MathUtils.java:1794: error: class, interface, or enum expected
			if (a <= (java.lang.Long.MAX_VALUE / b)) { 				ret = a * b;} else { 				throw new java.lang.ArithmeticException(msg);}} else { 			// assert a == 0 			ret = 0;} 		return ret;} 	/**
			                                           				                     				                                             ^, MathUtils.java:1800: error: class, interface, or enum expected
	 * <code>d</code> is returned; otherwise the largest representable number
	                               ^, MathUtils.java:1805: error: class, interface, or enum expected
	 * @param d
	          ^, MathUtils.java:1807: error: class, interface, or enum expected
	 * @param direction
	          ^, MathUtils.java:1810: error: <identifier> expected
	 * @return the next machine representable number in the specified direction
	    ^, MathUtils.java:1810: error: class, interface, or enum expected
	 * @return the next machine representable number in the specified direction
	           ^, MathUtils.java:1811: error: class, interface, or enum expected
	 * @since 1.2
	          ^, MathUtils.java:1812: error: class, interface, or enum expected
	 */ 	public static double nextAfter(double d, double direction) { 		// handling of some important special cases
	    	              ^, MathUtils.java:1813: error: class, interface, or enum expected
		if (java.lang.Double.isNaN(d) || java.lang.Double.isInfinite(d)) { 			return d;} else if (d == 0) { 			return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;} 		// special cases MAX_VALUE to infinity and  MIN_VALUE to 0 		// are handled just as normal numbers 		// split the double in raw components 		long bits = java.lang.Double.doubleToLongBits(d); 		long sign = bits & 0x8000000000000000L; 		long exponent = bits & 0x7ff0000000000000L; 		long mantissa = bits & 0xfffffffffffffL; 		if ((d * (direction - d)) >= 0) { 			// we should increase the mantissa
		                                                                   			         ^, MathUtils.java:1813: error: class, interface, or enum expected
		if (java.lang.Double.isNaN(d) || java.lang.Double.isInfinite(d)) { 			return d;} else if (d == 0) { 			return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;} 		// special cases MAX_VALUE to infinity and  MIN_VALUE to 0 		// are handled just as normal numbers 		// split the double in raw components 		long bits = java.lang.Double.doubleToLongBits(d); 		long sign = bits & 0x8000000000000000L; 		long exponent = bits & 0x7ff0000000000000L; 		long mantissa = bits & 0xfffffffffffffL; 		if ((d * (direction - d)) >= 0) { 			// we should increase the mantissa
		                                                                   			                              			                                                                                ^, MathUtils.java:1814: error: class, interface, or enum expected
			if (mantissa == 0xfffffffffffffL) { 				return java.lang.Double.longBitsToDouble(sign | (exponent + 0x10000000000000L));} else { 				return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa + 1));}} else // we should decrease the mantissa
			                                    				                                                                                ^, MathUtils.java:1814: error: class, interface, or enum expected
			if (mantissa == 0xfffffffffffffL) { 				return java.lang.Double.longBitsToDouble(sign | (exponent + 0x10000000000000L));} else { 				return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa + 1));}} else // we should decrease the mantissa
			                                    				                                                                                         				                                                                             ^, MathUtils.java:1815: error: class, interface, or enum expected
		if (mantissa == 0L) { 			return java.lang.Double.longBitsToDouble((sign | (exponent - 0x10000000000000L)) | 0xfffffffffffffL);} else { 			return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa - 1));}} 	/**
		                      			                                                                                                     ^, MathUtils.java:1815: error: class, interface, or enum expected
		if (mantissa == 0L) { 			return java.lang.Double.longBitsToDouble((sign | (exponent - 0x10000000000000L)) | 0xfffffffffffffL);} else { 			return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa - 1));}} 	/**
		                      			                                                                                                              			                                                                             ^, MathUtils.java:1825: error: class, interface, or enum expected
	 */ 	public static double scalb(final double d, final int scaleFactor) { 		// handling of some important special cases
	    	              ^, MathUtils.java:1825: error: class, interface, or enum expected
	 */ 	public static double scalb(final double d, final int scaleFactor) { 		// handling of some important special cases
	    	                                 ^, MathUtils.java:1825: error: class, interface, or enum expected
	 */ 	public static double scalb(final double d, final int scaleFactor) { 		// handling of some important special cases
	    	                                                 ^, MathUtils.java:1826: error: class, interface, or enum expected
		if (((d == 0) || java.lang.Double.isNaN(d)) || java.lang.Double.isInfinite(d)) { 			return d;} 		// split the double in raw components 		final long bits = java.lang.Double.doubleToLongBits(d); 		final long exponent = bits & 0x7ff0000000000000L; 		final long rest = bits & 0x800fffffffffffffL; 		// shift the exponent 		final long newBits = rest | (exponent + (((long) (scaleFactor)) << 52)); 		return java.lang.Double.longBitsToDouble(newBits);} 	/**
		                                                                                 			         ^, MathUtils.java:1830: error: class, interface, or enum expected
	 *   <li>normalize an angle between 0 and 2&pi;:<br/>
	                                               ^, MathUtils.java:1831: error: class, interface, or enum expected
	 *       <code>a = MathUtils.normalizeAngle(a, Math.PI);</code></li>
	                                                        ^, MathUtils.java:1832: error: class, interface, or enum expected
	 *   <li>normalize an angle between -&pi; and +&pi;<br/>
	                                          ^, MathUtils.java:1832: error: class, interface, or enum expected
	 *   <li>normalize an angle between -&pi; and +&pi;<br/>
	                                                   ^, MathUtils.java:1833: error: class, interface, or enum expected
	 *       <code>a = MathUtils.normalizeAngle(a, 0.0);</code></li>
	                                                    ^, MathUtils.java:1835: error: class, interface, or enum expected
	 *       <code>angle = MathUtils.normalizeAngle(end, start) - start;</code></li>
	                                                                    ^, MathUtils.java:1837: error: class, interface, or enum expected
	 * <p>Note that due to numerical accuracy and since &pi; cannot be represented
	                                                         ^, MathUtils.java:1841: error: class, interface, or enum expected
	 * @param a
	          ^, MathUtils.java:1843: error: class, interface, or enum expected
	 * @param center
	          ^, MathUtils.java:1844: error: class, interface, or enum expected
	 * 		center of the desired 2&pi; interval for the result
	   		                            ^, MathUtils.java:1845: error: <identifier> expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	    ^, MathUtils.java:1845: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	           ^, MathUtils.java:1845: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                    ^, MathUtils.java:1845: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                   ^, MathUtils.java:1845: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                       ^, MathUtils.java:1845: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                                  ^, MathUtils.java:1845: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                                      ^, MathUtils.java:1846: error: class, interface, or enum expected
	 * @since 1.2
	 ^, MathUtils.java:1846: error: class, interface, or enum expected
	 * @since 1.2
	          ^, MathUtils.java:1847: error: class, interface, or enum expected
	 */ 	public static double normalizeAngle(double a, double center) { 		return a - (org.apache.commons.math.util.MathUtils.TWO_PI * java.lang.Math.floor(((a + java.lang.Math.PI) - center) / org.apache.commons.math.util.MathUtils.TWO_PI));} 	/**
	    	              ^, MathUtils.java:1847: error: class, interface, or enum expected
	 */ 	public static double normalizeAngle(double a, double center) { 		return a - (org.apache.commons.math.util.MathUtils.TWO_PI * java.lang.Math.floor(((a + java.lang.Math.PI) - center) / org.apache.commons.math.util.MathUtils.TWO_PI));} 	/**
	    	                                                               		                                                                                                                                                                      ^, MathUtils.java:1857: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale) { 		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} 	/**
	    	              ^, MathUtils.java:1857: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale) { 		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} 	/**
	    	                                                  		                                                                                                  ^, MathUtils.java:1871: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale, int roundingMethod) { 		try { 			return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { 			if (java.lang.Double.isInfinite(x)) { 				return x;} else { 				return java.lang.Double.NaN;}}} 	/**
	    	              ^, MathUtils.java:1871: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale, int roundingMethod) { 		try { 			return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { 			if (java.lang.Double.isInfinite(x)) { 				return x;} else { 				return java.lang.Double.NaN;}}} 	/**
	    	                                                                      		      			                                                                                                            ^, MathUtils.java:1871: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale, int roundingMethod) { 		try { 			return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { 			if (java.lang.Double.isInfinite(x)) { 				return x;} else { 				return java.lang.Double.NaN;}}} 	/**
	    	                                                                      		      			                                                                                                                                                           			                                      				         ^]
Ingredient counter is Zero
---Undoing: gnrtn(62): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return -1 ` -topatch--> `double sum = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (123(f=1.0), 124(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (123(f=1.0), )
----------Running generation: 63, population size: 1

***** Generation 63 : 0
**Parent Variant: [Variant id: 125, #gens: 186, #ops: 0, parent:-]

--Child created id: 126
--Creating new operations for variant [Variant id: 126, #gens: 186, #ops: 0, parent:125]
---analyzing modificationPoint position: 121
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java129
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int height = constraints.size() + getNumObjectiveFunctions() ` -topatch--> `int count = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 129, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int height = constraints.size() + getNumObjectiveFunctions() ` -topatch--> `int count = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 126, #gens: 187, #ops: 1, parent:125] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 126, errors: [SimplexTableau.java:241: error: illegal start of type
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		^, SimplexTableau.java:241: error: ';' expected
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		      ^, SimplexTableau.java:245: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	       ^, SimplexTableau.java:245: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	                               		                                          ^, SimplexTableau.java:249: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	       ^, SimplexTableau.java:249: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		^, SimplexTableau.java:249: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                      ^, SimplexTableau.java:249: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                        		                  ^, SimplexTableau.java:255: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                     ^, SimplexTableau.java:255: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                         ^, SimplexTableau.java:255: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                           		                                                                                                                                                           ^, SimplexTableau.java:259: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                ^, SimplexTableau.java:259: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                                                 		                                               ^, SimplexTableau.java:265: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                          ^, SimplexTableau.java:265: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		^, SimplexTableau.java:265: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		           ^, SimplexTableau.java:265: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				        ^, SimplexTableau.java:265: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				           		             ^, SimplexTableau.java:268: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                            ^, SimplexTableau.java:268: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                    ^, SimplexTableau.java:268: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			^, SimplexTableau.java:268: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			                         ^, SimplexTableau.java:274: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                         ^, SimplexTableau.java:274: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		^, SimplexTableau.java:274: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                   ^, SimplexTableau.java:274: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                     		           ^, SimplexTableau.java:280: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                            ^, SimplexTableau.java:280: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                                       		                              ^, SimplexTableau.java:286: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                       ^, SimplexTableau.java:286: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                                  		                               ^, SimplexTableau.java:292: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null;
	    	                                            ^, SimplexTableau.java:293: error: class, interface, or enum expected
		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0;
		^, SimplexTableau.java:294: error: class, interface, or enum expected
		for (int i = start; i < getHeight(); i++) {
		^, SimplexTableau.java:294: error: class, interface, or enum expected
		for (int i = start; i < getHeight(); i++) {
		                    ^, SimplexTableau.java:294: error: class, interface, or enum expected
		for (int i = start; i < getHeight(); i++) {
		                                     ^, SimplexTableau.java:297: error: class, interface, or enum expected
			} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
			^, SimplexTableau.java:299: error: class, interface, or enum expected
			}
			^, SimplexTableau.java:302: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:310: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:312: error: class, interface, or enum expected
		int height = getHeight() - 1;
		^, SimplexTableau.java:313: error: class, interface, or enum expected
		double[][] matrix = new double[height][width];
		^, SimplexTableau.java:314: error: class, interface, or enum expected
		for (int i = 0; i < height; i++) {
		^, SimplexTableau.java:314: error: class, interface, or enum expected
		for (int i = 0; i < height; i++) {
		                ^, SimplexTableau.java:314: error: class, interface, or enum expected
		for (int i = 0; i < height; i++) {
		                            ^, SimplexTableau.java:315: error: class, interface, or enum expected
			for (int j = 0; j < (width - 1); j++) {
			                ^, SimplexTableau.java:315: error: class, interface, or enum expected
			for (int j = 0; j < (width - 1); j++) {
			                                 ^, SimplexTableau.java:317: error: class, interface, or enum expected
			}
			^, SimplexTableau.java:319: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:321: error: class, interface, or enum expected
		this.numArtificialVariables = 0;
		^, SimplexTableau.java:322: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:334: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);}
	    	                             ^, SimplexTableau.java:334: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);}
	    	                                                 ^, SimplexTableau.java:334: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);}
	    	                                                                      ^, SimplexTableau.java:334: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);}
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:342: error: class, interface, or enum expected
		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());
		^, SimplexTableau.java:343: error: class, interface, or enum expected
		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
		^, SimplexTableau.java:344: error: class, interface, or enum expected
		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>();
		^, SimplexTableau.java:345: error: class, interface, or enum expected
		for (int i = 0; i < coefficients.length; i++) {
		^, SimplexTableau.java:345: error: class, interface, or enum expected
		for (int i = 0; i < coefficients.length; i++) {
		                ^, SimplexTableau.java:345: error: class, interface, or enum expected
		for (int i = 0; i < coefficients.length; i++) {
		                                         ^, SimplexTableau.java:347: error: class, interface, or enum expected
			if (basicRows.contains(basicRow)) {
			^, SimplexTableau.java:351: error: class, interface, or enum expected
			} else {
			^, SimplexTableau.java:353: error: class, interface, or enum expected
				coefficients[i] = 
				^, SimplexTableau.java:356: error: class, interface, or enum expected
			}
			^, SimplexTableau.java:359: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                               ^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                                                      ^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                                                                        		                ^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                                                                        		                                ^, SimplexTableau.java:373: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                 ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                       ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                                                ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                                                                   		                ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                                                                   		                                ^, SimplexTableau.java:391: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:398: error: class, interface, or enum expected
	 */ 	protected final int getWidth() {
	    	                ^, SimplexTableau.java:400: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:406: error: class, interface, or enum expected
	 */ 	protected final int getHeight() {
	    	                ^, SimplexTableau.java:408: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                ^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                      ^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                                     ^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                                                   		                                     ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                    ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                   ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                                     ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                                                     		                                     ^, SimplexTableau.java:433: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() {
	    	                ^, SimplexTableau.java:435: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:441: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() {
	    	                ^, SimplexTableau.java:443: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:449: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() {
	    	                ^, SimplexTableau.java:451: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:458: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() {
	    	                ^, SimplexTableau.java:460: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:472: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() {
	    	                ^, SimplexTableau.java:474: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:481: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() {
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(63): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int height = constraints.size() + getNumObjectiveFunctions() ` -topatch--> `int count = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (125(f=1.0), 126(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (125(f=1.0), )
----------Running generation: 64, population size: 1

***** Generation 64 : 0
**Parent Variant: [Variant id: 127, #gens: 186, #ops: 0, parent:-]

--Child created id: 128
--Creating new operations for variant [Variant id: 128, #gens: 186, #ops: 0, parent:127]
---analyzing modificationPoint position: 92
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  return row
---analyzing modificationPoint position: 104
Templates availables18
Attempts Base Ingredients  1 total 18
---modifPoint 1 not mutation generated in  this.constantTerm = constantTerm
---analyzing modificationPoint position: 35
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java62
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)[...] ` -topatch--> `java.lang.Integer minPos = null` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 62, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)[...] ` -topatch--> `java.lang.Integer minPos = null` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 128, #gens: 187, #ops: 1, parent:127] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 128, errors: [SimplexSolver.java:62: error: variable minPos is already defined in method getPivotColumn(org.apache.commons.math.optimization.linear.SimplexTableau)
		for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 			java.lang.Integer minPos = null;
		                                                                                      			                  ^]
Ingredient counter is Zero
---Undoing: gnrtn(64): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)[...] ` -topatch--> `java.lang.Integer minPos = null` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (127(f=1.0), 128(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (127(f=1.0), )
----------Running generation: 65, population size: 1

***** Generation 65 : 0
**Parent Variant: [Variant id: 129, #gens: 186, #ops: 0, parent:-]

--Child created id: 130
--Creating new operations for variant [Variant id: 130, #gens: 186, #ops: 0, parent:129]
---analyzing modificationPoint position: 22
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java147
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (tableau.getNumArtificialVariables() > 0) { 	return false; } ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 147, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (tableau.getNumArtificialVariables() > 0) { 	return false; } ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 130, #gens: 187, #ops: 1, parent:129] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 130, errors: [SimplexSolver.java:148: error: unreachable statement
	 */ 	public boolean isOptimal(final org.apache.commons.math.optimization.linear.SimplexTableau tableau) { 		return false; 		if (tableau.getNumArtificialVariables() > 0) {
	    	                                                                                                     		              		^]
Ingredient counter is Zero
---Undoing: gnrtn(65): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (tableau.getNumArtificialVariables() > 0) { 	return false; } ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (129(f=1.0), 130(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (129(f=1.0), )
----------Running generation: 66, population size: 1

***** Generation 66 : 0
**Parent Variant: [Variant id: 131, #gens: 186, #ops: 0, parent:-]

--Child created id: 132
--Creating new operations for variant [Variant id: 132, #gens: 186, #ops: 0, parent:131]
---analyzing modificationPoint position: 110
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  this.f = f
---analyzing modificationPoint position: 4
---modifPoint 1 not mutation generated in  return null
---analyzing modificationPoint position: 106
---modifPoint 2 not mutation generated in  return constantTerm
---analyzing modificationPoint position: 94
Templates availables82
Attempts Base Ingredients  1 total 82
---modifPoint 3 not mutation generated in  for (int i = 0; i < data.length; i++) { 	out[i] = data[i] * d; }
---analyzing modificationPoint position: 99
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [this.numArtificialVariables]
--> var from patch: this.numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java398
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getColumnDimension() ` -topatch--> `return this.numArtificialVariables > 0 ? 2 : 1` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 398, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getColumnDimension() ` -topatch--> `return this.numArtificialVariables > 0 ? 2 : 1` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 132, #gens: 187, #ops: 1, parent:131] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 132, errors: [SimplexTableau.java:399: error: unreachable statement
		return tableau.getColumnDimension();
		^]
Ingredient counter is Zero
---Undoing: gnrtn(66): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getColumnDimension() ` -topatch--> `return this.numArtificialVariables > 0 ? 2 : 1` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (131(f=1.0), 132(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (131(f=1.0), )
----------Running generation: 67, population size: 1

***** Generation 67 : 0
**Parent Variant: [Variant id: 133, #gens: 186, #ops: 0, parent:-]

--Child created id: 134
--Creating new operations for variant [Variant id: 134, #gens: 186, #ops: 0, parent:133]
---analyzing modificationPoint position: 47
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java84
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; } ` -topatch--> `java.lang.Integer minRatioPos = null` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 84, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; } ` -topatch--> `java.lang.Integer minRatioPos = null` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 134, #gens: 187, #ops: 1, parent:133] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 134, errors: [SimplexSolver.java:84: error: variable minRatioPos is already defined in method getPivotRow(int,org.apache.commons.math.optimization.linear.SimplexTableau)
				final double ratio = rhs / entry; 				java.lang.Integer minRatioPos = null;
				                                  				                  ^]
Ingredient counter is Zero
---Undoing: gnrtn(67): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; } ` -topatch--> `java.lang.Integer minRatioPos = null` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (133(f=1.0), 134(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (133(f=1.0), )
----------Running generation: 68, population size: 1

***** Generation 68 : 0
**Parent Variant: [Variant id: 135, #gens: 186, #ops: 0, parent:-]

--Child created id: 136
--Creating new operations for variant [Variant id: 136, #gens: 186, #ops: 0, parent:135]
---analyzing modificationPoint position: 5
---modifPoint 0 not mutation generated in  return coefficients.dotProduct(point) + constantTerm
---analyzing modificationPoint position: 95
Templates availables83
Attempts Base Ingredients  1 total 83
---modifPoint 1 not mutation generated in  out[i] = data[i] * d
---analyzing modificationPoint position: 0
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch []
location: SimplexSolver.java169
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 169, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 136, #gens: 186, #ops: 1, parent:135] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 136
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-136/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(68): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (135(f=1.0), 136(f=1.0), )
Selected to next generation: IDs2--> (135(f=1.0), )
----------Running generation: 69, population size: 1

***** Generation 69 : 0
**Parent Variant: [Variant id: 137, #gens: 186, #ops: 0, parent:-]

--Child created id: 138
--Creating new operations for variant [Variant id: 138, #gens: 186, #ops: 0, parent:137]
---analyzing modificationPoint position: 87
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java291
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer row = null ` -topatch--> `int height = getHeight() - 1` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 291, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer row = null ` -topatch--> `int height = getHeight() - 1` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 138, #gens: 187, #ops: 1, parent:137] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 138
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-138/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(69): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer row = null ` -topatch--> `int height = getHeight() - 1` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (137(f=1.0), 138(f=1.0), )
Selected to next generation: IDs2--> (137(f=1.0), )
----------Running generation: 70, population size: 1

***** Generation 70 : 0
**Parent Variant: [Variant id: 139, #gens: 186, #ops: 0, parent:-]

--Child created id: 140
--Creating new operations for variant [Variant id: 140, #gens: 186, #ops: 0, parent:139]
---analyzing modificationPoint position: 118
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [artificialVar, numArtificialVariables, row]
--> var from patch: artificialVar spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: row spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java115
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `initialize() ` -topatch--> `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 115, pointed element: CtForImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `initialize() ` -topatch--> `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 140, #gens: 187, #ops: 1, parent:139] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 140, errors: [SimplexTableau.java:264: error: illegal start of type
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		^, SimplexTableau.java:264: error: ';' expected
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		      ^, SimplexTableau.java:268: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	       ^, SimplexTableau.java:268: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	                               		                                          ^, SimplexTableau.java:272: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	       ^, SimplexTableau.java:272: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		^, SimplexTableau.java:272: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                      ^, SimplexTableau.java:272: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                        		                  ^, SimplexTableau.java:278: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                     ^, SimplexTableau.java:278: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                         ^, SimplexTableau.java:278: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                           		                                                                                                                                                           ^, SimplexTableau.java:282: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                ^, SimplexTableau.java:282: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                                                 		                                               ^, SimplexTableau.java:288: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                          ^, SimplexTableau.java:288: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		^, SimplexTableau.java:288: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		           ^, SimplexTableau.java:288: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				        ^, SimplexTableau.java:288: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				           		             ^, SimplexTableau.java:291: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                            ^, SimplexTableau.java:291: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                    ^, SimplexTableau.java:291: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			^, SimplexTableau.java:291: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			                         ^, SimplexTableau.java:297: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                         ^, SimplexTableau.java:297: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		^, SimplexTableau.java:297: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                   ^, SimplexTableau.java:297: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                     		           ^, SimplexTableau.java:303: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                            ^, SimplexTableau.java:303: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                                       		                              ^, SimplexTableau.java:309: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                       ^, SimplexTableau.java:309: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                                  		                               ^, SimplexTableau.java:315: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                            ^, SimplexTableau.java:315: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		^, SimplexTableau.java:315: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		^, SimplexTableau.java:315: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                    ^, SimplexTableau.java:315: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                     ^, SimplexTableau.java:315: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				        ^, SimplexTableau.java:315: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				            ^, SimplexTableau.java:315: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				               		           ^, SimplexTableau.java:317: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);}
	    	                                              		                                   			       ^, SimplexTableau.java:317: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);}
	    	                                              		                                   			         		                                                       		^, SimplexTableau.java:317: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);}
	    	                                              		                                   			         		                                                       		                              		^, SimplexTableau.java:317: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);}
	    	                                              		                                   			         		                                                       		                              		                                               		^, SimplexTableau.java:317: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);}
	    	                                              		                                   			         		                                                       		                              		                                               		                ^, SimplexTableau.java:317: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);}
	    	                                              		                                   			         		                                                       		                              		                                               		                            ^, SimplexTableau.java:317: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);}
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                ^, SimplexTableau.java:317: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);}
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                 ^, SimplexTableau.java:317: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);}
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                      ^, SimplexTableau.java:319: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:321: error: class, interface, or enum expected
		this.numArtificialVariables = 0;
		^, SimplexTableau.java:322: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:334: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);}
	    	                             ^, SimplexTableau.java:334: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);}
	    	                                                 ^, SimplexTableau.java:334: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);}
	    	                                                                      ^, SimplexTableau.java:334: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);}
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:342: error: class, interface, or enum expected
		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());
		^, SimplexTableau.java:343: error: class, interface, or enum expected
		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
		^, SimplexTableau.java:344: error: class, interface, or enum expected
		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>();
		^, SimplexTableau.java:345: error: class, interface, or enum expected
		for (int i = 0; i < coefficients.length; i++) {
		^, SimplexTableau.java:345: error: class, interface, or enum expected
		for (int i = 0; i < coefficients.length; i++) {
		                ^, SimplexTableau.java:345: error: class, interface, or enum expected
		for (int i = 0; i < coefficients.length; i++) {
		                                         ^, SimplexTableau.java:347: error: class, interface, or enum expected
			if (basicRows.contains(basicRow)) {
			^, SimplexTableau.java:351: error: class, interface, or enum expected
			} else {
			^, SimplexTableau.java:353: error: class, interface, or enum expected
				coefficients[i] = 
				^, SimplexTableau.java:356: error: class, interface, or enum expected
			}
			^, SimplexTableau.java:359: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                               ^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                                                      ^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                                                                        		                ^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                                                                        		                                ^, SimplexTableau.java:373: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                 ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                       ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                                                ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                                                                   		                ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                                                                   		                                ^, SimplexTableau.java:391: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:398: error: class, interface, or enum expected
	 */ 	protected final int getWidth() {
	    	                ^, SimplexTableau.java:400: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:406: error: class, interface, or enum expected
	 */ 	protected final int getHeight() {
	    	                ^, SimplexTableau.java:408: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                ^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                      ^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                                     ^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                                                   		                                     ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                    ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                   ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                                     ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                                                     		                                     ^, SimplexTableau.java:433: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() {
	    	                ^, SimplexTableau.java:435: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:441: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() {
	    	                ^, SimplexTableau.java:443: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:449: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() {
	    	                ^, SimplexTableau.java:451: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:458: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() {
	    	                ^, SimplexTableau.java:460: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:472: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() {
	    	                ^, SimplexTableau.java:474: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:481: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() {
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(70): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `initialize() ` -topatch--> `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (139(f=1.0), 140(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (139(f=1.0), )
----------Running generation: 71, population size: 1

***** Generation 71 : 0
**Parent Variant: [Variant id: 141, #gens: 186, #ops: 0, parent:-]

--Child created id: 142
--Creating new operations for variant [Variant id: 142, #gens: 186, #ops: 0, parent:141]
---analyzing modificationPoint position: 56
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [this.restrictToNonNegative]
--> var from patch: this.restrictToNonNegative spoon.support.reflect.code.CtFieldWriteImpl
SameName: final 




























































































boolean restrictToNonNegative
SameName: final 




























































































boolean restrictToNonNegative
Transforming shadowed variable in restrictToNonNegative = restrictToNonNegative
location: AbstractLinearOptimizer.java103
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `iterations = 0 ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 103, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `iterations = 0 ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 142, #gens: 187, #ops: 1, parent:141] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 142, errors: [AbstractLinearOptimizer.java:102: error: final parameter restrictToNonNegative may not be assigned
		this.restrictToNonNegative = restrictToNonNegative; 		restrictToNonNegative = restrictToNonNegative;
		                                                    		^]
Ingredient counter is Zero
---Undoing: gnrtn(71): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `iterations = 0 ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (141(f=1.0), 142(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (141(f=1.0), )
----------Running generation: 72, population size: 1

***** Generation 72 : 0
**Parent Variant: [Variant id: 143, #gens: 186, #ops: 0, parent:-]

--Child created id: 144
--Creating new operations for variant [Variant id: 144, #gens: 186, #ops: 0, parent:143]
---analyzing modificationPoint position: 88
Templates availables24
Attempts Base Ingredients  1 total 24
---modifPoint 0 not mutation generated in  int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0
---analyzing modificationPoint position: 118
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  initialize()
---analyzing modificationPoint position: 52
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch [this.goalType]
--> var from patch: this.goalType spoon.support.reflect.code.CtFieldWriteImpl
SameName: final 




























































































org.apache.commons.math.optimization.GoalType goalType
SameName: final 




























































































org.apache.commons.math.optimization.GoalType goalType
Transforming shadowed variable in goalType = goalType
location: AbstractLinearOptimizer.java98
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `goalType = goalType` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 98, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `goalType = goalType` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 144, #gens: 186, #ops: 1, parent:143] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 144, errors: [AbstractLinearOptimizer.java:101: error: final parameter goalType may not be assigned
		goalType = goalType; 		this.constraints = constraints; 		this.goalType = goalType;
		^]
Ingredient counter is Zero
---Undoing: gnrtn(72): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `goalType = goalType` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (143(f=1.0), 144(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (143(f=1.0), )
----------Running generation: 73, population size: 1

***** Generation 73 : 0
**Parent Variant: [Variant id: 145, #gens: 186, #ops: 0, parent:-]

--Child created id: 146
--Creating new operations for variant [Variant id: 146, #gens: 186, #ops: 0, parent:145]
---analyzing modificationPoint position: 1
location: SimplexTableau.java308
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 146, #gens: 185, #ops: 1, parent:145] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 146
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-146/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 14] ,[]
-Valid?: |false|3|14|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(73): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (145(f=1.0), 146(f=3.0), )
Selected to next generation: IDs2--> (145(f=1.0), )
----------Running generation: 74, population size: 1

***** Generation 74 : 0
**Parent Variant: [Variant id: 147, #gens: 186, #ops: 0, parent:-]

--Child created id: 148
--Creating new operations for variant [Variant id: 148, #gens: 186, #ops: 0, parent:147]
---analyzing modificationPoint position: 161
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch [this.point]
--> var from patch: this.point spoon.support.reflect.code.CtFieldWriteImpl
SameName: final 














































double[] point
SameName: final 














































double[] point
Transforming shadowed variable in point = point.clone()
location: RealPointValuePair.java49
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = point.clone() ` -topatch--> `point = point.clone()` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.RealPointValuePair line: 49, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = point.clone() ` -topatch--> `point = point.clone()` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 148, #gens: 187, #ops: 1, parent:147] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 148, errors: [RealPointValuePair.java:52: error: final parameter point may not be assigned
	 */ 	public RealPointValuePair(final double[] point, final double value) { 		this.point = point.clone(); 		point = point.clone(); 		this.value = value;}
	    	                                                                      		                            		^]
Ingredient counter is Zero
---Undoing: gnrtn(74): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = point.clone() ` -topatch--> `point = point.clone()` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (147(f=1.0), 148(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (147(f=1.0), )
----------Running generation: 75, population size: 1

***** Generation 75 : 0
**Parent Variant: [Variant id: 149, #gens: 186, #ops: 0, parent:-]

--Child created id: 150
--Creating new operations for variant [Variant id: 150, #gens: 186, #ops: 0, parent:149]
---analyzing modificationPoint position: 166
---modifPoint 0 not mutation generated in  return data.length
---analyzing modificationPoint position: 149
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  if (constraint.getValue() < 0) { 	return new org.apache.commons.math.optimization.linear.LinearConst[...]
---analyzing modificationPoint position: 85
---modifPoint 2 not mutation generated in  return dot
---analyzing modificationPoint position: 7
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java155
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return true ` -topatch--> `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 155, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return true ` -topatch--> `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 150, #gens: 187, #ops: 1, parent:149] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 150, errors: [SimplexSolver.java:170: error: incompatible types: missing return value
			return;
			^]
Ingredient counter is Zero
---Undoing: gnrtn(75): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return true ` -topatch--> `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (149(f=1.0), 150(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (149(f=1.0), )
----------Running generation: 76, population size: 1

***** Generation 76 : 0
**Parent Variant: [Variant id: 151, #gens: 186, #ops: 0, parent:-]

--Child created id: 152
--Creating new operations for variant [Variant id: 152, #gens: 186, #ops: 0, parent:151]
---analyzing modificationPoint position: 69
location: SimplexTableau.java307
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (numArtificialVariables == 0) { 	return; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 152, #gens: 185, #ops: 1, parent:151] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 152
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-152/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 14] ,[]
-Valid?: |false|3|14|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(76): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (numArtificialVariables == 0) { 	return; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (151(f=1.0), 152(f=3.0), )
Selected to next generation: IDs2--> (151(f=1.0), )
----------Running generation: 77, population size: 1

***** Generation 77 : 0
**Parent Variant: [Variant id: 153, #gens: 186, #ops: 0, parent:-]

--Child created id: 154
--Creating new operations for variant [Variant id: 154, #gens: 186, #ops: 0, parent:153]
---analyzing modificationPoint position: 79
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 0 not mutation generated in  if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 	return null; [...]
---analyzing modificationPoint position: 109
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 1 not mutation generated in  this.value = value
---analyzing modificationPoint position: 121
Templates availables24
Attempts Base Ingredients  1 total 24
---modifPoint 2 not mutation generated in  int height = constraints.size() + getNumObjectiveFunctions()
---analyzing modificationPoint position: 36
Templates availables5
Attempts Base Ingredients  1 total 5
---modifPoint 3 not mutation generated in  minValue = tableau.getEntry(0, i)
---analyzing modificationPoint position: 182
Templates availables12
Attempts Base Ingredients  1 total 12
---modifPoint 4 not mutation generated in  setSubMatrix(in, 0, 0)
---analyzing modificationPoint position: 104
Templates availables18
Attempts Base Ingredients  1 total 18
---modifPoint 5 not mutation generated in  this.constantTerm = constantTerm
---analyzing modificationPoint position: 37
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 6 not mutation generated in  minPos = i
---analyzing modificationPoint position: 116
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 7 not mutation generated in  this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...]
---analyzing modificationPoint position: 17
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 8 not mutation generated in  basicRows.add(basicRow)
---analyzing modificationPoint position: 157
location: SimplexTableau.java248
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 154, #gens: 185, #ops: 1, parent:153] gen mutated: 1 , gen not mut: 9, gen not applied  0
-The child compiles: id 154
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-154/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 5, was successful: false, cases executed: 14] ,[]
-Valid?: |false|5|14|[]|, fitness 5.0
Ingredient counter is Zero
---Undoing: gnrtn(77): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (153(f=1.0), 154(f=5.0), )
Selected to next generation: IDs2--> (153(f=1.0), )
----------Running generation: 78, population size: 1

***** Generation 78 : 0
**Parent Variant: [Variant id: 155, #gens: 186, #ops: 0, parent:-]

--Child created id: 156
--Creating new operations for variant [Variant id: 156, #gens: 186, #ops: 0, parent:155]
---analyzing modificationPoint position: 142
---modifPoint 0 not mutation generated in  return matrix
---analyzing modificationPoint position: 81
Templates availables23
Attempts Base Ingredients  1 total 23
---modifPoint 1 not mutation generated in  checkVectorDimensions(v.length)
---analyzing modificationPoint position: 5
---modifPoint 2 not mutation generated in  return coefficients.dotProduct(point) + constantTerm
---analyzing modificationPoint position: 47
Templates availables10
Attempts Base Ingredients  1 total 10
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java84
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; } ` -topatch--> `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 84, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; } ` -topatch--> `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 156, #gens: 186, #ops: 1, parent:155] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 156, errors: [SimplexSolver.java:170: error: incompatible types: missing return value
					return;
					^]
Ingredient counter is Zero
---Undoing: gnrtn(78): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; } ` -topatch--> `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (155(f=1.0), 156(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (155(f=1.0), )
----------Running generation: 79, population size: 1

***** Generation 79 : 0
**Parent Variant: [Variant id: 157, #gens: 186, #ops: 0, parent:-]

--Child created id: 158
--Creating new operations for variant [Variant id: 158, #gens: 186, #ops: 0, parent:157]
---analyzing modificationPoint position: 123
Templates availables14
Attempts Base Ingredients  1 total 14
vars from patch [numArtificialVariables]
--> var from patch: numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java133
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `// initialize the objective function rows if (getNumObjectiveFunctions() == 2) { 	matrix[0][0] = -1;[...] ` -topatch--> `if (numArtificialVariables == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 133, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `// initialize the objective function rows if (getNumObjectiveFunctions() == 2) { 	matrix[0][0] = -1;[...] ` -topatch--> `if (numArtificialVariables == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 158, #gens: 186, #ops: 1, parent:157] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 158, errors: [SimplexTableau.java:315: error: illegal start of type
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		^, SimplexTableau.java:315: error: ';' expected
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		      ^, SimplexTableau.java:319: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	       ^, SimplexTableau.java:319: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	                               		                                          ^, SimplexTableau.java:323: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	       ^, SimplexTableau.java:323: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		^, SimplexTableau.java:323: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                      ^, SimplexTableau.java:323: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                        		                  ^, SimplexTableau.java:329: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                     ^, SimplexTableau.java:329: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                         ^, SimplexTableau.java:329: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                           		                                                                                                                                                           ^, SimplexTableau.java:333: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                ^, SimplexTableau.java:333: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                                                 		                                               ^, SimplexTableau.java:339: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                          ^, SimplexTableau.java:339: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		^, SimplexTableau.java:339: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		           ^, SimplexTableau.java:339: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				        ^, SimplexTableau.java:339: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				           		             ^, SimplexTableau.java:342: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                            ^, SimplexTableau.java:342: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                    ^, SimplexTableau.java:342: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			^, SimplexTableau.java:342: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			                         ^, SimplexTableau.java:348: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                         ^, SimplexTableau.java:348: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		^, SimplexTableau.java:348: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                   ^, SimplexTableau.java:348: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                     		           ^, SimplexTableau.java:354: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                            ^, SimplexTableau.java:354: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                                       		                              ^, SimplexTableau.java:360: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                       ^, SimplexTableau.java:360: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                                  		                               ^, SimplexTableau.java:366: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                            ^, SimplexTableau.java:366: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		^, SimplexTableau.java:366: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		^, SimplexTableau.java:366: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                    ^, SimplexTableau.java:366: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                     ^, SimplexTableau.java:366: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				        ^, SimplexTableau.java:366: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				            ^, SimplexTableau.java:366: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				               		           ^, SimplexTableau.java:368: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			       ^, SimplexTableau.java:368: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		^, SimplexTableau.java:368: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		^, SimplexTableau.java:368: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		^, SimplexTableau.java:368: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                ^, SimplexTableau.java:368: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                            ^, SimplexTableau.java:368: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                ^, SimplexTableau.java:368: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                 ^, SimplexTableau.java:368: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                      ^, SimplexTableau.java:368: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                       ^, SimplexTableau.java:368: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		^, SimplexTableau.java:368: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		                                ^, SimplexTableau.java:377: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                             ^, SimplexTableau.java:377: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                 ^, SimplexTableau.java:377: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                      ^, SimplexTableau.java:377: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:381: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		^, SimplexTableau.java:381: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		^, SimplexTableau.java:381: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		^, SimplexTableau.java:381: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		^, SimplexTableau.java:381: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                ^, SimplexTableau.java:381: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                         ^, SimplexTableau.java:381: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                                			                                                                                     			^, SimplexTableau.java:388: error: class, interface, or enum expected
	 * @param dividendRow
	          ^, SimplexTableau.java:390: error: class, interface, or enum expected
	 * @param divisor
	          ^, SimplexTableau.java:392: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                               ^, SimplexTableau.java:392: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                      ^, SimplexTableau.java:392: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                ^, SimplexTableau.java:392: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                ^, SimplexTableau.java:392: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                       			                                                                             ^, SimplexTableau.java:405: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                 ^, SimplexTableau.java:405: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                       ^, SimplexTableau.java:405: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                ^, SimplexTableau.java:405: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                ^, SimplexTableau.java:405: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                ^, SimplexTableau.java:405: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                       			                                                                                                                   ^, SimplexTableau.java:409: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                ^, SimplexTableau.java:409: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                                 		                                    ^, SimplexTableau.java:413: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                ^, SimplexTableau.java:413: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                                  		                                 ^, SimplexTableau.java:421: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                ^, SimplexTableau.java:421: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                      ^, SimplexTableau.java:421: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                     ^, SimplexTableau.java:421: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                                   		                                     ^, SimplexTableau.java:430: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                ^, SimplexTableau.java:430: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                    ^, SimplexTableau.java:430: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                   ^, SimplexTableau.java:430: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                     ^, SimplexTableau.java:430: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                     		                                     ^, SimplexTableau.java:434: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;
	    	                ^, SimplexTableau.java:435: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:441: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() {
	    	                ^, SimplexTableau.java:443: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:449: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() {
	    	                ^, SimplexTableau.java:451: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:458: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() {
	    	                ^, SimplexTableau.java:460: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:472: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() {
	    	                ^, SimplexTableau.java:474: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:481: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() {
	    	                ^, SimplexTableau.java:483: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:489: error: class, interface, or enum expected
	 */ 	protected final int getNumSlackVariables() {
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(79): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `// initialize the objective function rows if (getNumObjectiveFunctions() == 2) { 	matrix[0][0] = -1;[...] ` -topatch--> `if (numArtificialVariables == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (157(f=1.0), 158(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (157(f=1.0), )
----------Running generation: 80, population size: 1

***** Generation 80 : 0
**Parent Variant: [Variant id: 159, #gens: 186, #ops: 0, parent:-]

--Child created id: 160
--Creating new operations for variant [Variant id: 160, #gens: 186, #ops: 0, parent:159]
---analyzing modificationPoint position: 5
---modifPoint 0 not mutation generated in  return coefficients.dotProduct(point) + constantTerm
---analyzing modificationPoint position: 107
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 1 not mutation generated in  this.coefficients = coefficients
---analyzing modificationPoint position: 152
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 2 not mutation generated in  int count = 0
---analyzing modificationPoint position: 116
location: SimplexTableau.java112
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 160, #gens: 185, #ops: 1, parent:159] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 160
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-160/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 11, was successful: false, cases executed: 14] ,[]
-Valid?: |false|11|14|[]|, fitness 11.0
Ingredient counter is Zero
---Undoing: gnrtn(80): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (159(f=1.0), 160(f=11.0), )
Selected to next generation: IDs2--> (159(f=1.0), )
----------Running generation: 81, population size: 1

***** Generation 81 : 0
**Parent Variant: [Variant id: 161, #gens: 186, #ops: 0, parent:-]

--Child created id: 162
--Creating new operations for variant [Variant id: 162, #gens: 186, #ops: 0, parent:161]
---analyzing modificationPoint position: 141
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [matrix, row, artificialVar]
--> var from patch: matrix spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: row spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: artificialVar spoon.support.reflect.code.CtVariableWriteImpl
location: SimplexTableau.java176
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `// artificial variables if ((constraint.getRelationship() == org.apache.commons.math.optimization.li[...] ` -topatch--> `matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 176, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `// artificial variables if ((constraint.getRelationship() == org.apache.commons.math.optimization.li[...] ` -topatch--> `matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 162, #gens: 187, #ops: 1, parent:161] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 162
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-162/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(81): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `// artificial variables if ((constraint.getRelationship() == org.apache.commons.math.optimization.li[...] ` -topatch--> `matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (161(f=1.0), 162(f=14.0), )
Selected to next generation: IDs2--> (161(f=1.0), )
----------Running generation: 82, population size: 1

***** Generation 82 : 0
**Parent Variant: [Variant id: 163, #gens: 186, #ops: 0, parent:-]

--Child created id: 164
--Creating new operations for variant [Variant id: 164, #gens: 186, #ops: 0, parent:163]
---analyzing modificationPoint position: 112
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 0 not mutation generated in  this.restrictToNonNegative = restrictToNonNegative
---analyzing modificationPoint position: 108
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 1 not mutation generated in  this.relationship = relationship
---analyzing modificationPoint position: 119
location: SimplexTableau.java126
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// create a matrix of the correct size java.util.List<org.apache.commons.math.optimization.linear.Li[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 164, #gens: 185, #ops: 1, parent:163] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 164, errors: [SimplexTableau.java:154: error: cannot find symbol
			org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i);
			                                                                                     ^
  symbol:   method get(int)
  location: variable constraints of type java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint>]
Ingredient counter is Zero
---Undoing: gnrtn(82): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// create a matrix of the correct size java.util.List<org.apache.commons.math.optimization.linear.Li[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (163(f=1.0), 164(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (163(f=1.0), )
----------Running generation: 83, population size: 1

***** Generation 83 : 0
**Parent Variant: [Variant id: 165, #gens: 186, #ops: 0, parent:-]

--Child created id: 166
--Creating new operations for variant [Variant id: 166, #gens: 186, #ops: 0, parent:165]
---analyzing modificationPoint position: 46
Templates availables12
Attempts Base Ingredients  1 total 12
---modifPoint 0 not mutation generated in  final double ratio = rhs / entry
---analyzing modificationPoint position: 52
Templates availables6
Attempts Base Ingredients  1 total 6
Attempts Base Ingredients  2 total 6
vars from patch [this.maxIterations]
--> var from patch: this.maxIterations spoon.support.reflect.code.CtFieldWriteImpl
location: AbstractLinearOptimizer.java98
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 98, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 166, #gens: 186, #ops: 1, parent:165] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 166
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-166/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(83): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (165(f=1.0), 166(f=14.0), )
Selected to next generation: IDs2--> (165(f=1.0), )
----------Running generation: 84, population size: 1

***** Generation 84 : 0
**Parent Variant: [Variant id: 167, #gens: 186, #ops: 0, parent:-]

--Child created id: 168
--Creating new operations for variant [Variant id: 168, #gens: 186, #ops: 0, parent:167]
---analyzing modificationPoint position: 172
Templates availables11
Attempts Base Ingredients  1 total 11
---modifPoint 0 not mutation generated in  if (row > 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalStateException( 	"fi[...]
---analyzing modificationPoint position: 19
Templates availables31
Attempts Base Ingredients  1 total 31
vars from patch []
location: SimplexTableau.java357
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coeffici[...] ` -topatch--> `return getNumObjectiveFunctions() + getOriginalNumDecisionVariables()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 357, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coeffici[...] ` -topatch--> `return getNumObjectiveFunctions() + getOriginalNumDecisionVariables()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 168, #gens: 186, #ops: 1, parent:167] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 168, errors: [SimplexTableau.java:459: error: incompatible types: int cannot be converted to org.apache.commons.math.optimization.RealPointValuePair
		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
		                                  ^]
Ingredient counter is Zero
---Undoing: gnrtn(84): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coeffici[...] ` -topatch--> `return getNumObjectiveFunctions() + getOriginalNumDecisionVariables()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (167(f=1.0), 168(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (167(f=1.0), )
----------Running generation: 85, population size: 1

***** Generation 85 : 0
**Parent Variant: [Variant id: 169, #gens: 186, #ops: 0, parent:-]

--Child created id: 170
--Creating new operations for variant [Variant id: 170, #gens: 186, #ops: 0, parent:169]
---analyzing modificationPoint position: 29
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java42
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON) ` -topatch--> `throw new org.apache.commons.math.optimization.linear.UnboundedSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 42, pointed element: CtThrowImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON) ` -topatch--> `throw new org.apache.commons.math.optimization.linear.UnboundedSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 

--Summary Creation: for variant [Variant id: 170, #gens: 187, #ops: 1, parent:169] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 170, errors: [SimplexSolver.java:109: error: unreported exception org.apache.commons.math.optimization.linear.UnboundedSolutionException; must be caught or declared to be thrown
		throw new org.apache.commons.math.optimization.linear.UnboundedSolutionException();} 	/**
		^]
Ingredient counter is Zero
---Undoing: gnrtn(85): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON) ` -topatch--> `throw new org.apache.commons.math.optimization.linear.UnboundedSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (169(f=1.0), 170(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (169(f=1.0), )
----------Running generation: 86, population size: 1

***** Generation 86 : 0
**Parent Variant: [Variant id: 171, #gens: 186, #ops: 0, parent:-]

--Child created id: 172
--Creating new operations for variant [Variant id: 172, #gens: 186, #ops: 0, parent:171]
---analyzing modificationPoint position: 93
---modifPoint 0 not mutation generated in  double[] out = new double[data.length]
---analyzing modificationPoint position: 13
Templates availables24
Attempts Base Ingredients  1 total 24
---modifPoint 1 not mutation generated in  java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>()
---analyzing modificationPoint position: 119
location: SimplexTableau.java126
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// create a matrix of the correct size java.util.List<org.apache.commons.math.optimization.linear.Li[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 172, #gens: 185, #ops: 1, parent:171] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 172, errors: [SimplexTableau.java:154: error: cannot find symbol
			org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i);
			                                                                                     ^
  symbol:   method get(int)
  location: variable constraints of type java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint>]
Ingredient counter is Zero
---Undoing: gnrtn(86): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// create a matrix of the correct size java.util.List<org.apache.commons.math.optimization.linear.Li[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (171(f=1.0), 172(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (171(f=1.0), )
----------Running generation: 87, population size: 1

***** Generation 87 : 0
**Parent Variant: [Variant id: 173, #gens: 186, #ops: 0, parent:-]

--Child created id: 174
--Creating new operations for variant [Variant id: 174, #gens: 186, #ops: 0, parent:173]
---analyzing modificationPoint position: 155
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [this.epsilon]
--> var from patch: this.epsilon spoon.support.reflect.code.CtFieldWriteImpl
location: SimplexTableau.java237
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `++count ` -topatch--> `this.epsilon = epsilon` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 237, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `++count ` -topatch--> `this.epsilon = epsilon` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 174, #gens: 187, #ops: 1, parent:173] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 174, errors: [SimplexTableau.java:238: error: cannot assign a value to final variable epsilon
				++count; 				this.epsilon = epsilon;
				         				    ^]
Ingredient counter is Zero
---Undoing: gnrtn(87): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `++count ` -topatch--> `this.epsilon = epsilon` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (173(f=1.0), 174(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (173(f=1.0), )
----------Running generation: 88, population size: 1

***** Generation 88 : 0
**Parent Variant: [Variant id: 175, #gens: 186, #ops: 0, parent:-]

--Child created id: 176
--Creating new operations for variant [Variant id: 176, #gens: 186, #ops: 0, parent:175]
---analyzing modificationPoint position: 170
Templates availables12
Attempts Base Ingredients  1 total 12
---modifPoint 0 not mutation generated in  copyIn(d)
---analyzing modificationPoint position: 65
---modifPoint 1 not mutation generated in  double multiplier = tableau.getEntry(i, pivotCol)
---analyzing modificationPoint position: 137
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [row]
--> var from patch: row spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java166
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// RHS matrix[row][width - 1] = constraint.getValue() ` -topatch--> `subtractRow(0, row, 1.0)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 166, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// RHS matrix[row][width - 1] = constraint.getValue() ` -topatch--> `subtractRow(0, row, 1.0)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 176, #gens: 187, #ops: 1, parent:175] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 176
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-176/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(88): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// RHS matrix[row][width - 1] = constraint.getValue() ` -topatch--> `subtractRow(0, row, 1.0)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (175(f=1.0), 176(f=14.0), )
Selected to next generation: IDs2--> (175(f=1.0), )
----------Running generation: 89, population size: 1

***** Generation 89 : 0
**Parent Variant: [Variant id: 177, #gens: 186, #ops: 0, parent:-]

--Child created id: 178
--Creating new operations for variant [Variant id: 178, #gens: 186, #ops: 0, parent:177]
---analyzing modificationPoint position: 60
location: SimplexSolver.java107
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (pivotRow == null) { 	throw new org.apache.commons.math.optimization.linear.UnboundedSolutionExce[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 178, #gens: 185, #ops: 1, parent:177] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 178
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-178/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 14] ,[]
-Valid?: |false|2|14|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(89): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (pivotRow == null) { 	throw new org.apache.commons.math.optimization.linear.UnboundedSolutionExce[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (177(f=1.0), 178(f=2.0), )
Selected to next generation: IDs2--> (177(f=1.0), )
----------Running generation: 90, population size: 1

***** Generation 90 : 0
**Parent Variant: [Variant id: 179, #gens: 186, #ops: 0, parent:-]

--Child created id: 180
--Creating new operations for variant [Variant id: 180, #gens: 186, #ops: 0, parent:179]
---analyzing modificationPoint position: 6
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [goalType]
--> var from patch: goalType spoon.support.reflect.code.CtVariableReadImpl
location: AbstractLinearOptimizer.java106
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `// solve the problem return doOptimize() ` -topatch--> `goalType = goalType` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 106, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `// solve the problem return doOptimize() ` -topatch--> `goalType = goalType` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 180, #gens: 187, #ops: 1, parent:179] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 180, errors: [AbstractLinearOptimizer.java:104: error: final parameter goalType may not be assigned
		iterations = 0; 		goalType = goalType;
		                		^]
Ingredient counter is Zero
---Undoing: gnrtn(90): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `// solve the problem return doOptimize() ` -topatch--> `goalType = goalType` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (179(f=1.0), 180(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (179(f=1.0), )
----------Running generation: 91, population size: 1

***** Generation 91 : 0
**Parent Variant: [Variant id: 181, #gens: 186, #ops: 0, parent:-]

--Child created id: 182
--Creating new operations for variant [Variant id: 182, #gens: 186, #ops: 0, parent:181]
---analyzing modificationPoint position: 4
location: SimplexTableau.java297
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return null ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 182, #gens: 185, #ops: 1, parent:181] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 182
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-182/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 14] ,[]
-Valid?: |false|3|14|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(91): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return null ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (181(f=1.0), 182(f=3.0), )
Selected to next generation: IDs2--> (181(f=1.0), )
----------Running generation: 92, population size: 1

***** Generation 92 : 0
**Parent Variant: [Variant id: 183, #gens: 186, #ops: 0, parent:-]

--Child created id: 184
--Creating new operations for variant [Variant id: 184, #gens: 186, #ops: 0, parent:183]
---analyzing modificationPoint position: 9
---modifPoint 0 not mutation generated in  return getBasicRow(col, false)
---analyzing modificationPoint position: 8
---modifPoint 1 not mutation generated in  return tableau.getSolution()
---analyzing modificationPoint position: 45
location: SimplexSolver.java82
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 	final double ratio [...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 184, #gens: 185, #ops: 1, parent:183] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 184
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-184/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 14] ,[]
-Valid?: |false|13|14|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(92): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 	final double ratio [...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (183(f=1.0), 184(f=13.0), )
Selected to next generation: IDs2--> (183(f=1.0), )
----------Running generation: 93, population size: 1

***** Generation 93 : 0
**Parent Variant: [Variant id: 185, #gens: 186, #ops: 0, parent:-]

--Child created id: 186
--Creating new operations for variant [Variant id: 186, #gens: 186, #ops: 0, parent:185]
---analyzing modificationPoint position: 73
location: MathUtils.java367
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.equals(x, y, eps)) { 	return 0; } else if (x < y) { 	retu[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 186, #gens: 185, #ops: 1, parent:185] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 186
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-186/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 14] ,[]
-Valid?: |false|12|14|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(93): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.equals(x, y, eps)) { 	return 0; } else if (x < y) { 	retu[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (185(f=1.0), 186(f=12.0), )
Selected to next generation: IDs2--> (185(f=1.0), )
----------Running generation: 94, population size: 1

***** Generation 94 : 0
**Parent Variant: [Variant id: 187, #gens: 186, #ops: 0, parent:-]

--Child created id: 188
--Creating new operations for variant [Variant id: 188, #gens: 186, #ops: 0, parent:187]
---analyzing modificationPoint position: 82
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 0 not mutation generated in  double dot = 0
---analyzing modificationPoint position: 71
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor)
---analyzing modificationPoint position: 113
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 2 not mutation generated in  this.epsilon = epsilon
---analyzing modificationPoint position: 41
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 3 not mutation generated in  java.lang.Integer minRatioPos = null
---analyzing modificationPoint position: 163
---modifPoint 4 not mutation generated in  return value
---analyzing modificationPoint position: 142
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 5 not mutation generated in  return matrix
---analyzing modificationPoint position: 96
---modifPoint 6 not mutation generated in  return new org.apache.commons.math.linear.ArrayRealVector(out)
---analyzing modificationPoint position: 175
Templates availables11
Attempts Base Ingredients  1 total 11
---modifPoint 7 not mutation generated in  if (nRows == 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException[...]
---analyzing modificationPoint position: 184
---modifPoint 8 not mutation generated in  return data == null ? 0 : data.length
---analyzing modificationPoint position: 32
---modifPoint 9 not mutation generated in  java.lang.Integer minPos = null
---analyzing modificationPoint position: 180
Templates availables120
Attempts Base Ingredients  1 total 120
---modifPoint 10 not mutation generated in  if (subMatrix[i].length != nCols) { 	throw org.apache.commons.math.MathRuntimeException.createIllega[...]
---analyzing modificationPoint position: 68
---modifPoint 11 not mutation generated in  final org.apache.commons.math.optimization.linear.SimplexTableau tableau =  new org.apache.commons.m[...]
---analyzing modificationPoint position: 172
location: Array2DRowRealMatrix.java315
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (row > 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalStateException( 	"fi[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 188, #gens: 185, #ops: 1, parent:187] gen mutated: 1 , gen not mut: 12, gen not applied  0
-The child compiles: id 188
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-188/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(94): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (row > 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalStateException( 	"fi[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (187(f=1.0), 188(f=1.0), )
Selected to next generation: IDs2--> (187(f=1.0), )
----------Running generation: 95, population size: 1

***** Generation 95 : 0
**Parent Variant: [Variant id: 189, #gens: 186, #ops: 0, parent:-]

--Child created id: 190
--Creating new operations for variant [Variant id: 190, #gens: 186, #ops: 0, parent:189]
---analyzing modificationPoint position: 14
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  for (int i = 0; i < coefficients.length; i++) { 	java.lang.Integer basicRow = getBasicRowForSolution[...]
---analyzing modificationPoint position: 152
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  int count = 0
---analyzing modificationPoint position: 172
Templates availables120
Attempts Base Ingredients  1 total 120
---modifPoint 2 not mutation generated in  if (row > 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalStateException( 	"fi[...]
---analyzing modificationPoint position: 131
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [objectiveCoefficients, matrix, zIndex]
--> var from patch: objectiveCoefficients spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: matrix spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: zIndex spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java151
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int artificialVar = 0 ` -topatch--> `copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions())` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 151, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int artificialVar = 0 ` -topatch--> `copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions())` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 190, #gens: 187, #ops: 1, parent:189] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 190
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-190/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(95): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int artificialVar = 0 ` -topatch--> `copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions())` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (189(f=1.0), 190(f=1.0), )
Selected to next generation: IDs2--> (189(f=1.0), )
----------Running generation: 96, population size: 1

***** Generation 96 : 0
**Parent Variant: [Variant id: 191, #gens: 186, #ops: 0, parent:-]

--Child created id: 192
--Creating new operations for variant [Variant id: 192, #gens: 186, #ops: 0, parent:191]
---analyzing modificationPoint position: 42
location: SimplexSolver.java79
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 	final double rhs =[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 192, #gens: 185, #ops: 1, parent:191] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 192
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-192/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 14] ,[]
-Valid?: |false|13|14|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(96): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 	final double rhs =[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (191(f=1.0), 192(f=13.0), )
Selected to next generation: IDs2--> (191(f=1.0), )
----------Running generation: 97, population size: 1

***** Generation 97 : 0
**Parent Variant: [Variant id: 193, #gens: 186, #ops: 0, parent:-]

--Child created id: 194
--Creating new operations for variant [Variant id: 194, #gens: 186, #ops: 0, parent:193]
---analyzing modificationPoint position: 62
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  tableau.divideRow(pivotRow, pivotVal)
---analyzing modificationPoint position: 112
location: SimplexTableau.java107
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 194, #gens: 185, #ops: 1, parent:193] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 194, errors: [SimplexTableau.java:117: error: variable restrictToNonNegative might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(97): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (193(f=1.0), 194(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (193(f=1.0), )
----------Running generation: 98, population size: 1

***** Generation 98 : 0
**Parent Variant: [Variant id: 195, #gens: 186, #ops: 0, parent:-]

--Child created id: 196
--Creating new operations for variant [Variant id: 196, #gens: 186, #ops: 0, parent:195]
---analyzing modificationPoint position: 145
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...]
---analyzing modificationPoint position: 170
Templates availables12
Attempts Base Ingredients  1 total 12
---modifPoint 1 not mutation generated in  copyIn(d)
---analyzing modificationPoint position: 28
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 2 not mutation generated in  while (!isOptimal(tableau)) { 	doIteration(tableau); } 
---analyzing modificationPoint position: 99
Templates availables31
Attempts Base Ingredients  1 total 31
---modifPoint 3 not mutation generated in  return tableau.getColumnDimension()
---analyzing modificationPoint position: 96
---modifPoint 4 not mutation generated in  return new org.apache.commons.math.linear.ArrayRealVector(out)
---analyzing modificationPoint position: 143
---modifPoint 5 not mutation generated in  return value
---analyzing modificationPoint position: 131
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [matrix]
--> var from patch: matrix spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java151
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int artificialVar = 0 ` -topatch--> `return matrix` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 151, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int artificialVar = 0 ` -topatch--> `return matrix` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 196, #gens: 187, #ops: 1, parent:195] gen mutated: 1 , gen not mut: 6, gen not applied  0
-The child does NOT compile: 196, errors: [SimplexTableau.java:184: error: unreachable statement
		return matrix; 		int artificialVar = 0; 		for (int i = 0; i < constraints.size(); i++) { 			org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i); 			int row = getNumObjectiveFunctions() + i; 			// decision variable coefficients 			copyArray(constraint.getCoefficients().getData(), matrix[row], 1); 			// x-
		               		    ^]
Ingredient counter is Zero
---Undoing: gnrtn(98): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int artificialVar = 0 ` -topatch--> `return matrix` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (195(f=1.0), 196(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (195(f=1.0), )
----------Running generation: 99, population size: 1

***** Generation 99 : 0
**Parent Variant: [Variant id: 197, #gens: 186, #ops: 0, parent:-]

--Child created id: 198
--Creating new operations for variant [Variant id: 198, #gens: 186, #ops: 0, parent:197]
---analyzing modificationPoint position: 36
location: SimplexSolver.java63
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `minValue = tableau.getEntry(0, i) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 198, #gens: 185, #ops: 1, parent:197] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 198
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-198/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: true, failTest= 0, was successful: true, cases executed: 14] ,[]
-Test Failing is passing, Executing regression
Executing process: (timeout513secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-198/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.stat.data.LotteryTest  org.apache.commons.math.linear.FieldMatrixImplTest  org.apache.commons.math.ode.sampling.StepNormalizerTest  org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest  org.apache.commons.math.geometry.RotationOrderTest  org.apache.commons.math.analysis.solvers.NewtonSolverTest  org.apache.commons.math.estimation.EstimatedParameterTest  org.apache.commons.math.linear.CholeskyDecompositionImplTest  org.apache.commons.math.linear.Array2DRowRealMatrixTest  org.apache.commons.math.linear.SparseRealMatrixTest  org.apache.commons.math.util.OpenIntToFieldTest  org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest  org.apache.commons.math.optimization.fitting.PolynomialFitterTest  org.apache.commons.math.linear.ArrayRealVectorTest  org.apache.commons.math.distribution.HypergeometricDistributionTest  org.apache.commons.math.random.RandomAdaptorTest  org.apache.commons.math.ode.FirstOrderConverterTest  org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest  org.apache.commons.math.stat.inference.TestUtilsTest  org.apache.commons.math.stat.data.LewTest  org.apache.commons.math.distribution.GammaDistributionTest  org.apache.commons.math.stat.descriptive.rank.MedianTest  org.apache.commons.math.distribution.ZipfDistributionTest  org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest  org.apache.commons.math.stat.CertifiedDataTest  org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest  org.apache.commons.math.complex.FrenchComplexFormatTest  org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest  org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest  org.apache.commons.math.DuplicateSampleAbscissaExceptionTest  org.apache.commons.math.estimation.MinpackTest  org.apache.commons.math.genetics.FixedGenerationCountTest  org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest  org.apache.commons.math.fraction.BigFractionFormatTest  org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest  org.apache.commons.math.random.RandomDataTest  org.apache.commons.math.distribution.FDistributionTest  org.apache.commons.math.FunctionEvaluationExceptionTest  org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest  org.apache.commons.math.stat.inference.TTestFactoryTest  org.apache.commons.math.stat.descriptive.moment.SkewnessTest  org.apache.commons.math.special.GammaTest  org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest  org.apache.commons.math.analysis.integration.RombergIntegratorTest  org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest  org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest  org.apache.commons.math.stat.descriptive.SummaryStatisticsTest  org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest  org.apache.commons.math.stat.descriptive.moment.FirstMomentTest  org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest  org.apache.commons.math.complex.ComplexTest  org.apache.commons.math.distribution.BetaDistributionTest  org.apache.commons.math.special.ErfTest  org.apache.commons.math.special.BetaTest  org.apache.commons.math.ode.nonstiff.GillIntegratorTest  org.apache.commons.math.random.EmpiricalDistributionTest  org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest  org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest  org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest  org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest  org.apache.commons.math.random.AbstractRandomGeneratorTest  org.apache.commons.math.fraction.BigFractionFieldTest  org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest  org.apache.commons.math.genetics.GeneticAlgorithmTestBinary  org.apache.commons.math.linear.BiDiagonalTransformerTest  org.apache.commons.math.util.DefaultTransformerTest  org.apache.commons.math.linear.LUDecompositionImplTest  org.apache.commons.math.random.ValueServerTest  org.apache.commons.math.stat.descriptive.moment.MeanTest  org.apache.commons.math.util.BigRealFieldTest  org.apache.commons.math.linear.QRDecompositionImplTest  org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest  org.apache.commons.math.stat.descriptive.moment.VarianceTest  org.apache.commons.math.genetics.OnePointCrossoverTest  org.apache.commons.math.stat.ranking.NaturalRankingTest  org.apache.commons.math.optimization.linear.SimplexSolverTest  org.apache.commons.math.stat.descriptive.moment.FourthMomentTest  org.apache.commons.math.linear.BlockRealMatrixTest  org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest  org.apache.commons.math.random.MersenneTwisterTest  org.apache.commons.math.genetics.RandomKeyTest  org.apache.commons.math.stat.descriptive.summary.ProductTest  org.apache.commons.math.fraction.FractionTest  org.apache.commons.math.util.OpenIntToDoubleHashMapTest  org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest  org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest  org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest  org.apache.commons.math.genetics.ChromosomeTest  org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest  org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest  org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest  org.apache.commons.math.geometry.Vector3DTest  org.apache.commons.math.stat.descriptive.rank.MinTest  org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest  org.apache.commons.math.linear.FieldLUDecompositionImplTest  org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest  org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest  org.apache.commons.math.transform.FastHadamardTransformerTest  org.apache.commons.math.optimization.fitting.HarmonicFitterTest  org.apache.commons.math.stat.correlation.PearsonsCorrelationTest  org.apache.commons.math.random.GaussianRandomGeneratorTest  org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest  org.apache.commons.math.linear.FrenchRealVectorFormatTest  org.apache.commons.math.fraction.BigFractionTest  org.apache.commons.math.util.ContinuedFractionTest  org.apache.commons.math.util.TransformerMapTest  org.apache.commons.math.analysis.solvers.BisectionSolverTest  org.apache.commons.math.genetics.BinaryChromosomeTest  org.apache.commons.math.linear.BlockFieldMatrixTest  org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest  org.apache.commons.math.linear.SingularValueDecompositionImplTest  org.apache.commons.math.distribution.TDistributionTest  org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest  org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest  org.apache.commons.math.linear.InvalidMatrixExceptionTest  org.apache.commons.math.distribution.BinomialDistributionTest  org.apache.commons.math.linear.EigenSolverTest  org.apache.commons.math.stat.inference.TTestTest  org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest  org.apache.commons.math.random.UniformRandomGeneratorTest  org.apache.commons.math.stat.descriptive.rank.PercentileTest  org.apache.commons.math.analysis.solvers.RiddersSolverTest  org.apache.commons.math.linear.ArrayFieldVectorTest  org.apache.commons.math.ode.ContinuousOutputModelTest  org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest  org.apache.commons.math.optimization.linear.SimplexTableauTest  org.apache.commons.math.ConvergenceExceptionTest  org.apache.commons.math.util.ResizableDoubleArrayTest  org.apache.commons.math.complex.ComplexFormatTest  org.apache.commons.math.linear.RealMatrixImplTest  org.apache.commons.math.stat.descriptive.summary.SumTest  org.apache.commons.math.linear.SparseFieldVectorTest  org.apache.commons.math.genetics.ElitisticListPopulationTest  org.apache.commons.math.stat.descriptive.summary.SumSqTest  org.apache.commons.math.linear.SparseRealVectorTest  org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest  org.apache.commons.math.linear.EigenDecompositionImplTest  org.apache.commons.math.analysis.integration.SimpsonIntegratorTest  org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest  org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations  org.apache.commons.math.stat.descriptive.moment.KurtosisTest  org.apache.commons.math.transform.FastFourierTransformerTest  org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest  org.apache.commons.math.distribution.NormalDistributionTest  org.apache.commons.math.distribution.PoissonDistributionTest  org.apache.commons.math.geometry.Vector3DFormatTest  org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest  org.apache.commons.math.genetics.TournamentSelectionTest  org.apache.commons.math.optimization.general.MinpackTest  org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest  org.apache.commons.math.analysis.solvers.BrentSolverTest  org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest  org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest  org.apache.commons.math.estimation.WeightedMeasurementTest  org.apache.commons.math.stat.inference.ChiSquareTestTest  org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest  org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest  org.apache.commons.math.linear.MatrixIndexExceptionTest  org.apache.commons.math.genetics.BinaryMutationTest  org.apache.commons.math.fraction.FractionFormatTest  org.apache.commons.math.distribution.PascalDistributionTest  org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest  org.apache.commons.math.util.MathUtilsTest  org.apache.commons.math.complex.ComplexUtilsTest  org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest  org.apache.commons.math.optimization.direct.MultiDirectionalTest  org.apache.commons.math.genetics.FitnessCachingTest  org.apache.commons.math.linear.BigMatrixImplTest  org.apache.commons.math.stat.inference.ChiSquareFactoryTest  org.apache.commons.math.fraction.FractionFieldTest  org.apache.commons.math.stat.descriptive.InteractionTest  org.apache.commons.math.stat.correlation.CovarianceTest  org.apache.commons.math.optimization.univariate.BrentMinimizerTest  org.apache.commons.math.linear.QRSolverTest  org.apache.commons.math.linear.RealVectorFormatTest  org.apache.commons.math.analysis.solvers.LaguerreSolverTest  org.apache.commons.math.linear.CholeskySolverTest  org.apache.commons.math.distribution.WeibullDistributionTest  org.apache.commons.math.stat.StatUtilsTest  org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest  org.apache.commons.math.analysis.solvers.MullerSolverTest  org.apache.commons.math.linear.TriDiagonalTransformerTest  org.apache.commons.math.distribution.ChiSquareDistributionTest  org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest  org.apache.commons.math.transform.FastSineTransformerTest  org.apache.commons.math.stat.inference.OneWayAnovaTest  org.apache.commons.math.transform.FastCosineTransformerTest  org.apache.commons.math.ArgumentOutsideDomainExceptionTest  org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest  org.apache.commons.math.ode.nonstiff.EulerIntegratorTest  org.apache.commons.math.stat.descriptive.rank.MaxTest  org.apache.commons.math.complex.ComplexFieldTest  org.apache.commons.math.stat.descriptive.ListUnivariateImplTest  org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest  org.apache.commons.math.MaxIterationsExceededExceptionTest  org.apache.commons.math.linear.MatrixUtilsTest  org.apache.commons.math.optimization.direct.NelderMeadTest  org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest  org.apache.commons.math.geometry.RotationTest  org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest  org.apache.commons.math.linear.SingularValueSolverTest  org.apache.commons.math.genetics.RandomKeyMutationTest  org.apache.commons.math.util.BigRealTest  org.apache.commons.math.distribution.ExponentialDistributionTest  org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest  org.apache.commons.math.geometry.FrenchVector3DFormatTest  org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest  org.apache.commons.math.stat.regression.SimpleRegressionTest  org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest  org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest  org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest  org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest  org.apache.commons.math.linear.LUSolverTest  org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest  org.apache.commons.math.MathConfigurationExceptionTest  org.apache.commons.math.estimation.GaussNewtonEstimatorTest  org.apache.commons.math.genetics.ListPopulationTest  org.apache.commons.math.MathExceptionTest  org.apache.commons.math.distribution.CauchyDistributionTest  org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest  org.apache.commons.math.linear.SparseFieldMatrixTest  org.apache.commons.math.stat.descriptive.summary.SumLogTest  org.apache.commons.math.stat.FrequencyTest  org.apache.commons.math.stat.descriptive.moment.SecondMomentTest
Analyzing output from process
TR: Success: true, failTest= 0, was successful: true, cases executed: 2059] ,[]
-Valid?: |true|0|2059|[]|, fitness 0.0
-Found Solution, child variant #198
Ingredient counter is Zero

Attempts to find patch Id 198: 0, successful 0, failing 0

-Saving child on disk variant #198 at /Users/marekmazur/astor/./output_astor/AstorMain-math-82//src//variant-198

-Saving child on disk variant #198 at /Users/marekmazur/astor/./output_astor/AstorMain-math-82//src//variant-198_f
---Undoing: gnrtn(99): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `minValue = tableau.getEntry(0, i) ` -topatch--> `-` (null) 
/Users/marekmazur/astor/./output_astor/AstorMain-math-82/src/default_f/org/apache/commons/math/optimization/linear/SimplexSolver.java
/Users/marekmazur/astor/./output_astor/AstorMain-math-82/src/variant-198_f/org/apache/commons/math/optimization/linear/SimplexSolver.java
diff command : diff -w -b  --label=/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java --label=/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java /Users/marekmazur/astor/./output_astor/AstorMain-math-82/src/default_f/org/apache/commons/math/optimization/linear/SimplexSolver.java /Users/marekmazur/astor/./output_astor/AstorMain-math-82/src/variant-198_f/org/apache/commons/math/optimization/linear/SimplexSolver.java --unified=0
/Users/marekmazur/astor/./output_astor/AstorMain-math-82/src/default/org/apache/commons/math/optimization/linear/SimplexSolver.java
/Users/marekmazur/astor/./output_astor/AstorMain-math-82/src/variant-198/org/apache/commons/math/optimization/linear/SimplexSolver.java
diff command : diff -w -b  --label=/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java --label=/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java /Users/marekmazur/astor/./output_astor/AstorMain-math-82/src/default/org/apache/commons/math/optimization/linear/SimplexSolver.java /Users/marekmazur/astor/./output_astor/AstorMain-math-82/src/variant-198/org/apache/commons/math/optimization/linear/SimplexSolver.java --unified=0
Generation 1
Generation 2
Generation 3
Generation 4
Generation 5
Generation 6
Generation 7
Generation 8
Generation 9
Generation 10
Generation 11
Generation 12
Generation 13
Generation 14
Generation 15
Generation 16
Generation 17
Generation 18
Generation 19
Generation 20
Generation 21
Generation 22
Generation 23
Generation 24
Generation 25
Generation 26
Generation 27
Generation 28
Generation 29
Generation 30
Generation 31
Generation 32
Generation 33
Generation 34
Generation 35
Generation 36
Generation 37
Generation 38
Generation 39
Generation 40
Generation 41
Generation 42
Generation 43
Generation 44
Generation 45
Generation 46
Generation 47
Generation 48
Generation 49
Generation 50
Generation 51
Generation 52
Generation 53
Generation 54
Generation 55
Generation 56
Generation 57
Generation 58
Generation 59
Generation 60
Generation 61
Generation 62
Generation 63
Generation 64
Generation 65
Generation 66
Generation 67
Generation 68
Generation 69
Generation 70
Generation 71
Generation 72
Generation 73
Generation 74
Generation 75
Generation 76
Generation 77
Generation 78
Generation 79
Generation 80
Generation 81
Generation 82
Generation 83
Generation 84
Generation 85
Generation 86
Generation 87
Generation 88
Generation 89
Generation 90
Generation 91
Generation 92
Generation 93
Generation 94
Generation 95
Generation 96
Generation 97
Generation 98
Generation 99
Storing ing JSON at ./diffSolutions/patchinfo_198.json
./diffSolutions/patchinfo_198.json:
{"VARIANT_ID":"198","VALIDATION":"|true|0|2059|[]|","patchhunks":[{"LOCATION":"org.apache.commons.math.optimization.linear.SimplexSolver","PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/defects4j\\\/math-82\\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java","INGREDIENT_SCOPE":"-","ORIGINAL_CODE":"minValue = tableau.getEntry(0, i)","BUGGY_CODE_TYPE":"CtAssignmentImpl|CtBlockImpl","OPERATOR":"RemoveOp","MODIFIED_FILE_PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-82\\\/\\\/src\\\/\\\/variant-198\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java","LINE":"63","SUSPICIOUNESS":"0,994","MP_RANKING":"36"}],"TIME":"57","GENERATION":"99","FOLDER_SOLUTION_CODE":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-82\\\/\\\/src\\\/\\\/variant-198","PATCH_DIFF_ORIG":"--- \\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java\\n+++ \\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java\\n@@ -62,2 +62,2 @@\\n-\\t\\t\\tif (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {\\n-\\t\\t\\t\\tminValue = tableau.getEntry(0, i);\\n+\\t\\t\\tif (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)\\n+\\n@@ -65 +65 @@\\n-\\t\\t\\t}\\n+\\n\\n"}
Saving patch info at ./diffSolutions/patchinfo_198.json
Storing ing JSON at /Users/marekmazur/astor/./diffSolutions/patch_57860_198.diff
/Users/marekmazur/astor/./diffSolutions/patch_57860_198.diff:
{"VARIANT_ID":"198","VALIDATION":"|true|0|2059|[]|","patchhunks":[{"LOCATION":"org.apache.commons.math.optimization.linear.SimplexSolver","PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/defects4j\\\/math-82\\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java","INGREDIENT_SCOPE":"-","ORIGINAL_CODE":"minValue = tableau.getEntry(0, i)","BUGGY_CODE_TYPE":"CtAssignmentImpl|CtBlockImpl","OPERATOR":"RemoveOp","MODIFIED_FILE_PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-82\\\/\\\/src\\\/\\\/variant-198\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java","LINE":"63","SUSPICIOUNESS":"0,994","MP_RANKING":"36"}],"TIME":"57","GENERATION":"99","FOLDER_SOLUTION_CODE":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-82\\\/\\\/src\\\/\\\/variant-198","PATCH_DIFF_ORIG":"--- \\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java\\n+++ \\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java\\n@@ -62,2 +62,2 @@\\n-\\t\\t\\tif (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {\\n-\\t\\t\\t\\tminValue = tableau.getEntry(0, i);\\n+\\t\\t\\tif (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)\\n+\\n@@ -65 +65 @@\\n-\\t\\t\\t}\\n+\\n\\n"}
Saving patch diff at /Users/marekmazur/astor/./diffSolutions/patch_57860_198.diff
End analysis generation - Solutions found:--> (198(SOLUTION)(f=0.0), )
Variants to next generation from: 2-->IDs: (198(f=0.0)[SOL], 197(f=1.0), )
Selected to next generation: IDs2--> (197(f=1.0), )
Max Solution found 1
Time Repair Loop (s): 57.864
generationsexecuted: 99
----SUMMARY_EXECUTION---
End Repair Search: Found solution
Solution stored at: /Users/marekmazur/astor/./output_astor/AstorMain-math-82//src/
Number solutions:1
f (sol): 0.0, [Variant id: 198 (SOL) , #gens: 185, #ops: 1, parent:197]
All variants:
f 1.0, [Variant id: 199, #gens: 186, #ops: 0, parent:-]
Number suspicious:1

 --SOLUTIONS DESCRIPTION--

 ----
ProgramVariant 198
 
time(sec)= 57
operation: RemoveOp
location= org.apache.commons.math.optimization.linear.SimplexSolver
line= 63
lineSuspiciousness= 0,994
lineSuspiciousness= 36
original statement= minValue = tableau.getEntry(0, i)
buggy kind= CtAssignmentImpl|CtBlockImpl
fixed statement= 
generation= 99
ingredientScope= -
validation=|true|0|2059|[]|
diffpatch=--- /src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
+++ /src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
@@ -47,2 +47 @@
-			if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {
-				minValue = tableau.getEntry(0, i);
+			if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)
@@ -50 +49 @@
-			}
+


diffpatchoriginal=--- /src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
+++ /src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
@@ -62,2 +62,2 @@
-			if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {
-				minValue = tableau.getEntry(0, i);
+			if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)
+
@@ -65 +65 @@
-			}
+



Astor Output:

General stats:
EXECUTION_IDENTIFIER=
TOTAL_TIME=57.864
NR_GENERATIONS=99
NR_RIGHT_COMPILATIONS=44
NR_FAILLING_COMPILATIONS=55
NR_ERRONEOUS_VARIANCES=null
NR_FAILING_VALIDATION_PROCESS=null
OUTPUT_STATUS=STOP_BY_PATCH_FOUND
FAULT_LOCALIZATION=flacoco

Patch stats:

Patch 1
VARIANT_ID=198
TIME=57
VALIDATION=|true|0|2059|[]|
GENERATION=99
FOLDER_SOLUTION_CODE=/Users/marekmazur/astor/./output_astor/AstorMain-math-82//src//variant-198
--Patch Hunk #1
OPERATOR=RemoveOp

LOCATION=org.apache.commons.math.optimization.linear.SimplexSolver

PATH=/Users/marekmazur/astor/defects4j/math-82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java

MODIFIED_FILE_PATH=/Users/marekmazur/astor/./output_astor/AstorMain-math-82//src//variant-198/org/apache/commons/math/optimization/linear/SimplexSolver.java

LINE=63

SUSPICIOUNESS=0,994

MP_RANKING=36

ORIGINAL_CODE=minValue = tableau.getEntry(0, i)

BUGGY_CODE_TYPE=CtAssignmentImpl|CtBlockImpl

PATCH_HUNK_CODE=null

PATCH_HUNK_TYPE=null

INGREDIENT_SCOPE=-

INGREDIENT_PARENT=null

PATCH_DIFF_ORIG=--- /src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
+++ /src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
@@ -62,2 +62,2 @@
-			if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {
-				minValue = tableau.getEntry(0, i);
+			if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)
+
@@ -65 +65 @@
-			}
+



Storing ing JSON at /Users/marekmazur/astor/./output_astor/AstorMain-math-82//astor_output.json
astor_output:
{"general":{"NR_RIGHT_COMPILATIONS":44,"NR_ERRONEOUS_VARIANCES":null,"EXECUTION_IDENTIFIER":"","FAULT_LOCALIZATION":"flacoco","OUTPUT_STATUS":"STOP_BY_PATCH_FOUND","NR_FAILLING_COMPILATIONS":55,"NR_GENERATIONS":99,"TOTAL_TIME":57.864,"NR_FAILING_VALIDATION_PROCESS":null},"patches":[{"VARIANT_ID":"198","VALIDATION":"|true|0|2059|[]|","patchhunks":[{"LOCATION":"org.apache.commons.math.optimization.linear.SimplexSolver","PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/defects4j\\\/math-82\\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java","INGREDIENT_SCOPE":"-","ORIGINAL_CODE":"minValue = tableau.getEntry(0, i)","BUGGY_CODE_TYPE":"CtAssignmentImpl|CtBlockImpl","OPERATOR":"RemoveOp","MODIFIED_FILE_PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-82\\\/\\\/src\\\/\\\/variant-198\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java","LINE":"63","SUSPICIOUNESS":"0,994","MP_RANKING":"36"}],"TIME":"57","GENERATION":"99","FOLDER_SOLUTION_CODE":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-82\\\/\\\/src\\\/\\\/variant-198","PATCH_DIFF_ORIG":"--- \\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java\\n+++ \\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java\\n@@ -62,2 +62,2 @@\\n-\\t\\t\\tif (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {\\n-\\t\\t\\t\\tminValue = tableau.getEntry(0, i);\\n+\\t\\t\\tif (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)\\n+\\n@@ -65 +65 @@\\n-\\t\\t\\t}\\n+\\n\\n"}]}
Time Total(s): 160.005
