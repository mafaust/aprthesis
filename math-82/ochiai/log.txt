[0] INFO ProjectConfiguration - Version of the JVM used: 1.8.0_202
[1] INFO main - Java version of the JDK used to run tests: 1.8.0_202
[1] INFO main - The compliance of the JVM is:  8
[2] INFO main - command line arguments: [-location  /Users/marekmazur/astor/defects4j/math-82  -mode  jgenprog  -package  org.apache.commons  -jvm4testexecution  /Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin  -failing  org.apache.commons.math.optimization.linear.SimplexSolverTest  -srcjavafolder  /src/java/  -srctestfolder  /src/test/  -binjavafolder  /target/classes/  -bintestfolder  /target/test-classes/  -stopfirst  true  -dependencies  /Users/marekmazur/astor/examples/libs/junit-4.4.jar  -maxgen  1000000  -seed  10  -maxtime  60  -scope  local  -stopfirst  true  -flthreshold  0  -population  1  -faultlocalization  flacoco]
[5] INFO AstorMain - Running Astor on a JDK at /Users/marekmazur/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/jre
Source folders: [/Users/marekmazur/astor/defects4j/math-82/src/main/java]
Source Test folders: [/Users/marekmazur/astor/defects4j/math-82/src/test]
---- Creating spoon model
Creating model,  Code location from working folder: /Users/marekmazur/astor/defects4j/math-82/src/main/java
building model: /Users/marekmazur/astor/defects4j/math-82/src/main/java, compliance level: 8
Classpath (Dependencies) for building SpoonModel: [/Users/marekmazur/astor/examples/libs/junit-4.4.jar]
Spoon Model built from location: /Users/marekmazur/astor/defects4j/math-82/src/main/java
Number of CtTypes created: 388
Running chosen test detection strategy: CLASSLOADER
Test retrieved from classes: 224
Running Flacoco...
Running spectrum-based fault localization...
FlacocoConfig{workspace='/Users/marekmazur/astor/.', projectPath='/Users/marekmazur/astor/defects4j/math-82', srcJavaDir=[/Users/marekmazur/astor/defects4j/math-82/src/main/java], srcTestDir=[/Users/marekmazur/astor/defects4j/math-82/src/test], binJavaDir=[/Users/marekmazur/astor/defects4j/math-82/target/classes], binTestDir=[/Users/marekmazur/astor/defects4j/math-82/target/test-classes], classpath='/Users/marekmazur/astor/examples/libs/junit-4.4.jar', customJUnitClasspath='null', customJacocoClasspath='null', mavenHome='/Users/marekmazur/.m2/repository/', coverTests=false, testRunnerVerbose=false, testRunnerTimeoutInMs=3600000, testRunnerJVMArgs='null', threshold=0.0, includeZeros=false, complianceLevel=8, testDetectionStrategy=CLASSLOADER, ignoredTests=[], jUnit4Tests=[org.apache.commons.math.linear.SparseRealMatrixTest#testSerial, org.apache.commons.math.util.MathUtilsTest#testL2DistanceInt, org.apache.commons.math.linear.QRSolverTest#testOverdetermined, org.apache.commons.math.linear.SingularValueSolverTest#testSolveSingularityErrors, org.apache.commons.math.fraction.BigFractionTest#testPow, org.apache.commons.math.linear.BigMatrixImplTest#testSubMatrix, org.apache.commons.math.geometry.RotationTest#testCompose, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testParameters, org.apache.commons.math.linear.RealMatrixImplTest#testAdd, org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowFieldMatrix, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testDimensions, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest#derivativesConsistency, org.apache.commons.math.ode.FirstOrderConverterTest#testSmallStep, org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension4WithSplit, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNotPositiveDefinite, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNonDefaultSetting, org.apache.commons.math.stat.StatUtilsTest#testStats, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testSwissFertility, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeReal, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testCircleFitting, org.apache.commons.math.stat.regression.SimpleRegressionTest#testCorr, org.apache.commons.math.linear.BiDiagonalTransformerTest#testDimensions, org.apache.commons.math.util.MathUtilsTest#testNextAfterSpecialCases, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testPerfectFit, org.apache.commons.math.distribution.TDistributionTest#testConsistency, org.apache.commons.math.stat.inference.TTestTest#testOneSampleT, org.apache.commons.math.random.RandomAdaptorTest#testConfig, org.apache.commons.math.complex.ComplexTest#testConstructor, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testIllConditioned, org.apache.commons.math.complex.ComplexTest#testMultiplyNaN, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testConsistency, org.apache.commons.math.util.MathUtilsTest#testSubAndCheckLong, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRowMatrix, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testGetValues, org.apache.commons.math.ConvergenceExceptionTest#testConstructorPatternArguments, org.apache.commons.math.distribution.WeibullDistributionTest#testSampling, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSanityChecks, org.apache.commons.math.linear.BlockRealMatrixTest#testCopyFunctions, org.apache.commons.math.linear.LUSolverTest#testSolveDimensionErrors, org.apache.commons.math.linear.BigMatrixImplTest#testPlusMinus, org.apache.commons.math.distribution.CauchyDistributionTest#testIllegalArguments, org.apache.commons.math.random.ValueServerTest#testReplay, org.apache.commons.math.util.MathUtilsTest#testSignInt, org.apache.commons.math.distribution.GammaDistributionTest#testCumulativeProbabilities, org.apache.commons.math.linear.BlockFieldMatrixTest#testAddFail, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnLarge, org.apache.commons.math.fraction.FractionTest#testDoubleValue, org.apache.commons.math.linear.SparseFieldVectorTest#testMapFunctions, org.apache.commons.math.distribution.HypergeometricDistributionTest#testIllegalArguments, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#checkClone, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest#testTestNegative, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testIncrementation, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewNewtonSolverValid, org.apache.commons.math.complex.ComplexTest#testGetArgumentNaN, org.apache.commons.math.geometry.Vector3DTest#testAdd, org.apache.commons.math.transform.FastSineTransformerTest#testSinFunction, org.apache.commons.math.stat.FrequencyTest#testSerial, org.apache.commons.math.linear.SparseFieldMatrixTest#testGetRowMatrix, org.apache.commons.math.linear.LUDecompositionImplTest#testDimensions, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPlusMinus, org.apache.commons.math.special.BetaTest#testLogBetaPositiveZero, org.apache.commons.math.fraction.BigFractionFieldTest#testSerial, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testString, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testSerial, org.apache.commons.math.linear.RealVectorFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructor, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPermutation, org.apache.commons.math.linear.EigenSolverTest#testSolve, org.apache.commons.math.complex.ComplexTest#testTan, org.apache.commons.math.distribution.PoissonDistributionTest#testDensities, org.apache.commons.math.util.BigRealTest#testConstructor, org.apache.commons.math.linear.BigMatrixImplTest#testIsSingular, org.apache.commons.math.MaxIterationsExceededExceptionTest#testSimpleConstructor, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateSin, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonEqualCounts, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testMinStep, org.apache.commons.math.linear.SingularValueSolverTest#testSolveDimensionErrors, org.apache.commons.math.special.BetaTest#testLogBetaNanPositive, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testDeprecated, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testSimplistic, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testTrivial, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testEvaluation, org.apache.commons.math.util.MathUtilsTest#testPermutedArrayHash, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowLarge, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentEquations, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#derivativesConsistency, org.apache.commons.math.linear.SparseRealMatrixTest#testTranspose, org.apache.commons.math.geometry.Vector3DTest#testNorm, org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumn, org.apache.commons.math.complex.ComplexTest#testCosNaN, org.apache.commons.math.linear.BigMatrixImplTest#testPremultiplyVector, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testSinFunction, org.apache.commons.math.linear.CholeskySolverTest#testDeterminant, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataThatIsNotSquare, org.apache.commons.math.genetics.RandomKeyTest#testIsSame, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNotSymmetricMatrixException, org.apache.commons.math.optimization.linear.SimplexTableauTest#testdiscardArtificialVariables, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testEqualsAndHashCode, org.apache.commons.math.random.RandomDataTest#testNextUniform, org.apache.commons.math.fraction.FractionTest#testCompareTo, org.apache.commons.math.linear.RealMatrixImplTest#testSetRow, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testEvaluation, org.apache.commons.math.distribution.NormalDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.fraction.FractionFormatTest#testFormatImproper, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumnVector, org.apache.commons.math.linear.FieldMatrixImplTest#testSetSubMatrix, org.apache.commons.math.stat.CertifiedDataTest#testSummaryStatistics, org.apache.commons.math.util.BigRealTest#testCompareTo, org.apache.commons.math.stat.descriptive.rank.MinTest#testConsistency, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonUnEqualCounts, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFittingBadInit, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEventsErrors, org.apache.commons.math.linear.RealMatrixImplTest#testToString, org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearFullRank, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testEqualsAndHashCode, org.apache.commons.math.complex.ComplexTest#testDivideInfinite, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testNonInversible, org.apache.commons.math.fraction.FractionTest#testDoubleConstructor, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testCompletelyIncorrectBandwidth, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testCircleFittingBadInit, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest#serialization, org.apache.commons.math.genetics.RandomKeyMutationTest#testMutate, org.apache.commons.math.optimization.linear.SimplexSolverTest#testEpsilon, org.apache.commons.math.linear.RealMatrixImplTest#testGetRowVector, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest#serialization, org.apache.commons.math.estimation.WeightedMeasurementTest#testTheory, org.apache.commons.math.complex.ComplexTest#testSubtractNaN, org.apache.commons.math.random.RandomAdaptorTest#testNextPoisson, org.apache.commons.math.stat.descriptive.moment.MeanTest#testIncrementation, org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquare, org.apache.commons.math.stat.descriptive.summary.SumTest#testWeightedConsistency, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testNonSquare, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testInconsistentEquations, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleNoDecimals, org.apache.commons.math.complex.ComplexTest#testSqrtRealZero, org.apache.commons.math.linear.RealMatrixImplTest#testDimensions, org.apache.commons.math.fraction.BigFractionFormatTest#testFormatImproperNegative, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testSinFunction, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveBadParameters, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testN0andN1Conditions, org.apache.commons.math.complex.ComplexFormatTest#testGetImaginaryFormat, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSetQuantile, org.apache.commons.math.complex.ComplexTest#testSqrtImaginaryNegative, org.apache.commons.math.stat.FrequencyTest#testAddNonComparable, org.apache.commons.math.linear.BlockRealMatrixTest#testPlusMinus, org.apache.commons.math.linear.BigMatrixImplTest#testConstructors, org.apache.commons.math.complex.ComplexTest#testSinhNaN, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSerial, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testSerial, org.apache.commons.math.linear.RealMatrixImplTest#testSetColumnVector, org.apache.commons.math.linear.BlockRealMatrixTest#testSetRowVector, org.apache.commons.math.stat.inference.TTestFactoryTest#testOneSampleTTest, org.apache.commons.math.fraction.BigFractionTest#testDoubleValue, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testWindowSize, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testQRColumnsPermutation, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testCopy, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersUnsorted, org.apache.commons.math.stat.descriptive.moment.MeanTest#testSerialization, org.apache.commons.math.linear.EigenDecompositionImplTest#testEigenvalues, org.apache.commons.math.distribution.PascalDistributionTest#testDegenerate1, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testGetSummary, org.apache.commons.math.linear.BlockFieldMatrixTest#testPlusMinus, org.apache.commons.math.complex.FrenchComplexFormatTest#testPositiveInfinity, org.apache.commons.math.distribution.PascalDistributionTest#testDegenerate0, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowLarge, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersSimple, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testGetFromEmpty, org.apache.commons.math.special.BetaTest#testRegularizedBetaNegativePositivePositive, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumn, org.apache.commons.math.stat.descriptive.summary.SumTest#testSerialization, org.apache.commons.math.linear.EigenDecompositionImplTest#testTridiagonal, org.apache.commons.math.linear.SparseFieldVectorTest#testBasicFunctions, org.apache.commons.math.distribution.CauchyDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.linear.SparseRealMatrixTest#testMath209, org.apache.commons.math.distribution.HypergeometricDistributionTest#testCumulativeProbabilities, org.apache.commons.math.linear.FieldMatrixImplTest#testGetVectors, org.apache.commons.math.geometry.RotationTest#testAngles, org.apache.commons.math.linear.BigMatrixImplTest#testEqualsAndHashCode, org.apache.commons.math.analysis.solvers.BrentSolverTest#testQuinticZero, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPoissonLargeMean, org.apache.commons.math.optimization.linear.SimplexSolverTest#testSolutionWithNegativeDecisionVariable, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testMultiplication, org.apache.commons.math.distribution.ChiSquareDistributionTest#testDfAccessors, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstLaguerrePolynomials, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumnMatrix, org.apache.commons.math.ode.ContinuousOutputModelTest#testRandomAccess, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSetterInjection, org.apache.commons.math.genetics.RandomKeyTest#testIdentityPermutation, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersUnsorted, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testCovarianceConsistency, org.apache.commons.math.distribution.BetaDistributionTest#testDensity, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testIncreasingTolerance, org.apache.commons.math.fraction.BigFractionFormatTest#testParseBig, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testSanityChecks, org.apache.commons.math.linear.SparseRealMatrixTest#testSetSubMatrix, org.apache.commons.math.linear.QRSolverTest#testSolveRankErrors, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testShuffledStatistics, org.apache.commons.math.geometry.Vector3DTest#testDistanceSq, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterInjection, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumn, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testHermiteDifferentials, org.apache.commons.math.distribution.NormalDistributionTest#testGetMean, org.apache.commons.math.genetics.RandomKeyTest#testComparatorPermutation, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIntegratorControls, org.apache.commons.math.stat.regression.SimpleRegressionTest#testSSENonNegative, org.apache.commons.math.linear.RealMatrixImplTest#testGetEntry, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testSerialization, org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension1, org.apache.commons.math.optimization.linear.SimplexSolverTest#testTrivialModel, org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension2, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest#testDerivativesConsistency, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testMatricesValues, org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeY, org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeZ, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testCircleFitting, org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension3, org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumnVector, org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeX, org.apache.commons.math.fraction.FractionFormatTest#testParseProperInvalidMinus, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenSeparator, org.apache.commons.math.estimation.MinpackTest#testMinpackOsborne2, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary#test, org.apache.commons.math.complex.ComplexTest#testTanhCritical, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregateDegenerate, org.apache.commons.math.estimation.MinpackTest#testMinpackOsborne1, org.apache.commons.math.geometry.Vector3DTest#testSubtract, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testIllegalArguments, org.apache.commons.math.complex.ComplexFormatTest#testNegativeImaginary, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIncreasingTolerance, org.apache.commons.math.random.RandomAdaptorTest#testNextSample, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetFunctionValueAccuracy, org.apache.commons.math.linear.SparseRealMatrixTest#testTrace, org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnBigMatrix, org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumn, org.apache.commons.math.linear.ArrayFieldVectorTest#testMapFunctions, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testTwoSets, org.apache.commons.math.stat.descriptive.rank.MaxTest#testEqualsAndHashCode, org.apache.commons.math.stat.descriptive.moment.MeanTest#testEvaluation, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testMomentSmallSamples, org.apache.commons.math.linear.BlockFieldMatrixTest#testDimensions, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testEqualsAndHashCode, org.apache.commons.math.fraction.FractionFieldTest#testSerial, org.apache.commons.math.linear.SparseRealVectorTest#testMisc, org.apache.commons.math.special.GammaTest#testLogGammaPositive, org.apache.commons.math.stat.StatUtilsTest#testProduct, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSetterIllegalState, org.apache.commons.math.complex.ComplexTest#testCosInf, org.apache.commons.math.optimization.general.MinpackTest#testMinpackBrownAlmostLinear, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest#testRosenbrock, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#derivativesConsistency, org.apache.commons.math.estimation.MinpackTest#testMinpackBrownAlmostLinear, org.apache.commons.math.genetics.BinaryChromosomeTest#testInvalidConstructor, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testMomentSmallSamples, org.apache.commons.math.geometry.Vector3DTest#testNormalize, org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction2, org.apache.commons.math.genetics.RandomKeyTest#testEqualRepr, org.apache.commons.math.complex.FrenchComplexFormatTest#testStaticFormatComplex, org.apache.commons.math.stat.correlation.CovarianceTest#testConstant, org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutOnExisting, org.apache.commons.math.complex.ComplexFormatTest#testParseZeroReal, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParsePositiveInfinity, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testExpm1Function, org.apache.commons.math.geometry.Vector3DFormatTest#testParsePositiveInfinity, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testDimensionCheck, org.apache.commons.math.linear.EigenDecompositionImplTest#testDimensions, org.apache.commons.math.geometry.Vector3DTest#testAngular, org.apache.commons.math.util.ResizableDoubleArrayTest#testWithInitialCapacity, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testSinFunction, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testIllConditioned, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorPatternArguments, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testVariableSteps, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSerial, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBracketSin, org.apache.commons.math.util.MathUtilsTest#testGcd, org.apache.commons.math.distribution.GammaDistributionTest#testValues, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeBoth, org.apache.commons.math.linear.FieldMatrixImplTest#testEqualsAndHashCode, org.apache.commons.math.linear.BigMatrixImplTest#testMultiply2, org.apache.commons.math.genetics.FitnessCachingTest#testFitnessCaching, org.apache.commons.math.random.RandomAdaptorTest#testNextUniform, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPremultiplyVector, org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeZ, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSample, org.apache.commons.math.distribution.WeibullDistributionTest#testConsistency, org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateNoSuccesses, org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeX, org.apache.commons.math.stat.FrequencyTest#testAdd, org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeY, org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeImaginary, org.apache.commons.math.distribution.BetaDistributionTest#testCumulative, org.apache.commons.math.random.RandomDataTest#testNextPoisson, org.apache.commons.math.distribution.ChiSquareDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetMatrixLarge, org.apache.commons.math.distribution.HypergeometricDistributionTest#testLargeValues, org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexInf, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#backward, org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest#testQuinticMin, org.apache.commons.math.distribution.BinomialDistributionTest#testDegenerate1, org.apache.commons.math.special.BetaTest#testLogBetaNegativePositive, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testOneSet, org.apache.commons.math.distribution.BinomialDistributionTest#testDegenerate0, org.apache.commons.math.distribution.CauchyDistributionTest#testScale, org.apache.commons.math.util.MathUtilsTest#testSubAndCheck, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testNaNContracts, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testToString, org.apache.commons.math.fraction.BigFractionTest#testNegate, org.apache.commons.math.complex.ComplexTest#testExpInf, org.apache.commons.math.stat.regression.SimpleRegressionTest#testNorris, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseZeroImaginary, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseIgnoredWhitespace, org.apache.commons.math.genetics.RandomKeyTest#testDecode, org.apache.commons.math.optimization.general.MinpackTest#testMinpackChebyquad, org.apache.commons.math.linear.MatrixUtilsTest#testCreateBigMatrix, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testConstant, org.apache.commons.math.analysis.integration.RombergIntegratorTest#testSinFunction, org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareIndependence, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testCopy, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBadParameters, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRowVector, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testProductAndGeometricMean, org.apache.commons.math.genetics.FixedGenerationCountTest#testIsSatisfied, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGet, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveZeroPositive, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstChebyshevPolynomials, org.apache.commons.math.linear.RealMatrixImplTest#testTrace, org.apache.commons.math.optimization.direct.NelderMeadTest#testMinimizeMaximize, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testCopyConsistency, org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testInconsistentEquations, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testVariableSteps, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testConstructorSingleFormat, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testStepSize, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSpecialValues, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testIncrementation, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testNaN, org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenSuffix, org.apache.commons.math.linear.QRSolverTest#testSolve, org.apache.commons.math.util.OpenIntToFieldTest#testGetAbsent, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testExamples, org.apache.commons.math.util.TransformerMapTest#testTransformers, org.apache.commons.math.util.OpenIntToFieldTest#testIterator, org.apache.commons.math.complex.ComplexFormatTest#testNegativeInfinity, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testConstants, org.apache.commons.math.linear.SparseRealMatrixTest#testMultiply2, org.apache.commons.math.complex.ComplexTest#testNthRoot_normal_fourthRoot, org.apache.commons.math.distribution.ZipfDistributionTest#testCumulativeProbabilities, org.apache.commons.math.special.GammaTest#testDigammaSmallArgs, org.apache.commons.math.linear.BlockRealMatrixTest#testGetVectors, org.apache.commons.math.stat.regression.SimpleRegressionTest#testInference, org.apache.commons.math.stat.descriptive.rank.PercentileTest#test5, org.apache.commons.math.linear.ArrayRealVectorTest#testMisc, org.apache.commons.math.distribution.WeibullDistributionTest#testIllegalArguments, org.apache.commons.math.optimization.direct.NelderMeadTest#testRosenbrock, org.apache.commons.math.linear.SparseFieldMatrixTest#testGetEntry, org.apache.commons.math.stat.regression.SimpleRegressionTest#testClear, org.apache.commons.math.linear.SparseFieldMatrixTest#testAddFail, org.apache.commons.math.special.BetaTest#testRegularizedBetaZeroPositivePositive, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testEvaluation, org.apache.commons.math.optimization.linear.SimplexSolverTest#testInfeasibleSolution, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testQuinticFunction, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testSetterInjection, org.apache.commons.math.random.MersenneTwisterTest#testNextIntNeg, org.apache.commons.math.complex.ComplexTest#testEqualsTrue, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testSerial, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testDecreasingSteps, org.apache.commons.math.complex.ComplexTest#testEqualsNull, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testSerialization, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMultiply2, org.apache.commons.math.linear.SparseFieldMatrixTest#testSubMatrix, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArgumentCause, org.apache.commons.math.util.BigRealFieldTest#testOne, org.apache.commons.math.complex.ComplexTest#testScalarMultiply, org.apache.commons.math.linear.RealMatrixImplTest#testGetRow, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testCopy, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveObsFromSingle, org.apache.commons.math.util.TransformerMapTest#testClear, org.apache.commons.math.complex.ComplexTest#testSqrtPolar, org.apache.commons.math.random.ValueServerTest#testFill, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testEqualsAndHashCode, org.apache.commons.math.fraction.BigFractionFormatTest#testFormatZero, org.apache.commons.math.distribution.ChiSquareDistributionTest#testSmallDf, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNan, org.apache.commons.math.util.MathUtilsTest#testL1DistanceInt, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math.stat.descriptive.summary.ProductTest#testSpecialValues, org.apache.commons.math.distribution.NormalDistributionTest#testMath280, org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareLargeTestStatistic, org.apache.commons.math.linear.EigenDecompositionImplTest#testDistinctEigenvalues, org.apache.commons.math.fraction.FractionFormatTest#testDoubleFormat, org.apache.commons.math.linear.BlockFieldMatrixTest#testSerial, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testDimensionCheck, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumn, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testBigStep, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testSerial, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testMath226, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextLong, org.apache.commons.math.linear.BlockRealMatrixTest#testGetRowVector, org.apache.commons.math.linear.BlockRealMatrixTest#testGetRowMatrix, org.apache.commons.math.genetics.ElitisticListPopulationTest#testNextGeneration, org.apache.commons.math.analysis.integration.RombergIntegratorTest#testParameters, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureHex, org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexNaN, org.apache.commons.math.linear.RealVectorFormatTest#testParseZeroX, org.apache.commons.math.ConvergenceExceptionTest#testConstructor, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#checklone, org.apache.commons.math.estimation.MinpackTest#testMinpackHelicalValley, org.apache.commons.math.genetics.ListPopulationTest#testGetFittestChromosome, org.apache.commons.math.linear.RealVectorFormatTest#testForgottenSeparator, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testLongly, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testMomentSmallSamples, org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowBigMatrix, org.apache.commons.math.linear.LUDecompositionImplTest#testLLowerTriangular, org.apache.commons.math.distribution.BinomialDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.util.MathUtilsTest#testLInfDistanceInt, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRowVector, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testNoDependency, org.apache.commons.math.linear.BiDiagonalTransformerTest#testUOrthogonal, org.apache.commons.math.linear.BlockFieldMatrixTest#testPremultiply, org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowRealMatrix, org.apache.commons.math.analysis.solvers.MullerSolverTest#testDeprecated2, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseManyComponents, org.apache.commons.math.special.GammaTest#testRegularizedGammaPositivePositive, org.apache.commons.math.util.TransformerMapTest#testPutTransformer, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeAll, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testQuinticFunction, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testDimension, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testCircleFittingBadInit, org.apache.commons.math.complex.FrenchComplexFormatTest#testFormatObject, org.apache.commons.math.fraction.BigFractionFormatTest#testWholeFormat, org.apache.commons.math.fraction.FractionTest#testEqualsAndHashCode, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testStepSize, org.apache.commons.math.util.MathUtilsTest#testNormalizeAngle, org.apache.commons.math.MathExceptionTest#testConstructorCause, org.apache.commons.math.complex.ComplexTest#testAbsNaN, org.apache.commons.math.util.MathUtilsTest#testIndicatorInt, org.apache.commons.math.linear.BlockRealMatrixTest#testAdd, org.apache.commons.math.linear.RealMatrixImplTest#testScalarAdd, org.apache.commons.math.special.GammaTest#testLogGammaZero, org.apache.commons.math.stat.StatUtilsTest#testPercentile, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareLargeTestStatistic, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testCopyConsistency, org.apache.commons.math.linear.RealMatrixImplTest#testOperate, org.apache.commons.math.stat.descriptive.rank.MaxTest#testMomentSmallSamples, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenPrefix, org.apache.commons.math.stat.correlation.CovarianceTest#testLongly, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testTrivial, org.apache.commons.math.ode.ContinuousOutputModelTest#testErrorConditions, org.apache.commons.math.complex.ComplexFormatTest#testZeroImaginary, org.apache.commons.math.fraction.BigFractionFormatTest#testParseInteger, org.apache.commons.math.random.MersenneTwisterTest#testNexBytes, org.apache.commons.math.complex.ComplexUtilsTest#testPolar2Complex, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testPercentileSetter, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testUnstableDerivative, org.apache.commons.math.complex.ComplexTest#testMath221, org.apache.commons.math.complex.ComplexTest#testSqrt1z, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnDistortedSine, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testCopy, org.apache.commons.math.linear.FieldMatrixImplTest#testSetRowMatrix, org.apache.commons.math.geometry.RotationTest#testQuaternion, org.apache.commons.math.linear.ArrayFieldVectorTest#testDataInOut, org.apache.commons.math.random.RandomAdaptorTest#testNextPermutation, org.apache.commons.math.linear.RealMatrixImplTest#testMultiply, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testRedundantEquations, org.apache.commons.math.linear.QRDecompositionImplTest#testHTrapezoidal, org.apache.commons.math.linear.RealVectorFormatTest#testParseNan, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveNoRoot, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testDimensions, org.apache.commons.math.distribution.GammaDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.analysis.integration.RombergIntegratorTest#testQuinticFunction, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testN0andN1Conditions, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseZeroX, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterIllegalState, org.apache.commons.math.linear.QRDecompositionImplTest#testQOrthogonal, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testMismatch, org.apache.commons.math.fraction.FractionFormatTest#testFormatZero, org.apache.commons.math.distribution.GammaDistributionTest#testConsistency, org.apache.commons.math.distribution.WeibullDistributionTest#testSetBeta, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testDimensionCheck, org.apache.commons.math.linear.BiDiagonalTransformerTest#testMatricesValues, org.apache.commons.math.stat.data.LotteryTest#testCertifiedValues, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testFixedState, org.apache.commons.math.fraction.BigFractionTest#testGetReducedFraction, org.apache.commons.math.linear.RealMatrixImplTest#testAddFail, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testSmallLastStep, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#derivativesConsistency, org.apache.commons.math.util.TransformerMapTest#testContainsClass, org.apache.commons.math.linear.BlockFieldMatrixTest#testSeveralBlocks, org.apache.commons.math.random.EmpiricalDistributionTest#testGridTooFat, org.apache.commons.math.geometry.RotationTest#testMatrix, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testSerialization, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testCopy, org.apache.commons.math.stat.descriptive.summary.ProductTest#testEqualsAndHashCode, org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleWithDecimals, org.apache.commons.math.linear.SparseFieldMatrixTest#testCopyFunctions, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetAbsoluteAccuracy, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testCopyConsistency, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextHex, org.apache.commons.math.linear.BiDiagonalTransformerTest#testVOrthogonal, org.apache.commons.math.optimization.linear.SimplexSolverTest#testMinimization, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testConsistency, org.apache.commons.math.stat.inference.TTestFactoryTest#testTwoSampleTHeterscedastic, org.apache.commons.math.geometry.Vector3DFormatTest#testParseIgnoredWhitespace, org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumnMatrix, org.apache.commons.math.linear.RealVectorFormatTest#testNonDefaultSetting, org.apache.commons.math.fraction.FractionFieldTest#testZero, org.apache.commons.math.util.MathUtilsTest#test0Choose0, org.apache.commons.math.util.DefaultTransformerTest#testTransformString, org.apache.commons.math.distribution.NormalDistributionTest#testSetMean, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testCopy, org.apache.commons.math.linear.EigenDecompositionImplTest#testRepeatedEigenvalue, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testSerial, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testSerialization, org.apache.commons.math.stat.descriptive.rank.MinTest#testIncrementation, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testIncrementation, org.apache.commons.math.genetics.ChromosomeTest#testFindSameChromosome, org.apache.commons.math.linear.BlockFieldMatrixTest#testOperatePremultiplyLarge, org.apache.commons.math.linear.RealVectorFormatTest#testSimpleWithDecimals, org.apache.commons.math.stat.descriptive.rank.MaxTest#testSpecialValues, org.apache.commons.math.linear.FieldMatrixImplTest#testPremultiply, org.apache.commons.math.geometry.Vector3DFormatTest#testNan, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleWithDecimals, org.apache.commons.math.fraction.FractionTest#testDigitLimitConstructor, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressandVariance, org.apache.commons.math.complex.ComplexTest#testConjugate, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testIncrementation, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testChebyshevDifferentials, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNan, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEventsNoConvergence, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetEntry, org.apache.commons.math.distribution.WeibullDistributionTest#testAlpha, org.apache.commons.math.linear.BigMatrixImplTest#testTranspose, org.apache.commons.math.util.MathUtilsTest#testEqualsWithAllowedUlps, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetRelativeAccuracy, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveAccuracySin, org.apache.commons.math.complex.FrenchComplexFormatTest#testNan, org.apache.commons.math.linear.ArrayRealVectorTest#testBasicFunctions, org.apache.commons.math.distribution.BinomialDistributionTest#testDensities, org.apache.commons.math.random.ValueServerTest#testEmptyDigestFile, org.apache.commons.math.fraction.BigFractionTest#testDivide, org.apache.commons.math.linear.BlockRealMatrixTest#testCopySubMatrix, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testConsistency, org.apache.commons.math.random.RandomAdaptorTest#testNextInt, org.apache.commons.math.complex.ComplexFormatTest#testParseZeroImaginary, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testNullIntervalCheck, org.apache.commons.math.special.GammaTest#testTrigamma, org.apache.commons.math.fraction.BigFractionTest#testSerial, org.apache.commons.math.stat.inference.TTestTest#testTwoSampleTHeterscedastic, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testAdd, org.apache.commons.math.linear.BlockRealMatrixTest#testMultiply, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testParameters, org.apache.commons.math.linear.MatrixUtilsTest#testCreateIdentityMatrix, org.apache.commons.math.analysis.solvers.MullerSolverTest#testQuinticFunction, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemove2, org.apache.commons.math.linear.FieldMatrixImplTest#testCopyFunctions, org.apache.commons.math.fraction.BigFractionFormatTest#testParseInvalid, org.apache.commons.math.distribution.NormalDistributionTest#testQuantiles, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#testIncreasingTolerance, org.apache.commons.math.special.GammaTest#testDigammaLargeArgs, org.apache.commons.math.linear.ArrayRealVectorTest#testPredicates, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testVOrthogonal, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testBackward, org.apache.commons.math.distribution.NormalDistributionTest#testCumulativeProbabilities, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRandom, org.apache.commons.math.linear.ArrayFieldVectorTest#testConstructors, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testRemoval, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetMaximalIterationCount, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testWalk, org.apache.commons.math.complex.ComplexTest#testDivideNaN, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnTwoPoints, org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testNoError, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumnVector, org.apache.commons.math.fraction.FractionFormatTest#testParseProper, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testSerialization, org.apache.commons.math.geometry.Vector3DTest#testScalarProduct, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayPatternArgumentsCause, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRowMatrix, org.apache.commons.math.transform.FastCosineTransformerTest#testSinFunction, org.apache.commons.math.stat.descriptive.summary.SumTest#testEqualsAndHashCode, org.apache.commons.math.linear.RealMatrixImplTest#testTranspose, org.apache.commons.math.geometry.RotationTest#testVectorOnePair, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testIncreasingTolerance, org.apache.commons.math.linear.TriDiagonalTransformerTest#testQOrthogonal, org.apache.commons.math.special.BetaTest#testLogBetaPositiveNan, org.apache.commons.math.special.BetaTest#testLogBetaPositiveNegative, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testWrongDerivative, org.apache.commons.math.linear.SparseRealMatrixTest#testSubMatrix, org.apache.commons.math.analysis.solvers.RiddersSolverTest#testQuinticFunction, org.apache.commons.math.distribution.PoissonDistributionTest#testNormalApproximateProbability, org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMaximalTiesMinimum, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testMomentSmallSamples, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest#serialization, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#interpolationInside, org.apache.commons.math.stat.inference.TTestFactoryTest#testOneSampleT, org.apache.commons.math.complex.ComplexTest#testNegateNaN, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNonDefaultSetting, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetVectors, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testStats, org.apache.commons.math.stat.descriptive.moment.MeanTest#testCopy, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testTranspose, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetEntry, org.apache.commons.math.linear.BigMatrixImplTest#testPremultiply, org.apache.commons.math.optimization.linear.SimplexTableauTest#testSerial, org.apache.commons.math.stat.descriptive.rank.MinTest#testMomentSmallSamples, org.apache.commons.math.fraction.BigFractionFormatTest#testDenominatorFormat, org.apache.commons.math.linear.BlockRealMatrixTest#testDimensions, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#serialization, org.apache.commons.math.complex.ComplexTest#testSinNaN, org.apache.commons.math.complex.ComplexTest#testScalarMultiplyInf, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest#testEqualsAndHashCode, org.apache.commons.math.linear.LUDecompositionImplTest#testMatricesValues2, org.apache.commons.math.linear.LUDecompositionImplTest#testMatricesValues1, org.apache.commons.math.stat.descriptive.rank.MaxTest#testIncrementation, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testInconsistentSizes, org.apache.commons.math.linear.RealVectorFormatTest#testNan, org.apache.commons.math.linear.BlockRealMatrixTest#testPremultiplyVector, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testSwissFertility, org.apache.commons.math.genetics.RandomKeyTest#testConstructor2, org.apache.commons.math.genetics.RandomKeyTest#testConstructor1, org.apache.commons.math.util.BigRealTest#testEqualsAndHashCode, org.apache.commons.math.complex.ComplexTest#testLogZero, org.apache.commons.math.util.ResizableDoubleArrayTest#testMinMax, org.apache.commons.math.linear.LUDecompositionImplTest#testUUpperTriangular, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testNonInversible, org.apache.commons.math.random.RandomDataTest#testNextLongExtremeValues, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSerialization, org.apache.commons.math.linear.TriDiagonalTransformerTest#testNonSquare, org.apache.commons.math.complex.ComplexTest#testCosh, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testCopyConsistency, org.apache.commons.math.linear.ArrayFieldVectorTest#testSerial, org.apache.commons.math.estimation.MinpackTest#testMinpackLinearFullRank, org.apache.commons.math.geometry.Vector3DFormatTest#testPositiveInfinity, org.apache.commons.math.stat.descriptive.rank.MinTest#testNaNs, org.apache.commons.math.stat.descriptive.summary.SumTest#testCopy, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testKepler, org.apache.commons.math.stat.regression.SimpleRegressionTest#testPerfect, org.apache.commons.math.linear.RealVectorFormatTest#testParseManyComponents, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuinticFunction, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testEqualsAndHashCode, org.apache.commons.math.linear.BlockFieldMatrixTest#testMultiply2, org.apache.commons.math.linear.ArrayFieldVectorTest#testBasicFunctions, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testEqualsAndHashCode, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnLarge, org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeImaginary, org.apache.commons.math.linear.BlockFieldMatrixTest#testAdd, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNonDefaultSetting, org.apache.commons.math.fraction.BigFractionTest#testSubtract, org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumnVector, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testConsistency, org.apache.commons.math.distribution.ChiSquareDistributionTest#testConsistency, org.apache.commons.math.fraction.FractionFormatTest#testParse, org.apache.commons.math.linear.FieldMatrixImplTest#testGetRow, org.apache.commons.math.linear.RealMatrixImplTest#testSetRowMatrix, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMaxIterations, org.apache.commons.math.linear.BigMatrixImplTest#testNorm, org.apache.commons.math.distribution.GammaDistributionTest#testDensity, org.apache.commons.math.fraction.BigFractionTest#testDigitLimitConstructor, org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumnMatrix, org.apache.commons.math.linear.MatrixUtilsTest#testBigFractionConverter, org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeInfinity, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#test20090720, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testIllConditioned, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testTwoSets, org.apache.commons.math.linear.ArrayRealVectorTest#testSerial, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testCopyConsistency, org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGet, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMath199, org.apache.commons.math.linear.BlockFieldMatrixTest#testTrace, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testStats, org.apache.commons.math.complex.ComplexFormatTest#testFormatObject, org.apache.commons.math.stat.descriptive.summary.SumTest#testCopyConsistency, org.apache.commons.math.transform.FastFourierTransformerTest#testSinFunction, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#serialization, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testContainsKey, org.apache.commons.math.complex.ComplexFormatTest#testSetRealFormatNull, org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testRedundantUnsolvable, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonBadCounts, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#backward, org.apache.commons.math.analysis.solvers.NewtonSolverTest#testSinZero, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testSmallStep, org.apache.commons.math.linear.RealMatrixImplTest#testSetColumnMatrix, org.apache.commons.math.linear.FieldMatrixImplTest#testToString, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testKepler, org.apache.commons.math.linear.BlockRealMatrixTest#testWalk, org.apache.commons.math.analysis.solvers.MullerSolverTest#testDeprecated, org.apache.commons.math.linear.BlockFieldMatrixTest#testOperateLarge, org.apache.commons.math.stat.descriptive.rank.MinTest#testEvaluation, org.apache.commons.math.optimization.general.MinpackTest#testMinpackBox3Dimensional, org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeImaginary, org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearRank1, org.apache.commons.math.linear.SparseFieldMatrixTest#testGetColumnMatrix, org.apache.commons.math.ConvergenceExceptionTest#testConstructorPatternArgumentsCause, org.apache.commons.math.linear.BlockRealMatrixTest#testOperateLarge, org.apache.commons.math.geometry.Vector3DTest#testDistanceInf, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBigStep, org.apache.commons.math.linear.BlockFieldMatrixTest#testTranspose, org.apache.commons.math.linear.SparseFieldMatrixTest#testPremultiplyVector, org.apache.commons.math.fraction.BigFractionTest#testGoldenRatio, org.apache.commons.math.linear.ArrayRealVectorTest#testDataInOut, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testEvaluation, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testEvaluation, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMaxIterations, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnOnePoint, org.apache.commons.math.ode.sampling.StepNormalizerTest#testBoundaries, org.apache.commons.math.linear.SparseFieldMatrixTest#testPremultiply, org.apache.commons.math.geometry.Vector3DTest#testAngularSeparation, org.apache.commons.math.random.RandomAdaptorTest#testNextSecureInt, org.apache.commons.math.linear.BigMatrixImplTest#testInverse, org.apache.commons.math.linear.SparseRealMatrixTest#testToString, org.apache.commons.math.estimation.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testBackward, org.apache.commons.math.util.DefaultTransformerTest#testTransformDouble, org.apache.commons.math.MathExceptionTest#testSerialization, org.apache.commons.math.util.MathUtilsTest#testCosh, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSetterInjection, org.apache.commons.math.optimization.linear.SimplexTableauTest#testTableauWithNoArtificialVars, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetSubMatrix, org.apache.commons.math.util.MathUtilsTest#testScalb, org.apache.commons.math.genetics.BinaryChromosomeTest#testRandomConstructor, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeZ, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquare, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeY, org.apache.commons.math.estimation.EstimatedParameterTest#testEstimate, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeX, org.apache.commons.math.optimization.general.MinpackTest#testMinpackPowellSingular, org.apache.commons.math.util.OpenIntToFieldTest#testContainsKey, org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testDeprecated, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testUUpperTriangular, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testConsistency, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testCopy, org.apache.commons.math.complex.ComplexTest#testNthRoot_normal_thirdRoot, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNan, org.apache.commons.math.linear.BigMatrixImplTest#testToString, org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath272, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleNoDecimals, org.apache.commons.math.stat.inference.TTestTest#testOneSampleTTest, org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenSeparator, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest#testSerialization, org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeReal, org.apache.commons.math.optimization.direct.MultiDirectionalTest#testMinimizeMaximize, org.apache.commons.math.linear.SparseRealMatrixTest#testMultiply, org.apache.commons.math.stat.descriptive.summary.ProductTest#testConsistency, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnStraightLine, org.apache.commons.math.complex.ComplexTest#testSinh, org.apache.commons.math.random.RandomAdaptorTest#testNextExponential, org.apache.commons.math.linear.LUSolverTest#testDeterminant, org.apache.commons.math.stat.StatUtilsTest#testArrayIndexConditions, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testNaN, org.apache.commons.math.estimation.WeightedMeasurementTest#testConstruction, org.apache.commons.math.linear.SparseFieldMatrixTest#testMath209, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testVariableSteps, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testToString, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testGetSummary, org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleNoDecimals, org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath288, org.apache.commons.math.linear.EigenDecompositionImplTest#testDiagonal, org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath286, org.apache.commons.math.analysis.solvers.BrentSolverTest#testInitialGuess, org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnRealMatrix, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testDimensionCheck, org.apache.commons.math.fraction.BigFractionFormatTest#testFormat, org.apache.commons.math.util.MathUtilsTest#testSignByte, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testCircleFitting, org.apache.commons.math.ode.ContinuousOutputModelTest#testBoundaries, org.apache.commons.math.complex.ComplexFormatTest#testPaseNegativeInfinity, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNan, org.apache.commons.math.random.RandomAdaptorTest#testNextSecureLong, org.apache.commons.math.distribution.PascalDistributionTest#testCumulativeProbabilities, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSpecialValues, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testConsistency, org.apache.commons.math.stat.descriptive.summary.ProductTest#testCopy, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeInfinity, org.apache.commons.math.stat.StatUtilsTest#testN0andN1Conditions, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testCopySubMatrix, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseZeroX, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#derivativesConsistency, org.apache.commons.math.distribution.TDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.linear.FieldMatrixImplTest#testOperate, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest#testConstructor, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testOperate, org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGetWith0ExpectedSize, org.apache.commons.math.special.ErfTest#testErf3291, org.apache.commons.math.complex.ComplexTest#testHashCode, org.apache.commons.math.linear.SparseRealMatrixTest#testNorm, org.apache.commons.math.linear.ArrayRealVectorTest#testConstructors, org.apache.commons.math.linear.EigenSolverTest#testSolveDimensionErrors, org.apache.commons.math.complex.ComplexTest#testAddNaN, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testFrobeniusNorm, org.apache.commons.math.linear.SparseFieldMatrixTest#testPlusMinus, org.apache.commons.math.optimization.general.MinpackTest#testMinpackOsborne2, org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleWithDecimals, org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumnMatrix, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testDistance, org.apache.commons.math.linear.BlockRealMatrixTest#testTrace, org.apache.commons.math.linear.QRDecompositionImplTest#testRUpperTriangular, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRowVector, org.apache.commons.math.optimization.general.MinpackTest#testMinpackOsborne1, org.apache.commons.math.linear.BlockFieldMatrixTest#testCopySubMatrix, org.apache.commons.math.linear.BlockRealMatrixTest#testOperatePremultiplyLarge, org.apache.commons.math.complex.ComplexTest#testConjugateNaN, org.apache.commons.math.linear.FieldMatrixImplTest#testMath209, org.apache.commons.math.stat.inference.TTestTest#testSmallSamples, org.apache.commons.math.linear.RealMatrixImplTest#testSetSubMatrix, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMoreRows, org.apache.commons.math.linear.BigMatrixImplTest#testMath209, org.apache.commons.math.distribution.ChiSquareDistributionTest#testDensity, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testTwoSets, org.apache.commons.math.complex.FrenchComplexFormatTest#testConstructorSingleFormat, org.apache.commons.math.linear.BlockFieldMatrixTest#testScalarAdd, org.apache.commons.math.complex.ComplexTest#testCos, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenSuffix, org.apache.commons.math.special.BetaTest#testRegularizedBetaNanPositivePositive, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testMinStep, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testQuintic, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#checklone, org.apache.commons.math.linear.BlockFieldMatrixTest#testCopyFunctions, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextIntExtremeValues, org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest#testSinMin, org.apache.commons.math.random.RandomDataTest#testConfig, org.apache.commons.math.complex.ComplexTest#testAsinInf, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testNorm, org.apache.commons.math.distribution.PoissonDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testNISTExample, org.apache.commons.math.complex.ComplexTest#testAtanNaN, org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbability2, org.apache.commons.math.complex.ComplexTest#testAcosInf, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testKepler, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testInsufficientBandwidth, org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryCharacterEmpty, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuadraticFunction, org.apache.commons.math.linear.BlockFieldMatrixTest#testExamples, org.apache.commons.math.distribution.HypergeometricDistributionTest#testMoreLargeValues, org.apache.commons.math.complex.ComplexTest#testPow, org.apache.commons.math.linear.RealVectorFormatTest#testFormatObject, org.apache.commons.math.distribution.FDistributionTest#testDfAccessors, org.apache.commons.math.util.MathUtilsTest#testArrayEquals, org.apache.commons.math.stat.descriptive.moment.MeanTest#testEqualsAndHashCode, org.apache.commons.math.optimization.general.MinpackTest#testMinpackBrownDennis, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRow, org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesMaximum, org.apache.commons.math.stat.correlation.CovarianceTest#testSwissFertility, org.apache.commons.math.random.RandomDataTest#testNextSecureInt, org.apache.commons.math.geometry.Vector3DTest#testOrthogonal, org.apache.commons.math.geometry.Vector3DTest#testDistance, org.apache.commons.math.distribution.WeibullDistributionTest#testCumulativeProbabilities, org.apache.commons.math.distribution.CauchyDistributionTest#testSetScale, org.apache.commons.math.stat.FrequencyTest#testEmptyTable, org.apache.commons.math.optimization.direct.NelderMeadTest#testMaxIterations, org.apache.commons.math.linear.RealMatrixImplTest#testMultiply2, org.apache.commons.math.special.BetaTest#testLogBetaZeroPositive, org.apache.commons.math.fraction.BigFractionFormatTest#testFormatNegative, org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientLarge, org.apache.commons.math.random.RandomAdaptorTest#testNextIntExtremeValues, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testWindowSize, org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesAverage, org.apache.commons.math.stat.descriptive.rank.MinTest#testCopyConsistency, org.apache.commons.math.complex.ComplexFormatTest#testConstructorSingleFormat, org.apache.commons.math.linear.LUDecompositionImplTest#testNonSquare, org.apache.commons.math.fraction.FractionFormatTest#testWholeFormat, org.apache.commons.math.distribution.PascalDistributionTest#testFloatingPointArguments, org.apache.commons.math.stat.StatUtilsTest#testVariance, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testNaNContracts, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveNegative, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testSerialization, org.apache.commons.math.geometry.Vector3DTest#testConstructors, org.apache.commons.math.util.MathUtilsTest#testIndicatorLong, org.apache.commons.math.stat.descriptive.rank.MaxTest#testNaNs, org.apache.commons.math.util.TransformerMapTest#testRemoveTransformer, org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleWithDecimals, org.apache.commons.math.linear.MatrixUtilsTest#testcreateFieldMatrix, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testNaNContracts, org.apache.commons.math.linear.BlockRealMatrixTest#testSerial, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeX, org.apache.commons.math.linear.BiDiagonalTransformerTest#testUpperOrLower, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeY, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeZ, org.apache.commons.math.distribution.ExponentialDistributionTest#testIllegalArguments, org.apache.commons.math.random.MersenneTwisterTest#testDouble, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersSimple, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testStepSize, org.apache.commons.math.MaxIterationsExceededExceptionTest#testComplexConstructor, org.apache.commons.math.stat.inference.TestUtilsTest#testTwoSampleTHeterscedastic, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testUnstableDerivative, org.apache.commons.math.stat.FrequencyTest#testPcts, org.apache.commons.math.geometry.Vector3DTest#testAngle, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testMomentSmallSamples, org.apache.commons.math.random.MersenneTwisterTest#testGaussian, org.apache.commons.math.analysis.solvers.MullerSolverTest#testSinFunction2, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewBrentSolverValid, org.apache.commons.math.fraction.FractionFormatTest#testLongFormat, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSerialization, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testStats, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testProductAndGeometricMean, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextGaussian, org.apache.commons.math.linear.BigMatrixImplTest#testLUDecomposition, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testSerial, org.apache.commons.math.random.ValueServerTest#testProperties, org.apache.commons.math.linear.RealMatrixImplTest#testEqualsAndHashCode, org.apache.commons.math.geometry.Vector3DTest#testNorm1, org.apache.commons.math.complex.ComplexTest#testAtanInf, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRowVector, org.apache.commons.math.special.ErfTest#testErf2807, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testArrayIsReference, org.apache.commons.math.random.AbstractRandomGeneratorTest#testConfig, org.apache.commons.math.random.MersenneTwisterTest#testNexBoolean, org.apache.commons.math.linear.BigMatrixImplTest#testOperate, org.apache.commons.math.util.TransformerMapTest#testClasses, org.apache.commons.math.linear.SparseRealVectorTest#testMapFunctions, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testCovarianceConsistency, org.apache.commons.math.distribution.FDistributionTest#testCumulativeProbabilities, org.apache.commons.math.complex.ComplexTest#testSqrt1zNaN, org.apache.commons.math.stat.correlation.CovarianceTest#testConsistency, org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math.util.MathUtilsTest#testSignShort, org.apache.commons.math.stat.descriptive.summary.SumTest#testSerial, org.apache.commons.math.special.ErfTest#testErf1960, org.apache.commons.math.util.MathUtilsTest#testHash, org.apache.commons.math.linear.RealVectorFormatTest#testSimpleNoDecimals, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, org.apache.commons.math.fraction.FractionTest#testReciprocal, org.apache.commons.math.linear.BlockRealMatrixTest#testNorm, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testEvaluation, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testMomentSmallSamples, org.apache.commons.math.linear.ArrayFieldVectorTest#testMisc, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testDimensions, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testIncrementation, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testInconsistentEquations, org.apache.commons.math.fraction.BigFractionTest#testConstructor, org.apache.commons.math.complex.ComplexTest#testGetArgumentInf, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testStats, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest#dimension2, org.apache.commons.math.stat.FrequencyTest#testIntegerValues, org.apache.commons.math.linear.SparseRealMatrixTest#testPlusMinus, org.apache.commons.math.linear.QRSolverTest#testSolveDimensionErrors, org.apache.commons.math.estimation.EstimatedParameterTest#testConstruction, org.apache.commons.math.genetics.BinaryMutationTest#testMutate, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math.linear.BigMatrixImplTest#testGetRowMatrix, org.apache.commons.math.fraction.FractionTest#testIntValue, org.apache.commons.math.util.OpenIntToFieldTest#testRemoveAbsent, org.apache.commons.math.complex.ComplexTest#testAcosNaN, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testSerial, org.apache.commons.math.complex.ComplexTest#testAddInfinite, org.apache.commons.math.stat.descriptive.rank.MinTest#testSpecialValues, org.apache.commons.math.linear.SparseRealMatrixTest#testGetVectors, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testDimension, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testQRColumnsPermutation, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testNonInversible, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testToString, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetSubMatrix, org.apache.commons.math.distribution.FDistributionTest#testLargeDegreesOfFreedom, org.apache.commons.math.random.MersenneTwisterTest#testNextInt, org.apache.commons.math.linear.FieldMatrixImplTest#testWalk, org.apache.commons.math.complex.ComplexTest#testLog, org.apache.commons.math.distribution.CauchyDistributionTest#testCumulativeProbabilities, org.apache.commons.math.complex.ComplexTest#testScalarMultiplyNaN, org.apache.commons.math.linear.SparseRealMatrixTest#testPremultiplyVector, org.apache.commons.math.linear.MatrixUtilsTest#testCreateRealMatrix, org.apache.commons.math.distribution.GammaDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.linear.BlockRealMatrixTest#testExamples, org.apache.commons.math.genetics.BinaryChromosomeTest#testIsSame, org.apache.commons.math.linear.RealVectorFormatTest#testParseNonDefaultSetting, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testEvaluation, org.apache.commons.math.fraction.FractionFieldTest#testOne, org.apache.commons.math.linear.BlockRealMatrixTest#testAddFail, org.apache.commons.math.estimation.MinpackTest#testMinpackKowalikOsborne, org.apache.commons.math.MathExceptionTest#testConstructorPatternArgumentsCause, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureLong, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testTrivial, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testNoReset, org.apache.commons.math.fraction.BigFractionTest#testBigDecimalValue, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testRootMatrix, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testChebyshevBounds, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testCopy, org.apache.commons.math.util.MathUtilsTest#testMulAndCheckLong, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testConstant, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextUniform, org.apache.commons.math.complex.ComplexFormatTest#testParsePositiveInfinity, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseIgnoredWhitespace, org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumn, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testRedundantEquations, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareIndependence, org.apache.commons.math.util.ResizableDoubleArrayTest#testWithInitialCapacityAndExpansionFactor, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuadraticFunction, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMath209, org.apache.commons.math.linear.RealMatrixImplTest#testPremultiply, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testCopy, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testNullEmpty, org.apache.commons.math.complex.ComplexTest#testEqualsSame, org.apache.commons.math.random.EmpiricalDistributionTest#testNext, org.apache.commons.math.util.MathUtilsTest#testRoundDouble, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumnMatrix, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSerialization, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest#testConstructor, org.apache.commons.math.complex.ComplexTest#testMultiplyNaNInf, org.apache.commons.math.linear.FieldMatrixImplTest#testPlusMinus, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveNull, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinear, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testCopy, org.apache.commons.math.stat.descriptive.rank.MaxTest#testSerial, org.apache.commons.math.complex.ComplexFormatTest#testGetRealFormat, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testNullIntervalCheck, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testPercentile, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregateSpecialValues, org.apache.commons.math.util.ResizableDoubleArrayTest#testGetValues, org.apache.commons.math.linear.RealMatrixImplTest#testGetColumnMatrix, org.apache.commons.math.fraction.BigFractionFormatTest#testParseNegative, org.apache.commons.math.complex.ComplexFormatTest#testParseDifferentImaginaryChar, org.apache.commons.math.linear.CholeskySolverTest#testSolve, org.apache.commons.math.fraction.FractionTest#testToString, org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullURL, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonUnEqualCounts, org.apache.commons.math.random.RandomDataTest#testNextExponential, org.apache.commons.math.linear.BlockRealMatrixTest#testFrobeniusNorm, org.apache.commons.math.fraction.BigFractionTest#testEpsilonLimitConstructor, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregationConsistency, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleWithDecimals, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnVectorLarge, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testShuffledStatistics, org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientFail, org.apache.commons.math.util.MathUtilsTest#testRoundFloat, org.apache.commons.math.distribution.NormalDistributionTest#testSetStandardDeviation, org.apache.commons.math.stat.descriptive.summary.ProductTest#testMomentSmallSamples, org.apache.commons.math.complex.ComplexTest#testLogInf, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testShuffledStatistics, org.apache.commons.math.util.ResizableDoubleArrayTest#testSubstitute, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testParameters, org.apache.commons.math.linear.RealMatrixImplTest#testPlusMinus, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregate, org.apache.commons.math.estimation.MinpackTest#testMinpackPowellSingular, org.apache.commons.math.complex.ComplexTest#testCoshNaN, org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testSinMin, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPoisson, org.apache.commons.math.ode.FirstOrderConverterTest#testBigStep, org.apache.commons.math.linear.SparseRealMatrixTest#testPremultiply, org.apache.commons.math.linear.LUSolverTest#testSolve, org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testCentroid, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testEqualsAndHashCode, org.apache.commons.math.linear.InvalidMatrixExceptionTest#testConstructorMessage, org.apache.commons.math.distribution.NormalDistributionTest#testIllegalArguments, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewBisectionSolverValid, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testIllConditioned, org.apache.commons.math.transform.FastCosineTransformerTest#testParameters, org.apache.commons.math.linear.QRDecompositionImplTest#testAEqualQR, org.apache.commons.math.fraction.BigFractionFormatTest#testNumeratorFormat, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testEvents, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testMath274, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnMatrixLarge, org.apache.commons.math.complex.FrenchComplexFormatTest#testSetRealFormatNull, org.apache.commons.math.special.GammaTest#testLogGammaNegative, org.apache.commons.math.transform.FastFourierTransformerTest#testAdHocData, org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeAll, org.apache.commons.math.linear.BigMatrixImplTest#testCopyFunctions, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstLegendrePolynomials, org.apache.commons.math.linear.BlockFieldMatrixTest#testPremultiplyVector, org.apache.commons.math.fraction.BigFractionTest#testReciprocal, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowVectorLarge, org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbabilityExtremes, org.apache.commons.math.random.RandomAdaptorTest#testNextSecureHex, org.apache.commons.math.random.UniformRandomGeneratorTest#testMeanAndStandardDeviation, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testMismatch, org.apache.commons.math.linear.SparseRealVectorTest#testBasicFunctions, org.apache.commons.math.distribution.PascalDistributionTest#testIllegalArguments, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testParameters, org.apache.commons.math.linear.RealVectorFormatTest#testPositiveInfinity, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testLLowerTriangular, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testCopy, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#serialization, org.apache.commons.math.estimation.EstimatedParameterTest#testBound, org.apache.commons.math.transform.FastHadamardTransformerTest#test8Points, org.apache.commons.math.stat.ranking.NaturalRankingTest#testDefault, org.apache.commons.math.util.ResizableDoubleArrayTest#testConstructors, org.apache.commons.math.transform.FastSineTransformerTest#testAdHocData, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleNoDecimals, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddNullYSampleData, org.apache.commons.math.linear.BigMatrixImplTest#testGetVectors, org.apache.commons.math.distribution.TDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAbsentOnExisting, org.apache.commons.math.complex.ComplexFormatTest#testPositiveInfinity, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testControlParameters, org.apache.commons.math.genetics.TournamentSelectionTest#testSelect, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testPopulation, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregation, org.apache.commons.math.distribution.PoissonDistributionTest#testCumulativeProbabilities, org.apache.commons.math.linear.FieldMatrixImplTest#testGetRowMatrix, org.apache.commons.math.distribution.TDistributionTest#testIllegalArguments, org.apache.commons.math.complex.FrenchComplexFormatTest#testForgottenImaginaryCharacter, org.apache.commons.math.fraction.FractionFormatTest#testFormat, org.apache.commons.math.analysis.solvers.BrentSolverTest#testRootEndpoints, org.apache.commons.math.optimization.general.MinpackTest#testMinpackWatson, org.apache.commons.math.fraction.BigFractionTest#testDoubleConstructor, org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryFormatNull, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#polynomial, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testNoDependency, org.apache.commons.math.optimization.linear.SimplexSolverTest#testModelWithNoArtificialVars, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testCopyFunctions, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testSingular, org.apache.commons.math.linear.FieldMatrixImplTest#testCopySubMatrix, org.apache.commons.math.complex.ComplexTest#testEqualsImaginaryDifference, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testEqualsAndHashCode, org.apache.commons.math.optimization.general.MinpackTest#testMinpackFreudensteinRoth, org.apache.commons.math.fraction.FractionTest#testDivide, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveSingle, org.apache.commons.math.complex.ComplexTest#testAbs, org.apache.commons.math.linear.ArrayRealVectorTest#testMapFunctions, org.apache.commons.math.distribution.WeibullDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.random.RandomAdaptorTest#testAdaptor, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNonSquare, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testCircleFitting, org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares3, org.apache.commons.math.distribution.ExponentialDistributionTest#testMeanAccessors, org.apache.commons.math.complex.ComplexTest#testGetArgument, org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares1, org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares2, org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumnMatrix, org.apache.commons.math.random.RandomDataTest#testNextInt, org.apache.commons.math.stat.inference.TestUtilsTest#testSmallSamples, org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullDoubleArray, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testDecreasingSteps, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testToString, org.apache.commons.math.linear.BlockRealMatrixTest#testMath209, org.apache.commons.math.estimation.MinpackTest#testMinpackBox3Dimensional, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRowMatrix, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMultiply, org.apache.commons.math.distribution.FDistributionTest#testCumulativeProbabilityExtremes, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSerialization, org.apache.commons.math.complex.ComplexTest#testDivideNaNInf, org.apache.commons.math.linear.FieldMatrixImplTest#testExamples, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRow, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSmallStep, org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension4WithoutSplit, org.apache.commons.math.distribution.ZipfDistributionTest#testIllegalArguments, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetSubMatrix, org.apache.commons.math.complex.ComplexTest#testSqrtNaN, org.apache.commons.math.distribution.NormalDistributionTest#testGetStandardDeviation, org.apache.commons.math.linear.MatrixIndexExceptionTest#testConstructorMessage, org.apache.commons.math.distribution.HypergeometricDistributionTest#testDensities, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testDecreasingSteps, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testParameters, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareIndependence, org.apache.commons.math.fraction.BigFractionTest#testConstructorDouble, org.apache.commons.math.stat.descriptive.rank.MaxTest#testConsistency, org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsRemovedTiesSequential, org.apache.commons.math.fraction.FractionFormatTest#testNumeratorFormat, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMatricesValues1, org.apache.commons.math.util.OpenIntToFieldTest#testPutAbsentOnExisting, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMatricesValues2, org.apache.commons.math.linear.BigMatrixImplTest#testDeterminant, org.apache.commons.math.complex.ComplexTest#testEqualsClass, org.apache.commons.math.fraction.BigFractionTest#testEqualsAndHashCode, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollision2, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testStepSize, org.apache.commons.math.complex.ComplexTest#testCoshInf, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMoreColumns, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultiple, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetAbsoluteAccuracy, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testSetterInjection, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSingleton, org.apache.commons.math.fraction.BigFractionFormatTest#testLongFormat, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#notEnoughData, org.apache.commons.math.distribution.TDistributionTest#testCumulativeProbabilityAgaintStackOverflow, org.apache.commons.math.stat.inference.TestUtilsTest#testOneWayAnovaUtils, org.apache.commons.math.optimization.direct.NelderMeadTest#testPowell, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testIllConditioned, org.apache.commons.math.geometry.Vector3DFormatTest#testParseZeroX, org.apache.commons.math.util.MathUtilsTest#testL2DistanceDouble, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testLongly, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testHighPercentile, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testMinStep, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveSin, org.apache.commons.math.util.MathUtilsTest#testNextAfter, org.apache.commons.math.linear.LUDecompositionImplTest#testSingular, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testGetValues, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonEqualCounts, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemoveFromEmpty, org.apache.commons.math.geometry.Vector3DTest#testCoordinates, org.apache.commons.math.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollisions, org.apache.commons.math.complex.ComplexTest#testAsinNaN, org.apache.commons.math.util.MathUtilsTest#testIndicatorDouble, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testTwoSets, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextLongExtremeValues, org.apache.commons.math.random.RandomDataTest#testNextSecureLong, org.apache.commons.math.linear.SparseFieldMatrixTest#testScalarAdd, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateResiduals, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testOneSet, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testDecreasingSteps, org.apache.commons.math.stat.descriptive.summary.SumTest#testMomentSmallSamples, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testBackward, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testNaN, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersUnsorted, org.apache.commons.math.linear.MatrixUtilsTest#testFractionConverter, org.apache.commons.math.util.BigRealFieldTest#testSerial, org.apache.commons.math.random.RandomAdaptorTest#testNextLong, org.apache.commons.math.stat.descriptive.rank.MinTest#testEqualsAndHashCode, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testPAEqualLU, org.apache.commons.math.distribution.PoissonDistributionTest#testMean, org.apache.commons.math.distribution.PoissonDistributionTest#testIllegalArguments, org.apache.commons.math.stat.descriptive.rank.MedianTest#testCopy, org.apache.commons.math.distribution.FDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.analysis.solvers.BrentSolverTest#testSinZero, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testNonInversible, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testProductAndGeometricMean, org.apache.commons.math.util.ResizableDoubleArrayTest#testEqualsAndHashCode, org.apache.commons.math.complex.ComplexTest#testAdd, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareLargeTestStatistic, org.apache.commons.math.special.GammaTest#testRegularizedGammaNegativePositive, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testBigStep, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#checkClone, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuinticFunction, org.apache.commons.math.complex.ComplexTest#testSqrtInf, org.apache.commons.math.distribution.NormalDistributionTest#testConsistency, org.apache.commons.math.complex.ComplexTest#testAbsInfinite, org.apache.commons.math.complex.ComplexFieldTest#testZero, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataWithSampleSizeMismatch, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#exceedMaxEvaluations, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testStdErrorConsistency, org.apache.commons.math.fraction.BigFractionFormatTest#testFormatImproper, org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGetWithExpectedSize, org.apache.commons.math.random.MersenneTwisterTest#testFloat, org.apache.commons.math.stat.descriptive.rank.MaxTest#testEvaluation, org.apache.commons.math.complex.ComplexTest#testEqualsNaN, org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_realPartZero, org.apache.commons.math.complex.ComplexTest#testSqrtImaginaryZero, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math.stat.descriptive.moment.MeanTest#testCopyConsistency, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testEvaluation, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextFloat, org.apache.commons.math.stat.inference.TTestTest#testPaired, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testImpossibleSerialization, org.apache.commons.math.complex.FrenchComplexFormatTest#testZeroImaginary, org.apache.commons.math.linear.QRDecompositionImplTest#testDimensions, org.apache.commons.math.distribution.GammaDistributionTest#testParameterAccessors, org.apache.commons.math.random.ValueServerTest#testNextDigestFail, org.apache.commons.math.fraction.BigFractionFormatTest#testParseProperInvalidMinus, org.apache.commons.math.complex.ComplexFormatTest#testNegativeBoth, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testMomentSmallSamples, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testEqualsAndHashCode, org.apache.commons.math.linear.SparseRealVectorTest#testDataInOut, org.apache.commons.math.random.RandomAdaptorTest#testNextUniformExclusiveEndpoints, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testBackward, org.apache.commons.math.complex.FrenchComplexFormatTest#testParsePositiveInfinity, org.apache.commons.math.stat.StatUtilsTest#testMax, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testCopyConsistency, org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testSerialization, org.apache.commons.math.stat.correlation.CovarianceTest#testInsufficientData, org.apache.commons.math.optimization.linear.SimplexTableauTest#testInitialization, org.apache.commons.math.linear.EigenSolverTest#testNonInvertible, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveXY, org.apache.commons.math.linear.RealMatrixImplTest#testGetRowMatrix, org.apache.commons.math.ode.ContinuousOutputModelTest#testModelsMerging, org.apache.commons.math.stat.FrequencyTest#testToString, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testEqualsAndHashCode, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNonDefaultSetting, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testStats, org.apache.commons.math.complex.ComplexTest#testPowInf, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest#testValues, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#noReset, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testRedundantEquations, org.apache.commons.math.stat.descriptive.summary.ProductTest#testEvaluation, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimals, org.apache.commons.math.transform.FastCosineTransformerTest#testAdHocData, org.apache.commons.math.distribution.ChiSquareDistributionTest#testIllegalArguments, org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryCharacterNull, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testIncrementation, org.apache.commons.math.complex.ComplexTest#testTanh, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testConsistency, org.apache.commons.math.stat.descriptive.summary.ProductTest#testSerial, org.apache.commons.math.stat.descriptive.summary.ProductTest#testSerialization, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testIncrementation, org.apache.commons.math.linear.RealMatrixImplTest#testGetColumn, org.apache.commons.math.linear.RealMatrixImplTest#testMath209, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#serialization, org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testQuinticMax, org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testN0andN1Conditions, org.apache.commons.math.util.OpenIntToFieldTest#testRemove2, org.apache.commons.math.complex.ComplexTest#testSqrtRealNegative, org.apache.commons.math.MathConfigurationExceptionTest#testConstructorPatternArguments, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testUOrthogonal, org.apache.commons.math.linear.BiDiagonalTransformerTest#testBBiDiagonal, org.apache.commons.math.linear.BigMatrixImplTest#testGetColumnMatrix, org.apache.commons.math.complex.ComplexTest#testpowNull, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testBigStep, org.apache.commons.math.stat.descriptive.summary.SumTest#testSpecialValues, org.apache.commons.math.linear.BlockRealMatrixTest#testScalarAdd, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSerialization, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testEqualsAndHashCode, org.apache.commons.math.fraction.FractionTest#testConstructor, org.apache.commons.math.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetMatrixLarge, org.apache.commons.math.linear.EigenDecompositionImplTest#testVOrthogonal, org.apache.commons.math.distribution.PoissonDistributionTest#testDegenerateInverseCumulativeProbability, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#polynomial, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSinZero, org.apache.commons.math.fraction.FractionTest#testGetReducedFraction, org.apache.commons.math.distribution.FDistributionTest#testConsistency, org.apache.commons.math.analysis.solvers.BrentSolverTest#testDeprecated, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testMatricesValues2, org.apache.commons.math.fraction.FractionFormatTest#testParseInteger, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testStaticFormatRealVectorImpl, org.apache.commons.math.estimation.MinpackTest#testMinpackMeyer, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testMatricesValues1, org.apache.commons.math.random.RandomAdaptorTest#testNextGaussian, org.apache.commons.math.util.BigRealTest#testDoubleValue, org.apache.commons.math.linear.FieldMatrixImplTest#testSerial, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveNanPositive, org.apache.commons.math.linear.FieldMatrixImplTest#testDimensions, org.apache.commons.math.linear.RealMatrixImplTest#testGetSubMatrix, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetMaximalIterationCount, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterInjection, org.apache.commons.math.linear.TriDiagonalTransformerTest#testTTriDiagonal, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testRedundantEquations, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveAccuracyNull, org.apache.commons.math.complex.ComplexTest#testConstructorNaN, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMoreEstimatedParametersSimple, org.apache.commons.math.stat.descriptive.summary.SumTest#testConsistency, org.apache.commons.math.fraction.BigFractionFieldTest#testZero, org.apache.commons.math.linear.MatrixUtilsTest#testCreateBigIdentityMatrix, org.apache.commons.math.linear.SparseRealVectorTest#testPredicates, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testLinearFunction, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositivePositive, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testStepSize, org.apache.commons.math.linear.SparseFieldMatrixTest#testOperate, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testCopyConsistency, org.apache.commons.math.linear.BlockRealMatrixTest#testSetRow, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest#testMeanAndCorrelation, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testConcurrentModification, org.apache.commons.math.stat.descriptive.summary.ProductTest#testCopyConsistency, org.apache.commons.math.linear.SparseFieldMatrixTest#testTranspose, org.apache.commons.math.optimization.general.MinpackTest#testMinpackRosenbrok, org.apache.commons.math.util.MathUtilsTest#testSignFloat, org.apache.commons.math.util.MathUtilsTest#testSignDouble, org.apache.commons.math.fraction.FractionFormatTest#testParseInvalid, org.apache.commons.math.linear.FieldMatrixImplTest#testSetRowVector, org.apache.commons.math.geometry.RotationTest#testVectorTwoPairs, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetVectors, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#serialization, org.apache.commons.math.distribution.NormalDistributionTest#testExtremeValues, org.apache.commons.math.linear.LUSolverTest#testThreshold, org.apache.commons.math.geometry.RotationOrderTest#testName, org.apache.commons.math.util.MathUtilsTest#testIndicatorShort, org.apache.commons.math.distribution.PoissonDistributionTest#testLargeMeanCumulativeProbability, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testTrivial, org.apache.commons.math.util.OpenIntToFieldTest#testPutKeysWithCollisions, org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeInfinity, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#testMinStep, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testConsistency, org.apache.commons.math.complex.ComplexFormatTest#testStaticFormatComplex, org.apache.commons.math.linear.TriDiagonalTransformerTest#testAEqualQTQt, org.apache.commons.math.stat.descriptive.rank.MaxTest#testSerialization, org.apache.commons.math.util.MathUtilsTest#testSinh, org.apache.commons.math.complex.FrenchComplexFormatTest#testGetImaginaryFormat, org.apache.commons.math.distribution.GammaDistributionTest#testIllegalArguments, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testKepler, org.apache.commons.math.linear.BlockFieldMatrixTest#testEqualsAndHashCode, org.apache.commons.math.linear.SparseRealMatrixTest#testAddFail, org.apache.commons.math.linear.BlockRealMatrixTest#testSetSubMatrix, org.apache.commons.math.complex.ComplexTest#testTanNaN, org.apache.commons.math.genetics.RandomKeyTest#testInducedPermutation, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testTrace, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnVectorLarge, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenSeparator, org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaPValue, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#dimensionCheck, org.apache.commons.math.ConvergenceExceptionTest#testConstructorCause, org.apache.commons.math.linear.SparseRealMatrixTest#testGetColumnMatrix, org.apache.commons.math.estimation.MinpackTest#testMinpackRosenbrok, org.apache.commons.math.fraction.BigFractionTest#testAdd, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testNaNContracts, org.apache.commons.math.random.RandomDataTest#testNextSample, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseZeroReal, org.apache.commons.math.linear.RealVectorFormatTest#testParseIgnoredWhitespace, org.apache.commons.math.distribution.PoissonDistributionTest#testFloatingPointArguments, org.apache.commons.math.linear.CholeskySolverTest#testSolveDimensionErrors, org.apache.commons.math.linear.EigenDecompositionImplTest#testBigMatrix, org.apache.commons.math.linear.QRSolverTest#testRank, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddXSampleData, org.apache.commons.math.linear.EigenDecompositionImplTest#testAEqualVDVt, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSubMatrix, org.apache.commons.math.distribution.CauchyDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.geometry.RotationTest#testSingularities, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testSerialization, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullCovarianceData, org.apache.commons.math.fraction.BigFractionFormatTest#testDoubleFormat, org.apache.commons.math.util.MathUtilsTest#testFactorialFail, org.apache.commons.math.linear.FieldMatrixImplTest#testMultiply2, org.apache.commons.math.linear.TriDiagonalTransformerTest#testQTOrthogonal, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testSimplistic, org.apache.commons.math.fraction.BigFractionTest#testAbs, org.apache.commons.math.linear.SparseFieldMatrixTest#testAdd, org.apache.commons.math.analysis.solvers.RiddersSolverTest#testParameters, org.apache.commons.math.linear.RealMatrixImplTest#testCopySubMatrix, org.apache.commons.math.distribution.WeibullDistributionTest#testSetAlpha, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testLaguerreDifferentials, org.apache.commons.math.complex.ComplexFieldTest#testOne, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, org.apache.commons.math.linear.RealMatrixImplTest#testSetRowVector, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest#testTrivial, org.apache.commons.math.linear.BigMatrixImplTest#testTrace, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenSuffix, org.apache.commons.math.linear.FieldMatrixImplTest#testGetEntry, org.apache.commons.math.linear.SparseRealMatrixTest#testExamples, org.apache.commons.math.distribution.NormalDistributionTest#testDensity, org.apache.commons.math.geometry.Vector3DTest#testNormInf, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSerial, org.apache.commons.math.random.MersenneTwisterTest#testMakotoNishimura, org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testRedundantSolvable, org.apache.commons.math.linear.SparseRealMatrixTest#testGetRowMatrix, org.apache.commons.math.linear.BlockFieldMatrixTest#testMultiply, org.apache.commons.math.complex.ComplexTest#testLogNaN, org.apache.commons.math.distribution.ZipfDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.fraction.FractionFormatTest#testFormatImproperNegative, org.apache.commons.math.transform.FastHadamardTransformerTest#testNoIntInverse, org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryCharacterEmpty, org.apache.commons.math.random.EmpiricalDistributionTest#testBinIndexOverflow, org.apache.commons.math.fraction.FractionTest#testEpsilonLimitConstructor, org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaFValue, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testSwissFertility, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBackward, org.apache.commons.math.util.MathUtilsTest#testFactorial, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterIllegalState, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testStats, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testLegendreDifferentials, org.apache.commons.math.linear.SparseFieldVectorTest#testMisc, org.apache.commons.math.linear.BlockRealMatrixTest#testGetEntry, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testCopyConsistency, org.apache.commons.math.fraction.FractionFormatTest#testFormatNegative, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentSizes, org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testQuinticMin, org.apache.commons.math.random.RandomDataTest#testNextUniformExclusiveEndpoints, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#derivativesConsistency, org.apache.commons.math.optimization.general.MinpackTest#testMinpackJennrichSampson, org.apache.commons.math.distribution.ChiSquareDistributionTest#testSampling, org.apache.commons.math.distribution.PascalDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateTwoSegment, org.apache.commons.math.linear.RealMatrixImplTest#testSetColumn, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testBoundParameters, org.apache.commons.math.linear.RealMatrixImplTest#testGetVectors, org.apache.commons.math.analysis.solvers.MullerSolverTest#testExpm1Function, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testTwoSets, org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleWithDecimals, org.apache.commons.math.estimation.MinpackTest#testMinpackFreudensteinRoth, org.apache.commons.math.MathExceptionTest#testConstructor, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testEqualsAndHashCode, org.apache.commons.math.random.RandomDataTest#testNextPoissonLargeMean, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateResiduals, org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math.random.RandomDataTest#testNextLong, org.apache.commons.math.util.MathUtilsTest#testIndicatorByte, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testAEqualLLT, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testIncrementation, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testKepler, org.apache.commons.math.util.OpenIntToFieldTest#testPutKeysWithCollision2, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testDimensionCheck, org.apache.commons.math.analysis.solvers.RiddersSolverTest#testDeprecated, org.apache.commons.math.geometry.RotationTest#testComposeInverse, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#testMinStep, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGetWithExpectedSize, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNan, org.apache.commons.math.estimation.MinpackTest#testMinpackBrownDennis, org.apache.commons.math.linear.LUSolverTest#testSingular, org.apache.commons.math.stat.descriptive.InteractionTest#testInteraction, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testBasicStats, org.apache.commons.math.stat.descriptive.summary.SumTest#testEvaluation, org.apache.commons.math.util.MathUtilsTest#testAddAndCheckLong, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testCopy, org.apache.commons.math.analysis.solvers.MullerSolverTest#testParameters, org.apache.commons.math.random.RandomAdaptorTest#testNextPoissonLargeMean, org.apache.commons.math.random.RandomDataTest#testNextSecureHex, org.apache.commons.math.random.RandomAdaptorTest#testNextHex, org.apache.commons.math.complex.FrenchComplexFormatTest#testFormatNumber, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testToString, org.apache.commons.math.MathConfigurationExceptionTest#testConstructor, org.apache.commons.math.util.BigRealFieldTest#testZero, org.apache.commons.math.linear.QRDecompositionImplTest#testMatricesValues, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testEqualsAndHashCode, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMoreEstimatedParametersUnsorted, org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeBoth, org.apache.commons.math.linear.SparseFieldMatrixTest#testMultiply2, org.apache.commons.math.fraction.BigFractionTest#testMultiply, org.apache.commons.math.util.ResizableDoubleArrayTest#testDiscard, org.apache.commons.math.util.ResizableDoubleArrayTest#testAdd1000, org.apache.commons.math.distribution.TDistributionTest#testSmallDf, org.apache.commons.math.distribution.HypergeometricDistributionTest#testFloatingPointArguments, org.apache.commons.math.linear.RealMatrixImplTest#testWalk, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextUniformExclusiveEndpoints, org.apache.commons.math.special.GammaTest#testRegularizedGammaZeroPositive, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testSkewAndKurtosis, org.apache.commons.math.MathExceptionTest#testConstructorPatternArguments, org.apache.commons.math.util.TransformerMapTest#testSerial, org.apache.commons.math.linear.RealMatrixImplTest#testCopyFunctions, org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnFieldMatrix, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMoreEstimatedParametersUnsorted, org.apache.commons.math.fraction.FractionTest#testIntegerOverflow, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testConsistency, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testPopulation, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testIncreasingRobustnessItersIncreasesSmoothnessWithOutliers, org.apache.commons.math.distribution.BinomialDistributionTest#testFloatingPointArguments, org.apache.commons.math.linear.SparseRealMatrixTest#testDimensions, org.apache.commons.math.complex.ComplexTest#testSinInf, org.apache.commons.math.special.GammaTest#testRegularizedGammaNanPositive, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParsePositiveInfinity, org.apache.commons.math.linear.RealVectorFormatTest#testForgottenPrefix, org.apache.commons.math.complex.ComplexFormatTest#testNegativeReal, org.apache.commons.math.optimization.direct.MultiDirectionalTest#testFunctionEvaluationExceptions, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBracketEndpointRoot, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testNoDependency, org.apache.commons.math.complex.ComplexFormatTest#testParseNan, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSerialization, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testPositiveInfinity, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGetWith0ExpectedSize, org.apache.commons.math.stat.descriptive.rank.MedianTest#testEvaluation, org.apache.commons.math.MathConfigurationExceptionTest#testConstructorPatternArgumentsCause, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testInconsistentEquations, org.apache.commons.math.util.TransformerMapTest#testContainsTransformer, org.apache.commons.math.linear.TriDiagonalTransformerTest#testMatricesValues5, org.apache.commons.math.linear.TriDiagonalTransformerTest#testMatricesValues3, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest#testTestPositive, org.apache.commons.math.linear.SparseRealMatrixTest#testOperate, org.apache.commons.math.linear.FieldMatrixImplTest#testGetSubMatrix, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testControlParameters, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeInfinity, org.apache.commons.math.complex.ComplexTest#testAsin, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeInfinity, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowVectorLarge, org.apache.commons.math.fraction.BigFractionFormatTest#testParseInvalidDenominator, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, org.apache.commons.math.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testLinear, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testHat, org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_NAN_Inf, org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveZero, org.apache.commons.math.linear.FieldMatrixImplTest#testTranspose, org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsAndInfs, org.apache.commons.math.geometry.RotationTest#testAxisAngle, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetRelativeAccuracy, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstHermitePolynomials, org.apache.commons.math.stat.inference.TTestFactoryTest#testPaired, org.apache.commons.math.geometry.RotationTest#testRevert, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testSerial, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFitting, org.apache.commons.math.optimization.linear.SimplexSolverTest#testLargeModel, org.apache.commons.math.geometry.Vector3DTest#testVectorialProducts, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSerial, org.apache.commons.math.genetics.OnePointCrossoverTest#testCrossover, org.apache.commons.math.util.OpenIntToFieldTest#testRemove, org.apache.commons.math.optimization.direct.MultiDirectionalTest#testMath283, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowMatrixLarge, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#exceedMaxEvaluations, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testConditionNumber, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testParameters, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testStaticFormatVector3D, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest#derivativesConsistency, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureInt, org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumnVector, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations#test, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testRedundantEquations, org.apache.commons.math.linear.LUSolverTest#testSolveSingularityErrors, org.apache.commons.math.analysis.solvers.NewtonSolverTest#testDeprecated, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testLinearFunction, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonBadCounts, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testPercentileSetter, org.apache.commons.math.util.MathUtilsTest#testCoshNaN, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseDifferentImaginaryChar, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testPositiveInfinity, org.apache.commons.math.complex.ComplexTest#testPowNaNExponent, org.apache.commons.math.stat.StatUtilsTest#testSumLog, org.apache.commons.math.complex.ComplexFormatTest#testDifferentImaginaryChar, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testBackward, org.apache.commons.math.linear.BlockFieldMatrixTest#testMath209, org.apache.commons.math.transform.FastSineTransformerTest#testParameters, org.apache.commons.math.util.DefaultTransformerTest#testTransformNull, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest#testNoOptimum, org.apache.commons.math.linear.BigMatrixImplTest#testAdd, org.apache.commons.math.complex.ComplexTest#testPowZero, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testOneSet, org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom, org.apache.commons.math.fraction.BigFractionFormatTest#testParseProper, org.apache.commons.math.optimization.linear.SimplexSolverTest#testSingleVariableAndConstraint, org.apache.commons.math.geometry.Vector3DTest#testDistance1, org.apache.commons.math.linear.RealMatrixImplTest#testFrobeniusNorm, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveNegativePositive, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareZeroCount, org.apache.commons.math.linear.RealMatrixImplTest#testPremultiplyVector, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#interpolationAtBounds, org.apache.commons.math.stat.descriptive.rank.MinTest#testCopy, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeY, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeZ, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNan, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testSerial, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeX, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveObsFromEmpty, org.apache.commons.math.optimization.general.MinpackTest#testMinpackMeyer, org.apache.commons.math.stat.inference.TestUtilsTest#testOneSampleTTest, org.apache.commons.math.complex.ComplexFormatTest#testSimpleWithDecimals, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testNonInversible, org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleWithDecimals, org.apache.commons.math.fraction.FractionTest#testFloatValue, org.apache.commons.math.complex.ComplexTest#testDivide, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testGetAbsent, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testOneSet, org.apache.commons.math.random.MersenneTwisterTest#testNextIntN, org.apache.commons.math.complex.ComplexTest#testSubtract, org.apache.commons.math.linear.LUDecompositionImplTest#testPPermutation, org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateNoFailures, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRow, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testKepler, org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testUnsorted, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest#testCircleFitting, org.apache.commons.math.fraction.FractionTest#testMultiply, org.apache.commons.math.estimation.WeightedMeasurementTest#testIgnored, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testCopyConsistency, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPremultiply, org.apache.commons.math.fraction.BigFractionTest#testFloatValue, org.apache.commons.math.distribution.FDistributionTest#testSmallDegreesOfFreedom, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testExpm1Function, org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testCopyConsistency, org.apache.commons.math.analysis.solvers.MullerSolverTest#testExpm1Function2, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleWithDecimals, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#testIncreasingTolerance, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testMinStep, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testKepler, org.apache.commons.math.complex.ComplexTest#testAtan, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testIncrementation, org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuadraticFunction, org.apache.commons.math.distribution.TDistributionTest#testDfAccessors, org.apache.commons.math.distribution.CauchyDistributionTest#testConsistency, org.apache.commons.math.special.BetaTest#testLogBetaPositivePositive, org.apache.commons.math.util.OpenIntToFieldTest#testPutOnExisting, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testProductAndGeometricMean, org.apache.commons.math.estimation.MinpackTest#testMinpackBard, org.apache.commons.math.random.MersenneTwisterTest#testNextLong, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testLTTransposed, org.apache.commons.math.linear.TriDiagonalTransformerTest#testNoAccessBelowDiagonal, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testRank, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testAEqualUSVt, org.apache.commons.math.stat.descriptive.moment.MeanTest#testConsistency, org.apache.commons.math.stat.descriptive.rank.MinTest#testSerial, org.apache.commons.math.transform.FastFourierTransformerTest#test2DData, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateThreeSegment, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextInt, org.apache.commons.math.linear.SparseRealMatrixTest#testEqualsAndHashCode, org.apache.commons.math.linear.RealMatrixImplTest#testSerial, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testSkewAndKurtosis, org.apache.commons.math.stat.StatUtilsTest#testMean, org.apache.commons.math.linear.SingularValueSolverTest#testConditionNumber, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testCopy, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testCircleFittingBadInit, org.apache.commons.math.fraction.FractionFormatTest#testParseNegative, org.apache.commons.math.stat.descriptive.moment.MeanTest#testSerial, org.apache.commons.math.linear.FieldMatrixImplTest#testPremultiplyVector, org.apache.commons.math.util.ResizableDoubleArrayTest#testMutators, org.apache.commons.math.linear.SparseFieldMatrixTest#testEqualsAndHashCode, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRow, org.apache.commons.math.util.ContinuedFractionTest#testGoldenRatio, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testEvents, org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testParameters, org.apache.commons.math.stat.StatUtilsTest#testDifferenceStats, org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testInitialGuess, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testSmallStep, org.apache.commons.math.complex.ComplexTest#testSin, org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateFullSample, org.apache.commons.math.stat.inference.TestUtilsTest#testTwoSampleTHomoscedastic, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMath199, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextExponential, org.apache.commons.math.linear.RealMatrixImplTest#testExamples, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSerialization, org.apache.commons.math.complex.ComplexTest#testExpNaN, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testSmallStep, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRowMatrix, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetFunctionValueAccuracy, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testAddition, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testSerial, org.apache.commons.math.fraction.BigFractionTest#testIntValue, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testHighDegreeLegendre, org.apache.commons.math.optimization.fitting.HarmonicFitterTest#test1PercentError, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testEqualsAndHashCode, org.apache.commons.math.estimation.MinpackTest#testMinpackJennrichSampson, org.apache.commons.math.linear.SparseRealMatrixTest#testGetRowVector, org.apache.commons.math.util.BigRealTest#testBigDecimalValue, org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleNoDecimals, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#serialization, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testQRColumnsPermutation, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testMomentSmallSamples, org.apache.commons.math.linear.EigenSolverTest#testInvertible, org.apache.commons.math.linear.BlockRealMatrixTest#testTranspose, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testNoDenseOutput, org.apache.commons.math.distribution.BinomialDistributionTest#testIllegalArguments, org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullFile, org.apache.commons.math.util.MathUtilsTest#testPow, org.apache.commons.math.linear.SparseFieldMatrixTest#testGetColumnVector, org.apache.commons.math.stat.descriptive.rank.MaxTest#testCopyConsistency, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testN0andN1Conditions, org.apache.commons.math.distribution.ChiSquareDistributionTest#testCumulativeProbabilities, org.apache.commons.math.distribution.HypergeometricDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.analysis.solvers.RiddersSolverTest#testSinFunction, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenPrefix, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testRemoval, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testScalarAdd, org.apache.commons.math.stat.inference.TTestTest#testTwoSampleTHomoscedastic, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testNoDependency, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testEvaluation, org.apache.commons.math.distribution.ExponentialDistributionTest#testDensity, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnMatrixLarge, org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexIllegalModulus, org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryCharacterNull, org.apache.commons.math.linear.RealVectorFormatTest#testParseNoComponents, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumnVector, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testInsufficientData, org.apache.commons.math.estimation.MinpackTest#testMinpackWatson, org.apache.commons.math.linear.SparseRealMatrixTest#testCopyFunctions, org.apache.commons.math.geometry.RotationTest#testIdentity, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testLongly, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testColumnsPermutation, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testDimensions, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayPatternArguments, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testCopy, org.apache.commons.math.random.ValueServerTest#testNextDigest, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorPatternArgumentsCause, org.apache.commons.math.random.EmpiricalDistributionTest#testGridTooFine, org.apache.commons.math.random.RandomDataTest#testNextGaussian, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testIterator, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testQuadratic, org.apache.commons.math.distribution.GammaDistributionTest#testProbabilities, org.apache.commons.math.linear.RealMatrixImplTest#testNorm, org.apache.commons.math.stat.inference.TestUtilsTest#testPaired, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testTrivial, org.apache.commons.math.MathExceptionTest#testPrintStackTrace, org.apache.commons.math.util.OpenIntToFieldTest#testConcurrentModification, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleNoDecimals, org.apache.commons.math.fraction.BigFractionFormatTest#testParseProperNegative, org.apache.commons.math.complex.ComplexFormatTest#testNan, org.apache.commons.math.random.RandomDataTest#testNextPermutation, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenPrefix, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testEmptyData, org.apache.commons.math.linear.BlockFieldMatrixTest#testWalk, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleWithDecimals, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testQuinticZero, org.apache.commons.math.complex.ComplexTest#testEqualsRealDifference, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultipleToEmpty, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressandVariance, org.apache.commons.math.util.MathUtilsTest#testAddAndCheck, org.apache.commons.math.special.ErfTest#testErf2576, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullYSampleData, org.apache.commons.math.stat.descriptive.summary.ProductTest#testIncrementation, org.apache.commons.math.linear.BigMatrixImplTest#testSetSubMatrix, org.apache.commons.math.geometry.Vector3DFormatTest#testNonDefaultSetting, org.apache.commons.math.distribution.CauchyDistributionTest#testMedian, org.apache.commons.math.linear.SparseRealMatrixTest#testGetColumnVector, org.apache.commons.math.linear.BigMatrixImplTest#testScalarAdd, org.apache.commons.math.util.MathUtilsTest#testCompareTo, org.apache.commons.math.linear.BlockRealMatrixTest#testMultiply2, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest#serialization, org.apache.commons.math.random.RandomAdaptorTest#testNextLongExtremeValues, org.apache.commons.math.util.MathUtilsTest#testArrayHash, org.apache.commons.math.distribution.BinomialDistributionTest#testCumulativeProbabilities, org.apache.commons.math.distribution.WeibullDistributionTest#testBeta, org.apache.commons.math.util.MathUtilsTest#testLcm, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#dimensionCheck, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testBackward, org.apache.commons.math.util.MathUtilsTest#testIndicatorFloat, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testNaN, org.apache.commons.math.linear.BlockRealMatrixTest#testEqualsAndHashCode, org.apache.commons.math.random.EmpiricalDistributionTest#testLoad, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveZero, org.apache.commons.math.linear.SparseFieldMatrixTest#testExamples, org.apache.commons.math.complex.FrenchComplexFormatTest#testDifferentImaginaryChar, org.apache.commons.math.complex.FrenchComplexFormatTest#testZeroReal, org.apache.commons.math.complex.ComplexTest#testTanInf, org.apache.commons.math.complex.ComplexFormatTest#testForgottenImaginaryCharacter, org.apache.commons.math.linear.RealVectorFormatTest#testForgottenSuffix, org.apache.commons.math.complex.ComplexTest#testSerial, org.apache.commons.math.linear.SparseFieldMatrixTest#testGetVectors, org.apache.commons.math.ode.FirstOrderConverterTest#testDoubleDimension, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testEqualsAndHashCode, org.apache.commons.math.complex.ComplexTest#testTanhInf, org.apache.commons.math.stat.FrequencyTest#testCounts, org.apache.commons.math.linear.SparseFieldVectorTest#testPredicates, org.apache.commons.math.linear.BigMatrixImplTest#testSolve, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParameters, org.apache.commons.math.geometry.Vector3DFormatTest#testConstructorSingleFormat, org.apache.commons.math.util.ResizableDoubleArrayTest#testSetNumberOfElements, org.apache.commons.math.optimization.general.MinpackTest#testMinpackKowalikOsborne, org.apache.commons.math.linear.EigenDecompositionImplTest#testEigenvectors, org.apache.commons.math.distribution.PoissonDistributionTest#testLargeMeanInverseCumulativeProbability, org.apache.commons.math.linear.SparseRealMatrixTest#testAdd, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testConsistency, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testMomentSmallSamples, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumnMatrix, org.apache.commons.math.fraction.BigFractionFormatTest#testParse, org.apache.commons.math.fraction.BigFractionTest#testCompareTo, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testCopy, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testSerialization, org.apache.commons.math.complex.ComplexTest#testTanhNaN, org.apache.commons.math.distribution.FDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testUnstableDerivative, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testEvaluation, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testN0andN1Conditions, org.apache.commons.math.util.MathUtilsTest#testSubAndCheckErrorMessage, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testCopy, org.apache.commons.math.fraction.FractionTest#testAbs, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#derivativesConsistency, org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testMinEndpoints, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testEqualsAndHashCode, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testEvaluation, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testIncrementation, org.apache.commons.math.stat.descriptive.rank.MinTest#testSerialization, org.apache.commons.math.fraction.FractionFormatTest#testParseProperNegative, org.apache.commons.math.util.MathUtilsTest#testEquals, org.apache.commons.math.random.EmpiricalDistributionTest#testNexFail, org.apache.commons.math.complex.ComplexFormatTest#testFormatNumber, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testHadamard, org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testDecreasingSteps, org.apache.commons.math.stat.descriptive.moment.MeanTest#testSmallSamples, org.apache.commons.math.util.DefaultTransformerTest#testTransformBigDecimal, org.apache.commons.math.linear.BigMatrixImplTest#testDimensions, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSetterIllegalState, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testColumnsPermutation, org.apache.commons.math.optimization.direct.NelderMeadTest#testFunctionEvaluationExceptions, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumn, org.apache.commons.math.complex.FrenchComplexFormatTest#testGetRealFormat, org.apache.commons.math.complex.ComplexTest#testSqrtRealPositive, org.apache.commons.math.linear.BlockFieldMatrixTest#testToString, org.apache.commons.math.linear.BlockRealMatrixTest#testPremultiply, org.apache.commons.math.linear.BigMatrixImplTest#testAddFail, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultiplePastEmpty, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSpecialValues, org.apache.commons.math.linear.FieldMatrixImplTest#testMultiply, org.apache.commons.math.util.MathUtilsTest#testLog, org.apache.commons.math.transform.FastFourierTransformerTest#testParameters, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testFormatObject, org.apache.commons.math.linear.FieldMatrixImplTest#testGetRowVector, org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleNoDecimals, org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveNan, org.apache.commons.math.util.MathUtilsTest#testSignLong, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testUnequalSizeArguments, org.apache.commons.math.complex.ComplexTest#testMultiply, org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleNoDecimals, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testMomentSmallSamples, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testBasicStats, org.apache.commons.math.random.GaussianRandomGeneratorTest#testMeanAndStandardDeviation, org.apache.commons.math.util.OpenIntToFieldTest#testRemoveFromEmpty, org.apache.commons.math.util.MathUtilsTest#testMulAndCheck, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testIncreasingTolerance, org.apache.commons.math.stat.StatUtilsTest#testGeometricMean, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEvents, org.apache.commons.math.fraction.FractionTest#testAdd, org.apache.commons.math.complex.ComplexTest#testNegate, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testSerial, org.apache.commons.math.linear.SparseFieldMatrixTest#testGetRowVector, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testConsistency, org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficient, org.apache.commons.math.linear.FieldMatrixImplTest#testSetRow, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testConsistency, org.apache.commons.math.complex.ComplexTest#testSinhInf, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testDimensionCheck, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testOneSet, org.apache.commons.math.analysis.solvers.MullerSolverTest#testQuinticFunction2, org.apache.commons.math.distribution.ExponentialDistributionTest#testConsistency, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeZ, org.apache.commons.math.complex.ComplexFormatTest#testZeroReal, org.apache.commons.math.linear.SparseFieldMatrixTest#testTrace, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testLLowerTriangular, org.apache.commons.math.linear.FieldMatrixImplTest#testAddFail, org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testSmallError, org.apache.commons.math.distribution.ZipfDistributionTest#testFloatingPointArguments, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testCopyConsistency, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeX, org.apache.commons.math.linear.BlockRealMatrixTest#testGetRow, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeY, org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleNoDecimals, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testPPermutation, org.apache.commons.math.stat.descriptive.summary.SumTest#testIncrementation, org.apache.commons.math.util.MathUtilsTest#testL1DistanceDouble, org.apache.commons.math.optimization.direct.MultiDirectionalTest#testRosenbrock, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testConsistency, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#test20090720, org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testLinearFunction, org.apache.commons.math.optimization.linear.SimplexSolverTest#testUnboundedSolution, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewSecantSolverValid, org.apache.commons.math.distribution.FDistributionTest#testIllegalArguments, org.apache.commons.math.stat.StatUtilsTest#testSumSq, org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryFormatNull, org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testNoError, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testN0andN1Conditions, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testShuffledStatistics, org.apache.commons.math.complex.ComplexTest#testAcos, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemoveAbsent, org.apache.commons.math.ode.FirstOrderConverterTest#testDecreasingSteps, org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeReal, org.apache.commons.math.stat.inference.TestUtilsTest#testOneSampleT, org.apache.commons.math.ode.sampling.StepNormalizerTest#testBeforeEnd, org.apache.commons.math.util.DefaultTransformerTest#testSerial, org.apache.commons.math.linear.SparseRealVectorTest#testConstructors, org.apache.commons.math.util.DefaultTransformerTest#testTransformInteger, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testNoDependency, org.apache.commons.math.complex.ComplexTest#testConjugateInfiinite, org.apache.commons.math.util.OpenIntToFieldTest#testCopy, org.apache.commons.math.optimization.linear.SimplexSolverTest#testSimplexSolver, org.apache.commons.math.linear.RealVectorFormatTest#testStaticFormatRealVectorImpl, org.apache.commons.math.linear.BigMatrixImplTest#testMultiply, org.apache.commons.math.fraction.FractionFormatTest#testParseInvalidDenominator, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumnVector, org.apache.commons.math.linear.SparseFieldMatrixTest#testDimensions, org.apache.commons.math.util.ResizableDoubleArrayTest#testAddElementRolling, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testBigStep, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testIncrementation, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddXSampleData, org.apache.commons.math.linear.BlockRealMatrixTest#testSeveralBlocks, org.apache.commons.math.distribution.PascalDistributionTest#testDensities, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeAll, org.apache.commons.math.complex.FrenchComplexFormatTest#testPaseNegativeInfinity, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest#testDerivativesConsistency, org.apache.commons.math.linear.BlockRealMatrixTest#testToString, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArray, org.apache.commons.math.linear.RealVectorFormatTest#testNegativeX, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testDimensionCheck, org.apache.commons.math.complex.ComplexTest#testTanCritical, org.apache.commons.math.complex.ComplexFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math.linear.RealMatrixImplTest#testGetColumnVector, org.apache.commons.math.complex.ComplexFormatTest#testSimpleNoDecimals, org.apache.commons.math.linear.RealVectorFormatTest#testNegativeZ, org.apache.commons.math.geometry.RotationTest#testApplyInverseTo, org.apache.commons.math.linear.RealVectorFormatTest#testNegativeY, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeZ, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveNan, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersSimple, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testMeanAndCovariance, org.apache.commons.math.complex.ComplexTest#testExp, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testEvents, org.apache.commons.math.stat.StatUtilsTest#testMin, org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumn, org.apache.commons.math.util.OpenIntToFieldTest#testGetFromEmpty, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeX, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeY, org.apache.commons.math.stat.inference.TTestFactoryTest#testSmallSamples, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareZeroCount, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParameters, org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumnVector, org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveNegative, org.apache.commons.math.MathConfigurationExceptionTest#testConstructorCause, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleNoDecimals, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testQuinticFunction, org.apache.commons.math.fraction.FractionTest#testConstructorDouble, org.apache.commons.math.transform.FastHadamardTransformerTest#test4Points, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSpecialValues, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testEvaluation, org.apache.commons.math.util.DefaultTransformerTest#testTransformObject, org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareZeroCount, org.apache.commons.math.fraction.FractionTest#testSubtract, org.apache.commons.math.distribution.NormalDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemove, org.apache.commons.math.linear.BlockRealMatrixTest#testSetRowMatrix, org.apache.commons.math.geometry.Vector3DFormatTest#testStaticFormatVector3D, org.apache.commons.math.complex.ComplexTest#testPowNaNBase, org.apache.commons.math.linear.LUDecompositionImplTest#testPAEqualLU, org.apache.commons.math.genetics.RandomKeyTest#testRandomPermutation, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testAddFail, org.apache.commons.math.linear.SparseRealVectorTest#testSerial, org.apache.commons.math.stat.regression.SimpleRegressionTest#testPerfectNegative, org.apache.commons.math.distribution.TDistributionTest#testCumulativeProbabilities, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testSwiss, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testBackward, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testFormatObject, org.apache.commons.math.genetics.ChromosomeTest#testCompareTo, org.apache.commons.math.special.GammaTest#testLogGammaNan, org.apache.commons.math.linear.SparseFieldMatrixTest#testMultiply, org.apache.commons.math.linear.FieldMatrixImplTest#testScalarAdd, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testMomentSmallSamples, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNoComponents, org.apache.commons.math.util.MathUtilsTest#testSinhNaN, org.apache.commons.math.random.RandomDataTest#testNextHex, org.apache.commons.math.analysis.solvers.BrentSolverTest#testBadEndpoints, org.apache.commons.math.linear.MatrixUtilsTest#testcreateFieldIdentityMatrix, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextBoolean, org.apache.commons.math.fraction.BigFractionTest#testLongValue, org.apache.commons.math.stat.inference.TTestFactoryTest#testTwoSampleTHomoscedastic, org.apache.commons.math.distribution.HypergeometricDistributionTest#testPopulationSize, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testSinFunction, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquare, org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeBoth, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testCopy, org.apache.commons.math.linear.BlockRealMatrixTest#testOperate, org.apache.commons.math.stat.descriptive.rank.MaxTest#testCopy, org.apache.commons.math.linear.FieldMatrixImplTest#testAdd, org.apache.commons.math.random.ValueServerTest#testModes, org.apache.commons.math.fraction.FractionTest#testSerial, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testfirstDerivativeComparison, org.apache.commons.math.stat.regression.SimpleRegressionTest#testNaNs, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testSerial, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMoreEstimatedParametersSimple, org.apache.commons.math.linear.RealVectorFormatTest#testParsePositiveInfinity, org.apache.commons.math.fraction.FractionTest#testLongValue, org.apache.commons.math.analysis.solvers.RiddersSolverTest#testExpm1Function, org.apache.commons.math.random.RandomDataTest#testNextIntExtremeValues, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testInsufficientData, org.apache.commons.math.ArgumentOutsideDomainExceptionTest#testConstructor, org.apache.commons.math.distribution.WeibullDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.fraction.BigFractionFieldTest#testOne, org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbabilities, org.apache.commons.math.transform.FastHadamardTransformerTest#test3Points, org.apache.commons.math.optimization.general.MinpackTest#testMinpackHelicalValley, org.apache.commons.math.linear.SparseRealMatrixTest#testScalarAdd, org.apache.commons.math.geometry.Vector3DFormatTest#testFormatObject, org.apache.commons.math.util.MathUtilsTest#testEqualsWithAllowedDelta, org.apache.commons.math.stat.data.LewTest#testCertifiedValues, org.apache.commons.math.analysis.solvers.NewtonSolverTest#testQuinticZero, org.apache.commons.math.analysis.solvers.MullerSolverTest#testSinFunction, org.apache.commons.math.optimization.direct.MultiDirectionalTest#testPowell, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testIncreasingBandwidthIncreasesSmoothness, org.apache.commons.math.linear.FieldMatrixImplTest#testTrace, org.apache.commons.math.fraction.FractionFormatTest#testDenominatorFormat, org.apache.commons.math.optimization.direct.NelderMeadTest#testMaxEvaluations, org.apache.commons.math.linear.RealVectorFormatTest#testConstructorSingleFormat, org.apache.commons.math.linear.SparseRealMatrixTest#testGetEntry, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testStdErrorConsistency, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNonDefaultSetting, org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumnMatrix, org.apache.commons.math.stat.CertifiedDataTest#testDescriptiveStatistics, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testSmallStep, org.apache.commons.math.linear.QRSolverTest#testUnderdetermined, org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testExactIntegration, org.apache.commons.math.linear.SparseFieldMatrixTest#testSetSubMatrix, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testSerialization, org.apache.commons.math.distribution.ZipfDistributionTest#testDensities, org.apache.commons.math.estimation.MinpackTest#testMinpackLinearRank1, org.apache.commons.math.linear.SingularValueSolverTest#testSolve, org.apache.commons.math.fraction.FractionTest#testGoldenRatio, org.apache.commons.math.linear.BiDiagonalTransformerTest#testAEqualUSVt, org.apache.commons.math.random.EmpiricalDistributionTest#testSerialization, org.apache.commons.math.stat.descriptive.moment.MeanTest#testMomentSmallSamples, org.apache.commons.math.complex.ComplexFieldTest#testSerial, org.apache.commons.math.random.EmpiricalDistributionTest#testDoubleLoad, org.apache.commons.math.util.MathUtilsTest#testLInfDistanceDouble, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testConstructorSingleFormat, org.apache.commons.math.optimization.general.MinpackTest#testMinpackBard, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testSinFunction, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNonStrictlyIncreasing, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testSubtraction, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeAll, org.apache.commons.math.special.ErfTest#testErf0, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayArgumentCause, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testBackward, org.apache.commons.math.fraction.FractionTest#testNegate, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSubMatrix, org.apache.commons.math.estimation.MinpackTest#testMinpackChebyquad, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowMatrixLarge, org.apache.commons.math.linear.BlockFieldMatrixTest#testOperate, org.apache.commons.math.random.ValueServerTest#testEmptyReplayFile], jUnit5Tests=[], jacocoIncludes=[org.apache.commons.*], jacocoExcludes=[java.*], family=SPECTRUM_BASED, spectrumFormula=OCHIAI, computeSpoonResults=false}
Computing tests from config.
Running TestContext{testMethods=[[Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL2DistanceInt, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testOverdetermined, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testSolveSingularityErrors, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testPow, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testCompose, [Manual]TestMethod=org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowFieldMatrix, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension4WithSplit, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNotPositiveDefinite, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeReal, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testCorr, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testNextAfterSpecialCases, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testPerfectFit, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testConfig, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMultiplyNaN, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSubAndCheckLong, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testGetValues, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSanityChecks, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testReplay, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignInt, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnLarge, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#checkClone, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest#testTestNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewNewtonSolverValid, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testGetArgumentNaN, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAdd, [Manual]TestMethod=org.apache.commons.math.transform.FastSineTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositiveZero, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testString, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTan, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testIsSingular, [Manual]TestMethod=org.apache.commons.math.MaxIterationsExceededExceptionTest#testSimpleConstructor, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateSin, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonEqualCounts, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaNanPositive, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testSimplistic, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testPermutedArrayHash, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowLarge, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNorm, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCosNaN, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.linear.CholeskySolverTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataThatIsNotSquare, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testIsSame, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNotSymmetricMatrixException, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testdiscardArtificialVariables, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextUniform, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatImproper, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.stat.CertifiedDataTest#testSummaryStatistics, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonUnEqualCounts, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEventsErrors, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testToString, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearFullRank, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideInfinite, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDoubleConstructor, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testCompletelyIncorrectBandwidth, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyMutationTest#testMutate, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testEpsilon, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.estimation.WeightedMeasurementTest#testTheory, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSubtractNaN, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtRealZero, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatImproperNegative, [Manual]TestMethod=org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveBadParameters, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testGetImaginaryFormat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSetQuantile, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtImaginaryNegative, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testAddNonComparable, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinhNaN, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testWindowSize, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testEigenvalues, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testDegenerate1, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testGetSummary, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testDegenerate0, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowLarge, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testGetFromEmpty, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaNegativePositivePositive, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testTridiagonal, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testAngles, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPoissonLargeMean, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testSolutionWithNegativeDecisionVariable, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testMultiplication, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstLaguerrePolynomials, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testRandomAccess, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testIdentityPermutation, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testCovarianceConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.BetaDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseBig, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testSanityChecks, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testSolveRankErrors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistanceSq, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testHermiteDifferentials, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testGetMean, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testComparatorPermutation, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIntegratorControls, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testSSENonNegative, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension1, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testTrivialModel, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension2, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest#testDerivativesConsistency, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension3, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseProperInvalidMinus, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackOsborne2, [Manual]TestMethod=org.apache.commons.math.genetics.GeneticAlgorithmTestBinary#test, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanhCritical, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregateDegenerate, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackOsborne1, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSample, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetFunctionValueAccuracy, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnBigMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaPositive, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testProduct, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCosInf, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBrownAlmostLinear, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBrownAlmostLinear, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryChromosomeTest#testInvalidConstructor, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNormalize, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction2, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testEqualRepr, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testStaticFormatComplex, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testConstant, [Manual]TestMethod=org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaTest, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutOnExisting, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseZeroReal, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAngular, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testWithInitialCapacity, [Manual]TestMethod=org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBracketSin, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testGcd, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testValues, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeBoth, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.genetics.FitnessCachingTest#testFitnessCaching, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextUniform, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSample, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateNoSuccesses, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.distribution.BetaDistributionTest#testCumulative, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetMatrixLarge, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testLargeValues, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#backward, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest#testQuinticMin, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testDegenerate1, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaNegativePositive, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testDegenerate0, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testScale, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSubAndCheck, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testNegate, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testExpInf, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testNorris, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseZeroImaginary, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testDecode, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackChebyquad, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateBigMatrix, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testConstant, [Manual]TestMethod=org.apache.commons.math.analysis.integration.RombergIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBadParameters, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.genetics.FixedGenerationCountTest#testIsSatisfied, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGet, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveZeroPositive, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstChebyshevPolynomials, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testTrace, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testMinimizeMaximize, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testNaN, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testGetAbsent, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testTransformers, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testIterator, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testConstants, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_normal_fourthRoot, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testDigammaSmallArgs, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testInference, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#test5, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testClear, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaZeroPositivePositive, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testInfeasibleSolution, [Manual]TestMethod=org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNextIntNeg, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsTrue, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsNull, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArgumentCause, [Manual]TestMethod=org.apache.commons.math.util.BigRealFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testScalarMultiply, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveObsFromSingle, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testClear, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtPolar, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testFill, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatZero, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testSmallDf, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL1DistanceInt, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testMath280, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDistinctEigenvalues, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testDoubleFormat, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testMath226, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.genetics.ElitisticListPopulationTest#testNextGeneration, [Manual]TestMethod=org.apache.commons.math.analysis.integration.RombergIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureHex, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexNaN, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#checklone, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackHelicalValley, [Manual]TestMethod=org.apache.commons.math.genetics.ListPopulationTest#testGetFittestChromosome, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testLongly, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowBigMatrix, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLInfDistanceInt, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testUOrthogonal, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowRealMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testDeprecated2, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseManyComponents, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositivePositive, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testPutTransformer, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testDimension, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testWholeFormat, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testNormalizeAngle, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructorCause, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAbsNaN, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorInt, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaZero, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testPercentile, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testOperate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testLongly, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testErrorConditions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testZeroImaginary, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseInteger, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNexBytes, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2Complex, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testPercentileSetter, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMath221, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrt1z, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnDistortedSine, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testQuaternion, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testDataInOut, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testHTrapezoidal, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveNoRoot, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.analysis.integration.RombergIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testQOrthogonal, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testMismatch, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatZero, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testSetBeta, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math.stat.data.LotteryTest#testCertifiedValues, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testFixedState, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testGetReducedFraction, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testSmallLastStep, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testContainsClass, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSeveralBlocks, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testGridTooFat, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetAbsoluteAccuracy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextHex, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMinimization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#test0Choose0, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformString, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testSetMean, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testRepeatedEigenvalue, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.genetics.ChromosomeTest#testFindSameChromosome, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testOperatePremultiplyLarge, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDigitLimitConstructor, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressandVariance, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConjugate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testChebyshevDifferentials, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEventsNoConvergence, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testAlpha, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEqualsWithAllowedUlps, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetRelativeAccuracy, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveAccuracySin, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testEmptyDigestFile, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDivide, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseZeroImaginary, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testNullIntervalCheck, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testTrigamma, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateIdentityMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemove2, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseInvalid, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testQuantiles, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testDigammaLargeArgs, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRandom, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testRemoval, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetMaximalIterationCount, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideNaN, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnTwoPoints, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testNoError, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseProper, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testScalarProduct, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.transform.FastCosineTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testVectorOnePair, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testQOrthogonal, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositiveNan, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositiveNegative, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testWrongDerivative, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testNormalApproximateProbability, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMaximalTiesMinimum, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#interpolationInside, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNegateNaN, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testDenominatorFormat, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinNaN, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testScalarMultiplyInf, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testMatricesValues2, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testInconsistentSizes, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testConstructor2, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testConstructor1, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLogZero, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testMinMax, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testUUpperTriangular, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCosh, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackLinearFullRank, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testNaNs, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testCopy, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testPerfect, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseManyComponents, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnLarge, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParse, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testNorm, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDigitLimitConstructor, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testBigFractionConverter, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#test20090720, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGet, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMath199, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testStats, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testContainsKey, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetRealFormatNull, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testRedundantUnsolvable, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonBadCounts, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#backward, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.NewtonSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testToString, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testOperateLarge, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBox3Dimensional, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearRank1, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testOperateLarge, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistanceInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testDataInOut, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnOnePoint, [Manual]TestMethod=org.apache.commons.math.ode.sampling.StepNormalizerTest#testBoundaries, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAngularSeparation, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSecureInt, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testInverse, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformDouble, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testCosh, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testTableauWithNoArtificialVars, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testScalb, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryChromosomeTest#testRandomConstructor, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.estimation.EstimatedParameterTest#testEstimate, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackPowellSingular, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testContainsKey, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testUUpperTriangular, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_normal_thirdRoot, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testToString, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath272, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeReal, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testMinimizeMaximize, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnStraightLine, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinh, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testArrayIndexConditions, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testNaN, [Manual]TestMethod=org.apache.commons.math.estimation.WeightedMeasurementTest#testConstruction, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testGetSummary, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath288, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDiagonal, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath286, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testInitialGuess, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnRealMatrix, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormat, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignByte, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testBoundaries, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testPaseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSecureLong, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testOperate, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGetWith0ExpectedSize, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf3291, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testHashCode, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAddNaN, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackOsborne2, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testDistance, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testRUpperTriangular, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackOsborne1, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testOperatePremultiplyLarge, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConjugateNaN, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testMath209, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMoreRows, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testMath209, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCos, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaNanPositivePositive, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testQuintic, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#checklone, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest#testSinMin, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testConfig, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAsinInf, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testNISTExample, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAtanNaN, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbability2, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAcosInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testInsufficientBandwidth, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryCharacterEmpty, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testMoreLargeValues, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPow, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testArrayEquals, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBrownDennis, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesMaximum, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSecureInt, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testOrthogonal, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistance, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testSetScale, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testEmptyTable, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaZeroPositive, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatNegative, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientLarge, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testWindowSize, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesAverage, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testWholeFormat, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testVariance, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorLong, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testNaNs, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testRemoveTransformer, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testcreateFieldMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testUpperOrLower, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testDouble, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.MaxIterationsExceededExceptionTest#testComplexConstructor, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testPcts, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAngle, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testGaussian, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testSinFunction2, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewBrentSolverValid, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testLongFormat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testLUDecomposition, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testProperties, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNorm1, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAtanInf, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf2807, [Manual]TestMethod=org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testArrayIsReference, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testConfig, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNexBoolean, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testOperate, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testClasses, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testCovarianceConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrt1zNaN, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignShort, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testSerial, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf1960, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testHash, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testGetArgumentInf, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest#dimension2, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testIntegerValues, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.estimation.EstimatedParameterTest#testConstruction, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryMutationTest#testMutate, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testIntValue, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemoveAbsent, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAcosNaN, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testSerial, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAddInfinite, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testDimension, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testLargeDegreesOfFreedom, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testWalk, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLog, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testScalarMultiplyNaN, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRealMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryChromosomeTest#testIsSame, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackKowalikOsborne, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureLong, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testNoReset, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testBigDecimalValue, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testRootMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testChebyshevBounds, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testMulAndCheckLong, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testConstant, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextUniform, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testWithInitialCapacityAndExpansionFactor, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testNullEmpty, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsSame, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testNext, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testRoundDouble, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.DuplicateSampleAbscissaExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMultiplyNaNInf, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveNull, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinear, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testSerial, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testGetRealFormat, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testNullIntervalCheck, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testPercentile, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregateSpecialValues, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testGetValues, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseNegative, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.linear.CholeskySolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testToString, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullURL, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonUnEqualCounts, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testEpsilonLimitConstructor, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregationConsistency, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnVectorLarge, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientFail, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testRoundFloat, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testSetStandardDeviation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLogInf, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testSubstitute, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregate, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackPowellSingular, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCoshNaN, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testSinMin, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testCentroid, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.InvalidMatrixExceptionTest#testConstructorMessage, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewBisectionSolverValid, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.transform.FastCosineTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testAEqualQR, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testNumeratorFormat, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testMath274, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnMatrixLarge, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetRealFormatNull, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaNegative, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstLegendrePolynomials, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowVectorLarge, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSecureHex, [Manual]TestMethod=org.apache.commons.math.random.UniformRandomGeneratorTest#testMeanAndStandardDeviation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testMismatch, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testCopy, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.estimation.EstimatedParameterTest#testBound, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#test8Points, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testDefault, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.transform.FastSineTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddNullYSampleData, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAbsentOnExisting, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testControlParameters, [Manual]TestMethod=org.apache.commons.math.genetics.TournamentSelectionTest#testSelect, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testPopulation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregation, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testForgottenImaginaryCharacter, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormat, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testRootEndpoints, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackWatson, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDoubleConstructor, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryFormatNull, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#polynomial, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testModelWithNoArtificialVars, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testSingular, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsImaginaryDifference, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackFreudensteinRoth, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDivide, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveSingle, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAbs, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testAdaptor, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares3, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testMeanAccessors, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testGetArgument, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares1, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares2, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullDoubleArray, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBox3Dimensional, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideNaNInf, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testExamples, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension4WithoutSplit, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtNaN, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testGetStandardDeviation, [Manual]TestMethod=org.apache.commons.math.linear.MatrixIndexExceptionTest#testConstructorMessage, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testConstructorDouble, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsRemovedTiesSequential, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testNumeratorFormat, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAbsentOnExisting, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMatricesValues2, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsClass, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollision2, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCoshInf, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMoreColumns, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultiple, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetAbsoluteAccuracy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSingleton, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testLongFormat, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#notEnoughData, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testCumulativeProbabilityAgaintStackOverflow, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testOneWayAnovaUtils, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testPowell, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL2DistanceDouble, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testLongly, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testHighPercentile, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveSin, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testNextAfter, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testSingular, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testGetValues, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonEqualCounts, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemoveFromEmpty, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testCoordinates, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollisions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAsinNaN, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorDouble, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSecureLong, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateResiduals, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testNaN, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testFractionConverter, [Manual]TestMethod=org.apache.commons.math.util.BigRealFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testPAEqualLU, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testMean, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MedianTest#testCopy, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAdd, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaNegativePositive, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#checkClone, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtInf, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAbsInfinite, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataWithSampleSizeMismatch, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#exceedMaxEvaluations, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testStdErrorConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatImproper, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGetWithExpectedSize, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testFloat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsNaN, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_realPartZero, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtImaginaryZero, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextFloat, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testPaired, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testImpossibleSerialization, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testZeroImaginary, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testParameterAccessors, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testNextDigestFail, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseProperInvalidMinus, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeBoth, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testDataInOut, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testMax, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testInitialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testNonInvertible, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveXY, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testModelsMerging, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testToString, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowInf, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest#testValues, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#noReset, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.transform.FastCosineTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryCharacterNull, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanh, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testMath209, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testQuinticMax, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemove2, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtRealNegative, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testUOrthogonal, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testBBiDiagonal, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testpowNull, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetMatrixLarge, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testDegenerateInverseCumulativeProbability, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#polynomial, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testGetReducedFraction, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testMatricesValues2, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseInteger, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testStaticFormatRealVectorImpl, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackMeyer, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSerial, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveNanPositive, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetMaximalIterationCount, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testTTriDiagonal, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveAccuracyNull, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConstructorNaN, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateBigIdentityMatrix, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositivePositive, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest#testMeanAndCorrelation, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testConcurrentModification, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackRosenbrok, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignFloat, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignDouble, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseInvalid, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testVectorTwoPairs, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testExtremeValues, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testThreshold, [Manual]TestMethod=org.apache.commons.math.geometry.RotationOrderTest#testName, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorShort, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testLargeMeanCumulativeProbability, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutKeysWithCollisions, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testStaticFormatComplex, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testAEqualQTQt, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSinh, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testGetImaginaryFormat, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanNaN, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testInducedPermutation, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnVectorLarge, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaPValue, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#dimensionCheck, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructorCause, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackRosenbrok, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testAdd, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSample, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseZeroReal, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.linear.CholeskySolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testBigMatrix, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testRank, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddXSampleData, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testAEqualVDVt, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testSingularities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullCovarianceData, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testDoubleFormat, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testFactorialFail, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testQTOrthogonal, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testSimplistic, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testAbs, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testSetAlpha, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testLaguerreDifferentials, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testTrace, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNormInf, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testMakotoNishimura, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testRedundantSolvable, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLogNaN, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatImproperNegative, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#testNoIntInverse, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryCharacterEmpty, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testBinIndexOverflow, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testEpsilonLimitConstructor, [Manual]TestMethod=org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaFValue, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testFactorial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testLegendreDifferentials, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatNegative, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentSizes, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testQuinticMin, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackJennrichSampson, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateTwoSegment, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testBoundParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackFreudensteinRoth, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextPoissonLargeMean, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateResiduals, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorByte, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testAEqualLLT, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutKeysWithCollision2, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testComposeInverse, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGetWithExpectedSize, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBrownDennis, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSingular, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.InteractionTest#testInteraction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testBasicStats, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testAddAndCheckLong, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testCopy, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextPoissonLargeMean, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSecureHex, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextHex, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testFormatNumber, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.util.BigRealFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeBoth, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testDiscard, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testAdd1000, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testSmallDf, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testWalk, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaZeroPositive, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testSkewAndKurtosis, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnFieldMatrix, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testIntegerOverflow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testPopulation, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testIncreasingRobustnessItersIncreasesSmoothnessWithOutliers, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinInf, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaNanPositive, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeReal, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testFunctionEvaluationExceptions, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBracketEndpointRoot, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGetWith0ExpectedSize, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MedianTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testContainsTransformer, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testMatricesValues5, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testMatricesValues3, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest#testTestPositive, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testControlParameters, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAsin, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowVectorLarge, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseInvalidDenominator, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testLinear, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testHat, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_NAN_Inf, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveZero, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsAndInfs, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testAxisAngle, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetRelativeAccuracy, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstHermitePolynomials, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testPaired, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testRevert, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testSerial, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testLargeModel, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testVectorialProducts, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math.genetics.OnePointCrossoverTest#testCrossover, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemove, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testMath283, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowMatrixLarge, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#exceedMaxEvaluations, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testConditionNumber, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testParameters, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testStaticFormatVector3D, [Manual]TestMethod=org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureInt, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations#test, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSolveSingularityErrors, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.NewtonSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonBadCounts, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testPercentileSetter, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testCoshNaN, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowNaNExponent, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testSumLog, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.transform.FastSineTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformNull, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest#testNoOptimum, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testAdd, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowZero, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseProper, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testSingleVariableAndConstraint, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistance1, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveNegativePositive, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#interpolationAtBounds, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testCopy, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveObsFromEmpty, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackMeyer, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testFloatValue, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivide, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testGetAbsent, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNextIntN, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testPPermutation, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateNoFailures, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testUnsorted, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.estimation.WeightedMeasurementTest#testIgnored, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testFloatValue, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testSmallDegreesOfFreedom, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testExpm1Function2, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAtan, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositivePositive, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutOnExisting, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBard, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testLTTransposed, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testNoAccessBelowDiagonal, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testRank, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testAEqualUSVt, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testSerial, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#test2DData, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateThreeSegment, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testSkewAndKurtosis, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testMean, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testConditionNumber, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testCopy, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testMutators, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.util.ContinuedFractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testDifferenceStats, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testInitialGuess, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSin, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateFullSample, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMath199, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testExamples, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testExpNaN, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetFunctionValueAccuracy, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testAddition, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testIntValue, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testHighDegreeLegendre, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#test1PercentError, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackJennrichSampson, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testBigDecimalValue, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testInvertible, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testNoDenseOutput, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullFile, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testPow, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testRemoval, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnMatrixLarge, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexIllegalModulus, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryCharacterNull, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNoComponents, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackWatson, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testIdentity, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testLongly, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayPatternArguments, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testCopy, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testNextDigest, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testGridTooFine, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testIterator, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testQuadratic, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testNorm, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testPaired, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testPrintStackTrace, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testConcurrentModification, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseProperNegative, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testEmptyData, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsRealDifference, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultipleToEmpty, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressandVariance, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testAddAndCheck, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf2576, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullYSampleData, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testMedian, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testArrayHash, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testBeta, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLcm, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#dimensionCheck, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorFloat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testNaN, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoad, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveZero, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testZeroReal, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanInf, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testForgottenImaginaryCharacter, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testDoubleDimension, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanhInf, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testCounts, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testSolve, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParameters, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testSetNumberOfElements, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackKowalikOsborne, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testEigenvectors, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testLargeMeanInverseCumulativeProbability, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParse, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanhNaN, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSubAndCheckErrorMessage, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testCopy, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testAbs, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testMinEndpoints, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseProperNegative, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEquals, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testNexFail, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testFormatNumber, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testHadamard, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformBigDecimal, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testFunctionEvaluationExceptions, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testGetRealFormat, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtRealPositive, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultiplePastEmpty, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLog, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveNan, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignLong, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testUnequalSizeArguments, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testBasicStats, [Manual]TestMethod=org.apache.commons.math.random.GaussianRandomGeneratorTest#testMeanAndStandardDeviation, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemoveFromEmpty, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testMulAndCheck, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testGeometricMean, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testAdd, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNegate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficient, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinhInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testQuinticFunction2, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testZeroReal, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testSmallError, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testPPermutation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL1DistanceDouble, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#test20090720, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testUnboundedSolution, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewSecantSolverValid, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testSumSq, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryFormatNull, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testNoError, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAcos, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemoveAbsent, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeReal, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math.ode.sampling.StepNormalizerTest#testBeforeEnd, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformInteger, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConjugateInfiinite, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testCopy, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testSimplexSolver, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testStaticFormatRealVectorImpl, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseInvalidDenominator, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testAddElementRolling, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddXSampleData, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSeveralBlocks, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testPaseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest#testDerivativesConsistency, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArray, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanCritical, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testApplyInverseTo, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveNan, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testMeanAndCovariance, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testExp, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testMin, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testGetFromEmpty, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParameters, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveNegative, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructorCause, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testConstructorDouble, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#test4Points, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformObject, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemove, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testStaticFormatVector3D, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowNaNBase, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testPAEqualLU, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testRandomPermutation, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testPerfectNegative, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testSwiss, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.genetics.ChromosomeTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaNan, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNoComponents, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSinhNaN, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextHex, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testBadEndpoints, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testcreateFieldIdentityMatrix, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextBoolean, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testLongValue, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testPopulationSize, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeBoth, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testAdd, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testModes, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testfirstDerivativeComparison, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testNaNs, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testLongValue, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math.ArgumentOutsideDomainExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#test3Points, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackHelicalValley, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEqualsWithAllowedDelta, [Manual]TestMethod=org.apache.commons.math.stat.data.LewTest#testCertifiedValues, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.NewtonSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testPowell, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testIncreasingBandwidthIncreasesSmoothness, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testTrace, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testDenominatorFormat, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testMaxEvaluations, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testStdErrorConsistency, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.stat.CertifiedDataTest#testDescriptiveStatistics, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testUnderdetermined, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, [Manual]TestMethod=org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testExactIntegration, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackLinearRank1, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testAEqualUSVt, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testDoubleLoad, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLInfDistanceDouble, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBard, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNonStrictlyIncreasing, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testSubtraction, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf0, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayArgumentCause, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testNegate, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackChebyquad, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowMatrixLarge, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testEmptyReplayFile], testFrameworkStrategy=fr.spoonlabs.flacoco.core.coverage.framework.JUnit4Strategy@61526469}
Running TestContext{testMethods=[[Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL2DistanceInt, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testOverdetermined, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testSolveSingularityErrors, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testPow, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testCompose, [Manual]TestMethod=org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowFieldMatrix, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension4WithSplit, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNotPositiveDefinite, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeReal, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testCorr, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testNextAfterSpecialCases, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testPerfectFit, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testConfig, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMultiplyNaN, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSubAndCheckLong, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testGetValues, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSanityChecks, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testReplay, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignInt, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnLarge, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#checkClone, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest#testTestNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewNewtonSolverValid, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testGetArgumentNaN, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAdd, [Manual]TestMethod=org.apache.commons.math.transform.FastSineTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositiveZero, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testString, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTan, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testIsSingular, [Manual]TestMethod=org.apache.commons.math.MaxIterationsExceededExceptionTest#testSimpleConstructor, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateSin, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonEqualCounts, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaNanPositive, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testSimplistic, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testPermutedArrayHash, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowLarge, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNorm, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCosNaN, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.linear.CholeskySolverTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataThatIsNotSquare, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testIsSame, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNotSymmetricMatrixException, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testdiscardArtificialVariables, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextUniform, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatImproper, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.stat.CertifiedDataTest#testSummaryStatistics, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonUnEqualCounts, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEventsErrors, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testToString, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearFullRank, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideInfinite, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDoubleConstructor, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testCompletelyIncorrectBandwidth, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyMutationTest#testMutate, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testEpsilon, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.estimation.WeightedMeasurementTest#testTheory, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSubtractNaN, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtRealZero, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatImproperNegative, [Manual]TestMethod=org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveBadParameters, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testGetImaginaryFormat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSetQuantile, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtImaginaryNegative, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testAddNonComparable, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinhNaN, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testWindowSize, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testEigenvalues, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testDegenerate1, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testGetSummary, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testDegenerate0, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowLarge, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testGetFromEmpty, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaNegativePositivePositive, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testTridiagonal, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testAngles, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPoissonLargeMean, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testSolutionWithNegativeDecisionVariable, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testMultiplication, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstLaguerrePolynomials, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testRandomAccess, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testIdentityPermutation, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testCovarianceConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.BetaDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseBig, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testSanityChecks, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testSolveRankErrors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistanceSq, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testHermiteDifferentials, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testGetMean, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testComparatorPermutation, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIntegratorControls, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testSSENonNegative, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension1, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testTrivialModel, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension2, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest#testDerivativesConsistency, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension3, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseProperInvalidMinus, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackOsborne2, [Manual]TestMethod=org.apache.commons.math.genetics.GeneticAlgorithmTestBinary#test, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanhCritical, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregateDegenerate, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackOsborne1, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSample, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetFunctionValueAccuracy, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnBigMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaPositive, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testProduct, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCosInf, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBrownAlmostLinear, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBrownAlmostLinear, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryChromosomeTest#testInvalidConstructor, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNormalize, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction2, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testEqualRepr, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testStaticFormatComplex, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testConstant, [Manual]TestMethod=org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaTest, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutOnExisting, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseZeroReal, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAngular, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testWithInitialCapacity, [Manual]TestMethod=org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBracketSin, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testGcd, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testValues, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeBoth, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.genetics.FitnessCachingTest#testFitnessCaching, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextUniform, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSample, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateNoSuccesses, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.distribution.BetaDistributionTest#testCumulative, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetMatrixLarge, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testLargeValues, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#backward, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest#testQuinticMin, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testDegenerate1, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaNegativePositive, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testDegenerate0, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testScale, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSubAndCheck, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testNegate, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testExpInf, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testNorris, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseZeroImaginary, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testDecode, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackChebyquad, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateBigMatrix, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testConstant, [Manual]TestMethod=org.apache.commons.math.analysis.integration.RombergIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBadParameters, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.genetics.FixedGenerationCountTest#testIsSatisfied, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGet, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveZeroPositive, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstChebyshevPolynomials, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testTrace, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testMinimizeMaximize, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testNaN, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testGetAbsent, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testTransformers, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testIterator, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testConstants, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_normal_fourthRoot, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testDigammaSmallArgs, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testInference, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#test5, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testClear, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaZeroPositivePositive, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testInfeasibleSolution, [Manual]TestMethod=org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNextIntNeg, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsTrue, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsNull, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArgumentCause, [Manual]TestMethod=org.apache.commons.math.util.BigRealFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testScalarMultiply, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveObsFromSingle, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testClear, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtPolar, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testFill, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatZero, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testSmallDf, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL1DistanceInt, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testMath280, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDistinctEigenvalues, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testDoubleFormat, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testMath226, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.genetics.ElitisticListPopulationTest#testNextGeneration, [Manual]TestMethod=org.apache.commons.math.analysis.integration.RombergIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureHex, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexNaN, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#checklone, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackHelicalValley, [Manual]TestMethod=org.apache.commons.math.genetics.ListPopulationTest#testGetFittestChromosome, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testLongly, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowBigMatrix, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLInfDistanceInt, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testUOrthogonal, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowRealMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testDeprecated2, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseManyComponents, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositivePositive, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testPutTransformer, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testDimension, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testWholeFormat, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testNormalizeAngle, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructorCause, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAbsNaN, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorInt, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaZero, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testPercentile, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testOperate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testLongly, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testErrorConditions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testZeroImaginary, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseInteger, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNexBytes, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2Complex, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testPercentileSetter, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMath221, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrt1z, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnDistortedSine, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testQuaternion, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testDataInOut, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testHTrapezoidal, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveNoRoot, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.analysis.integration.RombergIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testQOrthogonal, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testMismatch, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatZero, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testSetBeta, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math.stat.data.LotteryTest#testCertifiedValues, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testFixedState, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testGetReducedFraction, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testSmallLastStep, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testContainsClass, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSeveralBlocks, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testGridTooFat, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetAbsoluteAccuracy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextHex, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMinimization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#test0Choose0, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformString, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testSetMean, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testRepeatedEigenvalue, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.genetics.ChromosomeTest#testFindSameChromosome, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testOperatePremultiplyLarge, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDigitLimitConstructor, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressandVariance, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConjugate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testChebyshevDifferentials, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEventsNoConvergence, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testAlpha, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEqualsWithAllowedUlps, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetRelativeAccuracy, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveAccuracySin, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testEmptyDigestFile, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDivide, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseZeroImaginary, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testNullIntervalCheck, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testTrigamma, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateIdentityMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemove2, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseInvalid, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testQuantiles, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testDigammaLargeArgs, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRandom, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testRemoval, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetMaximalIterationCount, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideNaN, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnTwoPoints, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testNoError, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseProper, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testScalarProduct, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.transform.FastCosineTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testVectorOnePair, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testQOrthogonal, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositiveNan, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositiveNegative, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testWrongDerivative, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testNormalApproximateProbability, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMaximalTiesMinimum, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#interpolationInside, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNegateNaN, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testDenominatorFormat, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinNaN, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testScalarMultiplyInf, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testMatricesValues2, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testInconsistentSizes, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testConstructor2, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testConstructor1, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLogZero, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testMinMax, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testUUpperTriangular, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCosh, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackLinearFullRank, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testNaNs, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testCopy, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testPerfect, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseManyComponents, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnLarge, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParse, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testNorm, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDigitLimitConstructor, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testBigFractionConverter, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#test20090720, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGet, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMath199, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testStats, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testContainsKey, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetRealFormatNull, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testRedundantUnsolvable, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonBadCounts, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#backward, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.NewtonSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testToString, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testOperateLarge, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBox3Dimensional, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearRank1, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testOperateLarge, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistanceInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testDataInOut, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnOnePoint, [Manual]TestMethod=org.apache.commons.math.ode.sampling.StepNormalizerTest#testBoundaries, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAngularSeparation, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSecureInt, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testInverse, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformDouble, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testCosh, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testTableauWithNoArtificialVars, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testScalb, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryChromosomeTest#testRandomConstructor, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.estimation.EstimatedParameterTest#testEstimate, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackPowellSingular, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testContainsKey, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testUUpperTriangular, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_normal_thirdRoot, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testToString, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath272, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeReal, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testMinimizeMaximize, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnStraightLine, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinh, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testArrayIndexConditions, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testNaN, [Manual]TestMethod=org.apache.commons.math.estimation.WeightedMeasurementTest#testConstruction, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testGetSummary, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath288, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDiagonal, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath286, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testInitialGuess, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnRealMatrix, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormat, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignByte, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testBoundaries, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testPaseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSecureLong, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testOperate, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGetWith0ExpectedSize, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf3291, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testHashCode, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAddNaN, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackOsborne2, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testDistance, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testRUpperTriangular, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackOsborne1, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testOperatePremultiplyLarge, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConjugateNaN, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testMath209, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMoreRows, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testMath209, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCos, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaNanPositivePositive, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testQuintic, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#checklone, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest#testSinMin, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testConfig, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAsinInf, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testNISTExample, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAtanNaN, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbability2, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAcosInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testInsufficientBandwidth, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryCharacterEmpty, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testMoreLargeValues, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPow, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testArrayEquals, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBrownDennis, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesMaximum, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSecureInt, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testOrthogonal, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistance, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testSetScale, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testEmptyTable, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaZeroPositive, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatNegative, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientLarge, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testWindowSize, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesAverage, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testWholeFormat, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testVariance, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorLong, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testNaNs, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testRemoveTransformer, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testcreateFieldMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testUpperOrLower, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testDouble, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.MaxIterationsExceededExceptionTest#testComplexConstructor, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testPcts, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAngle, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testGaussian, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testSinFunction2, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewBrentSolverValid, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testLongFormat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testLUDecomposition, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testProperties, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNorm1, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAtanInf, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf2807, [Manual]TestMethod=org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testArrayIsReference, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testConfig, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNexBoolean, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testOperate, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testClasses, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testCovarianceConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrt1zNaN, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignShort, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testSerial, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf1960, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testHash, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testGetArgumentInf, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest#dimension2, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testIntegerValues, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.estimation.EstimatedParameterTest#testConstruction, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryMutationTest#testMutate, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testIntValue, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemoveAbsent, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAcosNaN, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testSerial, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAddInfinite, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testDimension, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testLargeDegreesOfFreedom, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testWalk, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLog, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testScalarMultiplyNaN, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRealMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryChromosomeTest#testIsSame, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackKowalikOsborne, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureLong, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testNoReset, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testBigDecimalValue, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testRootMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testChebyshevBounds, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testMulAndCheckLong, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testConstant, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextUniform, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testWithInitialCapacityAndExpansionFactor, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testNullEmpty, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsSame, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testNext, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testRoundDouble, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.DuplicateSampleAbscissaExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMultiplyNaNInf, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveNull, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinear, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testSerial, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testGetRealFormat, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testNullIntervalCheck, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testPercentile, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregateSpecialValues, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testGetValues, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseNegative, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.linear.CholeskySolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testToString, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullURL, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonUnEqualCounts, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testEpsilonLimitConstructor, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregationConsistency, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnVectorLarge, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientFail, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testRoundFloat, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testSetStandardDeviation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLogInf, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testSubstitute, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregate, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackPowellSingular, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCoshNaN, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testSinMin, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest#testCentroid, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.InvalidMatrixExceptionTest#testConstructorMessage, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewBisectionSolverValid, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.transform.FastCosineTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testAEqualQR, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testNumeratorFormat, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testMath274, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnMatrixLarge, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetRealFormatNull, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaNegative, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstLegendrePolynomials, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowVectorLarge, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSecureHex, [Manual]TestMethod=org.apache.commons.math.random.UniformRandomGeneratorTest#testMeanAndStandardDeviation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testMismatch, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testCopy, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.estimation.EstimatedParameterTest#testBound, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#test8Points, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testDefault, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.transform.FastSineTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddNullYSampleData, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAbsentOnExisting, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testControlParameters, [Manual]TestMethod=org.apache.commons.math.genetics.TournamentSelectionTest#testSelect, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testPopulation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregation, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testForgottenImaginaryCharacter, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormat, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testRootEndpoints, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackWatson, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDoubleConstructor, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryFormatNull, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#polynomial, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testModelWithNoArtificialVars, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testSingular, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsImaginaryDifference, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackFreudensteinRoth, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDivide, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveSingle, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAbs, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testAdaptor, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares3, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testMeanAccessors, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testGetArgument, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares1, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testLeastSquares2, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullDoubleArray, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testToString, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBox3Dimensional, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideNaNInf, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testExamples, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension4WithoutSplit, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtNaN, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testGetStandardDeviation, [Manual]TestMethod=org.apache.commons.math.linear.MatrixIndexExceptionTest#testConstructorMessage, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testConstructorDouble, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsRemovedTiesSequential, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testNumeratorFormat, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAbsentOnExisting, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMatricesValues2, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsClass, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollision2, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCoshInf, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMoreColumns, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultiple, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetAbsoluteAccuracy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSingleton, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testLongFormat, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#notEnoughData, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testCumulativeProbabilityAgaintStackOverflow, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testOneWayAnovaUtils, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testPowell, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL2DistanceDouble, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testLongly, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testHighPercentile, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveSin, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testNextAfter, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testSingular, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testGetValues, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonEqualCounts, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemoveFromEmpty, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testCoordinates, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollisions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAsinNaN, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorDouble, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSecureLong, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateResiduals, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testNaN, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testFractionConverter, [Manual]TestMethod=org.apache.commons.math.util.BigRealFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testPAEqualLU, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testMean, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MedianTest#testCopy, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAdd, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaNegativePositive, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#checkClone, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtInf, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAbsInfinite, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataWithSampleSizeMismatch, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#exceedMaxEvaluations, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testStdErrorConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatImproper, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGetWithExpectedSize, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testFloat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsNaN, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_realPartZero, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtImaginaryZero, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextFloat, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testPaired, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testImpossibleSerialization, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testZeroImaginary, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testParameterAccessors, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testNextDigestFail, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseProperInvalidMinus, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeBoth, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testDataInOut, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testMax, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testInitialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testNonInvertible, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveXY, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testModelsMerging, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testToString, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowInf, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest#testValues, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#noReset, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.transform.FastCosineTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryCharacterNull, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanh, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testMath209, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testQuinticMax, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemove2, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtRealNegative, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testUOrthogonal, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testBBiDiagonal, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testpowNull, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetMatrixLarge, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testDegenerateInverseCumulativeProbability, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#polynomial, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testGetReducedFraction, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testMatricesValues2, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseInteger, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testStaticFormatRealVectorImpl, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackMeyer, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSerial, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveNanPositive, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetMaximalIterationCount, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testTTriDiagonal, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveAccuracyNull, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConstructorNaN, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateBigIdentityMatrix, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositivePositive, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest#testMeanAndCorrelation, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testConcurrentModification, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackRosenbrok, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignFloat, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignDouble, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseInvalid, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testVectorTwoPairs, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testExtremeValues, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testThreshold, [Manual]TestMethod=org.apache.commons.math.geometry.RotationOrderTest#testName, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorShort, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testLargeMeanCumulativeProbability, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutKeysWithCollisions, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testStaticFormatComplex, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testAEqualQTQt, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSinh, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testGetImaginaryFormat, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanNaN, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testInducedPermutation, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnVectorLarge, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaPValue, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#dimensionCheck, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructorCause, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackRosenbrok, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testAdd, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSample, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseZeroReal, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.linear.CholeskySolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testBigMatrix, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testRank, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddXSampleData, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testAEqualVDVt, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testSingularities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullCovarianceData, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testDoubleFormat, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testFactorialFail, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testQTOrthogonal, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testSimplistic, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testAbs, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testSetAlpha, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testLaguerreDifferentials, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testTrace, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNormInf, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testMakotoNishimura, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testRedundantSolvable, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLogNaN, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatImproperNegative, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#testNoIntInverse, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryCharacterEmpty, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testBinIndexOverflow, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testEpsilonLimitConstructor, [Manual]TestMethod=org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaFValue, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testFactorial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testLegendreDifferentials, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatNegative, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentSizes, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testQuinticMin, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackJennrichSampson, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateTwoSegment, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testBoundParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackFreudensteinRoth, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextPoissonLargeMean, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateResiduals, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorByte, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testAEqualLLT, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutKeysWithCollision2, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testComposeInverse, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGetWithExpectedSize, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBrownDennis, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSingular, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.InteractionTest#testInteraction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testBasicStats, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testAddAndCheckLong, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testCopy, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextPoissonLargeMean, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSecureHex, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextHex, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testFormatNumber, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.util.BigRealFieldTest#testZero, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeBoth, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testDiscard, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testAdd1000, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testSmallDf, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testWalk, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaZeroPositive, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testSkewAndKurtosis, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnFieldMatrix, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testIntegerOverflow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testPopulation, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testIncreasingRobustnessItersIncreasesSmoothnessWithOutliers, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinInf, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaNanPositive, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeReal, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testFunctionEvaluationExceptions, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBracketEndpointRoot, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGetWith0ExpectedSize, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MedianTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testContainsTransformer, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testMatricesValues5, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testMatricesValues3, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest#testTestPositive, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testControlParameters, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAsin, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowVectorLarge, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseInvalidDenominator, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testLinear, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testHat, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_NAN_Inf, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveZero, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsAndInfs, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testAxisAngle, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetRelativeAccuracy, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstHermitePolynomials, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testPaired, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testRevert, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testSerial, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testLargeModel, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testVectorialProducts, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math.genetics.OnePointCrossoverTest#testCrossover, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemove, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testMath283, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowMatrixLarge, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#exceedMaxEvaluations, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testConditionNumber, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testParameters, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testStaticFormatVector3D, [Manual]TestMethod=org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureInt, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations#test, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSolveSingularityErrors, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.NewtonSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonBadCounts, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testPercentileSetter, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testCoshNaN, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowNaNExponent, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testSumLog, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.transform.FastSineTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformNull, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest#testNoOptimum, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testAdd, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowZero, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseProper, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testSingleVariableAndConstraint, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistance1, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveNegativePositive, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#interpolationAtBounds, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testCopy, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveObsFromEmpty, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackMeyer, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testFloatValue, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivide, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testGetAbsent, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNextIntN, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testPPermutation, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateNoFailures, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testUnsorted, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.estimation.WeightedMeasurementTest#testIgnored, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testFloatValue, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testSmallDegreesOfFreedom, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testExpm1Function2, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAtan, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositivePositive, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutOnExisting, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBard, [Manual]TestMethod=org.apache.commons.math.random.MersenneTwisterTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testLTTransposed, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testNoAccessBelowDiagonal, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testRank, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testAEqualUSVt, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testSerial, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#test2DData, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateThreeSegment, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testSkewAndKurtosis, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testMean, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testConditionNumber, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testCopy, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testMutators, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.util.ContinuedFractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testDifferenceStats, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testInitialGuess, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSin, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateFullSample, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMath199, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testExamples, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testExpNaN, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetFunctionValueAccuracy, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testAddition, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testIntValue, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testHighDegreeLegendre, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#test1PercentError, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackJennrichSampson, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.util.BigRealTest#testBigDecimalValue, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testInvertible, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testNoDenseOutput, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullFile, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testPow, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testRemoval, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnMatrixLarge, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexIllegalModulus, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryCharacterNull, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNoComponents, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackWatson, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testIdentity, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testLongly, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayPatternArguments, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testCopy, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testNextDigest, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testGridTooFine, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testIterator, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testQuadratic, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testNorm, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testPaired, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testPrintStackTrace, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testConcurrentModification, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseProperNegative, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testEmptyData, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsRealDifference, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultipleToEmpty, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressandVariance, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testAddAndCheck, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf2576, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullYSampleData, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testMedian, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testArrayHash, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testBeta, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLcm, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#dimensionCheck, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorFloat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testNaN, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoad, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveZero, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testZeroReal, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanInf, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testForgottenImaginaryCharacter, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testDoubleDimension, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanhInf, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testCounts, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testSolve, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParameters, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testSetNumberOfElements, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackKowalikOsborne, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testEigenvectors, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testLargeMeanInverseCumulativeProbability, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParse, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanhNaN, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSubAndCheckErrorMessage, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testCopy, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testAbs, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testMinEndpoints, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseProperNegative, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEquals, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testNexFail, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testFormatNumber, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testHadamard, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformBigDecimal, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testFunctionEvaluationExceptions, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testGetRealFormat, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtRealPositive, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultiplePastEmpty, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLog, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveNan, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignLong, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testUnequalSizeArguments, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testBasicStats, [Manual]TestMethod=org.apache.commons.math.random.GaussianRandomGeneratorTest#testMeanAndStandardDeviation, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemoveFromEmpty, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testMulAndCheck, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testGeometricMean, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testAdd, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNegate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficient, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinhInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testQuinticFunction2, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testZeroReal, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testSmallError, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testPPermutation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL1DistanceDouble, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#test20090720, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testUnboundedSolution, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewSecantSolverValid, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testSumSq, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryFormatNull, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testNoError, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testShuffledStatistics, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAcos, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemoveAbsent, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeReal, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math.ode.sampling.StepNormalizerTest#testBeforeEnd, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformInteger, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConjugateInfiinite, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testCopy, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testSimplexSolver, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testStaticFormatRealVectorImpl, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseInvalidDenominator, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testAddElementRolling, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddXSampleData, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSeveralBlocks, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testPaseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest#testDerivativesConsistency, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArray, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanCritical, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testApplyInverseTo, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveNan, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testMeanAndCovariance, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testExp, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testMin, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testGetFromEmpty, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParameters, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveNegative, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructorCause, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testConstructorDouble, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#test4Points, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformObject, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemove, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testStaticFormatVector3D, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowNaNBase, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testPAEqualLU, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testRandomPermutation, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testPerfectNegative, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testSwiss, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.genetics.ChromosomeTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaNan, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNoComponents, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSinhNaN, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextHex, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testBadEndpoints, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testcreateFieldIdentityMatrix, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextBoolean, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testLongValue, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testPopulationSize, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeBoth, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testAdd, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testModes, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testfirstDerivativeComparison, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testNaNs, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testLongValue, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math.ArgumentOutsideDomainExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFieldTest#testOne, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#test3Points, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackHelicalValley, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEqualsWithAllowedDelta, [Manual]TestMethod=org.apache.commons.math.stat.data.LewTest#testCertifiedValues, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.NewtonSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testPowell, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testIncreasingBandwidthIncreasesSmoothness, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testTrace, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testDenominatorFormat, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testMaxEvaluations, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testStdErrorConsistency, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.stat.CertifiedDataTest#testDescriptiveStatistics, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testUnderdetermined, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, [Manual]TestMethod=org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testExactIntegration, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackLinearRank1, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testAEqualUSVt, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFieldTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testDoubleLoad, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLInfDistanceDouble, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBard, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNonStrictlyIncreasing, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testSubtraction, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf0, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayArgumentCause, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testNegate, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackChebyquad, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowMatrixLarge, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testEmptyReplayFile], testFrameworkStrategy=fr.spoonlabs.flacoco.core.coverage.framework.JUnit4Strategy@61526469}
Path to runner Classes: /Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
Tests found: 2059
Tests executed: 2059
Suspicious: 1 line org.apache.commons.math.optimization.linear.SimplexSolver l: 169, susp 0.5773502691896258
Suspicious: 2 line org.apache.commons.math.optimization.linear.SimplexTableau l: 308, susp 0.5773502691896258
Suspicious: 3 line org.apache.commons.math.optimization.linear.SimplexSolver l: 191, susp 0.35355339059327373
Suspicious: 4 line org.apache.commons.math.optimization.linear.SimplexSolver l: 152, susp 0.3333333333333333
Suspicious: 5 line org.apache.commons.math.optimization.linear.SimplexTableau l: 297, susp 0.30151134457776363
Suspicious: 6 line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 92, susp 0.2886751345948129
Suspicious: 7 line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 106, susp 0.2886751345948129
Suspicious: 8 line org.apache.commons.math.optimization.linear.SimplexSolver l: 155, susp 0.2886751345948129
Suspicious: 9 line org.apache.commons.math.optimization.linear.SimplexSolver l: 193, susp 0.2886751345948129
Suspicious: 10 line org.apache.commons.math.optimization.linear.SimplexTableau l: 282, susp 0.2886751345948129
Suspicious: 11 line org.apache.commons.math.optimization.linear.SimplexTableau l: 340, susp 0.2886751345948129
Suspicious: 12 line org.apache.commons.math.optimization.linear.SimplexTableau l: 341, susp 0.2886751345948129
Suspicious: 13 line org.apache.commons.math.optimization.linear.SimplexTableau l: 342, susp 0.2886751345948129
Suspicious: 14 line org.apache.commons.math.optimization.linear.SimplexTableau l: 343, susp 0.2886751345948129
Suspicious: 15 line org.apache.commons.math.optimization.linear.SimplexTableau l: 344, susp 0.2886751345948129
Suspicious: 16 line org.apache.commons.math.optimization.linear.SimplexTableau l: 345, susp 0.2886751345948129
Suspicious: 17 line org.apache.commons.math.optimization.linear.SimplexTableau l: 346, susp 0.2886751345948129
Suspicious: 18 line org.apache.commons.math.optimization.linear.SimplexTableau l: 351, susp 0.2886751345948129
Suspicious: 19 line org.apache.commons.math.optimization.linear.SimplexTableau l: 352, susp 0.2886751345948129
Suspicious: 20 line org.apache.commons.math.optimization.linear.SimplexTableau l: 353, susp 0.2886751345948129
Suspicious: 21 line org.apache.commons.math.optimization.linear.SimplexTableau l: 357, susp 0.2886751345948129
Suspicious: 22 line org.apache.commons.math.optimization.linear.SimplexTableau l: 458, susp 0.2886751345948129
Suspicious: 23 line org.apache.commons.math.optimization.linear.SimplexTableau l: 481, susp 0.2886751345948129
Suspicious: 24 line org.apache.commons.math.optimization.linear.SimplexSolver l: 147, susp 0.2773500981126146
Suspicious: 25 line org.apache.commons.math.optimization.linear.SimplexSolver l: 150, susp 0.2773500981126146
Suspicious: 26 line org.apache.commons.math.optimization.linear.SimplexSolver l: 151, susp 0.2773500981126146
Suspicious: 27 line org.apache.commons.math.optimization.linear.SimplexTableau l: 170, susp 0.2773500981126146
Suspicious: 28 line org.apache.commons.math.optimization.linear.SimplexSolver l: 188, susp 0.2773500981126146
Suspicious: 29 line org.apache.commons.math.optimization.linear.SimplexSolver l: 189, susp 0.2773500981126146
Suspicious: 30 line org.apache.commons.math.optimization.linear.SimplexSolver l: 190, susp 0.2773500981126146
Suspicious: 31 line org.apache.commons.math.optimization.linear.SimplexSolver l: 42, susp 0.2672612419124244
Suspicious: 32 line org.apache.commons.math.optimization.linear.SimplexSolver l: 43, susp 0.2672612419124244
Suspicious: 33 line org.apache.commons.math.optimization.linear.SimplexSolver l: 49, susp 0.2672612419124244
Suspicious: 34 line org.apache.commons.math.optimization.linear.SimplexSolver l: 50, susp 0.2672612419124244
Suspicious: 35 line org.apache.commons.math.optimization.linear.SimplexSolver l: 51, susp 0.2672612419124244
Suspicious: 36 line org.apache.commons.math.optimization.linear.SimplexSolver l: 59, susp 0.2672612419124244
Suspicious: 37 line org.apache.commons.math.optimization.linear.SimplexSolver l: 60, susp 0.2672612419124244
Suspicious: 38 line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 61, susp 0.2672612419124244
Suspicious: 39 line org.apache.commons.math.optimization.linear.SimplexSolver l: 61, susp 0.2672612419124244
Suspicious: 40 line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 62, susp 0.2672612419124244
Suspicious: 41 line org.apache.commons.math.optimization.linear.SimplexSolver l: 62, susp 0.2672612419124244
Suspicious: 42 line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 63, susp 0.2672612419124244
Suspicious: 43 line org.apache.commons.math.optimization.linear.SimplexSolver l: 63, susp 0.2672612419124244
Suspicious: 44 line org.apache.commons.math.optimization.linear.SimplexSolver l: 64, susp 0.2672612419124244
Suspicious: 45 line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 67, susp 0.2672612419124244
Suspicious: 46 line org.apache.commons.math.optimization.linear.SimplexSolver l: 67, susp 0.2672612419124244
Suspicious: 47 line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 68, susp 0.2672612419124244
Suspicious: 48 line org.apache.commons.math.optimization.linear.SimplexSolver l: 77, susp 0.2672612419124244
Suspicious: 49 line org.apache.commons.math.optimization.linear.SimplexSolver l: 78, susp 0.2672612419124244
Suspicious: 50 line org.apache.commons.math.optimization.linear.SimplexSolver l: 79, susp 0.2672612419124244
Suspicious: 51 line org.apache.commons.math.optimization.linear.SimplexSolver l: 80, susp 0.2672612419124244
Suspicious: 52 line org.apache.commons.math.optimization.linear.SimplexSolver l: 81, susp 0.2672612419124244
Suspicious: 53 line org.apache.commons.math.optimization.linear.SimplexSolver l: 82, susp 0.2672612419124244
Suspicious: 54 line org.apache.commons.math.optimization.linear.SimplexSolver l: 83, susp 0.2672612419124244
Suspicious: 55 line org.apache.commons.math.optimization.linear.SimplexSolver l: 84, susp 0.2672612419124244
Suspicious: 56 line org.apache.commons.math.optimization.linear.SimplexSolver l: 85, susp 0.2672612419124244
Suspicious: 57 line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 86, susp 0.2672612419124244
Suspicious: 58 line org.apache.commons.math.optimization.linear.SimplexSolver l: 86, susp 0.2672612419124244
Suspicious: 59 line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 89, susp 0.2672612419124244
Suspicious: 60 line org.apache.commons.math.optimization.linear.SimplexSolver l: 90, susp 0.2672612419124244
Suspicious: 61 line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 98, susp 0.2672612419124244
Suspicious: 62 line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 99, susp 0.2672612419124244
Suspicious: 63 line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 100, susp 0.2672612419124244
Suspicious: 64 line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 101, susp 0.2672612419124244
Suspicious: 65 line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 103, susp 0.2672612419124244
Suspicious: 66 line org.apache.commons.math.optimization.linear.SimplexSolver l: 103, susp 0.2672612419124244
Suspicious: 67 line org.apache.commons.math.optimization.linear.SimplexSolver l: 105, susp 0.2672612419124244
Suspicious: 68 line org.apache.commons.math.optimization.linear.SimplexSolver l: 106, susp 0.2672612419124244
Suspicious: 69 line org.apache.commons.math.optimization.linear.SimplexSolver l: 107, susp 0.2672612419124244
Suspicious: 70 line org.apache.commons.math.optimization.linear.SimplexSolver l: 112, susp 0.2672612419124244
Suspicious: 71 line org.apache.commons.math.optimization.linear.SimplexSolver l: 113, susp 0.2672612419124244
Suspicious: 72 line org.apache.commons.math.optimization.linear.SimplexSolver l: 116, susp 0.2672612419124244
Suspicious: 73 line org.apache.commons.math.optimization.linear.SimplexSolver l: 117, susp 0.2672612419124244
Suspicious: 74 line org.apache.commons.math.optimization.linear.SimplexSolver l: 118, susp 0.2672612419124244
Suspicious: 75 line org.apache.commons.math.optimization.linear.SimplexSolver l: 119, susp 0.2672612419124244
Suspicious: 76 line org.apache.commons.math.optimization.linear.SimplexSolver l: 122, susp 0.2672612419124244
Suspicious: 77 line org.apache.commons.math.optimization.linear.SimplexSolver l: 168, susp 0.2672612419124244
Suspicious: 78 line org.apache.commons.math.optimization.linear.SimplexSolver l: 186, susp 0.2672612419124244
Suspicious: 79 line org.apache.commons.math.optimization.linear.SimplexTableau l: 307, susp 0.2672612419124244
Suspicious: 80 line org.apache.commons.math.optimization.linear.SimplexTableau l: 370, susp 0.2672612419124244
Suspicious: 81 line org.apache.commons.math.optimization.linear.SimplexTableau l: 371, susp 0.2672612419124244
Suspicious: 82 line org.apache.commons.math.optimization.linear.SimplexTableau l: 373, susp 0.2672612419124244
Suspicious: 83 line org.apache.commons.math.optimization.linear.SimplexTableau l: 497, susp 0.2672612419124244
Suspicious: 84 line org.apache.commons.math.optimization.linear.SimplexTableau l: 177, susp 0.2581988897471611
Suspicious: 85 line org.apache.commons.math.util.MathUtils l: 367, susp 0.2581988897471611
Suspicious: 86 line org.apache.commons.math.util.MathUtils l: 368, susp 0.2581988897471611
Suspicious: 87 line org.apache.commons.math.util.MathUtils l: 369, susp 0.2581988897471611
Suspicious: 88 line org.apache.commons.math.util.MathUtils l: 370, susp 0.2581988897471611
Suspicious: 89 line org.apache.commons.math.util.MathUtils l: 372, susp 0.2581988897471611
Suspicious: 90 line org.apache.commons.math.optimization.linear.SimplexTableau l: 449, susp 0.2581988897471611
Suspicious: 91 line org.apache.commons.math.optimization.linear.SimplexTableau l: 296, susp 0.25
Suspicious: 92 line org.apache.commons.math.optimization.linear.SimplexTableau l: 433, susp 0.25
Suspicious: 93 line org.apache.commons.math.linear.ArrayRealVector l: 884, susp 0.25
Suspicious: 94 line org.apache.commons.math.linear.ArrayRealVector l: 885, susp 0.25
Suspicious: 95 line org.apache.commons.math.linear.ArrayRealVector l: 886, susp 0.25
Suspicious: 96 line org.apache.commons.math.linear.ArrayRealVector l: 887, susp 0.25
Suspicious: 97 line org.apache.commons.math.linear.ArrayRealVector l: 889, susp 0.25
Suspicious: 98 line org.apache.commons.math.optimization.linear.LinearConstraint l: 81, susp 0.24253562503633297
Suspicious: 99 line org.apache.commons.math.optimization.linear.LinearConstraint l: 82, susp 0.24253562503633297
Suspicious: 100 line org.apache.commons.math.optimization.linear.SimplexTableau l: 291, susp 0.24253562503633297
Suspicious: 101 line org.apache.commons.math.optimization.linear.SimplexTableau l: 292, susp 0.24253562503633297
Suspicious: 102 line org.apache.commons.math.optimization.linear.SimplexTableau l: 293, susp 0.24253562503633297
Suspicious: 103 line org.apache.commons.math.optimization.linear.SimplexTableau l: 294, susp 0.24253562503633297
Suspicious: 104 line org.apache.commons.math.optimization.linear.SimplexTableau l: 295, susp 0.24253562503633297
Suspicious: 105 line org.apache.commons.math.optimization.linear.SimplexTableau l: 300, susp 0.24253562503633297
Suspicious: 106 line org.apache.commons.math.linear.ArrayRealVector l: 338, susp 0.24253562503633297
Suspicious: 107 line org.apache.commons.math.linear.ArrayRealVector l: 339, susp 0.24253562503633297
Suspicious: 108 line org.apache.commons.math.linear.ArrayRealVector l: 340, susp 0.24253562503633297
Suspicious: 109 line org.apache.commons.math.linear.ArrayRealVector l: 342, susp 0.24253562503633297
Suspicious: 110 line org.apache.commons.math.optimization.linear.SimplexTableau l: 387, susp 0.24253562503633297
Suspicious: 111 line org.apache.commons.math.optimization.linear.SimplexTableau l: 388, susp 0.24253562503633297
Suspicious: 112 line org.apache.commons.math.optimization.linear.SimplexTableau l: 389, susp 0.24253562503633297
Suspicious: 113 line org.apache.commons.math.optimization.linear.SimplexTableau l: 391, susp 0.24253562503633297
Suspicious: 114 line org.apache.commons.math.optimization.linear.SimplexTableau l: 398, susp 0.24253562503633297
Suspicious: 115 line org.apache.commons.math.optimization.linear.SimplexTableau l: 406, susp 0.24253562503633297
Suspicious: 116 line org.apache.commons.math.optimization.linear.SimplexTableau l: 415, susp 0.24253562503633297
Suspicious: 117 line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 58, susp 0.23570226039551587
Suspicious: 118 line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 59, susp 0.23570226039551587
Suspicious: 119 line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 65, susp 0.23570226039551587
Suspicious: 120 line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 66, susp 0.23570226039551587
Suspicious: 121 line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 67, susp 0.23570226039551587
Suspicious: 122 line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 68, susp 0.23570226039551587
Suspicious: 123 line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 75, susp 0.23570226039551587
Suspicious: 124 line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 83, susp 0.23570226039551587
Suspicious: 125 line org.apache.commons.math.optimization.linear.LinearConstraint l: 99, susp 0.23570226039551587
Suspicious: 126 line org.apache.commons.math.optimization.linear.LinearConstraint l: 100, susp 0.23570226039551587
Suspicious: 127 line org.apache.commons.math.optimization.linear.LinearConstraint l: 101, susp 0.23570226039551587
Suspicious: 128 line org.apache.commons.math.optimization.linear.LinearConstraint l: 102, susp 0.23570226039551587
Suspicious: 129 line org.apache.commons.math.optimization.linear.LinearConstraint l: 103, susp 0.23570226039551587
Suspicious: 130 line org.apache.commons.math.optimization.linear.SimplexTableau l: 104, susp 0.23570226039551587
Suspicious: 131 line org.apache.commons.math.optimization.linear.SimplexTableau l: 105, susp 0.23570226039551587
Suspicious: 132 line org.apache.commons.math.optimization.linear.SimplexTableau l: 106, susp 0.23570226039551587
Suspicious: 133 line org.apache.commons.math.optimization.linear.SimplexTableau l: 107, susp 0.23570226039551587
Suspicious: 134 line org.apache.commons.math.optimization.linear.SimplexTableau l: 108, susp 0.23570226039551587
Suspicious: 135 line org.apache.commons.math.optimization.linear.SimplexTableau l: 109, susp 0.23570226039551587
Suspicious: 136 line org.apache.commons.math.optimization.linear.SimplexTableau l: 110, susp 0.23570226039551587
Suspicious: 137 line org.apache.commons.math.optimization.linear.SimplexTableau l: 111, susp 0.23570226039551587
Suspicious: 138 line org.apache.commons.math.optimization.linear.SimplexTableau l: 112, susp 0.23570226039551587
Suspicious: 139 line org.apache.commons.math.optimization.linear.SimplexTableau l: 113, susp 0.23570226039551587
Suspicious: 140 line org.apache.commons.math.optimization.linear.SimplexTableau l: 114, susp 0.23570226039551587
Suspicious: 141 line org.apache.commons.math.optimization.linear.SimplexTableau l: 115, susp 0.23570226039551587
Suspicious: 142 line org.apache.commons.math.optimization.linear.SimplexTableau l: 116, susp 0.23570226039551587
Suspicious: 143 line org.apache.commons.math.optimization.linear.SimplexTableau l: 126, susp 0.23570226039551587
Suspicious: 144 line org.apache.commons.math.optimization.linear.SimplexTableau l: 127, susp 0.23570226039551587
Suspicious: 145 line org.apache.commons.math.optimization.linear.SimplexTableau l: 128, susp 0.23570226039551587
Suspicious: 146 line org.apache.commons.math.optimization.linear.SimplexTableau l: 129, susp 0.23570226039551587
Suspicious: 147 line org.apache.commons.math.optimization.linear.SimplexTableau l: 130, susp 0.23570226039551587
Suspicious: 148 line org.apache.commons.math.optimization.linear.SimplexTableau l: 133, susp 0.23570226039551587
Suspicious: 149 line org.apache.commons.math.optimization.linear.SimplexTableau l: 136, susp 0.23570226039551587
Suspicious: 150 line org.apache.commons.math.optimization.linear.SimplexTableau l: 137, susp 0.23570226039551587
Suspicious: 151 line org.apache.commons.math.optimization.linear.SimplexTableau l: 138, susp 0.23570226039551587
Suspicious: 152 line org.apache.commons.math.optimization.linear.SimplexTableau l: 139, susp 0.23570226039551587
Suspicious: 153 line org.apache.commons.math.optimization.linear.SimplexTableau l: 140, susp 0.23570226039551587
Suspicious: 154 line org.apache.commons.math.optimization.linear.SimplexTableau l: 141, susp 0.23570226039551587
Suspicious: 155 line org.apache.commons.math.optimization.linear.SimplexTableau l: 142, susp 0.23570226039551587
Suspicious: 156 line org.apache.commons.math.optimization.linear.SimplexTableau l: 144, susp 0.23570226039551587
Suspicious: 157 line org.apache.commons.math.optimization.linear.SimplexTableau l: 150, susp 0.23570226039551587
Suspicious: 158 line org.apache.commons.math.optimization.linear.SimplexTableau l: 151, susp 0.23570226039551587
Suspicious: 159 line org.apache.commons.math.optimization.linear.SimplexTableau l: 152, susp 0.23570226039551587
Suspicious: 160 line org.apache.commons.math.optimization.linear.SimplexTableau l: 153, susp 0.23570226039551587
Suspicious: 161 line org.apache.commons.math.optimization.linear.SimplexTableau l: 154, susp 0.23570226039551587
Suspicious: 162 line org.apache.commons.math.optimization.linear.SimplexTableau l: 157, susp 0.23570226039551587
Suspicious: 163 line org.apache.commons.math.optimization.linear.SimplexTableau l: 160, susp 0.23570226039551587
Suspicious: 164 line org.apache.commons.math.optimization.linear.SimplexTableau l: 166, susp 0.23570226039551587
Suspicious: 165 line org.apache.commons.math.optimization.linear.LinearConstraint l: 168, susp 0.23570226039551587
Suspicious: 166 line org.apache.commons.math.optimization.linear.SimplexTableau l: 169, susp 0.23570226039551587
Suspicious: 167 line org.apache.commons.math.optimization.linear.LinearConstraint l: 176, susp 0.23570226039551587
Suspicious: 168 line org.apache.commons.math.optimization.linear.SimplexTableau l: 176, susp 0.23570226039551587
Suspicious: 169 line org.apache.commons.math.optimization.linear.SimplexTableau l: 183, susp 0.23570226039551587
Suspicious: 170 line org.apache.commons.math.optimization.linear.LinearConstraint l: 184, susp 0.23570226039551587
Suspicious: 171 line org.apache.commons.math.optimization.linear.SimplexTableau l: 190, susp 0.23570226039551587
Suspicious: 172 line org.apache.commons.math.optimization.linear.SimplexTableau l: 198, susp 0.23570226039551587
Suspicious: 173 line org.apache.commons.math.optimization.linear.SimplexTableau l: 199, susp 0.23570226039551587
Suspicious: 174 line org.apache.commons.math.optimization.linear.SimplexTableau l: 200, susp 0.23570226039551587
Suspicious: 175 line org.apache.commons.math.optimization.linear.SimplexTableau l: 201, susp 0.23570226039551587
Suspicious: 176 line org.apache.commons.math.optimization.linear.SimplexTableau l: 202, susp 0.23570226039551587
Suspicious: 177 line org.apache.commons.math.optimization.linear.SimplexTableau l: 211, susp 0.23570226039551587
Suspicious: 178 line org.apache.commons.math.optimization.linear.SimplexTableau l: 216, susp 0.23570226039551587
Suspicious: 179 line org.apache.commons.math.optimization.linear.SimplexTableau l: 217, susp 0.23570226039551587
Suspicious: 180 line org.apache.commons.math.optimization.linear.SimplexTableau l: 225, susp 0.23570226039551587
Suspicious: 181 line org.apache.commons.math.optimization.linear.SimplexTableau l: 234, susp 0.23570226039551587
Suspicious: 182 line org.apache.commons.math.optimization.linear.SimplexTableau l: 235, susp 0.23570226039551587
Suspicious: 183 line org.apache.commons.math.optimization.linear.SimplexTableau l: 236, susp 0.23570226039551587
Suspicious: 184 line org.apache.commons.math.optimization.linear.SimplexTableau l: 237, susp 0.23570226039551587
Suspicious: 185 line org.apache.commons.math.optimization.linear.SimplexTableau l: 239, susp 0.23570226039551587
Suspicious: 186 line org.apache.commons.math.optimization.linear.SimplexTableau l: 240, susp 0.23570226039551587
Suspicious: 187 line org.apache.commons.math.optimization.linear.SimplexTableau l: 248, susp 0.23570226039551587
Suspicious: 188 line org.apache.commons.math.optimization.linear.SimplexTableau l: 252, susp 0.23570226039551587
Suspicious: 189 line org.apache.commons.math.optimization.linear.SimplexTableau l: 331, susp 0.23570226039551587
Suspicious: 190 line org.apache.commons.math.optimization.linear.SimplexTableau l: 332, susp 0.23570226039551587
Suspicious: 191 line org.apache.commons.math.util.MathUtils l: 411, susp 0.22941573387056174
Suspicious: 192 line org.apache.commons.math.linear.ArrayRealVector l: 854, susp 0.1643989873053573
Suspicious: 193 line org.apache.commons.math.optimization.RealPointValuePair l: 48, susp 0.15811388300841897
Suspicious: 194 line org.apache.commons.math.optimization.RealPointValuePair l: 49, susp 0.15811388300841897
Suspicious: 195 line org.apache.commons.math.optimization.RealPointValuePair l: 50, susp 0.15811388300841897
Suspicious: 196 line org.apache.commons.math.optimization.RealPointValuePair l: 51, susp 0.15811388300841897
Suspicious: 197 line org.apache.commons.math.optimization.RealPointValuePair l: 86, susp 0.15811388300841897
Suspicious: 198 line org.apache.commons.math.linear.ArrayRealVector l: 1292, susp 0.15811388300841897
Suspicious: 199 line org.apache.commons.math.linear.ArrayRealVector l: 1287, susp 0.15617376188860607
Suspicious: 200 line org.apache.commons.math.util.MathUtils l: 395, susp 0.09901475429766744
Suspicious: 201 line org.apache.commons.math.linear.ArrayRealVector l: 1157, susp 0.09805806756909202
Suspicious: 202 line org.apache.commons.math.linear.ArrayRealVector l: 77, susp 0.08770580193070293
Suspicious: 203 line org.apache.commons.math.linear.ArrayRealVector l: 78, susp 0.08770580193070293
Suspicious: 204 line org.apache.commons.math.linear.ArrayRealVector l: 79, susp 0.08770580193070293
Suspicious: 205 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 354, susp 0.08137884587711594
Suspicious: 206 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 367, susp 0.07905694150420949
Suspicious: 207 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 372, susp 0.07905694150420949
Suspicious: 208 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 373, susp 0.07905694150420949
Suspicious: 209 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 94, susp 0.07602859212697055
Suspicious: 210 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 95, susp 0.07602859212697055
Suspicious: 211 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 96, susp 0.07602859212697055
Suspicious: 212 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 314, susp 0.07580980435789034
Suspicious: 213 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 315, susp 0.07580980435789034
Suspicious: 214 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 320, susp 0.07580980435789034
Suspicious: 215 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 325, susp 0.07580980435789034
Suspicious: 216 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 326, susp 0.07580980435789034
Suspicious: 217 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 330, susp 0.07580980435789034
Suspicious: 218 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 331, susp 0.07580980435789034
Suspicious: 219 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 334, susp 0.07580980435789034
Suspicious: 220 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 335, susp 0.07580980435789034
Suspicious: 221 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 336, susp 0.07580980435789034
Suspicious: 222 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 341, susp 0.07580980435789034
Suspicious: 223 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 343, susp 0.07580980435789034
Suspicious: 224 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 347, susp 0.07580980435789034
Suspicious: 225 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 622, susp 0.07580980435789034
Suspicious: 226 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 623, susp 0.07580980435789034
Suspicious: 227 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 410, susp 0.06819943394704735
Suspicious: 228 line org.apache.commons.math.linear.Array2DRowRealMatrix l: 404, susp 0.06804138174397717
Suspicious: 229 line org.apache.commons.math.linear.AbstractRealMatrix l: 43, susp 0.0625
Suspicious: 230 line org.apache.commons.math.linear.AbstractRealMatrix l: 44, susp 0.0625
Suspicious: 231 line org.apache.commons.math.linear.AbstractRealMatrix l: 45, susp 0.0625
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 169, susp 0.5773502691896258
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 308, susp 0.5773502691896258
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 191, susp 0.35355339059327373
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 152, susp 0.3333333333333333
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 297, susp 0.30151134457776363
Suspicious:  line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 92, susp 0.2886751345948129
Suspicious:  line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 106, susp 0.2886751345948129
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 155, susp 0.2886751345948129
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 193, susp 0.2886751345948129
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 282, susp 0.2886751345948129
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 340, susp 0.2886751345948129
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 341, susp 0.2886751345948129
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 342, susp 0.2886751345948129
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 343, susp 0.2886751345948129
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 344, susp 0.2886751345948129
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 345, susp 0.2886751345948129
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 346, susp 0.2886751345948129
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 351, susp 0.2886751345948129
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 352, susp 0.2886751345948129
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 353, susp 0.2886751345948129
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 357, susp 0.2886751345948129
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 458, susp 0.2886751345948129
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 481, susp 0.2886751345948129
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 147, susp 0.2773500981126146
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 150, susp 0.2773500981126146
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 151, susp 0.2773500981126146
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 170, susp 0.2773500981126146
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 188, susp 0.2773500981126146
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 189, susp 0.2773500981126146
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 190, susp 0.2773500981126146
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 42, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 43, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 49, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 50, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 51, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 59, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 60, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 61, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 61, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 62, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 62, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 63, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 63, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 64, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 67, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 67, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 68, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 77, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 78, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 79, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 80, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 81, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 82, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 83, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 84, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 85, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 86, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 86, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 89, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 90, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 98, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 99, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 100, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 101, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.AbstractLinearOptimizer l: 103, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 103, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 105, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 106, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 107, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 112, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 113, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 116, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 117, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 118, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 119, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 122, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 168, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexSolver l: 186, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 307, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 370, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 371, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 373, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 497, susp 0.2672612419124244
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 177, susp 0.2581988897471611
Suspicious:  line org.apache.commons.math.util.MathUtils l: 367, susp 0.2581988897471611
Suspicious:  line org.apache.commons.math.util.MathUtils l: 368, susp 0.2581988897471611
Suspicious:  line org.apache.commons.math.util.MathUtils l: 369, susp 0.2581988897471611
Suspicious:  line org.apache.commons.math.util.MathUtils l: 370, susp 0.2581988897471611
Suspicious:  line org.apache.commons.math.util.MathUtils l: 372, susp 0.2581988897471611
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 449, susp 0.2581988897471611
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 296, susp 0.25
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 433, susp 0.25
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 884, susp 0.25
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 885, susp 0.25
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 886, susp 0.25
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 887, susp 0.25
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 889, susp 0.25
Suspicious:  line org.apache.commons.math.optimization.linear.LinearConstraint l: 81, susp 0.24253562503633297
Suspicious:  line org.apache.commons.math.optimization.linear.LinearConstraint l: 82, susp 0.24253562503633297
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 291, susp 0.24253562503633297
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 292, susp 0.24253562503633297
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 293, susp 0.24253562503633297
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 294, susp 0.24253562503633297
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 295, susp 0.24253562503633297
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 300, susp 0.24253562503633297
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 338, susp 0.24253562503633297
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 339, susp 0.24253562503633297
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 340, susp 0.24253562503633297
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 342, susp 0.24253562503633297
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 387, susp 0.24253562503633297
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 388, susp 0.24253562503633297
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 389, susp 0.24253562503633297
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 391, susp 0.24253562503633297
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 398, susp 0.24253562503633297
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 406, susp 0.24253562503633297
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 415, susp 0.24253562503633297
Suspicious:  line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 58, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 59, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 65, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 66, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 67, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 68, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 75, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.LinearObjectiveFunction l: 83, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.LinearConstraint l: 99, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.LinearConstraint l: 100, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.LinearConstraint l: 101, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.LinearConstraint l: 102, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.LinearConstraint l: 103, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 104, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 105, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 106, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 107, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 108, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 109, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 110, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 111, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 112, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 113, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 114, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 115, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 116, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 126, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 127, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 128, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 129, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 130, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 133, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 136, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 137, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 138, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 139, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 140, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 141, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 142, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 144, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 150, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 151, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 152, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 153, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 154, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 157, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 160, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 166, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.LinearConstraint l: 168, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 169, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.LinearConstraint l: 176, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 176, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 183, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.LinearConstraint l: 184, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 190, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 198, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 199, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 200, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 201, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 202, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 211, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 216, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 217, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 225, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 234, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 235, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 236, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 237, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 239, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 240, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 248, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 252, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 331, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.optimization.linear.SimplexTableau l: 332, susp 0.23570226039551587
Suspicious:  line org.apache.commons.math.util.MathUtils l: 411, susp 0.22941573387056174
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 854, susp 0.1643989873053573
Suspicious:  line org.apache.commons.math.optimization.RealPointValuePair l: 48, susp 0.15811388300841897
Suspicious:  line org.apache.commons.math.optimization.RealPointValuePair l: 49, susp 0.15811388300841897
Suspicious:  line org.apache.commons.math.optimization.RealPointValuePair l: 50, susp 0.15811388300841897
Suspicious:  line org.apache.commons.math.optimization.RealPointValuePair l: 51, susp 0.15811388300841897
Suspicious:  line org.apache.commons.math.optimization.RealPointValuePair l: 86, susp 0.15811388300841897
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 1292, susp 0.15811388300841897
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 1287, susp 0.15617376188860607
Suspicious:  line org.apache.commons.math.util.MathUtils l: 395, susp 0.09901475429766744
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 1157, susp 0.09805806756909202
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 77, susp 0.08770580193070293
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 78, susp 0.08770580193070293
Suspicious:  line org.apache.commons.math.linear.ArrayRealVector l: 79, susp 0.08770580193070293
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 354, susp 0.08137884587711594
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 367, susp 0.07905694150420949
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 372, susp 0.07905694150420949
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 373, susp 0.07905694150420949
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 94, susp 0.07602859212697055
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 95, susp 0.07602859212697055
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 96, susp 0.07602859212697055
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 314, susp 0.07580980435789034
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 315, susp 0.07580980435789034
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 320, susp 0.07580980435789034
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 325, susp 0.07580980435789034
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 326, susp 0.07580980435789034
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 330, susp 0.07580980435789034
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 331, susp 0.07580980435789034
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 334, susp 0.07580980435789034
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 335, susp 0.07580980435789034
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 336, susp 0.07580980435789034
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 341, susp 0.07580980435789034
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 343, susp 0.07580980435789034
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 347, susp 0.07580980435789034
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 622, susp 0.07580980435789034
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 623, susp 0.07580980435789034
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 410, susp 0.06819943394704735
Suspicious:  line org.apache.commons.math.linear.Array2DRowRealMatrix l: 404, susp 0.06804138174397717
Suspicious:  line org.apache.commons.math.linear.AbstractRealMatrix l: 43, susp 0.0625
Suspicious:  line org.apache.commons.math.linear.AbstractRealMatrix l: 44, susp 0.0625
Suspicious:  line org.apache.commons.math.linear.AbstractRealMatrix l: 45, susp 0.0625
Executing time Fault localization: 52 sec
Setting up the max to 524530 milliseconds (524 sec)
---- Initial suspicious size: 231
Creating variant 1
--ModifPoint:CtReturnImpl, suspValue 0.5773502691896258, line 169, file SimplexSolver.java
--ModifPoint:CtReturnImpl, suspValue 0.5773502691896258, line 308, file SimplexTableau.java
--ModifPoint:CtInvocationImpl, suspValue 0.35355339059327373, line 191, file SimplexSolver.java
--ModifPoint:CtReturnImpl, suspValue 0.3333333333333333, line 152, file SimplexSolver.java
--ModifPoint:CtReturnImpl, suspValue 0.30151134457776363, line 297, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.2886751345948129, line 92, file LinearObjectiveFunction.java
--ModifPoint:CtReturnImpl, suspValue 0.2886751345948129, line 106, file AbstractLinearOptimizer.java
--ModifPoint:CtReturnImpl, suspValue 0.2886751345948129, line 155, file SimplexSolver.java
--ModifPoint:CtReturnImpl, suspValue 0.2886751345948129, line 193, file SimplexSolver.java
--ModifPoint:CtReturnImpl, suspValue 0.2886751345948129, line 282, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.2886751345948129, line 340, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.2886751345948129, line 341, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.2886751345948129, line 342, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.2886751345948129, line 343, file SimplexTableau.java
--ModifPoint:CtForImpl, suspValue 0.2886751345948129, line 344, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.2886751345948129, line 345, file SimplexTableau.java
--ModifPoint:CtIfImpl, suspValue 0.2886751345948129, line 346, file SimplexTableau.java
--ModifPoint:CtInvocationImpl, suspValue 0.2886751345948129, line 351, file SimplexTableau.java
--ModifPoint:CtAssignmentImpl, suspValue 0.2886751345948129, line 352, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.2886751345948129, line 357, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.2886751345948129, line 458, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.2886751345948129, line 481, file SimplexTableau.java
--ModifPoint:CtIfImpl, suspValue 0.2773500981126146, line 147, file SimplexSolver.java
--ModifPoint:CtForImpl, suspValue 0.2773500981126146, line 150, file SimplexSolver.java
--ModifPoint:CtIfImpl, suspValue 0.2773500981126146, line 151, file SimplexSolver.java
--ModifPoint:CtAssignmentImpl, suspValue 0.2773500981126146, line 170, file SimplexTableau.java
--ModifPoint:CtInvocationImpl, suspValue 0.2773500981126146, line 188, file SimplexSolver.java
--ModifPoint:CtInvocationImpl, suspValue 0.2773500981126146, line 189, file SimplexSolver.java
--ModifPoint:CtWhileImpl, suspValue 0.2773500981126146, line 190, file SimplexSolver.java
--ModifPoint:CtInvocationImpl, suspValue 0.2672612419124244, line 42, file SimplexSolver.java
--ModifPoint:CtAssignmentImpl, suspValue 0.2672612419124244, line 50, file SimplexSolver.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.2672612419124244, line 59, file SimplexSolver.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.2672612419124244, line 60, file SimplexSolver.java
--ModifPoint:CtForImpl, suspValue 0.2672612419124244, line 61, file SimplexSolver.java
--ModifPoint:CtInvocationImpl, suspValue 0.2672612419124244, line 62, file AbstractLinearOptimizer.java
--ModifPoint:CtIfImpl, suspValue 0.2672612419124244, line 62, file SimplexSolver.java
--ModifPoint:CtAssignmentImpl, suspValue 0.2672612419124244, line 63, file SimplexSolver.java
--ModifPoint:CtAssignmentImpl, suspValue 0.2672612419124244, line 64, file SimplexSolver.java
--ModifPoint:CtAssignmentImpl, suspValue 0.2672612419124244, line 67, file AbstractLinearOptimizer.java
--ModifPoint:CtReturnImpl, suspValue 0.2672612419124244, line 67, file SimplexSolver.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.2672612419124244, line 77, file SimplexSolver.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.2672612419124244, line 78, file SimplexSolver.java
--ModifPoint:CtForImpl, suspValue 0.2672612419124244, line 79, file SimplexSolver.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.2672612419124244, line 80, file SimplexSolver.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.2672612419124244, line 81, file SimplexSolver.java
--ModifPoint:CtIfImpl, suspValue 0.2672612419124244, line 82, file SimplexSolver.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.2672612419124244, line 83, file SimplexSolver.java
--ModifPoint:CtIfImpl, suspValue 0.2672612419124244, line 84, file SimplexSolver.java
--ModifPoint:CtAssignmentImpl, suspValue 0.2672612419124244, line 85, file SimplexSolver.java
--ModifPoint:CtIfImpl, suspValue 0.2672612419124244, line 86, file AbstractLinearOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.2672612419124244, line 86, file SimplexSolver.java
--ModifPoint:CtReturnImpl, suspValue 0.2672612419124244, line 90, file SimplexSolver.java
--ModifPoint:CtAssignmentImpl, suspValue 0.2672612419124244, line 98, file AbstractLinearOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.2672612419124244, line 99, file AbstractLinearOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.2672612419124244, line 100, file AbstractLinearOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.2672612419124244, line 101, file AbstractLinearOptimizer.java
--ModifPoint:CtAssignmentImpl, suspValue 0.2672612419124244, line 103, file AbstractLinearOptimizer.java
--ModifPoint:CtInvocationImpl, suspValue 0.2672612419124244, line 103, file SimplexSolver.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.2672612419124244, line 105, file SimplexSolver.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.2672612419124244, line 106, file SimplexSolver.java
--ModifPoint:CtIfImpl, suspValue 0.2672612419124244, line 107, file SimplexSolver.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.2672612419124244, line 112, file SimplexSolver.java
--ModifPoint:CtInvocationImpl, suspValue 0.2672612419124244, line 113, file SimplexSolver.java
--ModifPoint:CtForImpl, suspValue 0.2672612419124244, line 116, file SimplexSolver.java
--ModifPoint:CtIfImpl, suspValue 0.2672612419124244, line 117, file SimplexSolver.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.2672612419124244, line 118, file SimplexSolver.java
--ModifPoint:CtInvocationImpl, suspValue 0.2672612419124244, line 119, file SimplexSolver.java
--ModifPoint:CtIfImpl, suspValue 0.2672612419124244, line 168, file SimplexSolver.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.2672612419124244, line 186, file SimplexSolver.java
--ModifPoint:CtIfImpl, suspValue 0.2672612419124244, line 307, file SimplexTableau.java
--ModifPoint:CtForImpl, suspValue 0.2672612419124244, line 370, file SimplexTableau.java
--ModifPoint:CtInvocationImpl, suspValue 0.2672612419124244, line 371, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.2672612419124244, line 497, file SimplexTableau.java
--ModifPoint:CtIfImpl, suspValue 0.2581988897471611, line 367, file MathUtils.java
--ModifPoint:CtReturnImpl, suspValue 0.2581988897471611, line 368, file MathUtils.java
--ModifPoint:CtIfImpl, suspValue 0.2581988897471611, line 369, file MathUtils.java
--ModifPoint:CtReturnImpl, suspValue 0.2581988897471611, line 370, file MathUtils.java
--ModifPoint:CtReturnImpl, suspValue 0.2581988897471611, line 372, file MathUtils.java
--ModifPoint:CtReturnImpl, suspValue 0.2581988897471611, line 449, file SimplexTableau.java
--ModifPoint:CtIfImpl, suspValue 0.25, line 296, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.25, line 433, file SimplexTableau.java
--ModifPoint:CtInvocationImpl, suspValue 0.25, line 884, file ArrayRealVector.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.25, line 885, file ArrayRealVector.java
--ModifPoint:CtForImpl, suspValue 0.25, line 886, file ArrayRealVector.java
--ModifPoint:CtOperatorAssignmentImpl, suspValue 0.25, line 887, file ArrayRealVector.java
--ModifPoint:CtReturnImpl, suspValue 0.25, line 889, file ArrayRealVector.java
--ModifPoint:CtInvocationImpl, suspValue 0.24253562503633297, line 81, file LinearConstraint.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.24253562503633297, line 291, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.24253562503633297, line 292, file SimplexTableau.java
--ModifPoint:CtForImpl, suspValue 0.24253562503633297, line 293, file SimplexTableau.java
--ModifPoint:CtIfImpl, suspValue 0.24253562503633297, line 294, file SimplexTableau.java
--ModifPoint:CtAssignmentImpl, suspValue 0.24253562503633297, line 295, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.24253562503633297, line 300, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.24253562503633297, line 338, file ArrayRealVector.java
--ModifPoint:CtForImpl, suspValue 0.24253562503633297, line 339, file ArrayRealVector.java
--ModifPoint:CtAssignmentImpl, suspValue 0.24253562503633297, line 340, file ArrayRealVector.java
--ModifPoint:CtReturnImpl, suspValue 0.24253562503633297, line 342, file ArrayRealVector.java
--ModifPoint:CtForImpl, suspValue 0.24253562503633297, line 387, file SimplexTableau.java
--ModifPoint:CtInvocationImpl, suspValue 0.24253562503633297, line 388, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.24253562503633297, line 398, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.24253562503633297, line 406, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.24253562503633297, line 415, file SimplexTableau.java
--ModifPoint:CtInvocationImpl, suspValue 0.23570226039551587, line 58, file LinearObjectiveFunction.java
--ModifPoint:CtAssignmentImpl, suspValue 0.23570226039551587, line 66, file LinearObjectiveFunction.java
--ModifPoint:CtAssignmentImpl, suspValue 0.23570226039551587, line 67, file LinearObjectiveFunction.java
--ModifPoint:CtReturnImpl, suspValue 0.23570226039551587, line 75, file LinearObjectiveFunction.java
--ModifPoint:CtReturnImpl, suspValue 0.23570226039551587, line 83, file LinearObjectiveFunction.java
--ModifPoint:CtAssignmentImpl, suspValue 0.23570226039551587, line 100, file LinearConstraint.java
--ModifPoint:CtAssignmentImpl, suspValue 0.23570226039551587, line 101, file LinearConstraint.java
--ModifPoint:CtAssignmentImpl, suspValue 0.23570226039551587, line 102, file LinearConstraint.java
--ModifPoint:CtAssignmentImpl, suspValue 0.23570226039551587, line 105, file SimplexTableau.java
--ModifPoint:CtAssignmentImpl, suspValue 0.23570226039551587, line 106, file SimplexTableau.java
--ModifPoint:CtAssignmentImpl, suspValue 0.23570226039551587, line 107, file SimplexTableau.java
--ModifPoint:CtAssignmentImpl, suspValue 0.23570226039551587, line 108, file SimplexTableau.java
--ModifPoint:CtAssignmentImpl, suspValue 0.23570226039551587, line 109, file SimplexTableau.java
--ModifPoint:CtAssignmentImpl, suspValue 0.23570226039551587, line 110, file SimplexTableau.java
--ModifPoint:CtAssignmentImpl, suspValue 0.23570226039551587, line 112, file SimplexTableau.java
--ModifPoint:CtAssignmentImpl, suspValue 0.23570226039551587, line 114, file SimplexTableau.java
--ModifPoint:CtInvocationImpl, suspValue 0.23570226039551587, line 115, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.23570226039551587, line 126, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.23570226039551587, line 127, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.23570226039551587, line 129, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.23570226039551587, line 130, file SimplexTableau.java
--ModifPoint:CtIfImpl, suspValue 0.23570226039551587, line 133, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.23570226039551587, line 136, file SimplexTableau.java
--ModifPoint:CtAssignmentImpl, suspValue 0.23570226039551587, line 137, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.23570226039551587, line 138, file SimplexTableau.java
--ModifPoint:CtInvocationImpl, suspValue 0.23570226039551587, line 140, file SimplexTableau.java
--ModifPoint:CtAssignmentImpl, suspValue 0.23570226039551587, line 141, file SimplexTableau.java
--ModifPoint:CtIfImpl, suspValue 0.23570226039551587, line 144, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.23570226039551587, line 150, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.23570226039551587, line 151, file SimplexTableau.java
--ModifPoint:CtForImpl, suspValue 0.23570226039551587, line 152, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.23570226039551587, line 153, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.23570226039551587, line 154, file SimplexTableau.java
--ModifPoint:CtInvocationImpl, suspValue 0.23570226039551587, line 157, file SimplexTableau.java
--ModifPoint:CtIfImpl, suspValue 0.23570226039551587, line 160, file SimplexTableau.java
--ModifPoint:CtAssignmentImpl, suspValue 0.23570226039551587, line 166, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.23570226039551587, line 168, file LinearConstraint.java
--ModifPoint:CtIfImpl, suspValue 0.23570226039551587, line 169, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.23570226039551587, line 176, file LinearConstraint.java
--ModifPoint:CtIfImpl, suspValue 0.23570226039551587, line 176, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.23570226039551587, line 183, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.23570226039551587, line 184, file LinearConstraint.java
--ModifPoint:CtReturnImpl, suspValue 0.23570226039551587, line 190, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.23570226039551587, line 198, file SimplexTableau.java
--ModifPoint:CtForEachImpl, suspValue 0.23570226039551587, line 199, file SimplexTableau.java
--ModifPoint:CtInvocationImpl, suspValue 0.23570226039551587, line 200, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.23570226039551587, line 202, file SimplexTableau.java
--ModifPoint:CtIfImpl, suspValue 0.23570226039551587, line 211, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.23570226039551587, line 216, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.23570226039551587, line 225, file SimplexTableau.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.23570226039551587, line 234, file SimplexTableau.java
--ModifPoint:CtForEachImpl, suspValue 0.23570226039551587, line 235, file SimplexTableau.java
--ModifPoint:CtIfImpl, suspValue 0.23570226039551587, line 236, file SimplexTableau.java
--ModifPoint:CtUnaryOperatorImpl, suspValue 0.23570226039551587, line 237, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.23570226039551587, line 240, file SimplexTableau.java
--ModifPoint:CtForImpl, suspValue 0.23570226039551587, line 248, file SimplexTableau.java
--ModifPoint:CtInvocationImpl, suspValue 0.23570226039551587, line 331, file SimplexTableau.java
--ModifPoint:CtReturnImpl, suspValue 0.22941573387056174, line 411, file MathUtils.java
--ModifPoint:CtReturnImpl, suspValue 0.1643989873053573, line 854, file ArrayRealVector.java
--ModifPoint:CtAssignmentImpl, suspValue 0.15811388300841897, line 49, file RealPointValuePair.java
--ModifPoint:CtAssignmentImpl, suspValue 0.15811388300841897, line 50, file RealPointValuePair.java
--ModifPoint:CtReturnImpl, suspValue 0.15811388300841897, line 86, file RealPointValuePair.java
--ModifPoint:CtIfImpl, suspValue 0.15617376188860607, line 1287, file ArrayRealVector.java
--ModifPoint:CtReturnImpl, suspValue 0.09901475429766744, line 395, file MathUtils.java
--ModifPoint:CtReturnImpl, suspValue 0.09805806756909202, line 1157, file ArrayRealVector.java
--ModifPoint:CtAssignmentImpl, suspValue 0.08770580193070293, line 78, file ArrayRealVector.java
--ModifPoint:CtReturnImpl, suspValue 0.08137884587711594, line 354, file Array2DRowRealMatrix.java
--ModifPoint:CtAssignmentImpl, suspValue 0.07905694150420949, line 367, file Array2DRowRealMatrix.java
--ModifPoint:CtInvocationImpl, suspValue 0.07602859212697055, line 95, file Array2DRowRealMatrix.java
--ModifPoint:CtIfImpl, suspValue 0.07580980435789034, line 314, file Array2DRowRealMatrix.java
--ModifPoint:CtIfImpl, suspValue 0.07580980435789034, line 315, file Array2DRowRealMatrix.java
--ModifPoint:CtIfImpl, suspValue 0.07580980435789034, line 320, file Array2DRowRealMatrix.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.07580980435789034, line 325, file Array2DRowRealMatrix.java
--ModifPoint:CtIfImpl, suspValue 0.07580980435789034, line 326, file Array2DRowRealMatrix.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.07580980435789034, line 330, file Array2DRowRealMatrix.java
--ModifPoint:CtIfImpl, suspValue 0.07580980435789034, line 331, file Array2DRowRealMatrix.java
--ModifPoint:CtAssignmentImpl, suspValue 0.07580980435789034, line 334, file Array2DRowRealMatrix.java
--ModifPoint:CtForImpl, suspValue 0.07580980435789034, line 335, file Array2DRowRealMatrix.java
--ModifPoint:CtIfImpl, suspValue 0.07580980435789034, line 336, file Array2DRowRealMatrix.java
--ModifPoint:CtInvocationImpl, suspValue 0.07580980435789034, line 341, file Array2DRowRealMatrix.java
--ModifPoint:CtInvocationImpl, suspValue 0.07580980435789034, line 622, file Array2DRowRealMatrix.java
--ModifPoint:CtReturnImpl, suspValue 0.06819943394704735, line 410, file Array2DRowRealMatrix.java
--ModifPoint:CtReturnImpl, suspValue 0.06804138174397717, line 404, file Array2DRowRealMatrix.java
--ModifPoint:CtAssignmentImpl, suspValue 0.0625, line 44, file AbstractRealMatrix.java
Total suspicious from FL: 231,  186
Total ModPoint created: 186
Creating program variant #1, [Variant id: 1, #gens: 186, #ops: 0, parent:-]
Calculating fitness
Calculating fitness for original program variant.
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Test Failing is passing, Executing regression
Executing process: (timeout524secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.stat.data.LotteryTest  org.apache.commons.math.linear.FieldMatrixImplTest  org.apache.commons.math.ode.sampling.StepNormalizerTest  org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest  org.apache.commons.math.geometry.RotationOrderTest  org.apache.commons.math.analysis.solvers.NewtonSolverTest  org.apache.commons.math.estimation.EstimatedParameterTest  org.apache.commons.math.linear.CholeskyDecompositionImplTest  org.apache.commons.math.linear.Array2DRowRealMatrixTest  org.apache.commons.math.linear.SparseRealMatrixTest  org.apache.commons.math.util.OpenIntToFieldTest  org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest  org.apache.commons.math.optimization.fitting.PolynomialFitterTest  org.apache.commons.math.linear.ArrayRealVectorTest  org.apache.commons.math.distribution.HypergeometricDistributionTest  org.apache.commons.math.random.RandomAdaptorTest  org.apache.commons.math.ode.FirstOrderConverterTest  org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest  org.apache.commons.math.stat.inference.TestUtilsTest  org.apache.commons.math.stat.data.LewTest  org.apache.commons.math.distribution.GammaDistributionTest  org.apache.commons.math.stat.descriptive.rank.MedianTest  org.apache.commons.math.distribution.ZipfDistributionTest  org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest  org.apache.commons.math.stat.CertifiedDataTest  org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest  org.apache.commons.math.complex.FrenchComplexFormatTest  org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest  org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest  org.apache.commons.math.DuplicateSampleAbscissaExceptionTest  org.apache.commons.math.estimation.MinpackTest  org.apache.commons.math.genetics.FixedGenerationCountTest  org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest  org.apache.commons.math.fraction.BigFractionFormatTest  org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest  org.apache.commons.math.random.RandomDataTest  org.apache.commons.math.distribution.FDistributionTest  org.apache.commons.math.FunctionEvaluationExceptionTest  org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest  org.apache.commons.math.stat.inference.TTestFactoryTest  org.apache.commons.math.stat.descriptive.moment.SkewnessTest  org.apache.commons.math.special.GammaTest  org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest  org.apache.commons.math.analysis.integration.RombergIntegratorTest  org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest  org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest  org.apache.commons.math.stat.descriptive.SummaryStatisticsTest  org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest  org.apache.commons.math.stat.descriptive.moment.FirstMomentTest  org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest  org.apache.commons.math.complex.ComplexTest  org.apache.commons.math.distribution.BetaDistributionTest  org.apache.commons.math.special.ErfTest  org.apache.commons.math.special.BetaTest  org.apache.commons.math.ode.nonstiff.GillIntegratorTest  org.apache.commons.math.random.EmpiricalDistributionTest  org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest  org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest  org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest  org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest  org.apache.commons.math.random.AbstractRandomGeneratorTest  org.apache.commons.math.fraction.BigFractionFieldTest  org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest  org.apache.commons.math.genetics.GeneticAlgorithmTestBinary  org.apache.commons.math.linear.BiDiagonalTransformerTest  org.apache.commons.math.util.DefaultTransformerTest  org.apache.commons.math.linear.LUDecompositionImplTest  org.apache.commons.math.random.ValueServerTest  org.apache.commons.math.stat.descriptive.moment.MeanTest  org.apache.commons.math.util.BigRealFieldTest  org.apache.commons.math.linear.QRDecompositionImplTest  org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest  org.apache.commons.math.stat.descriptive.moment.VarianceTest  org.apache.commons.math.genetics.OnePointCrossoverTest  org.apache.commons.math.stat.ranking.NaturalRankingTest  org.apache.commons.math.optimization.linear.SimplexSolverTest  org.apache.commons.math.stat.descriptive.moment.FourthMomentTest  org.apache.commons.math.linear.BlockRealMatrixTest  org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest  org.apache.commons.math.random.MersenneTwisterTest  org.apache.commons.math.genetics.RandomKeyTest  org.apache.commons.math.stat.descriptive.summary.ProductTest  org.apache.commons.math.fraction.FractionTest  org.apache.commons.math.util.OpenIntToDoubleHashMapTest  org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest  org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest  org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest  org.apache.commons.math.genetics.ChromosomeTest  org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest  org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest  org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest  org.apache.commons.math.geometry.Vector3DTest  org.apache.commons.math.stat.descriptive.rank.MinTest  org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest  org.apache.commons.math.linear.FieldLUDecompositionImplTest  org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest  org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest  org.apache.commons.math.transform.FastHadamardTransformerTest  org.apache.commons.math.optimization.fitting.HarmonicFitterTest  org.apache.commons.math.stat.correlation.PearsonsCorrelationTest  org.apache.commons.math.random.GaussianRandomGeneratorTest  org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest  org.apache.commons.math.linear.FrenchRealVectorFormatTest  org.apache.commons.math.fraction.BigFractionTest  org.apache.commons.math.util.ContinuedFractionTest  org.apache.commons.math.util.TransformerMapTest  org.apache.commons.math.analysis.solvers.BisectionSolverTest  org.apache.commons.math.genetics.BinaryChromosomeTest  org.apache.commons.math.linear.BlockFieldMatrixTest  org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest  org.apache.commons.math.linear.SingularValueDecompositionImplTest  org.apache.commons.math.distribution.TDistributionTest  org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest  org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest  org.apache.commons.math.linear.InvalidMatrixExceptionTest  org.apache.commons.math.distribution.BinomialDistributionTest  org.apache.commons.math.linear.EigenSolverTest  org.apache.commons.math.stat.inference.TTestTest  org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest  org.apache.commons.math.random.UniformRandomGeneratorTest  org.apache.commons.math.stat.descriptive.rank.PercentileTest  org.apache.commons.math.analysis.solvers.RiddersSolverTest  org.apache.commons.math.linear.ArrayFieldVectorTest  org.apache.commons.math.ode.ContinuousOutputModelTest  org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest  org.apache.commons.math.optimization.linear.SimplexTableauTest  org.apache.commons.math.ConvergenceExceptionTest  org.apache.commons.math.util.ResizableDoubleArrayTest  org.apache.commons.math.complex.ComplexFormatTest  org.apache.commons.math.linear.RealMatrixImplTest  org.apache.commons.math.stat.descriptive.summary.SumTest  org.apache.commons.math.linear.SparseFieldVectorTest  org.apache.commons.math.genetics.ElitisticListPopulationTest  org.apache.commons.math.stat.descriptive.summary.SumSqTest  org.apache.commons.math.linear.SparseRealVectorTest  org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest  org.apache.commons.math.linear.EigenDecompositionImplTest  org.apache.commons.math.analysis.integration.SimpsonIntegratorTest  org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest  org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations  org.apache.commons.math.stat.descriptive.moment.KurtosisTest  org.apache.commons.math.transform.FastFourierTransformerTest  org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest  org.apache.commons.math.distribution.NormalDistributionTest  org.apache.commons.math.distribution.PoissonDistributionTest  org.apache.commons.math.geometry.Vector3DFormatTest  org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest  org.apache.commons.math.genetics.TournamentSelectionTest  org.apache.commons.math.optimization.general.MinpackTest  org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest  org.apache.commons.math.analysis.solvers.BrentSolverTest  org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest  org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest  org.apache.commons.math.estimation.WeightedMeasurementTest  org.apache.commons.math.stat.inference.ChiSquareTestTest  org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest  org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest  org.apache.commons.math.linear.MatrixIndexExceptionTest  org.apache.commons.math.genetics.BinaryMutationTest  org.apache.commons.math.fraction.FractionFormatTest  org.apache.commons.math.distribution.PascalDistributionTest  org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest  org.apache.commons.math.util.MathUtilsTest  org.apache.commons.math.complex.ComplexUtilsTest  org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest  org.apache.commons.math.optimization.direct.MultiDirectionalTest  org.apache.commons.math.genetics.FitnessCachingTest  org.apache.commons.math.linear.BigMatrixImplTest  org.apache.commons.math.stat.inference.ChiSquareFactoryTest  org.apache.commons.math.fraction.FractionFieldTest  org.apache.commons.math.stat.descriptive.InteractionTest  org.apache.commons.math.stat.correlation.CovarianceTest  org.apache.commons.math.optimization.univariate.BrentMinimizerTest  org.apache.commons.math.linear.QRSolverTest  org.apache.commons.math.linear.RealVectorFormatTest  org.apache.commons.math.analysis.solvers.LaguerreSolverTest  org.apache.commons.math.linear.CholeskySolverTest  org.apache.commons.math.distribution.WeibullDistributionTest  org.apache.commons.math.stat.StatUtilsTest  org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest  org.apache.commons.math.analysis.solvers.MullerSolverTest  org.apache.commons.math.linear.TriDiagonalTransformerTest  org.apache.commons.math.distribution.ChiSquareDistributionTest  org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest  org.apache.commons.math.transform.FastSineTransformerTest  org.apache.commons.math.stat.inference.OneWayAnovaTest  org.apache.commons.math.transform.FastCosineTransformerTest  org.apache.commons.math.ArgumentOutsideDomainExceptionTest  org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest  org.apache.commons.math.ode.nonstiff.EulerIntegratorTest  org.apache.commons.math.stat.descriptive.rank.MaxTest  org.apache.commons.math.complex.ComplexFieldTest  org.apache.commons.math.stat.descriptive.ListUnivariateImplTest  org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest  org.apache.commons.math.MaxIterationsExceededExceptionTest  org.apache.commons.math.linear.MatrixUtilsTest  org.apache.commons.math.optimization.direct.NelderMeadTest  org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest  org.apache.commons.math.geometry.RotationTest  org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest  org.apache.commons.math.linear.SingularValueSolverTest  org.apache.commons.math.genetics.RandomKeyMutationTest  org.apache.commons.math.util.BigRealTest  org.apache.commons.math.distribution.ExponentialDistributionTest  org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest  org.apache.commons.math.geometry.FrenchVector3DFormatTest  org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest  org.apache.commons.math.stat.regression.SimpleRegressionTest  org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest  org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest  org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest  org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest  org.apache.commons.math.linear.LUSolverTest  org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest  org.apache.commons.math.MathConfigurationExceptionTest  org.apache.commons.math.estimation.GaussNewtonEstimatorTest  org.apache.commons.math.genetics.ListPopulationTest  org.apache.commons.math.MathExceptionTest  org.apache.commons.math.distribution.CauchyDistributionTest  org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest  org.apache.commons.math.linear.SparseFieldMatrixTest  org.apache.commons.math.stat.descriptive.summary.SumLogTest  org.apache.commons.math.stat.FrequencyTest  org.apache.commons.math.stat.descriptive.moment.SecondMomentTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 2059] ,[]
The original fitness is : 1.0
----------------------------
---Configuration properties
p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
p:alternativecompliancelevel= 8
p:ignoredTestCases= 
p:workingDirectory= /Users/marekmazur/astor/./output_astor
p:manipulatesuper= false
p:validation= process
p:jvm4testexecution= /Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin
p:operatorspace= irr-statements
p:diffcontext= 0
p:binjavafolder= /target/classes/
p:synthesis_depth= 3
p:gzoltartestpackagetoexclude= junit.framework
p:skipfitnessinitialpopulation= false
p:evosuiteresultfolder= evosuite
p:flthreshold= 0
p:regressionforfaultlocalization= true
p:collectonlyusedmethod= false
p:folderDiff= ./diffSolutions
p:preservelinenumbers= true
p:tmax2= 524530
p:tmax1= 10000
p:probagenmutation= false
p:nomodificationconvergence= 100
p:diff_type= relative
p:nolog= False
p:targetelementprocessor= statements
p:srctestfolder= /src/test/
p:forceExecuteRegression= false
p:clusteringfilename= clustering.csv
p:failing= org.apache.commons.math.optimization.linear.SimplexSolverTest
p:logtestexecution= false
p:evo_buggy_class= true
p:numberExecutions= 1
p:maxnumbersolutions= 1000000
p:evo_affected_by_op= true
p:population= 1
p:maxCombinationVariableLimit= false
p:savesolution= true
p:javacompliancelevel= 8
p:uniqueoptogen= false
p:gzoltarpackagetonotinstrument= junit.framework
p:projectIdentifier= 
p:modificationpointnavigation= weight
p:stopfirst= true
p:multipointmodification= false
p:elementsToMutate= 10
p:jsonoutputname= astor_output
p:evoDSE= false
p:bintestfolder= /target/test-classes/
p:testbystep= false
p:version-location= ./math-version/
p:gzoltarVersion= 1.7.3
p:locationGzoltarJar= ./lib/
p:reintroduce= PARENTS:ORIGINAL
p:executorjar= ./lib/jtestex7.jar
p:maxGeneration= 1000000
p:max_synthesis_step= 10000
p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
p:maxVarCombination= 1000
p:includeZeros= false
p:maxtime= 60
p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
p:jvmversion= 1.8.0_202
p:commandTrunk= 50000
p:faultlocalization= flacoco
p:resetmodel= true
p:maxsuspcandidates= 1000
p:mode= jgenprog
p:learningdir= 
p:jvm4evosuitetestexecution= /Users/marekmazur/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin
p:filterfaultlocalization= true
p:mutationrate= 1 
p:pathToMVNRepository= 
p:resourcesfolder= /src/main/resources:/src/test/resources:
p:timezone= America/Los_Angeles
p:runjava7code= false
p:evoRunOnBuggyClass= true
p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
p:limitbysuspicious= true
p:logsattemps= true
p:dependenciespath= /Users/marekmazur/astor/examples/libs/junit-4.4.jar
p:packageToInstrument= org.apache.commons
p:skipfaultlocalization= false
p:scope= local
p:transformingredient= false
p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
p:maxnumvariablesperingredient= 10
p:parsesourcefromoriginal= true
p:pvariantfoldername= variant-
p:savespoonmodelondisk= false
p:srcjavafolder= /src/java/
p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
p:ignoreflakyinfl= false
p:cleantemplates= true
p:applyCrossover= false
p:maxmodificationpoints= 1000
p:duplicateingredientsinspace= false
p:metid= 0
p:continuewhenmodelfail= true
p:saveall= false
p:seed= 10
p:savecompletepatched= true
p:resetoperations= false
p:keepcomments= true
p:processoutputinfile= false
p:location= /Users/marekmazur/astor/defects4j/math-82
p:probabilistictransformation= true
p:overridemaxtime= true
p:outputjsonresult= true
p:allpoints= false
p:antipattern= false
p:bugId= 280
p:evosuitetimeout= 120
p:maxtimefactor= 10
p:nrPlaceholders= 1
p:forcesubprocesskilling= false
----------------------------
----Starting Solution Search
----------Running generation: 1, population size: 1

***** Generation 1 : 0
**Parent Variant: [Variant id: 1, #gens: 186, #ops: 0, parent:-]

--Child created id: 2
--Creating new operations for variant [Variant id: 2, #gens: 186, #ops: 0, parent:1]
---analyzing modificationPoint position: 119
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  // create a matrix of the correct size java.util.List<org.apache.commons.math.optimization.linear.Li[...]
---analyzing modificationPoint position: 37
Templates availables5
Attempts Base Ingredients  1 total 5
vars from patch [this.epsilon]
--> var from patch: this.epsilon spoon.support.reflect.code.CtFieldWriteImpl
location: SimplexSolver.java64
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `minPos = i ` -topatch--> `this.epsilon = epsilon` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 64, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `minPos = i ` -topatch--> `this.epsilon = epsilon` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 2, #gens: 186, #ops: 1, parent:1] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 2, errors: [SimplexSolver.java:64: error: cannot assign a value to final variable epsilon
				minValue = tableau.getEntry(0, i); 				this.epsilon = epsilon;
				                                   				    ^]
Ingredient counter is Zero
---Undoing: gnrtn(1): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `minPos = i ` -topatch--> `this.epsilon = epsilon` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1(f=1.0), 2(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1(f=1.0), )
----------Running generation: 2, population size: 1

***** Generation 2 : 0
**Parent Variant: [Variant id: 3, #gens: 186, #ops: 0, parent:-]

--Child created id: 4
--Creating new operations for variant [Variant id: 4, #gens: 186, #ops: 0, parent:3]
---analyzing modificationPoint position: 32
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [java.lang.Double.MAX_VALUE]
--> var from patch: java.lang.Double.MAX_VALUE spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java60
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer minPos = null ` -topatch--> `double minRatio = java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 60, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer minPos = null ` -topatch--> `double minRatio = java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 4, #gens: 187, #ops: 1, parent:3] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 4
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-4/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(2): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer minPos = null ` -topatch--> `double minRatio = java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (3(f=1.0), 4(f=1.0), )
Selected to next generation: IDs2--> (3(f=1.0), )
----------Running generation: 3, population size: 1

***** Generation 3 : 0
**Parent Variant: [Variant id: 5, #gens: 186, #ops: 0, parent:-]

--Child created id: 6
--Creating new operations for variant [Variant id: 6, #gens: 186, #ops: 0, parent:5]
---analyzing modificationPoint position: 110
location: SimplexTableau.java105
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.f = f ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 6, #gens: 185, #ops: 1, parent:5] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 6, errors: [SimplexTableau.java:117: error: variable f might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(3): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.f = f ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (5(f=1.0), 6(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (5(f=1.0), )
----------Running generation: 4, population size: 1

***** Generation 4 : 0
**Parent Variant: [Variant id: 7, #gens: 186, #ops: 0, parent:-]

--Child created id: 8
--Creating new operations for variant [Variant id: 8, #gens: 186, #ops: 0, parent:7]
---analyzing modificationPoint position: 55
location: AbstractLinearOptimizer.java101
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 8, #gens: 185, #ops: 1, parent:7] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 8
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-8/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 14] ,[]
-Valid?: |false|4|14|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(4): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (7(f=1.0), 8(f=4.0), )
Selected to next generation: IDs2--> (7(f=1.0), )
----------Running generation: 5, population size: 1

***** Generation 5 : 0
**Parent Variant: [Variant id: 9, #gens: 186, #ops: 0, parent:-]

--Child created id: 10
--Creating new operations for variant [Variant id: 10, #gens: 186, #ops: 0, parent:9]
---analyzing modificationPoint position: 0
---modifPoint 0 not mutation generated in  return
---analyzing modificationPoint position: 173
Templates availables120
Attempts Base Ingredients  1 total 120
---modifPoint 1 not mutation generated in  if (column > 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalStateException( 	[...]
---analyzing modificationPoint position: 101
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java415
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getEntry(row, column) ` -topatch--> `java.lang.Integer row = null` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 415, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getEntry(row, column) ` -topatch--> `java.lang.Integer row = null` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 10, #gens: 187, #ops: 1, parent:9] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 10, errors: [SimplexTableau.java:418: error: variable row is already defined in method getEntry(int,int)
	 */ 	protected final double getEntry(final int row, final int column) { 		java.lang.Integer row = null; 		return tableau.getEntry(row, column);}
	    	                                                                   		                  ^]
Ingredient counter is Zero
---Undoing: gnrtn(5): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getEntry(row, column) ` -topatch--> `java.lang.Integer row = null` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (9(f=1.0), 10(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (9(f=1.0), )
----------Running generation: 6, population size: 1

***** Generation 6 : 0
**Parent Variant: [Variant id: 11, #gens: 186, #ops: 0, parent:-]

--Child created id: 12
--Creating new operations for variant [Variant id: 12, #gens: 186, #ops: 0, parent:11]
---analyzing modificationPoint position: 28
location: SimplexSolver.java190
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (!isOptimal(tableau)) { 	doIteration(tableau); }  ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 12, #gens: 185, #ops: 1, parent:11] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 12
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-12/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 14] ,[]
-Valid?: |false|8|14|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(6): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (!isOptimal(tableau)) { 	doIteration(tableau); }  ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (11(f=1.0), 12(f=8.0), )
Selected to next generation: IDs2--> (11(f=1.0), )
----------Running generation: 7, population size: 1

***** Generation 7 : 0
**Parent Variant: [Variant id: 13, #gens: 186, #ops: 0, parent:-]

--Child created id: 14
--Creating new operations for variant [Variant id: 14, #gens: 186, #ops: 0, parent:13]
---analyzing modificationPoint position: 62
Templates availables7
Attempts Base Ingredients  1 total 7
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java113
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.divideRow(pivotRow, pivotVal) ` -topatch--> `solvePhase1(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 113, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.divideRow(pivotRow, pivotVal) ` -topatch--> `solvePhase1(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 14, #gens: 186, #ops: 1, parent:13] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 14
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-14/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 14] ,[]
-Valid?: |false|12|14|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(7): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.divideRow(pivotRow, pivotVal) ` -topatch--> `solvePhase1(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (13(f=1.0), 14(f=12.0), )
Selected to next generation: IDs2--> (13(f=1.0), )
----------Running generation: 8, population size: 1

***** Generation 8 : 0
**Parent Variant: [Variant id: 15, #gens: 186, #ops: 0, parent:-]

--Child created id: 16
--Creating new operations for variant [Variant id: 16, #gens: 186, #ops: 0, parent:15]
---analyzing modificationPoint position: 174
Templates availables120
Attempts Base Ingredients  1 total 120
---modifPoint 0 not mutation generated in  final int nRows = subMatrix.length
---analyzing modificationPoint position: 167
location: ArrayRealVector.java78
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `data = d.clone() ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 16, #gens: 185, #ops: 1, parent:15] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 16
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-16/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(8): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `data = d.clone() ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (15(f=1.0), 16(f=14.0), )
Selected to next generation: IDs2--> (15(f=1.0), )
----------Running generation: 9, population size: 1

***** Generation 9 : 0
**Parent Variant: [Variant id: 17, #gens: 186, #ops: 0, parent:-]

--Child created id: 18
--Creating new operations for variant [Variant id: 18, #gens: 186, #ops: 0, parent:17]
---analyzing modificationPoint position: 165
---modifPoint 0 not mutation generated in  return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || (x == y)
---analyzing modificationPoint position: 41
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java78
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer minRatioPos = null ` -topatch--> `java.lang.Integer pivotCol = getPivotColumn(tableau)` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 78, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer minRatioPos = null ` -topatch--> `java.lang.Integer pivotCol = getPivotColumn(tableau)` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 18, #gens: 186, #ops: 1, parent:17] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 18, errors: [SimplexSolver.java:106: error: cannot find symbol
		java.lang.Integer pivotCol = getPivotColumn(tableau); 		for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 			final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); 			final double entry = tableau.getEntry(i, col); 			if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 				final double ratio = rhs / entry; 				if (ratio < minRatio) { 					minRatio = ratio; 					minRatioPos = i;}}} 		return minRatioPos;} 	/**
		                                                      		                                                                                 			                                                                			                                               			                                                                                				                                  				                        					                  					^
  symbol:   variable minRatioPos
  location: class org.apache.commons.math.optimization.linear.SimplexSolver, SimplexSolver.java:106: error: cannot find symbol
		java.lang.Integer pivotCol = getPivotColumn(tableau); 		for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 			final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); 			final double entry = tableau.getEntry(i, col); 			if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 				final double ratio = rhs / entry; 				if (ratio < minRatio) { 					minRatio = ratio; 					minRatioPos = i;}}} 		return minRatioPos;} 	/**
		                                                      		                                                                                 			                                                                			                                               			                                                                                				                                  				                        					                  					                    		       ^
  symbol:   variable minRatioPos
  location: class org.apache.commons.math.optimization.linear.SimplexSolver]
Ingredient counter is Zero
---Undoing: gnrtn(9): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer minRatioPos = null ` -topatch--> `java.lang.Integer pivotCol = getPivotColumn(tableau)` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (17(f=1.0), 18(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (17(f=1.0), )
----------Running generation: 10, population size: 1

***** Generation 10 : 0
**Parent Variant: [Variant id: 19, #gens: 186, #ops: 0, parent:-]

--Child created id: 20
--Creating new operations for variant [Variant id: 20, #gens: 186, #ops: 0, parent:19]
---analyzing modificationPoint position: 62
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java113
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.divideRow(pivotRow, pivotVal) ` -topatch--> `throw new org.apache.commons.math.optimization.linear.UnboundedSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 113, pointed element: CtThrowImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.divideRow(pivotRow, pivotVal) ` -topatch--> `throw new org.apache.commons.math.optimization.linear.UnboundedSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 

--Summary Creation: for variant [Variant id: 20, #gens: 187, #ops: 1, parent:19] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 20, errors: [SimplexSolver.java:114: error: unreachable statement
		tableau.divideRow(pivotRow, pivotVal);
		^]
Ingredient counter is Zero
---Undoing: gnrtn(10): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.divideRow(pivotRow, pivotVal) ` -topatch--> `throw new org.apache.commons.math.optimization.linear.UnboundedSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (19(f=1.0), 20(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (19(f=1.0), )
----------Running generation: 11, population size: 1

***** Generation 11 : 0
**Parent Variant: [Variant id: 21, #gens: 186, #ops: 0, parent:-]

--Child created id: 22
--Creating new operations for variant [Variant id: 22, #gens: 186, #ops: 0, parent:21]
---analyzing modificationPoint position: 1
location: SimplexTableau.java308
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 22, #gens: 185, #ops: 1, parent:21] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 22
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-22/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 14] ,[]
-Valid?: |false|3|14|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(11): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (21(f=1.0), 22(f=3.0), )
Selected to next generation: IDs2--> (21(f=1.0), )
----------Running generation: 12, population size: 1

***** Generation 12 : 0
**Parent Variant: [Variant id: 23, #gens: 186, #ops: 0, parent:-]

--Child created id: 24
--Creating new operations for variant [Variant id: 24, #gens: 186, #ops: 0, parent:23]
---analyzing modificationPoint position: 86
Templates availables25
Attempts Base Ingredients  1 total 25
vars from patch [coefficients]
--> var from patch: coefficients spoon.support.reflect.code.CtFieldReadImpl
SameName: final 













































































double[] coefficients
SameName: final 













































































double[] coefficients
Transforming shadowed variable in return coefficients
location: LinearConstraint.java81
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), relationship, value) ` -topatch--> `return coefficients` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearConstraint line: 81, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), relationship, value) ` -topatch--> `return coefficients` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 24, #gens: 187, #ops: 1, parent:23] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 24, errors: [LinearConstraint.java:169: error: incompatible types: unexpected return value
		return coefficients;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(12): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), relationship, value) ` -topatch--> `return coefficients` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (23(f=1.0), 24(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (23(f=1.0), )
----------Running generation: 13, population size: 1

***** Generation 13 : 0
**Parent Variant: [Variant id: 25, #gens: 186, #ops: 0, parent:-]

--Child created id: 26
--Creating new operations for variant [Variant id: 26, #gens: 186, #ops: 0, parent:25]
---analyzing modificationPoint position: 107
Templates availables25
Attempts Base Ingredients  1 total 25
vars from patch [this.value]
--> var from patch: this.value spoon.support.reflect.code.CtFieldWriteImpl
SameName: final 

































































































double value
SameName: final 

































































































double value
Transforming shadowed variable in value = value
location: LinearConstraint.java100
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.coefficients = coefficients ` -topatch--> `value = value` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearConstraint line: 100, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.coefficients = coefficients ` -topatch--> `value = value` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 26, #gens: 187, #ops: 1, parent:25] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 26, errors: [LinearConstraint.java:103: error: final parameter value may not be assigned
		value = value; 		this.coefficients = coefficients; 		this.relationship = relationship; 		this.value = value;
		^]
Ingredient counter is Zero
---Undoing: gnrtn(13): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.coefficients = coefficients ` -topatch--> `value = value` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (25(f=1.0), 26(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (25(f=1.0), )
----------Running generation: 14, population size: 1

***** Generation 14 : 0
**Parent Variant: [Variant id: 27, #gens: 186, #ops: 0, parent:-]

--Child created id: 28
--Creating new operations for variant [Variant id: 28, #gens: 186, #ops: 0, parent:27]
---analyzing modificationPoint position: 97
Templates availables8
Attempts Base Ingredients  1 total 8
vars from patch [j, tableau, minuendRow, multiple, subtrahendRow]
--> var from patch: j spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: tableau spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: minuendRow spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: multiple spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: subtrahendRow spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java387
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow,[...] ` -topatch--> `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow,[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 387, pointed element: CtForImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow,[...] ` -topatch--> `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow,[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 28, #gens: 186, #ops: 1, parent:27] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 28
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-28/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(14): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow,[...] ` -topatch--> `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow,[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (27(f=1.0), 28(f=1.0), )
Selected to next generation: IDs2--> (27(f=1.0), )
----------Running generation: 15, population size: 1

***** Generation 15 : 0
**Parent Variant: [Variant id: 29, #gens: 186, #ops: 0, parent:-]

--Child created id: 30
--Creating new operations for variant [Variant id: 30, #gens: 186, #ops: 0, parent:29]
---analyzing modificationPoint position: 30
location: SimplexSolver.java50
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.epsilon = epsilon ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 30, #gens: 185, #ops: 1, parent:29] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 30, errors: [SimplexSolver.java:52: error: variable epsilon might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(15): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.epsilon = epsilon ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (29(f=1.0), 30(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (29(f=1.0), )
----------Running generation: 16, population size: 1

***** Generation 16 : 0
**Parent Variant: [Variant id: 31, #gens: 186, #ops: 0, parent:-]

--Child created id: 32
--Creating new operations for variant [Variant id: 32, #gens: 186, #ops: 0, parent:31]
---analyzing modificationPoint position: 76
Templates availables68
Attempts Base Ingredients  1 total 68
---modifPoint 0 not mutation generated in  return -1
---analyzing modificationPoint position: 83
location: ArrayRealVector.java886
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < data.length; i++) { 	dot += data[i] * v[i]; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 32, #gens: 185, #ops: 1, parent:31] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 32
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-32/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 11, was successful: false, cases executed: 14] ,[]
-Valid?: |false|11|14|[]|, fitness 11.0
Ingredient counter is Zero
---Undoing: gnrtn(16): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < data.length; i++) { 	dot += data[i] * v[i]; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (31(f=1.0), 32(f=11.0), )
Selected to next generation: IDs2--> (31(f=1.0), )
----------Running generation: 17, population size: 1

***** Generation 17 : 0
**Parent Variant: [Variant id: 33, #gens: 186, #ops: 0, parent:-]

--Child created id: 34
--Creating new operations for variant [Variant id: 34, #gens: 186, #ops: 0, parent:33]
---analyzing modificationPoint position: 108
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 0 not mutation generated in  this.relationship = relationship
---analyzing modificationPoint position: 78
---modifPoint 1 not mutation generated in  return getWidth() - 1
---analyzing modificationPoint position: 176
Templates availables23
Attempts Base Ingredients  1 total 23
---modifPoint 2 not mutation generated in  final int nCols = subMatrix[0].length
---analyzing modificationPoint position: 81
location: ArrayRealVector.java884
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `checkVectorDimensions(v.length) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 34, #gens: 185, #ops: 1, parent:33] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 34
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-34/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(17): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `checkVectorDimensions(v.length) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (33(f=1.0), 34(f=1.0), )
Selected to next generation: IDs2--> (33(f=1.0), )
----------Running generation: 18, population size: 1

***** Generation 18 : 0
**Parent Variant: [Variant id: 35, #gens: 186, #ops: 0, parent:-]

--Child created id: 36
--Creating new operations for variant [Variant id: 36, #gens: 186, #ops: 0, parent:35]
---analyzing modificationPoint position: 27
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java189
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `doIteration(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 189, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `doIteration(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 36, #gens: 187, #ops: 1, parent:35] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 36
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-36/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 5, was successful: false, cases executed: 14] ,[]
-Valid?: |false|5|14|[]|, fitness 5.0
Ingredient counter is Zero
---Undoing: gnrtn(18): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `doIteration(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (35(f=1.0), 36(f=5.0), )
Selected to next generation: IDs2--> (35(f=1.0), )
----------Running generation: 19, population size: 1

***** Generation 19 : 0
**Parent Variant: [Variant id: 37, #gens: 186, #ops: 0, parent:-]

--Child created id: 38
--Creating new operations for variant [Variant id: 38, #gens: 186, #ops: 0, parent:37]
---analyzing modificationPoint position: 8
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch []
location: SimplexSolver.java193
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getSolution() ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 193, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getSolution() ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 38, #gens: 186, #ops: 1, parent:37] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 38, errors: [SimplexSolver.java:193: error: incompatible types: boolean cannot be converted to org.apache.commons.math.optimization.RealPointValuePair
		} 		return true;
		  		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(19): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getSolution() ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (37(f=1.0), 38(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (37(f=1.0), )
----------Running generation: 20, population size: 1

***** Generation 20 : 0
**Parent Variant: [Variant id: 39, #gens: 186, #ops: 0, parent:-]

--Child created id: 40
--Creating new operations for variant [Variant id: 40, #gens: 186, #ops: 0, parent:39]
---analyzing modificationPoint position: 104
Templates availables2
Attempts Base Ingredients  1 total 2
vars from patch [this.coefficients]
--> var from patch: this.coefficients spoon.support.reflect.code.CtFieldWriteImpl
SameName: org.apache.commons.math.linear.RealVector coefficients
SameName: org.apache.commons.math.linear.RealVector coefficients
Transforming shadowed variable in coefficients = coefficients
location: LinearObjectiveFunction.java67
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constantTerm = constantTerm ` -topatch--> `coefficients = coefficients` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearObjectiveFunction line: 67, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constantTerm = constantTerm ` -topatch--> `coefficients = coefficients` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 40, #gens: 186, #ops: 1, parent:39] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 40, errors: [LinearObjectiveFunction.java:69: error: variable constantTerm might not have been initialized
	 */ 	public LinearObjectiveFunction(org.apache.commons.math.linear.RealVector coefficients, double constantTerm) { 		this.coefficients = coefficients; 		coefficients = coefficients;}
	    	                                                                                                              		                                  		                            ^]
Ingredient counter is Zero
---Undoing: gnrtn(20): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constantTerm = constantTerm ` -topatch--> `coefficients = coefficients` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (39(f=1.0), 40(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (39(f=1.0), )
----------Running generation: 21, population size: 1

***** Generation 21 : 0
**Parent Variant: [Variant id: 41, #gens: 186, #ops: 0, parent:-]

--Child created id: 42
--Creating new operations for variant [Variant id: 42, #gens: 186, #ops: 0, parent:41]
---analyzing modificationPoint position: 41
---modifPoint 0 not mutation generated in  java.lang.Integer minRatioPos = null
---analyzing modificationPoint position: 101
---modifPoint 1 not mutation generated in  return tableau.getEntry(row, column)
---analyzing modificationPoint position: 60
Templates availables10
Attempts Base Ingredients  1 total 10
vars from patch [tableau, epsilon]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java107
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (pivotRow == null) { 	throw new org.apache.commons.math.optimization.linear.UnboundedSolutionExce[...] ` -topatch--> `// if W is not zero then we have no feasible solution if (!org.apache.commons.math.util.MathUtils.eq[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 107, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (pivotRow == null) { 	throw new org.apache.commons.math.optimization.linear.UnboundedSolutionExce[...] ` -topatch--> `// if W is not zero then we have no feasible solution if (!org.apache.commons.math.util.MathUtils.eq[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 42, #gens: 186, #ops: 1, parent:41] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 42
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-42/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 11, was successful: false, cases executed: 14] ,[]
-Valid?: |false|11|14|[]|, fitness 11.0
Ingredient counter is Zero
---Undoing: gnrtn(21): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (pivotRow == null) { 	throw new org.apache.commons.math.optimization.linear.UnboundedSolutionExce[...] ` -topatch--> `// if W is not zero then we have no feasible solution if (!org.apache.commons.math.util.MathUtils.eq[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (41(f=1.0), 42(f=11.0), )
Selected to next generation: IDs2--> (41(f=1.0), )
----------Running generation: 22, population size: 1

***** Generation 22 : 0
**Parent Variant: [Variant id: 43, #gens: 186, #ops: 0, parent:-]

--Child created id: 44
--Creating new operations for variant [Variant id: 44, #gens: 186, #ops: 0, parent:43]
---analyzing modificationPoint position: 150
---modifPoint 0 not mutation generated in  return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients()[...]
---analyzing modificationPoint position: 69
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [numSlackVariables]
--> var from patch: numSlackVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java307
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (numArtificialVariables == 0) { 	return; } ` -topatch--> `return numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 307, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (numArtificialVariables == 0) { 	return; } ` -topatch--> `return numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 44, #gens: 187, #ops: 1, parent:43] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 44, errors: [SimplexTableau.java:504: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:504: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:504: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:504: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:504: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:504: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:506: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:506: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:506: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:506: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:506: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:506: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:506: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:508: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:508: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:509: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:510: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:510: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:511: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:511: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:512: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:513: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:513: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:513: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:514: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:514: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:514: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:514: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:514: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:514: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:527: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:527: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:527: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:527: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:527: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:527: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:531: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:531: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:535: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:535: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:543: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:543: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:543: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:543: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:552: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:552: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:552: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:552: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:552: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:556: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:556: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:560: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:560: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:564: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:564: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:569: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:569: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:579: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:579: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:584: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:584: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:588: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:588: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:592: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:592: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:596: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:596: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:598: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:598: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:601: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:608: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:608: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:608: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:608: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:608: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:608: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:617: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:617: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:617: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:617: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:617: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:617: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:617: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:617: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:617: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(22): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (numArtificialVariables == 0) { 	return; } ` -topatch--> `return numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (43(f=1.0), 44(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (43(f=1.0), )
----------Running generation: 23, population size: 1

***** Generation 23 : 0
**Parent Variant: [Variant id: 45, #gens: 186, #ops: 0, parent:-]

--Child created id: 46
--Creating new operations for variant [Variant id: 46, #gens: 186, #ops: 0, parent:45]
---analyzing modificationPoint position: 28
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  while (!isOptimal(tableau)) { 	doIteration(tableau); } 
---analyzing modificationPoint position: 17
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 1 not mutation generated in  basicRows.add(basicRow)
---analyzing modificationPoint position: 136
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 2 not mutation generated in  // x- if (!restrictToNonNegative) { 	matrix[row][getSlackVariableOffset() - 1] =  	org.apache.common[...]
---analyzing modificationPoint position: 56
location: AbstractLinearOptimizer.java103
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `iterations = 0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 46, #gens: 185, #ops: 1, parent:45] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 46
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-46/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(23): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `iterations = 0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (45(f=1.0), 46(f=1.0), )
Selected to next generation: IDs2--> (45(f=1.0), )
----------Running generation: 24, population size: 1

***** Generation 24 : 0
**Parent Variant: [Variant id: 47, #gens: 186, #ops: 0, parent:-]

--Child created id: 48
--Creating new operations for variant [Variant id: 48, #gens: 186, #ops: 0, parent:47]
---analyzing modificationPoint position: 33
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java61
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...] ` -topatch--> `tableau.discardArtificialVariables()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 61, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...] ` -topatch--> `tableau.discardArtificialVariables()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 48, #gens: 187, #ops: 1, parent:47] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 48
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-48/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 10, was successful: false, cases executed: 14] ,[]
-Valid?: |false|10|14|[]|, fitness 10.0
Ingredient counter is Zero
---Undoing: gnrtn(24): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...] ` -topatch--> `tableau.discardArtificialVariables()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (47(f=1.0), 48(f=10.0), )
Selected to next generation: IDs2--> (47(f=1.0), )
----------Running generation: 25, population size: 1

***** Generation 25 : 0
**Parent Variant: [Variant id: 49, #gens: 186, #ops: 0, parent:-]

--Child created id: 50
--Creating new operations for variant [Variant id: 50, #gens: 186, #ops: 0, parent:49]
---analyzing modificationPoint position: 5
Templates availables18
Attempts Base Ingredients  1 total 18
vars from patch [coefficients]
--> var from patch: coefficients spoon.support.reflect.code.CtVariableReadImpl
location: LinearObjectiveFunction.java92
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients.dotProduct(point) + constantTerm ` -topatch--> `coefficients = coefficients` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearObjectiveFunction line: 92, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients.dotProduct(point) + constantTerm ` -topatch--> `coefficients = coefficients` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 50, #gens: 187, #ops: 1, parent:49] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 50, errors: [LinearObjectiveFunction.java:93: error: cannot assign a value to final variable coefficients
	 */ 	public double getValue(final double[] point) { 		coefficients = coefficients; 		return coefficients.dotProduct(point) + constantTerm;
	    	                                               		^]
Ingredient counter is Zero
---Undoing: gnrtn(25): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients.dotProduct(point) + constantTerm ` -topatch--> `coefficients = coefficients` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (49(f=1.0), 50(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (49(f=1.0), )
----------Running generation: 26, population size: 1

***** Generation 26 : 0
**Parent Variant: [Variant id: 51, #gens: 186, #ops: 0, parent:-]

--Child created id: 52
--Creating new operations for variant [Variant id: 52, #gens: 186, #ops: 0, parent:51]
---analyzing modificationPoint position: 47
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; }
---analyzing modificationPoint position: 102
Templates availables18
Attempts Base Ingredients  1 total 18
---modifPoint 1 not mutation generated in  this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), constantTerm)
---analyzing modificationPoint position: 77
Templates availables259
Attempts Base Ingredients  1 total 259
---modifPoint 2 not mutation generated in  return 1
---analyzing modificationPoint position: 88
Templates availables121
Attempts Base Ingredients  1 total 121
Name Conflict [numArtificialVariables]
---modifPoint 3 not mutation generated in  int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0
---analyzing modificationPoint position: 142
---modifPoint 4 not mutation generated in  return matrix
---analyzing modificationPoint position: 70
Templates availables8
Attempts Base Ingredients  1 total 8
---modifPoint 5 not mutation generated in  for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRo[...]
---analyzing modificationPoint position: 40
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau, i, epsilon]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: i spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java77
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double minRatio = java.lang.Double.MAX_VALUE ` -topatch--> `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 77, pointed element: CtForImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double minRatio = java.lang.Double.MAX_VALUE ` -topatch--> `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 52, #gens: 187, #ops: 1, parent:51] gen mutated: 1 , gen not mut: 6, gen not applied  0
-The child does NOT compile: 52, errors: [SimplexSolver.java:136: error: incompatible types: boolean cannot be converted to java.lang.Integer
				return false;
				       ^]
Ingredient counter is Zero
---Undoing: gnrtn(26): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double minRatio = java.lang.Double.MAX_VALUE ` -topatch--> `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (51(f=1.0), 52(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (51(f=1.0), )
----------Running generation: 27, population size: 1

***** Generation 27 : 0
**Parent Variant: [Variant id: 53, #gens: 186, #ops: 0, parent:-]

--Child created id: 54
--Creating new operations for variant [Variant id: 54, #gens: 186, #ops: 0, parent:53]
---analyzing modificationPoint position: 55
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch [this.goalType]
--> var from patch: this.goalType spoon.support.reflect.code.CtFieldWriteImpl
SameName: final 




























































































org.apache.commons.math.optimization.GoalType goalType
SameName: final 




























































































org.apache.commons.math.optimization.GoalType goalType
Transforming shadowed variable in goalType = goalType
location: AbstractLinearOptimizer.java101
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `goalType = goalType` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 101, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `goalType = goalType` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 54, #gens: 186, #ops: 1, parent:53] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 54, errors: [AbstractLinearOptimizer.java:101: error: final parameter goalType may not be assigned
		this.goalType = goalType; 		goalType = goalType;
		                          		^]
Ingredient counter is Zero
---Undoing: gnrtn(27): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `goalType = goalType` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (53(f=1.0), 54(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (53(f=1.0), )
----------Running generation: 28, population size: 1

***** Generation 28 : 0
**Parent Variant: [Variant id: 55, #gens: 186, #ops: 0, parent:-]

--Child created id: 56
--Creating new operations for variant [Variant id: 56, #gens: 186, #ops: 0, parent:55]
---analyzing modificationPoint position: 131
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [f]
--> var from patch: f spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java151
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int artificialVar = 0 ` -topatch--> `return f.getCoefficients().getDimension()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 151, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int artificialVar = 0 ` -topatch--> `return f.getCoefficients().getDimension()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 56, #gens: 187, #ops: 1, parent:55] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 56, errors: [SimplexTableau.java:191: error: incompatible types: int cannot be converted to double[][]
		return f.getCoefficients().getDimension(); 		for (int i = 0; i < constraints.size(); i++) { 			org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i); 			int row = getNumObjectiveFunctions() + i; 			// decision variable coefficients 			copyArray(constraint.getCoefficients().getData(), matrix[row], 1); 			// x-
		                                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(28): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int artificialVar = 0 ` -topatch--> `return f.getCoefficients().getDimension()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (55(f=1.0), 56(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (55(f=1.0), )
----------Running generation: 29, population size: 1

***** Generation 29 : 0
**Parent Variant: [Variant id: 57, #gens: 186, #ops: 0, parent:-]

--Child created id: 58
--Creating new operations for variant [Variant id: 58, #gens: 186, #ops: 0, parent:57]
---analyzing modificationPoint position: 159
Templates availables259
Attempts Base Ingredients  1 total 259
---modifPoint 0 not mutation generated in  return org.apache.commons.math.util.MathUtils.equals(x, y) || (java.lang.Math.abs(y - x) <= eps)
---analyzing modificationPoint position: 59
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 1 not mutation generated in  java.lang.Integer pivotRow = getPivotRow(pivotCol, tableau)
---analyzing modificationPoint position: 109
Templates availables7
Attempts Base Ingredients  1 total 7
---modifPoint 2 not mutation generated in  this.value = value
---analyzing modificationPoint position: 146
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 3 not mutation generated in  for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 	norma[...]
---analyzing modificationPoint position: 164
location: ArrayRealVector.java1287
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (data.length != n) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentExc[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 58, #gens: 185, #ops: 1, parent:57] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 58
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-58/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(29): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (data.length != n) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentExc[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (57(f=1.0), 58(f=1.0), )
Selected to next generation: IDs2--> (57(f=1.0), )
----------Running generation: 30, population size: 1

***** Generation 30 : 0
**Parent Variant: [Variant id: 59, #gens: 186, #ops: 0, parent:-]

--Child created id: 60
--Creating new operations for variant [Variant id: 60, #gens: 186, #ops: 0, parent:59]
---analyzing modificationPoint position: 58
Templates availables12
Attempts Base Ingredients  1 total 12
---modifPoint 0 not mutation generated in  java.lang.Integer pivotCol = getPivotColumn(tableau)
---analyzing modificationPoint position: 102
location: LinearObjectiveFunction.java58
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), constantTerm) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 60, #gens: 185, #ops: 1, parent:59] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 60, errors: [LinearObjectiveFunction.java:61: error: variable coefficients might not have been initialized
	 */ 	public LinearObjectiveFunction(double[] coefficients, double constantTerm) {}
	    	                                                                            ^]
Ingredient counter is Zero
---Undoing: gnrtn(30): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), constantTerm) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (59(f=1.0), 60(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (59(f=1.0), )
----------Running generation: 31, population size: 1

***** Generation 31 : 0
**Parent Variant: [Variant id: 61, #gens: 186, #ops: 0, parent:-]

--Child created id: 62
--Creating new operations for variant [Variant id: 62, #gens: 186, #ops: 0, parent:61]
---analyzing modificationPoint position: 99
Templates availables31
Attempts Base Ingredients  1 total 31
---modifPoint 0 not mutation generated in  return tableau.getColumnDimension()
---analyzing modificationPoint position: 147
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  normalized.add(normalize(constraint))
---analyzing modificationPoint position: 45
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java82
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 	final double ratio [...] ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 82, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 	final double ratio [...] ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 62, #gens: 187, #ops: 1, parent:61] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 62, errors: [SimplexSolver.java:132: error: incompatible types: boolean cannot be converted to java.lang.Integer
			return true; 			if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 				final double ratio = rhs / entry; 				if (ratio < minRatio) { 					minRatio = ratio; 					minRatioPos = i;}}} 		return minRatioPos;} 	/**
			       ^]
Ingredient counter is Zero
---Undoing: gnrtn(31): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 	final double ratio [...] ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (61(f=1.0), 62(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (61(f=1.0), )
----------Running generation: 32, population size: 1

***** Generation 32 : 0
**Parent Variant: [Variant id: 63, #gens: 186, #ops: 0, parent:-]

--Child created id: 64
--Creating new operations for variant [Variant id: 64, #gens: 186, #ops: 0, parent:63]
---analyzing modificationPoint position: 63
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java116
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `// set the rest of the pivot column to 0 for (int i = 0; i < tableau.getHeight(); i++) { 	if (i != p[...] ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 116, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `// set the rest of the pivot column to 0 for (int i = 0; i < tableau.getHeight(); i++) { 	if (i != p[...] ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 64, #gens: 187, #ops: 1, parent:63] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 64, errors: [SimplexSolver.java:171: error: unreachable statement
		for (int i = 0; i < tableau.getHeight(); i++) { 			if (i != pivotRow) { 				double multiplier = tableau.getEntry(i, pivotCol); 				tableau.subtractRow(i, pivotRow, multiplier);}}} 	/**
		^]
Ingredient counter is Zero
---Undoing: gnrtn(32): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `// set the rest of the pivot column to 0 for (int i = 0; i < tableau.getHeight(); i++) { 	if (i != p[...] ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (63(f=1.0), 64(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (63(f=1.0), )
----------Running generation: 33, population size: 1

***** Generation 33 : 0
**Parent Variant: [Variant id: 65, #gens: 186, #ops: 0, parent:-]

--Child created id: 66
--Creating new operations for variant [Variant id: 66, #gens: 186, #ops: 0, parent:65]
---analyzing modificationPoint position: 12
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset[...]
---analyzing modificationPoint position: 84
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 1 not mutation generated in  dot += data[i] * v[i]
---analyzing modificationPoint position: 32
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [java.lang.Double.MAX_VALUE]
--> var from patch: java.lang.Double.MAX_VALUE spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java60
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer minPos = null ` -topatch--> `double minRatio = java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 60, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer minPos = null ` -topatch--> `double minRatio = java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 66, #gens: 187, #ops: 1, parent:65] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 66
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-66/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(33): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer minPos = null ` -topatch--> `double minRatio = java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (65(f=1.0), 66(f=1.0), )
Selected to next generation: IDs2--> (65(f=1.0), )
----------Running generation: 34, population size: 1

***** Generation 34 : 0
**Parent Variant: [Variant id: 67, #gens: 186, #ops: 0, parent:-]

--Child created id: 68
--Creating new operations for variant [Variant id: 68, #gens: 186, #ops: 0, parent:67]
---analyzing modificationPoint position: 156
---modifPoint 0 not mutation generated in  return count
---analyzing modificationPoint position: 77
---modifPoint 1 not mutation generated in  return 1
---analyzing modificationPoint position: 157
location: SimplexTableau.java248
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 68, #gens: 185, #ops: 1, parent:67] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 68
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-68/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 5, was successful: false, cases executed: 14] ,[]
-Valid?: |false|5|14|[]|, fitness 5.0
Ingredient counter is Zero
---Undoing: gnrtn(34): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (67(f=1.0), 68(f=5.0), )
Selected to next generation: IDs2--> (67(f=1.0), )
----------Running generation: 35, population size: 1

***** Generation 35 : 0
**Parent Variant: [Variant id: 69, #gens: 186, #ops: 0, parent:-]

--Child created id: 70
--Creating new operations for variant [Variant id: 70, #gens: 186, #ops: 0, parent:69]
---analyzing modificationPoint position: 116
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java112
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...] ` -topatch--> `double[] coefficients = new double[getOriginalNumDecisionVariables()]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 112, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...] ` -topatch--> `double[] coefficients = new double[getOriginalNumDecisionVariables()]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 70, #gens: 187, #ops: 1, parent:69] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 70, errors: [SimplexTableau.java:353: error: illegal start of type
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		^, SimplexTableau.java:353: error: ';' expected
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		      ^, SimplexTableau.java:357: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	       ^, SimplexTableau.java:357: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	                               		                                          ^, SimplexTableau.java:361: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	       ^, SimplexTableau.java:361: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		^, SimplexTableau.java:361: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                      ^, SimplexTableau.java:361: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                        		                  ^, SimplexTableau.java:367: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                     ^, SimplexTableau.java:367: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                         ^, SimplexTableau.java:367: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                           		                                                                                                                                                           ^, SimplexTableau.java:371: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                ^, SimplexTableau.java:371: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                                                 		                                               ^, SimplexTableau.java:377: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                          ^, SimplexTableau.java:377: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		^, SimplexTableau.java:377: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		           ^, SimplexTableau.java:377: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				        ^, SimplexTableau.java:377: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				           		             ^, SimplexTableau.java:380: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                            ^, SimplexTableau.java:380: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                    ^, SimplexTableau.java:380: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			^, SimplexTableau.java:380: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			                         ^, SimplexTableau.java:386: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                         ^, SimplexTableau.java:386: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		^, SimplexTableau.java:386: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                   ^, SimplexTableau.java:386: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                     		           ^, SimplexTableau.java:392: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                            ^, SimplexTableau.java:392: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                                       		                              ^, SimplexTableau.java:398: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                       ^, SimplexTableau.java:398: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                                  		                               ^, SimplexTableau.java:404: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                            ^, SimplexTableau.java:404: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		^, SimplexTableau.java:404: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		^, SimplexTableau.java:404: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                    ^, SimplexTableau.java:404: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                     ^, SimplexTableau.java:404: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				        ^, SimplexTableau.java:404: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				            ^, SimplexTableau.java:404: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				               		           ^, SimplexTableau.java:406: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			       ^, SimplexTableau.java:406: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		^, SimplexTableau.java:406: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		^, SimplexTableau.java:406: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		^, SimplexTableau.java:406: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                ^, SimplexTableau.java:406: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                            ^, SimplexTableau.java:406: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                ^, SimplexTableau.java:406: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                 ^, SimplexTableau.java:406: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                      ^, SimplexTableau.java:406: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                       ^, SimplexTableau.java:406: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		^, SimplexTableau.java:406: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		                                ^, SimplexTableau.java:415: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                             ^, SimplexTableau.java:415: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                 ^, SimplexTableau.java:415: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                      ^, SimplexTableau.java:415: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:419: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		^, SimplexTableau.java:419: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		^, SimplexTableau.java:419: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		^, SimplexTableau.java:419: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		^, SimplexTableau.java:419: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                ^, SimplexTableau.java:419: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                         ^, SimplexTableau.java:419: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                                			                                                                                     			^, SimplexTableau.java:426: error: class, interface, or enum expected
	 * @param dividendRow
	          ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 * @param divisor
	          ^, SimplexTableau.java:430: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                               ^, SimplexTableau.java:430: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                      ^, SimplexTableau.java:430: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                ^, SimplexTableau.java:430: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                ^, SimplexTableau.java:430: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                       			                                                                             ^, SimplexTableau.java:443: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                 ^, SimplexTableau.java:443: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                       ^, SimplexTableau.java:443: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                ^, SimplexTableau.java:443: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                ^, SimplexTableau.java:443: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                ^, SimplexTableau.java:443: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                       			                                                                                                                   ^, SimplexTableau.java:447: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                ^, SimplexTableau.java:447: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                                 		                                    ^, SimplexTableau.java:451: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                ^, SimplexTableau.java:451: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                                  		                                 ^, SimplexTableau.java:459: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                ^, SimplexTableau.java:459: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                      ^, SimplexTableau.java:459: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                     ^, SimplexTableau.java:459: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                                   		                                     ^, SimplexTableau.java:468: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                ^, SimplexTableau.java:468: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                    ^, SimplexTableau.java:468: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                   ^, SimplexTableau.java:468: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                     ^, SimplexTableau.java:468: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                     		                                     ^, SimplexTableau.java:472: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:472: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                               		                                                         ^, SimplexTableau.java:476: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                ^, SimplexTableau.java:476: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                                    		                                                                               ^, SimplexTableau.java:480: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                ^, SimplexTableau.java:480: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                     		                      ^, SimplexTableau.java:485: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                ^, SimplexTableau.java:485: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                          		                                                                      ^, SimplexTableau.java:495: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:495: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                                		                            ^, SimplexTableau.java:500: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                ^, SimplexTableau.java:500: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                        		                                                                               ^, SimplexTableau.java:504: error: class, interface, or enum expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(35): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...] ` -topatch--> `double[] coefficients = new double[getOriginalNumDecisionVariables()]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (69(f=1.0), 70(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (69(f=1.0), )
----------Running generation: 36, population size: 1

***** Generation 36 : 0
**Parent Variant: [Variant id: 71, #gens: 186, #ops: 0, parent:-]

--Child created id: 72
--Creating new operations for variant [Variant id: 72, #gens: 186, #ops: 0, parent:71]
---analyzing modificationPoint position: 63
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java116
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `// set the rest of the pivot column to 0 for (int i = 0; i < tableau.getHeight(); i++) { 	if (i != p[...] ` -topatch--> `throw new org.apache.commons.math.optimization.linear.UnboundedSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 116, pointed element: CtThrowImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `// set the rest of the pivot column to 0 for (int i = 0; i < tableau.getHeight(); i++) { 	if (i != p[...] ` -topatch--> `throw new org.apache.commons.math.optimization.linear.UnboundedSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 

--Summary Creation: for variant [Variant id: 72, #gens: 187, #ops: 1, parent:71] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 72
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-72/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 14] ,[]
-Valid?: |false|13|14|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(36): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `// set the rest of the pivot column to 0 for (int i = 0; i < tableau.getHeight(); i++) { 	if (i != p[...] ` -topatch--> `throw new org.apache.commons.math.optimization.linear.UnboundedSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (71(f=1.0), 72(f=13.0), )
Selected to next generation: IDs2--> (71(f=1.0), )
----------Running generation: 37, population size: 1

***** Generation 37 : 0
**Parent Variant: [Variant id: 73, #gens: 186, #ops: 0, parent:-]

--Child created id: 74
--Creating new operations for variant [Variant id: 74, #gens: 186, #ops: 0, parent:73]
---analyzing modificationPoint position: 183
Templates availables16
Attempts Base Ingredients  1 total 16
vars from patch []
location: Array2DRowRealMatrix.java410
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (data == null) || (data[0] == null) ? 0 : data[0].length ` -topatch--> `return new org.apache.commons.math.linear.Array2DRowRealMatrix(copyOut(), false)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.linear.Array2DRowRealMatrix line: 410, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (data == null) || (data[0] == null) ? 0 : data[0].length ` -topatch--> `return new org.apache.commons.math.linear.Array2DRowRealMatrix(copyOut(), false)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 74, #gens: 186, #ops: 1, parent:73] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 74, errors: [Array2DRowRealMatrix.java:410: error: incompatible types: org.apache.commons.math.linear.Array2DRowRealMatrix cannot be converted to int
	 */ 	@java.lang.Override 	public int getColumnDimension() { 		return new org.apache.commons.math.linear.Array2DRowRealMatrix(copyOut(), false);
	    	                    	                                  		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(37): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (data == null) || (data[0] == null) ? 0 : data[0].length ` -topatch--> `return new org.apache.commons.math.linear.Array2DRowRealMatrix(copyOut(), false)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (73(f=1.0), 74(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (73(f=1.0), )
----------Running generation: 38, population size: 1

***** Generation 38 : 0
**Parent Variant: [Variant id: 75, #gens: 186, #ops: 0, parent:-]

--Child created id: 76
--Creating new operations for variant [Variant id: 76, #gens: 186, #ops: 0, parent:75]
---analyzing modificationPoint position: 165
Templates availables68
Attempts Base Ingredients  1 total 68
vars from patch [x]
--> var from patch: x spoon.support.reflect.code.CtVariableReadImpl
location: MathUtils.java395
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || (x == y) ` -topatch--> `return x == 0.0 ? 0.0 : x > 0.0 ? 1.0 : -1.0` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.util.MathUtils line: 395, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || (x == y) ` -topatch--> `return x == 0.0 ? 0.0 : x > 0.0 ? 1.0 : -1.0` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 76, #gens: 186, #ops: 1, parent:75] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 76, errors: [MathUtils.java:1324: error: illegal start of type
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		^, MathUtils.java:1324: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		     ^, MathUtils.java:1324: error: ';' expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		        ^, MathUtils.java:1324: error: illegal start of type
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		           ^, MathUtils.java:1324: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		            ^, MathUtils.java:1324: error: ';' expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		              ^, MathUtils.java:1324: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                            ^, MathUtils.java:1324: error: illegal start of type
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                             ^, MathUtils.java:1324: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                                                                 ^, MathUtils.java:1324: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                                                                    ^, MathUtils.java:1325: error: class, interface, or enum expected
		do { 			/* assert u<0 && v<0; */ 			// B4/B3: cast out twos from t.
		^, MathUtils.java:1328: error: class, interface, or enum expected
			if (t > 0) { 				u = -t;} else { 				v = t;} 			// B6/B3. at this point both u and v should be odd. 			t = (v - u) / 2; 			// |u| larger: t positive (replace u) 			// |v| larger: t negative (replace v)} while (t != 0 ); 		return (-u) * (1 << k);// gcd is u*2^k
			             				       ^, MathUtils.java:1328: error: class, interface, or enum expected
			if (t > 0) { 				u = -t;} else { 				v = t;} 			// B6/B3. at this point both u and v should be odd. 			t = (v - u) / 2; 			// |u| larger: t positive (replace u) 			// |v| larger: t negative (replace v)} while (t != 0 ); 		return (-u) * (1 << k);// gcd is u*2^k
			             				                				      ^, MathUtils.java:1335: error: class, interface, or enum expected
	 */ 	public static int hash(double value) { 		return new java.lang.Double(value).hashCode();} 	/**
	    	              ^, MathUtils.java:1335: error: class, interface, or enum expected
	 */ 	public static int hash(double value) { 		return new java.lang.Double(value).hashCode();} 	/**
	    	                                       		                                              ^, MathUtils.java:1342: error: class, interface, or enum expected
	 */ 	public static int hash(double[] value) { 		return java.util.Arrays.hashCode(value);} 	/**
	    	              ^, MathUtils.java:1342: error: class, interface, or enum expected
	 */ 	public static int hash(double[] value) { 		return java.util.Arrays.hashCode(value);} 	/**
	    	                                         		                                        ^, MathUtils.java:1349: error: class, interface, or enum expected
	 */ 	public static byte indicator(final byte x) { 		return x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	/**
	    	              ^, MathUtils.java:1349: error: class, interface, or enum expected
	 */ 	public static byte indicator(final byte x) { 		return x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	/**
	    	                                   ^, MathUtils.java:1349: error: class, interface, or enum expected
	 */ 	public static byte indicator(final byte x) { 		return x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	/**
	    	                                             		                                                                                                                                              ^, MathUtils.java:1357: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	              ^, MathUtils.java:1357: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	                                     ^, MathUtils.java:1357: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	                                                 		                                 			                            ^, MathUtils.java:1357: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	                                                 		                                 			                              		                             ^, MathUtils.java:1364: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	              ^, MathUtils.java:1364: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	                                    ^, MathUtils.java:1364: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	                                               		                                			                           ^, MathUtils.java:1364: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	                                               		                                			                             		                                ^, MathUtils.java:1370: error: class, interface, or enum expected
	 */ 	public static int indicator(final int x) { 		return x >= 0 ? 1 : -1;} 	/**
	    	              ^, MathUtils.java:1370: error: class, interface, or enum expected
	 */ 	public static int indicator(final int x) { 		return x >= 0 ? 1 : -1;} 	/**
	    	                                  ^, MathUtils.java:1370: error: class, interface, or enum expected
	 */ 	public static int indicator(final int x) { 		return x >= 0 ? 1 : -1;} 	/**
	    	                                           		                       ^, MathUtils.java:1376: error: class, interface, or enum expected
	 */ 	public static long indicator(final long x) { 		return x >= 0L ? 1L : -1L;} 	/**
	    	              ^, MathUtils.java:1376: error: class, interface, or enum expected
	 */ 	public static long indicator(final long x) { 		return x >= 0L ? 1L : -1L;} 	/**
	    	                                   ^, MathUtils.java:1376: error: class, interface, or enum expected
	 */ 	public static long indicator(final long x) { 		return x >= 0L ? 1L : -1L;} 	/**
	    	                                             		                          ^, MathUtils.java:1383: error: class, interface, or enum expected
	 */ 	public static short indicator(final short x) { 		return x >= org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} 	/**
	    	              ^, MathUtils.java:1383: error: class, interface, or enum expected
	 */ 	public static short indicator(final short x) { 		return x >= org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} 	/**
	    	                                    ^, MathUtils.java:1383: error: class, interface, or enum expected
	 */ 	public static short indicator(final short x) { 		return x >= org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} 	/**
	    	                                               		                                                                                                                                              ^, MathUtils.java:1407: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	              ^, MathUtils.java:1407: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			         ^, MathUtils.java:1407: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			           		                                                                                                                                           		^, MathUtils.java:1407: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			           		                                                                                                                                           		                                          			                                                                 ^, MathUtils.java:1407: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			           		                                                                                                                                           		                                          			                                                                   		           ^, MathUtils.java:1424: error: class, interface, or enum expected
	 */ 	public static double log(double base, double x) { 		return java.lang.Math.log(x) / java.lang.Math.log(base);} 	/**
	    	              ^, MathUtils.java:1424: error: class, interface, or enum expected
	 */ 	public static double log(double base, double x) { 		return java.lang.Math.log(x) / java.lang.Math.log(base);} 	/**
	    	                                                  		                                                        ^, MathUtils.java:1436: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	              ^, MathUtils.java:1436: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	                                              		                                      		^, MathUtils.java:1436: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	                                              		                                      		                                                                              			                                                         ^, MathUtils.java:1436: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	                                              		                                      		                                                                              			                                                           		                   ^, MathUtils.java:1448: error: class, interface, or enum expected
	 */ 	public static long mulAndCheck(long a, long b) { 		long ret; 		java.lang.String msg = "overflow: multiply"; 		if (a > b) { 			// use symmetry to reduce boundary cases 			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);} else if (a < 0) { 			if (b < 0) { 				// check for positive overflow with negative a, negative b
	    	              ^, MathUtils.java:1448: error: class, interface, or enum expected
	 */ 	public static long mulAndCheck(long a, long b) { 		long ret; 		java.lang.String msg = "overflow: multiply"; 		if (a > b) { 			// use symmetry to reduce boundary cases 			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);} else if (a < 0) { 			if (b < 0) { 				// check for positive overflow with negative a, negative b
	    	                                                 		          		^, MathUtils.java:1448: error: class, interface, or enum expected
	 */ 	public static long mulAndCheck(long a, long b) { 		long ret; 		java.lang.String msg = "overflow: multiply"; 		if (a > b) { 			// use symmetry to reduce boundary cases 			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);} else if (a < 0) { 			if (b < 0) { 				// check for positive overflow with negative a, negative b
	    	                                                 		          		                                             		^, MathUtils.java:1449: error: class, interface, or enum expected
				if (a >= (java.lang.Long.MAX_VALUE / b)) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else if (b > 0) { 				// check for negative overflow with negative a, positive b
				                                           					            ^, MathUtils.java:1449: error: class, interface, or enum expected
				if (a >= (java.lang.Long.MAX_VALUE / b)) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else if (b > 0) { 				// check for negative overflow with negative a, positive b
				                                           					                     					                                             ^, MathUtils.java:1450: error: class, interface, or enum expected
				if ((java.lang.Long.MIN_VALUE / b) <= a) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else { 				// assert b == 0 				ret = 0;}} else if (a > 0) { 			// assert a > 0 			// assert b > 0 			// check for positive overflow with positive a, positive b
				                                           					            ^, MathUtils.java:1450: error: class, interface, or enum expected
				if ((java.lang.Long.MIN_VALUE / b) <= a) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else { 				// assert b == 0 				ret = 0;}} else if (a > 0) { 			// assert a > 0 			// assert b > 0 			// check for positive overflow with positive a, positive b
				                                           					                     					                                             ^, MathUtils.java:1451: error: class, interface, or enum expected
			if (a <= (java.lang.Long.MAX_VALUE / b)) { 				ret = a * b;} else { 				throw new java.lang.ArithmeticException(msg);}} else { 			// assert a == 0 			ret = 0;} 		return ret;} 	/**
			                                           				            ^, MathUtils.java:1451: error: class, interface, or enum expected
			if (a <= (java.lang.Long.MAX_VALUE / b)) { 				ret = a * b;} else { 				throw new java.lang.ArithmeticException(msg);}} else { 			// assert a == 0 			ret = 0;} 		return ret;} 	/**
			                                           				                     				                                             ^, MathUtils.java:1457: error: class, interface, or enum expected
	 * <code>d</code> is returned; otherwise the largest representable number
	                               ^, MathUtils.java:1462: error: class, interface, or enum expected
	 * @param d
	          ^, MathUtils.java:1464: error: class, interface, or enum expected
	 * @param direction
	          ^, MathUtils.java:1467: error: <identifier> expected
	 * @return the next machine representable number in the specified direction
	    ^, MathUtils.java:1467: error: class, interface, or enum expected
	 * @return the next machine representable number in the specified direction
	           ^, MathUtils.java:1468: error: class, interface, or enum expected
	 * @since 1.2
	          ^, MathUtils.java:1469: error: class, interface, or enum expected
	 */ 	public static double nextAfter(double d, double direction) { 		// handling of some important special cases
	    	              ^, MathUtils.java:1470: error: class, interface, or enum expected
		if (java.lang.Double.isNaN(d) || java.lang.Double.isInfinite(d)) { 			return d;} else if (d == 0) { 			return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;} 		// special cases MAX_VALUE to infinity and  MIN_VALUE to 0 		// are handled just as normal numbers 		// split the double in raw components 		long bits = java.lang.Double.doubleToLongBits(d); 		long sign = bits & 0x8000000000000000L; 		long exponent = bits & 0x7ff0000000000000L; 		long mantissa = bits & 0xfffffffffffffL; 		if ((d * (direction - d)) >= 0) { 			// we should increase the mantissa
		                                                                   			         ^, MathUtils.java:1470: error: class, interface, or enum expected
		if (java.lang.Double.isNaN(d) || java.lang.Double.isInfinite(d)) { 			return d;} else if (d == 0) { 			return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;} 		// special cases MAX_VALUE to infinity and  MIN_VALUE to 0 		// are handled just as normal numbers 		// split the double in raw components 		long bits = java.lang.Double.doubleToLongBits(d); 		long sign = bits & 0x8000000000000000L; 		long exponent = bits & 0x7ff0000000000000L; 		long mantissa = bits & 0xfffffffffffffL; 		if ((d * (direction - d)) >= 0) { 			// we should increase the mantissa
		                                                                   			                              			                                                                                ^, MathUtils.java:1471: error: class, interface, or enum expected
			if (mantissa == 0xfffffffffffffL) { 				return java.lang.Double.longBitsToDouble(sign | (exponent + 0x10000000000000L));} else { 				return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa + 1));}} else // we should decrease the mantissa
			                                    				                                                                                ^, MathUtils.java:1471: error: class, interface, or enum expected
			if (mantissa == 0xfffffffffffffL) { 				return java.lang.Double.longBitsToDouble(sign | (exponent + 0x10000000000000L));} else { 				return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa + 1));}} else // we should decrease the mantissa
			                                    				                                                                                         				                                                                             ^, MathUtils.java:1472: error: class, interface, or enum expected
		if (mantissa == 0L) { 			return java.lang.Double.longBitsToDouble((sign | (exponent - 0x10000000000000L)) | 0xfffffffffffffL);} else { 			return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa - 1));}} 	/**
		                      			                                                                                                     ^, MathUtils.java:1472: error: class, interface, or enum expected
		if (mantissa == 0L) { 			return java.lang.Double.longBitsToDouble((sign | (exponent - 0x10000000000000L)) | 0xfffffffffffffL);} else { 			return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa - 1));}} 	/**
		                      			                                                                                                              			                                                                             ^, MathUtils.java:1482: error: class, interface, or enum expected
	 */ 	public static double scalb(final double d, final int scaleFactor) { 		// handling of some important special cases
	    	              ^, MathUtils.java:1482: error: class, interface, or enum expected
	 */ 	public static double scalb(final double d, final int scaleFactor) { 		// handling of some important special cases
	    	                                 ^, MathUtils.java:1482: error: class, interface, or enum expected
	 */ 	public static double scalb(final double d, final int scaleFactor) { 		// handling of some important special cases
	    	                                                 ^, MathUtils.java:1483: error: class, interface, or enum expected
		if (((d == 0) || java.lang.Double.isNaN(d)) || java.lang.Double.isInfinite(d)) { 			return d;} 		// split the double in raw components 		final long bits = java.lang.Double.doubleToLongBits(d); 		final long exponent = bits & 0x7ff0000000000000L; 		final long rest = bits & 0x800fffffffffffffL; 		// shift the exponent 		final long newBits = rest | (exponent + (((long) (scaleFactor)) << 52)); 		return java.lang.Double.longBitsToDouble(newBits);} 	/**
		                                                                                 			         ^, MathUtils.java:1487: error: class, interface, or enum expected
	 *   <li>normalize an angle between 0 and 2&pi;:<br/>
	                                               ^, MathUtils.java:1488: error: class, interface, or enum expected
	 *       <code>a = MathUtils.normalizeAngle(a, Math.PI);</code></li>
	                                                        ^, MathUtils.java:1489: error: class, interface, or enum expected
	 *   <li>normalize an angle between -&pi; and +&pi;<br/>
	                                          ^, MathUtils.java:1489: error: class, interface, or enum expected
	 *   <li>normalize an angle between -&pi; and +&pi;<br/>
	                                                   ^, MathUtils.java:1490: error: class, interface, or enum expected
	 *       <code>a = MathUtils.normalizeAngle(a, 0.0);</code></li>
	                                                    ^, MathUtils.java:1492: error: class, interface, or enum expected
	 *       <code>angle = MathUtils.normalizeAngle(end, start) - start;</code></li>
	                                                                    ^, MathUtils.java:1494: error: class, interface, or enum expected
	 * <p>Note that due to numerical accuracy and since &pi; cannot be represented
	                                                         ^, MathUtils.java:1498: error: class, interface, or enum expected
	 * @param a
	          ^, MathUtils.java:1500: error: class, interface, or enum expected
	 * @param center
	          ^, MathUtils.java:1501: error: class, interface, or enum expected
	 * 		center of the desired 2&pi; interval for the result
	   		                            ^, MathUtils.java:1502: error: <identifier> expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	    ^, MathUtils.java:1502: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	           ^, MathUtils.java:1502: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                    ^, MathUtils.java:1502: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                   ^, MathUtils.java:1502: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                       ^, MathUtils.java:1502: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                                  ^, MathUtils.java:1502: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                                      ^, MathUtils.java:1503: error: class, interface, or enum expected
	 * @since 1.2
	 ^, MathUtils.java:1503: error: class, interface, or enum expected
	 * @since 1.2
	          ^, MathUtils.java:1504: error: class, interface, or enum expected
	 */ 	public static double normalizeAngle(double a, double center) { 		return a - (org.apache.commons.math.util.MathUtils.TWO_PI * java.lang.Math.floor(((a + java.lang.Math.PI) - center) / org.apache.commons.math.util.MathUtils.TWO_PI));} 	/**
	    	              ^, MathUtils.java:1504: error: class, interface, or enum expected
	 */ 	public static double normalizeAngle(double a, double center) { 		return a - (org.apache.commons.math.util.MathUtils.TWO_PI * java.lang.Math.floor(((a + java.lang.Math.PI) - center) / org.apache.commons.math.util.MathUtils.TWO_PI));} 	/**
	    	                                                               		                                                                                                                                                                      ^, MathUtils.java:1514: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale) { 		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} 	/**
	    	              ^, MathUtils.java:1514: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale) { 		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} 	/**
	    	                                                  		                                                                                                  ^, MathUtils.java:1528: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale, int roundingMethod) { 		try { 			return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { 			if (java.lang.Double.isInfinite(x)) { 				return x;} else { 				return java.lang.Double.NaN;}}} 	/**
	    	              ^, MathUtils.java:1528: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale, int roundingMethod) { 		try { 			return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { 			if (java.lang.Double.isInfinite(x)) { 				return x;} else { 				return java.lang.Double.NaN;}}} 	/**
	    	                                                                      		      			                                                                                                            ^, MathUtils.java:1528: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale, int roundingMethod) { 		try { 			return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { 			if (java.lang.Double.isInfinite(x)) { 				return x;} else { 				return java.lang.Double.NaN;}}} 	/**
	    	                                                                      		      			                                                                                                                                                           			                                      				         ^]
Ingredient counter is Zero
---Undoing: gnrtn(38): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || (x == y) ` -topatch--> `return x == 0.0 ? 0.0 : x > 0.0 ? 1.0 : -1.0` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (75(f=1.0), 76(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (75(f=1.0), )
----------Running generation: 39, population size: 1

***** Generation 39 : 0
**Parent Variant: [Variant id: 77, #gens: 186, #ops: 0, parent:-]

--Child created id: 78
--Creating new operations for variant [Variant id: 78, #gens: 186, #ops: 0, parent:77]
---analyzing modificationPoint position: 145
Templates availables24
Attempts Base Ingredients  1 total 24
---modifPoint 0 not mutation generated in  java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...]
---analyzing modificationPoint position: 142
---modifPoint 1 not mutation generated in  return matrix
---analyzing modificationPoint position: 82
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 2 not mutation generated in  double dot = 0
---analyzing modificationPoint position: 65
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java118
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double multiplier = tableau.getEntry(i, pivotCol) ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 118, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double multiplier = tableau.getEntry(i, pivotCol) ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 78, #gens: 187, #ops: 1, parent:77] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 78
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-78/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 14] ,[]
-Valid?: |false|2|14|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(39): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double multiplier = tableau.getEntry(i, pivotCol) ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (77(f=1.0), 78(f=2.0), )
Selected to next generation: IDs2--> (77(f=1.0), )
----------Running generation: 40, population size: 1

***** Generation 40 : 0
**Parent Variant: [Variant id: 79, #gens: 186, #ops: 0, parent:-]

--Child created id: 80
--Creating new operations for variant [Variant id: 80, #gens: 186, #ops: 0, parent:79]
---analyzing modificationPoint position: 26
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java188
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `while (!isOptimal(tableau)) { 	doIteration(tableau); } ` (spoon.support.reflect.code.CtWhileImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 188, pointed element: CtWhileImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `while (!isOptimal(tableau)) { 	doIteration(tableau); } ` (spoon.support.reflect.code.CtWhileImpl) 

--Summary Creation: for variant [Variant id: 80, #gens: 187, #ops: 1, parent:79] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 80
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-80/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 11, was successful: false, cases executed: 14] ,[]
-Valid?: |false|11|14|[]|, fitness 11.0
Ingredient counter is Zero
---Undoing: gnrtn(40): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `while (!isOptimal(tableau)) { 	doIteration(tableau); } ` (spoon.support.reflect.code.CtWhileImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (79(f=1.0), 80(f=11.0), )
Selected to next generation: IDs2--> (79(f=1.0), )
----------Running generation: 41, population size: 1

***** Generation 41 : 0
**Parent Variant: [Variant id: 81, #gens: 186, #ops: 0, parent:-]

--Child created id: 82
--Creating new operations for variant [Variant id: 82, #gens: 186, #ops: 0, parent:81]
---analyzing modificationPoint position: 116
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 0 not mutation generated in  this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...]
---analyzing modificationPoint position: 9
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  return getBasicRow(col, false)
---analyzing modificationPoint position: 96
Templates availables45
Attempts Base Ingredients  1 total 45
vars from patch [data]
--> var from patch: data spoon.support.reflect.code.CtFieldReadImpl
location: ArrayRealVector.java342
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return new org.apache.commons.math.linear.ArrayRealVector(out) ` -topatch--> `return org.apache.commons.math.util.MathUtils.hash(data)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.linear.ArrayRealVector line: 342, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return new org.apache.commons.math.linear.ArrayRealVector(out) ` -topatch--> `return org.apache.commons.math.util.MathUtils.hash(data)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 82, #gens: 186, #ops: 1, parent:81] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 82, errors: [ArrayRealVector.java:1395: error: incompatible types: int cannot be converted to org.apache.commons.math.linear.RealVector
		return org.apache.commons.math.util.MathUtils.hash(data);} 	/**
		                                                  ^]
Ingredient counter is Zero
---Undoing: gnrtn(41): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return new org.apache.commons.math.linear.ArrayRealVector(out) ` -topatch--> `return org.apache.commons.math.util.MathUtils.hash(data)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (81(f=1.0), 82(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (81(f=1.0), )
----------Running generation: 42, population size: 1

***** Generation 42 : 0
**Parent Variant: [Variant id: 83, #gens: 186, #ops: 0, parent:-]

--Child created id: 84
--Creating new operations for variant [Variant id: 84, #gens: 186, #ops: 0, parent:83]
---analyzing modificationPoint position: 152
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [numDecisionVariables]
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java234
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int count = 0 ` -topatch--> `return numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 234, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int count = 0 ` -topatch--> `return numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 84, #gens: 187, #ops: 1, parent:83] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 84, errors: [SimplexTableau.java:516: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:516: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:516: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:516: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:516: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:516: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:518: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:518: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:518: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:518: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:518: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:518: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:518: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:520: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:520: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:521: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:522: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:522: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:523: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:523: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:524: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:525: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:525: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:525: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:526: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:526: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:526: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:526: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:526: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:526: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:539: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:539: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:539: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:539: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:539: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:539: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:543: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:543: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:547: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:547: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:555: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:555: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:555: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:555: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:564: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:564: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:564: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:564: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:564: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:568: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:568: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:572: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:576: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:576: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:581: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:581: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:591: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:591: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:596: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:596: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:600: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:600: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:604: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:604: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:608: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:608: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:610: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:610: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:613: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:620: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:620: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:620: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:620: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:620: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:620: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:629: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:629: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:629: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:629: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:629: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:629: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:629: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:629: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:629: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(42): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int count = 0 ` -topatch--> `return numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (83(f=1.0), 84(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (83(f=1.0), )
----------Running generation: 43, population size: 1

***** Generation 43 : 0
**Parent Variant: [Variant id: 85, #gens: 186, #ops: 0, parent:-]

--Child created id: 86
--Creating new operations for variant [Variant id: 86, #gens: 186, #ops: 0, parent:85]
---analyzing modificationPoint position: 23
Templates availables4
Attempts Base Ingredients  1 total 4
vars from patch [tableau, i, epsilon]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: i spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java150
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...] ` -topatch--> `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 150, pointed element: CtForImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...] ` -topatch--> `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 86, #gens: 186, #ops: 1, parent:85] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 86
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-86/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(43): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...] ` -topatch--> `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (85(f=1.0), 86(f=1.0), )
Selected to next generation: IDs2--> (85(f=1.0), )
----------Running generation: 44, population size: 1

***** Generation 44 : 0
**Parent Variant: [Variant id: 87, #gens: 186, #ops: 0, parent:-]

--Child created id: 88
--Creating new operations for variant [Variant id: 88, #gens: 186, #ops: 0, parent:87]
---analyzing modificationPoint position: 27
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [f, constraints, goalType, restrictToNonNegative, epsilon]
--> var from patch: f spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: constraints spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: goalType spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java189
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `final org.apache.commons.math.optimization.linear.SimplexTableau tableau =  new org.apache.commons.m[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 189, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `final org.apache.commons.math.optimization.linear.SimplexTableau tableau =  new org.apache.commons.m[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 88, #gens: 187, #ops: 1, parent:87] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 88, errors: [SimplexSolver.java:190: error: variable tableau is already defined in method doOptimize()
		tableau.discardArtificialVariables(); 		final org.apache.commons.math.optimization.linear.SimplexTableau tableau = new org.apache.commons.math.optimization.linear.SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon);
		                                      		                                                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(44): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `final org.apache.commons.math.optimization.linear.SimplexTableau tableau =  new org.apache.commons.m[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (87(f=1.0), 88(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (87(f=1.0), )
----------Running generation: 45, population size: 1

***** Generation 45 : 0
**Parent Variant: [Variant id: 89, #gens: 186, #ops: 0, parent:-]

--Child created id: 90
--Creating new operations for variant [Variant id: 90, #gens: 186, #ops: 0, parent:89]
---analyzing modificationPoint position: 59
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  java.lang.Integer pivotRow = getPivotRow(pivotCol, tableau)
---analyzing modificationPoint position: 90
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) [...]
---analyzing modificationPoint position: 21
---modifPoint 2 not mutation generated in  return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1
---analyzing modificationPoint position: 82
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch []
location: ArrayRealVector.java885
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double dot = 0 ` -topatch--> `double max = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.linear.ArrayRealVector line: 885, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double dot = 0 ` -topatch--> `double max = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 90, #gens: 186, #ops: 1, parent:89] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 90, errors: [ArrayRealVector.java:924: error: cannot find symbol
		double max = 0; 		for (int i = 0; i < data.length; i++) { 			dot += data[i] * v[i];} 		return dot;} 	/**
		                		                                        			^
  symbol:   variable dot
  location: class org.apache.commons.math.linear.ArrayRealVector, ArrayRealVector.java:924: error: cannot find symbol
		double max = 0; 		for (int i = 0; i < data.length; i++) { 			dot += data[i] * v[i];} 		return dot;} 	/**
		                		                                        			                        		       ^
  symbol:   variable dot
  location: class org.apache.commons.math.linear.ArrayRealVector]
Ingredient counter is Zero
---Undoing: gnrtn(45): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double dot = 0 ` -topatch--> `double max = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (89(f=1.0), 90(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (89(f=1.0), )
----------Running generation: 46, population size: 1

***** Generation 46 : 0
**Parent Variant: [Variant id: 91, #gens: 186, #ops: 0, parent:-]

--Child created id: 92
--Creating new operations for variant [Variant id: 92, #gens: 186, #ops: 0, parent:91]
---analyzing modificationPoint position: 142
---modifPoint 0 not mutation generated in  return matrix
---analyzing modificationPoint position: 92
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  return row
---analyzing modificationPoint position: 127
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 2 not mutation generated in  copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions())
---analyzing modificationPoint position: 91
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 3 not mutation generated in  row = i
---analyzing modificationPoint position: 163
---modifPoint 4 not mutation generated in  return value
---analyzing modificationPoint position: 141
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [height, width]
--> var from patch: height spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: width spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java176
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `// artificial variables if ((constraint.getRelationship() == org.apache.commons.math.optimization.li[...] ` -topatch--> `double[][] matrix = new double[height][width]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 176, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `// artificial variables if ((constraint.getRelationship() == org.apache.commons.math.optimization.li[...] ` -topatch--> `double[][] matrix = new double[height][width]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 92, #gens: 187, #ops: 1, parent:91] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child does NOT compile: 92, errors: [SimplexTableau.java:174: error: variable matrix is already defined in method createTableau(boolean)
			} 			double[][] matrix = new double[height][width];
			  			           ^]
Ingredient counter is Zero
---Undoing: gnrtn(46): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `// artificial variables if ((constraint.getRelationship() == org.apache.commons.math.optimization.li[...] ` -topatch--> `double[][] matrix = new double[height][width]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (91(f=1.0), 92(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (91(f=1.0), )
----------Running generation: 47, population size: 1

***** Generation 47 : 0
**Parent Variant: [Variant id: 93, #gens: 186, #ops: 0, parent:-]

--Child created id: 94
--Creating new operations for variant [Variant id: 94, #gens: 186, #ops: 0, parent:93]
---analyzing modificationPoint position: 38
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [iterations]
--> var from patch: iterations spoon.support.reflect.code.CtFieldWriteImpl
location: AbstractLinearOptimizer.java67
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 67, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 94, #gens: 187, #ops: 1, parent:93] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 94
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-94/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(47): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (93(f=1.0), 94(f=14.0), )
Selected to next generation: IDs2--> (93(f=1.0), )
----------Running generation: 48, population size: 1

***** Generation 48 : 0
**Parent Variant: [Variant id: 95, #gens: 186, #ops: 0, parent:-]

--Child created id: 96
--Creating new operations for variant [Variant id: 96, #gens: 186, #ops: 0, parent:95]
---analyzing modificationPoint position: 45
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java82
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 	final double ratio [...] ` -topatch--> `throw new org.apache.commons.math.optimization.linear.NoFeasibleSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 82, pointed element: CtThrowImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 	final double ratio [...] ` -topatch--> `throw new org.apache.commons.math.optimization.linear.NoFeasibleSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 

--Summary Creation: for variant [Variant id: 96, #gens: 187, #ops: 1, parent:95] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 96, errors: [SimplexSolver.java:179: error: unreachable statement
			throw new org.apache.commons.math.optimization.linear.NoFeasibleSolutionException(); 			if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 				final double ratio = rhs / entry; 				if (ratio < minRatio) { 					minRatio = ratio; 					minRatioPos = i;}}} 		return minRatioPos;} 	/**
			                                                                                     			^, SimplexSolver.java:179: error: unreported exception org.apache.commons.math.optimization.linear.NoFeasibleSolutionException; must be caught or declared to be thrown
			throw new org.apache.commons.math.optimization.linear.NoFeasibleSolutionException(); 			if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 				final double ratio = rhs / entry; 				if (ratio < minRatio) { 					minRatio = ratio; 					minRatioPos = i;}}} 		return minRatioPos;} 	/**
			^]
Ingredient counter is Zero
---Undoing: gnrtn(48): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 	final double ratio [...] ` -topatch--> `throw new org.apache.commons.math.optimization.linear.NoFeasibleSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (95(f=1.0), 96(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (95(f=1.0), )
----------Running generation: 49, population size: 1

***** Generation 49 : 0
**Parent Variant: [Variant id: 97, #gens: 186, #ops: 0, parent:-]

--Child created id: 98
--Creating new operations for variant [Variant id: 98, #gens: 186, #ops: 0, parent:97]
---analyzing modificationPoint position: 37
location: SimplexSolver.java64
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `minPos = i ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 98, #gens: 185, #ops: 1, parent:97] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 98
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-98/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(49): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `minPos = i ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (97(f=1.0), 98(f=14.0), )
Selected to next generation: IDs2--> (97(f=1.0), )
----------Running generation: 50, population size: 1

***** Generation 50 : 0
**Parent Variant: [Variant id: 99, #gens: 186, #ops: 0, parent:-]

--Child created id: 100
--Creating new operations for variant [Variant id: 100, #gens: 186, #ops: 0, parent:99]
---analyzing modificationPoint position: 55
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch [iterations]
--> var from patch: iterations spoon.support.reflect.code.CtFieldWriteImpl
location: AbstractLinearOptimizer.java101
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 101, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 100, #gens: 186, #ops: 1, parent:99] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 100
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-100/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 14] ,[]
-Valid?: |false|4|14|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(50): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (99(f=1.0), 100(f=4.0), )
Selected to next generation: IDs2--> (99(f=1.0), )
----------Running generation: 51, population size: 1

***** Generation 51 : 0
**Parent Variant: [Variant id: 101, #gens: 186, #ops: 0, parent:-]

--Child created id: 102
--Creating new operations for variant [Variant id: 102, #gens: 186, #ops: 0, parent:101]
---analyzing modificationPoint position: 24
location: SimplexSolver.java151
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { 	ret[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 102, #gens: 185, #ops: 1, parent:101] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 102
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-102/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 14] ,[]
-Valid?: |false|8|14|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(51): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { 	ret[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (101(f=1.0), 102(f=8.0), )
Selected to next generation: IDs2--> (101(f=1.0), )
----------Running generation: 52, population size: 1

***** Generation 52 : 0
**Parent Variant: [Variant id: 103, #gens: 186, #ops: 0, parent:-]

--Child created id: 104
--Creating new operations for variant [Variant id: 104, #gens: 186, #ops: 0, parent:103]
---analyzing modificationPoint position: 16
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java346
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (basicRows.contains(basicRow)) { 	// if multiple variables can take a given value 	// then we cho[...] ` -topatch--> `return tableau.getData()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 346, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (basicRows.contains(basicRow)) { 	// if multiple variables can take a given value 	// then we cho[...] ` -topatch--> `return tableau.getData()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 104, #gens: 187, #ops: 1, parent:103] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 104, errors: [SimplexTableau.java:507: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:507: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:507: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:507: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:507: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:507: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:509: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:509: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:509: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:509: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:509: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:509: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:509: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:511: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:511: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:512: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:513: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:513: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:514: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:514: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:515: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:516: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:516: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:516: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:517: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:517: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:517: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:517: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:517: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:517: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:530: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:530: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:530: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:530: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:530: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:530: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:534: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:534: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:538: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:538: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:546: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:546: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:546: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:546: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:555: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:555: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:555: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:555: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:555: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:559: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:559: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:563: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:563: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:567: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:567: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:572: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:582: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:582: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:587: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:587: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:591: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:591: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:595: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:595: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:599: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:599: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:601: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:601: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:604: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:611: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:611: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:611: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:611: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:611: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:611: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:620: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:620: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:620: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:620: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:620: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:620: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:620: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:620: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:620: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(52): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (basicRows.contains(basicRow)) { 	// if multiple variables can take a given value 	// then we cho[...] ` -topatch--> `return tableau.getData()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (103(f=1.0), 104(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (103(f=1.0), )
----------Running generation: 53, population size: 1

***** Generation 53 : 0
**Parent Variant: [Variant id: 105, #gens: 186, #ops: 0, parent:-]

--Child created id: 106
--Creating new operations for variant [Variant id: 106, #gens: 186, #ops: 0, parent:105]
---analyzing modificationPoint position: 88
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java292
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0 ` -topatch--> `java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset())` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 292, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0 ` -topatch--> `java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset())` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 106, #gens: 187, #ops: 1, parent:105] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 106, errors: [SimplexTableau.java:372: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	^, SimplexTableau.java:372: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	          ^, SimplexTableau.java:372: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                        ^, SimplexTableau.java:372: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                                               ^, SimplexTableau.java:372: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                                                                    ^, SimplexTableau.java:389: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	^, SimplexTableau.java:389: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	          ^, SimplexTableau.java:389: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                          ^, SimplexTableau.java:389: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                ^, SimplexTableau.java:389: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                                         ^, SimplexTableau.java:389: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                                                               ^, SimplexTableau.java:398: error: illegal start of expression
	 */ 	protected final int getWidth() {
	    	^, SimplexTableau.java:398: error: ';' expected
	 */ 	protected final int getWidth() {
	    	                            ^, SimplexTableau.java:406: error: illegal start of expression
	 */ 	protected final int getHeight() {
	    	^, SimplexTableau.java:406: error: ';' expected
	 */ 	protected final int getHeight() {
	    	                             ^, SimplexTableau.java:418: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	^, SimplexTableau.java:418: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                               ^, SimplexTableau.java:418: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                              ^, SimplexTableau.java:418: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                                               ^, SimplexTableau.java:428: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	^, SimplexTableau.java:428: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                             ^, SimplexTableau.java:428: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                            ^, SimplexTableau.java:428: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                              ^, SimplexTableau.java:428: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                                                 ^, SimplexTableau.java:433: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() {
	    	^, SimplexTableau.java:433: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() {
	    	                                          ^, SimplexTableau.java:441: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() {
	    	^, SimplexTableau.java:441: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() {
	    	                                               ^, SimplexTableau.java:449: error: illegal start of expression
	 */ 	protected final int getRhsOffset() {
	    	^, SimplexTableau.java:449: error: ';' expected
	 */ 	protected final int getRhsOffset() {
	    	                                ^, SimplexTableau.java:458: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() {
	    	^, SimplexTableau.java:458: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() {
	    	                                                     ^, SimplexTableau.java:472: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() {
	    	^, SimplexTableau.java:472: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() {
	    	                                           ^, SimplexTableau.java:481: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() {
	    	^, SimplexTableau.java:481: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() {
	    	                                                   ^, SimplexTableau.java:489: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() {
	    	^, SimplexTableau.java:489: error: ';' expected
	 */ 	protected final int getNumSlackVariables() {
	    	                                        ^, SimplexTableau.java:497: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() {
	    	^, SimplexTableau.java:497: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() {
	    	                                             ^, SimplexTableau.java:505: error: illegal start of expression
	 */ 	protected final double[][] getData() {
	    	^, SimplexTableau.java:505: error: ';' expected
	 */ 	protected final double[][] getData() {
	    	                                  ^, SimplexTableau.java:511: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) {
	    	                    	                     ^, SimplexTableau.java:511: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) {
	    	                    	                                            ^, SimplexTableau.java:542: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() {
	    	                    	                   ^, SimplexTableau.java:560: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	^, SimplexTableau.java:560: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	        ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                        ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                       ^, SimplexTableau.java:560: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                                       ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                                                   ^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	        ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                     ^, SimplexTableau.java:572: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                              ^, SimplexTableau.java:572: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                                                   ^, SimplexTableau.java:573: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(53): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0 ` -topatch--> `java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset())` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (105(f=1.0), 106(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (105(f=1.0), )
----------Running generation: 54, population size: 1

***** Generation 54 : 0
**Parent Variant: [Variant id: 107, #gens: 186, #ops: 0, parent:-]

--Child created id: 108
--Creating new operations for variant [Variant id: 108, #gens: 186, #ops: 0, parent:107]
---analyzing modificationPoint position: 161
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch [this.value]
--> var from patch: this.value spoon.support.reflect.code.CtFieldWriteImpl
SameName: final 














































double value
SameName: final 














































double value
Transforming shadowed variable in value = value
location: RealPointValuePair.java49
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = point.clone() ` -topatch--> `value = value` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.RealPointValuePair line: 49, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = point.clone() ` -topatch--> `value = value` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 108, #gens: 187, #ops: 1, parent:107] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 108, errors: [RealPointValuePair.java:52: error: final parameter value may not be assigned
	 */ 	public RealPointValuePair(final double[] point, final double value) { 		value = value; 		this.point = point.clone(); 		this.value = value;}
	    	                                                                      		^]
Ingredient counter is Zero
---Undoing: gnrtn(54): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = point.clone() ` -topatch--> `value = value` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (107(f=1.0), 108(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (107(f=1.0), )
----------Running generation: 55, population size: 1

***** Generation 55 : 0
**Parent Variant: [Variant id: 109, #gens: 186, #ops: 0, parent:-]

--Child created id: 110
--Creating new operations for variant [Variant id: 110, #gens: 186, #ops: 0, parent:109]
---analyzing modificationPoint position: 0
---modifPoint 0 not mutation generated in  return
---analyzing modificationPoint position: 86
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 1 not mutation generated in  this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), relationship, value)
---analyzing modificationPoint position: 72
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 2 not mutation generated in  return numArtificialVariables
---analyzing modificationPoint position: 135
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [this.numSlackVariables, org.apache.commons.math.optimization.linear.Relationship.LEQ, org.apache.commons.math.optimization.linear.Relationship.GEQ]
--> var from patch: this.numSlackVariables spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: org.apache.commons.math.optimization.linear.Relationship.LEQ spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math.optimization.linear.Relationship.GEQ spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java157
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `// decision variable coefficients copyArray(constraint.getCoefficients().getData(), matrix[row], 1) ` -topatch--> `this.numSlackVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relatio[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 157, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `// decision variable coefficients copyArray(constraint.getCoefficients().getData(), matrix[row], 1) ` -topatch--> `this.numSlackVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relatio[...]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 110, #gens: 187, #ops: 1, parent:109] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 110, errors: [SimplexTableau.java:158: error: cannot assign a value to final variable numSlackVariables
			copyArray(constraint.getCoefficients().getData(), matrix[row], 1); 			this.numSlackVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relationship.LEQ) + getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relationship.GEQ);
			                                                                   			    ^]
Ingredient counter is Zero
---Undoing: gnrtn(55): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `// decision variable coefficients copyArray(constraint.getCoefficients().getData(), matrix[row], 1) ` -topatch--> `this.numSlackVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relatio[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (109(f=1.0), 110(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (109(f=1.0), )
----------Running generation: 56, population size: 1

***** Generation 56 : 0
**Parent Variant: [Variant id: 111, #gens: 186, #ops: 0, parent:-]

--Child created id: 112
--Creating new operations for variant [Variant id: 112, #gens: 186, #ops: 0, parent:111]
---analyzing modificationPoint position: 104
Templates availables18
Attempts Base Ingredients  1 total 18
vars from patch [coefficients]
--> var from patch: coefficients spoon.support.reflect.code.CtVariableReadImpl
location: LinearObjectiveFunction.java67
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constantTerm = constantTerm ` -topatch--> `coefficients = coefficients` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearObjectiveFunction line: 67, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constantTerm = constantTerm ` -topatch--> `coefficients = coefficients` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 112, #gens: 187, #ops: 1, parent:111] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 112
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-112/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(56): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constantTerm = constantTerm ` -topatch--> `coefficients = coefficients` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (111(f=1.0), 112(f=1.0), )
Selected to next generation: IDs2--> (111(f=1.0), )
----------Running generation: 57, population size: 1

***** Generation 57 : 0
**Parent Variant: [Variant id: 113, #gens: 186, #ops: 0, parent:-]

--Child created id: 114
--Creating new operations for variant [Variant id: 114, #gens: 186, #ops: 0, parent:113]
---analyzing modificationPoint position: 29
Templates availables7
Attempts Base Ingredients  1 total 7
---modifPoint 0 not mutation generated in  this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)
---analyzing modificationPoint position: 35
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [f, constraints, goalType, restrictToNonNegative, epsilon]
--> var from patch: f spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: constraints spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: goalType spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java62
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)[...] ` -topatch--> `final org.apache.commons.math.optimization.linear.SimplexTableau tableau =  new org.apache.commons.m[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 62, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)[...] ` -topatch--> `final org.apache.commons.math.optimization.linear.SimplexTableau tableau =  new org.apache.commons.m[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 114, #gens: 187, #ops: 1, parent:113] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 114, errors: [SimplexSolver.java:187: error: variable tableau is already defined in method getPivotColumn(org.apache.commons.math.optimization.linear.SimplexTableau)
			final org.apache.commons.math.optimization.linear.SimplexTableau tableau = 
			                                                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(57): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)[...] ` -topatch--> `final org.apache.commons.math.optimization.linear.SimplexTableau tableau =  new org.apache.commons.m[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (113(f=1.0), 114(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (113(f=1.0), )
----------Running generation: 58, population size: 1

***** Generation 58 : 0
**Parent Variant: [Variant id: 115, #gens: 186, #ops: 0, parent:-]

--Child created id: 116
--Creating new operations for variant [Variant id: 116, #gens: 186, #ops: 0, parent:115]
---analyzing modificationPoint position: 2
location: SimplexSolver.java191
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `doIteration(tableau) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 116, #gens: 185, #ops: 1, parent:115] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 116
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-116/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
-Killed id: pid->47251
The Process that runs JUnit test cases did not terminate within waitTime of 10 seconds
Killed the Process that runs JUnit test cases 47251
**The validation 1 have not finished well**
-Valid?: null, fitness 1.7976931348623157E308
Ingredient counter is Zero
---Undoing: gnrtn(58): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `doIteration(tableau) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (115(f=1.0), 116(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (115(f=1.0), )
----------Running generation: 59, population size: 1

***** Generation 59 : 0
**Parent Variant: [Variant id: 117, #gens: 186, #ops: 0, parent:-]

--Child created id: 118
--Creating new operations for variant [Variant id: 118, #gens: 186, #ops: 0, parent:117]
---analyzing modificationPoint position: 85
---modifPoint 0 not mutation generated in  return dot
---analyzing modificationPoint position: 46
Templates availables12
Attempts Base Ingredients  1 total 12
---modifPoint 1 not mutation generated in  final double ratio = rhs / entry
---analyzing modificationPoint position: 80
---modifPoint 2 not mutation generated in  return getNumObjectiveFunctions() + numDecisionVariables
---analyzing modificationPoint position: 6
---modifPoint 3 not mutation generated in  // solve the problem return doOptimize()
---analyzing modificationPoint position: 35
location: SimplexSolver.java62
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 118, #gens: 185, #ops: 1, parent:117] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 118
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-118/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(59): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (117(f=1.0), 118(f=14.0), )
Selected to next generation: IDs2--> (117(f=1.0), )
----------Running generation: 60, population size: 1

***** Generation 60 : 0
**Parent Variant: [Variant id: 119, #gens: 186, #ops: 0, parent:-]

--Child created id: 120
--Creating new operations for variant [Variant id: 120, #gens: 186, #ops: 0, parent:119]
---analyzing modificationPoint position: 96
Templates availables45
Attempts Base Ingredients  1 total 45
---modifPoint 0 not mutation generated in  return new org.apache.commons.math.linear.ArrayRealVector(out)
---analyzing modificationPoint position: 95
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 1 not mutation generated in  out[i] = data[i] * d
---analyzing modificationPoint position: 1
location: SimplexTableau.java308
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 120, #gens: 185, #ops: 1, parent:119] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 120
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-120/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 14] ,[]
-Valid?: |false|3|14|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(60): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (119(f=1.0), 120(f=3.0), )
Selected to next generation: IDs2--> (119(f=1.0), )
----------Running generation: 61, population size: 1

***** Generation 61 : 0
**Parent Variant: [Variant id: 121, #gens: 186, #ops: 0, parent:-]

--Child created id: 122
--Creating new operations for variant [Variant id: 122, #gens: 186, #ops: 0, parent:121]
---analyzing modificationPoint position: 128
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 0 not mutation generated in  matrix[zIndex][width - 1] =  (maximize) ? f.getConstantTerm() : (-1) * f.getConstantTerm()
---analyzing modificationPoint position: 70
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [numDecisionVariables]
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java370
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRo[...] ` -topatch--> `return getNumObjectiveFunctions() + numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 370, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRo[...] ` -topatch--> `return getNumObjectiveFunctions() + numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 122, #gens: 187, #ops: 1, parent:121] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 122, errors: [SimplexTableau.java:434: error: incompatible types: unexpected return value
		return getNumObjectiveFunctions() + numDecisionVariables; 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
		                                  ^]
Ingredient counter is Zero
---Undoing: gnrtn(61): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRo[...] ` -topatch--> `return getNumObjectiveFunctions() + numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (121(f=1.0), 122(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (121(f=1.0), )
----------Running generation: 62, population size: 1

***** Generation 62 : 0
**Parent Variant: [Variant id: 123, #gens: 186, #ops: 0, parent:-]

--Child created id: 124
--Creating new operations for variant [Variant id: 124, #gens: 186, #ops: 0, parent:123]
---analyzing modificationPoint position: 94
Templates availables82
Attempts Base Ingredients  1 total 82
---modifPoint 0 not mutation generated in  for (int i = 0; i < data.length; i++) { 	out[i] = data[i] * d; }
---analyzing modificationPoint position: 138
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 1 not mutation generated in  return coefficients
---analyzing modificationPoint position: 28
location: SimplexSolver.java190
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (!isOptimal(tableau)) { 	doIteration(tableau); }  ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 124, #gens: 185, #ops: 1, parent:123] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 124
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-124/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 14] ,[]
-Valid?: |false|8|14|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(62): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (!isOptimal(tableau)) { 	doIteration(tableau); }  ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (123(f=1.0), 124(f=8.0), )
Selected to next generation: IDs2--> (123(f=1.0), )
----------Running generation: 63, population size: 1

***** Generation 63 : 0
**Parent Variant: [Variant id: 125, #gens: 186, #ops: 0, parent:-]

--Child created id: 126
--Creating new operations for variant [Variant id: 126, #gens: 186, #ops: 0, parent:125]
---analyzing modificationPoint position: 26
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  solvePhase1(tableau)
---analyzing modificationPoint position: 62
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java113
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.divideRow(pivotRow, pivotVal) ` -topatch--> `doIteration(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 113, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.divideRow(pivotRow, pivotVal) ` -topatch--> `doIteration(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 126, #gens: 187, #ops: 1, parent:125] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 126
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-126/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(63): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.divideRow(pivotRow, pivotVal) ` -topatch--> `doIteration(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (125(f=1.0), 126(f=14.0), )
Selected to next generation: IDs2--> (125(f=1.0), )
----------Running generation: 64, population size: 1

***** Generation 64 : 0
**Parent Variant: [Variant id: 127, #gens: 186, #ops: 0, parent:-]

--Child created id: 128
--Creating new operations for variant [Variant id: 128, #gens: 186, #ops: 0, parent:127]
---analyzing modificationPoint position: 4
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java297
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return null ` -topatch--> `int height = getHeight() - 1` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 297, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return null ` -topatch--> `int height = getHeight() - 1` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 128, #gens: 187, #ops: 1, parent:127] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 128
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-128/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(64): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return null ` -topatch--> `int height = getHeight() - 1` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (127(f=1.0), 128(f=1.0), )
Selected to next generation: IDs2--> (127(f=1.0), )
----------Running generation: 65, population size: 1

***** Generation 65 : 0
**Parent Variant: [Variant id: 129, #gens: 186, #ops: 0, parent:-]

--Child created id: 130
--Creating new operations for variant [Variant id: 130, #gens: 186, #ops: 0, parent:129]
---analyzing modificationPoint position: 150
Templates availables31
Attempts Base Ingredients  1 total 31
---modifPoint 0 not mutation generated in  return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients()[...]
---analyzing modificationPoint position: 93
Templates availables12
Attempts Base Ingredients  1 total 12
---modifPoint 1 not mutation generated in  double[] out = new double[data.length]
---analyzing modificationPoint position: 140
Templates availables8
Attempts Base Ingredients  1 total 8
---modifPoint 2 not mutation generated in  return relationship
---analyzing modificationPoint position: 46
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java83
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double ratio = rhs / entry ` -topatch--> `java.lang.Integer pivotCol = getPivotColumn(tableau)` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 83, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double ratio = rhs / entry ` -topatch--> `java.lang.Integer pivotCol = getPivotColumn(tableau)` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 130, #gens: 187, #ops: 1, parent:129] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 130
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-130/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 14] ,[]
-Valid?: |false|4|14|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(65): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double ratio = rhs / entry ` -topatch--> `java.lang.Integer pivotCol = getPivotColumn(tableau)` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (129(f=1.0), 130(f=4.0), )
Selected to next generation: IDs2--> (129(f=1.0), )
----------Running generation: 66, population size: 1

***** Generation 66 : 0
**Parent Variant: [Variant id: 131, #gens: 186, #ops: 0, parent:-]

--Child created id: 132
--Creating new operations for variant [Variant id: 132, #gens: 186, #ops: 0, parent:131]
---analyzing modificationPoint position: 164
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 0 not mutation generated in  if (data.length != n) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentExc[...]
---analyzing modificationPoint position: 42
location: SimplexSolver.java79
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 	final double rhs =[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 132, #gens: 185, #ops: 1, parent:131] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 132
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-132/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 14] ,[]
-Valid?: |false|13|14|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(66): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 	final double rhs =[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (131(f=1.0), 132(f=13.0), )
Selected to next generation: IDs2--> (131(f=1.0), )
----------Running generation: 67, population size: 1

***** Generation 67 : 0
**Parent Variant: [Variant id: 133, #gens: 186, #ops: 0, parent:-]

--Child created id: 134
--Creating new operations for variant [Variant id: 134, #gens: 186, #ops: 0, parent:133]
---analyzing modificationPoint position: 97
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [this.numArtificialVariables, org.apache.commons.math.optimization.linear.Relationship.EQ, org.apache.commons.math.optimization.linear.Relationship.GEQ]
--> var from patch: this.numArtificialVariables spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: org.apache.commons.math.optimization.linear.Relationship.EQ spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math.optimization.linear.Relationship.GEQ spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java387
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow,[...] ` -topatch--> `this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 387, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow,[...] ` -topatch--> `this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 134, #gens: 187, #ops: 1, parent:133] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 134
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-134/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 6, was successful: false, cases executed: 14] ,[]
-Valid?: |false|6|14|[]|, fitness 6.0
Ingredient counter is Zero
---Undoing: gnrtn(67): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow,[...] ` -topatch--> `this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (133(f=1.0), 134(f=6.0), )
Selected to next generation: IDs2--> (133(f=1.0), )
----------Running generation: 68, population size: 1

***** Generation 68 : 0
**Parent Variant: [Variant id: 135, #gens: 186, #ops: 0, parent:-]

--Child created id: 136
--Creating new operations for variant [Variant id: 136, #gens: 186, #ops: 0, parent:135]
---analyzing modificationPoint position: 110
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java105
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.f = f ` -topatch--> `java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>()` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 105, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.f = f ` -topatch--> `java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>()` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 136, #gens: 187, #ops: 1, parent:135] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 136, errors: [SimplexTableau.java:356: error: illegal start of type
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		^, SimplexTableau.java:356: error: ';' expected
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		      ^, SimplexTableau.java:360: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	       ^, SimplexTableau.java:360: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	                               		                                          ^, SimplexTableau.java:364: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	       ^, SimplexTableau.java:364: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		^, SimplexTableau.java:364: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                      ^, SimplexTableau.java:364: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                        		                  ^, SimplexTableau.java:370: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                     ^, SimplexTableau.java:370: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                         ^, SimplexTableau.java:370: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                           		                                                                                                                                                           ^, SimplexTableau.java:374: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                ^, SimplexTableau.java:374: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                                                 		                                               ^, SimplexTableau.java:380: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                          ^, SimplexTableau.java:380: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		^, SimplexTableau.java:380: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		           ^, SimplexTableau.java:380: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				        ^, SimplexTableau.java:380: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				           		             ^, SimplexTableau.java:383: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                            ^, SimplexTableau.java:383: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                    ^, SimplexTableau.java:383: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			^, SimplexTableau.java:383: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			                         ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                         ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                   ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                     		           ^, SimplexTableau.java:395: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                            ^, SimplexTableau.java:395: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                                       		                              ^, SimplexTableau.java:401: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                       ^, SimplexTableau.java:401: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                                  		                               ^, SimplexTableau.java:407: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                            ^, SimplexTableau.java:407: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		^, SimplexTableau.java:407: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		^, SimplexTableau.java:407: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                    ^, SimplexTableau.java:407: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                     ^, SimplexTableau.java:407: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				        ^, SimplexTableau.java:407: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				            ^, SimplexTableau.java:407: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				               		           ^, SimplexTableau.java:409: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			       ^, SimplexTableau.java:409: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		^, SimplexTableau.java:409: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		^, SimplexTableau.java:409: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		^, SimplexTableau.java:409: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                ^, SimplexTableau.java:409: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                            ^, SimplexTableau.java:409: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                ^, SimplexTableau.java:409: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                 ^, SimplexTableau.java:409: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                      ^, SimplexTableau.java:409: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                       ^, SimplexTableau.java:409: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		^, SimplexTableau.java:409: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		                                ^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                             ^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                 ^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                      ^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:422: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		^, SimplexTableau.java:422: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		^, SimplexTableau.java:422: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		^, SimplexTableau.java:422: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		^, SimplexTableau.java:422: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                ^, SimplexTableau.java:422: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                         ^, SimplexTableau.java:422: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                                			                                                                                     			^, SimplexTableau.java:429: error: class, interface, or enum expected
	 * @param dividendRow
	          ^, SimplexTableau.java:431: error: class, interface, or enum expected
	 * @param divisor
	          ^, SimplexTableau.java:433: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                               ^, SimplexTableau.java:433: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                      ^, SimplexTableau.java:433: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                ^, SimplexTableau.java:433: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                ^, SimplexTableau.java:433: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                       			                                                                             ^, SimplexTableau.java:446: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                 ^, SimplexTableau.java:446: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                       ^, SimplexTableau.java:446: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                ^, SimplexTableau.java:446: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                ^, SimplexTableau.java:446: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                ^, SimplexTableau.java:446: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                       			                                                                                                                   ^, SimplexTableau.java:450: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                ^, SimplexTableau.java:450: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                                 		                                    ^, SimplexTableau.java:454: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                ^, SimplexTableau.java:454: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                                  		                                 ^, SimplexTableau.java:462: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                ^, SimplexTableau.java:462: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                      ^, SimplexTableau.java:462: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                     ^, SimplexTableau.java:462: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                                   		                                     ^, SimplexTableau.java:471: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                ^, SimplexTableau.java:471: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                    ^, SimplexTableau.java:471: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                   ^, SimplexTableau.java:471: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                     ^, SimplexTableau.java:471: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                     		                                     ^, SimplexTableau.java:475: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:475: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                               		                                                         ^, SimplexTableau.java:479: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                ^, SimplexTableau.java:479: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                                    		                                                                               ^, SimplexTableau.java:483: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                ^, SimplexTableau.java:483: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                     		                      ^, SimplexTableau.java:488: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                ^, SimplexTableau.java:488: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                          		                                                                      ^, SimplexTableau.java:498: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:498: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                                		                            ^, SimplexTableau.java:503: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                ^, SimplexTableau.java:503: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                        		                                                                               ^, SimplexTableau.java:507: error: class, interface, or enum expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(68): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.f = f ` -topatch--> `java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>()` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (135(f=1.0), 136(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (135(f=1.0), )
----------Running generation: 69, population size: 1

***** Generation 69 : 0
**Parent Variant: [Variant id: 137, #gens: 186, #ops: 0, parent:-]

--Child created id: 138
--Creating new operations for variant [Variant id: 138, #gens: 186, #ops: 0, parent:137]
---analyzing modificationPoint position: 6
Templates availables3
Attempts Base Ingredients  1 total 3
vars from patch [maxIterations]
--> var from patch: maxIterations spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLinearOptimizer.java106
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `// solve the problem return doOptimize() ` -topatch--> `return maxIterations` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 106, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `// solve the problem return doOptimize() ` -topatch--> `return maxIterations` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 138, #gens: 186, #ops: 1, parent:137] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 138, errors: [AbstractLinearOptimizer.java:104: error: incompatible types: int cannot be converted to org.apache.commons.math.optimization.RealPointValuePair
		iterations = 0; 		return maxIterations;
		                		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(69): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `// solve the problem return doOptimize() ` -topatch--> `return maxIterations` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (137(f=1.0), 138(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (137(f=1.0), )
----------Running generation: 70, population size: 1

***** Generation 70 : 0
**Parent Variant: [Variant id: 139, #gens: 186, #ops: 0, parent:-]

--Child created id: 140
--Creating new operations for variant [Variant id: 140, #gens: 186, #ops: 0, parent:139]
---analyzing modificationPoint position: 25
location: SimplexTableau.java170
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack  ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 140, #gens: 185, #ops: 1, parent:139] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 140
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-140/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(70): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack  ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (139(f=1.0), 140(f=1.0), )
Selected to next generation: IDs2--> (139(f=1.0), )
----------Running generation: 71, population size: 1

***** Generation 71 : 0
**Parent Variant: [Variant id: 141, #gens: 186, #ops: 0, parent:-]

--Child created id: 142
--Creating new operations for variant [Variant id: 142, #gens: 186, #ops: 0, parent:141]
---analyzing modificationPoint position: 0
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java169
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `return tableau.getSolution()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 169, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `return tableau.getSolution()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 142, #gens: 186, #ops: 1, parent:141] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 142, errors: [SimplexSolver.java:194: error: incompatible types: unexpected return value
			return tableau.getSolution();} 		while (!isPhase1Solved(tableau)) { 			doIteration(tableau);} 		// if W is not zero then we have no feasible solution
			                          ^]
Ingredient counter is Zero
---Undoing: gnrtn(71): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `return tableau.getSolution()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (141(f=1.0), 142(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (141(f=1.0), )
----------Running generation: 72, population size: 1

***** Generation 72 : 0
**Parent Variant: [Variant id: 143, #gens: 186, #ops: 0, parent:-]

--Child created id: 144
--Creating new operations for variant [Variant id: 144, #gens: 186, #ops: 0, parent:143]
---analyzing modificationPoint position: 146
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 	norma[...]
---analyzing modificationPoint position: 30
location: SimplexSolver.java50
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.epsilon = epsilon ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 144, #gens: 185, #ops: 1, parent:143] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 144, errors: [SimplexSolver.java:52: error: variable epsilon might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(72): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.epsilon = epsilon ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (143(f=1.0), 144(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (143(f=1.0), )
----------Running generation: 73, population size: 1

***** Generation 73 : 0
**Parent Variant: [Variant id: 145, #gens: 186, #ops: 0, parent:-]

--Child created id: 146
--Creating new operations for variant [Variant id: 146, #gens: 186, #ops: 0, parent:145]
---analyzing modificationPoint position: 84
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 0 not mutation generated in  dot += data[i] * v[i]
---analyzing modificationPoint position: 106
---modifPoint 1 not mutation generated in  return constantTerm
---analyzing modificationPoint position: 72
---modifPoint 2 not mutation generated in  return numArtificialVariables
---analyzing modificationPoint position: 149
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 3 not mutation generated in  if (constraint.getValue() < 0) { 	return new org.apache.commons.math.optimization.linear.LinearConst[...]
---analyzing modificationPoint position: 131
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 4 not mutation generated in  int artificialVar = 0
---analyzing modificationPoint position: 147
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [this.constraints]
--> var from patch: this.constraints spoon.support.reflect.code.CtFieldWriteImpl
location: SimplexTableau.java200
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `normalized.add(normalize(constraint)) ` -topatch--> `this.constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 200, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `normalized.add(normalize(constraint)) ` -topatch--> `this.constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 146, #gens: 187, #ops: 1, parent:145] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child does NOT compile: 146, errors: [SimplexTableau.java:201: error: cannot assign a value to final variable constraints
			normalized.add(normalize(constraint)); 			this.constraints = constraints;
			                                       			    ^]
Ingredient counter is Zero
---Undoing: gnrtn(73): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `normalized.add(normalize(constraint)) ` -topatch--> `this.constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (145(f=1.0), 146(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (145(f=1.0), )
----------Running generation: 74, population size: 1

***** Generation 74 : 0
**Parent Variant: [Variant id: 147, #gens: 186, #ops: 0, parent:-]

--Child created id: 148
--Creating new operations for variant [Variant id: 148, #gens: 186, #ops: 0, parent:147]
---analyzing modificationPoint position: 115
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [restrictToNonNegative, numDecisionVariables, numSlackVariables, numArtificialVariables, epsilon, f, constraints, tableau]
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtFieldReadImpl
SameName: final 





































































































boolean restrictToNonNegative
SameName: final 





































































































boolean restrictToNonNegative
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numSlackVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtFieldReadImpl
SameName: final 






































































































double epsilon
SameName: final 






































































































double epsilon
--> var from patch: f spoon.support.reflect.code.CtFieldReadImpl
SameName: final 



































































































org.apache.commons.math.optimization.linear.LinearObjectiveFunction f
SameName: final 



































































































org.apache.commons.math.optimization.linear.LinearObjectiveFunction f
--> var from patch: constraints spoon.support.reflect.code.CtFieldReadImpl
SameName: final 




































































































java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint> constraints
SameName: final 




































































































java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint> constraints
--> var from patch: tableau spoon.support.reflect.code.CtFieldReadImpl
Transforming shadowed variable in return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ 
numDecisionVariables) ^ 
numSlackVariables) ^ 
numArtificialVariables) ^ 
java.lang.Double.valueOf(epsilon).hashCode()) ^ 
f.hashCode()) ^ 
constraints.hashCode()) ^ 
tableau.hashCode()
location: SimplexTableau.java110
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numSlackVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relatio[...] ` -topatch--> `return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^  numDecisionVariables) ^ [...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 110, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numSlackVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relatio[...] ` -topatch--> `return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^  numDecisionVariables) ^ [...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 148, #gens: 187, #ops: 1, parent:147] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 148, errors: [SimplexTableau.java:562: error: illegal start of type
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		^, SimplexTableau.java:562: error: ';' expected
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		      ^, SimplexTableau.java:566: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	       ^, SimplexTableau.java:566: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	                               		                                          ^, SimplexTableau.java:570: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	       ^, SimplexTableau.java:570: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		^, SimplexTableau.java:570: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                      ^, SimplexTableau.java:570: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                        		                  ^, SimplexTableau.java:576: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                     ^, SimplexTableau.java:576: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                         ^, SimplexTableau.java:576: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                           		                                                                                                                                                           ^, SimplexTableau.java:580: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                ^, SimplexTableau.java:580: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                                                 		                                               ^, SimplexTableau.java:586: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                          ^, SimplexTableau.java:586: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		^, SimplexTableau.java:586: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		           ^, SimplexTableau.java:586: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				        ^, SimplexTableau.java:586: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				           		             ^, SimplexTableau.java:589: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                            ^, SimplexTableau.java:589: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                    ^, SimplexTableau.java:589: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			^, SimplexTableau.java:589: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			                         ^, SimplexTableau.java:595: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                         ^, SimplexTableau.java:595: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		^, SimplexTableau.java:595: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                   ^, SimplexTableau.java:595: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                     		           ^, SimplexTableau.java:601: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                            ^, SimplexTableau.java:601: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                                       		                              ^, SimplexTableau.java:607: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                       ^, SimplexTableau.java:607: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                                  		                               ^, SimplexTableau.java:613: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                            ^, SimplexTableau.java:613: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		^, SimplexTableau.java:613: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		^, SimplexTableau.java:613: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                    ^, SimplexTableau.java:613: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                     ^, SimplexTableau.java:613: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				        ^, SimplexTableau.java:613: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				            ^, SimplexTableau.java:613: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				               		           ^, SimplexTableau.java:615: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			       ^, SimplexTableau.java:615: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		^, SimplexTableau.java:615: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		^, SimplexTableau.java:615: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		^, SimplexTableau.java:615: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                ^, SimplexTableau.java:615: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                            ^, SimplexTableau.java:615: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                ^, SimplexTableau.java:615: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                 ^, SimplexTableau.java:615: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                      ^, SimplexTableau.java:615: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                       ^, SimplexTableau.java:615: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		^, SimplexTableau.java:615: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		                                ^, SimplexTableau.java:624: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                             ^, SimplexTableau.java:624: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                 ^, SimplexTableau.java:624: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                      ^, SimplexTableau.java:624: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:628: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		^, SimplexTableau.java:628: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		^, SimplexTableau.java:628: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		^, SimplexTableau.java:628: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		^, SimplexTableau.java:628: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                ^, SimplexTableau.java:628: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                         ^, SimplexTableau.java:628: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                                			                                                                                     			^, SimplexTableau.java:635: error: class, interface, or enum expected
	 * @param dividendRow
	          ^, SimplexTableau.java:637: error: class, interface, or enum expected
	 * @param divisor
	          ^, SimplexTableau.java:639: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                               ^, SimplexTableau.java:639: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                      ^, SimplexTableau.java:639: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                ^, SimplexTableau.java:639: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                ^, SimplexTableau.java:639: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                       			                                                                             ^, SimplexTableau.java:652: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                 ^, SimplexTableau.java:652: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                       ^, SimplexTableau.java:652: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                ^, SimplexTableau.java:652: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                ^, SimplexTableau.java:652: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                ^, SimplexTableau.java:652: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                       			                                                                                                                   ^, SimplexTableau.java:656: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                ^, SimplexTableau.java:656: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                                 		                                    ^, SimplexTableau.java:660: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                ^, SimplexTableau.java:660: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                                  		                                 ^, SimplexTableau.java:668: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                ^, SimplexTableau.java:668: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                      ^, SimplexTableau.java:668: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                     ^, SimplexTableau.java:668: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                                   		                                     ^, SimplexTableau.java:677: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                ^, SimplexTableau.java:677: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                    ^, SimplexTableau.java:677: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                   ^, SimplexTableau.java:677: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                     ^, SimplexTableau.java:677: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                     		                                     ^, SimplexTableau.java:681: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:681: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                               		                                                         ^, SimplexTableau.java:685: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                ^, SimplexTableau.java:685: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                                    		                                                                               ^, SimplexTableau.java:689: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                ^, SimplexTableau.java:689: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                     		                      ^, SimplexTableau.java:694: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                ^, SimplexTableau.java:694: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                          		                                                                      ^, SimplexTableau.java:704: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:704: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                                		                            ^, SimplexTableau.java:709: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                ^, SimplexTableau.java:709: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                        		                                                                               ^, SimplexTableau.java:713: error: class, interface, or enum expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(74): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numSlackVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relatio[...] ` -topatch--> `return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^  numDecisionVariables) ^ [...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (147(f=1.0), 148(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (147(f=1.0), )
----------Running generation: 75, population size: 1

***** Generation 75 : 0
**Parent Variant: [Variant id: 149, #gens: 186, #ops: 0, parent:-]

--Child created id: 150
--Creating new operations for variant [Variant id: 150, #gens: 186, #ops: 0, parent:149]
---analyzing modificationPoint position: 8
---modifPoint 0 not mutation generated in  return tableau.getSolution()
---analyzing modificationPoint position: 116
location: SimplexTableau.java112
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 150, #gens: 185, #ops: 1, parent:149] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 150
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-150/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 11, was successful: false, cases executed: 14] ,[]
-Valid?: |false|11|14|[]|, fitness 11.0
Ingredient counter is Zero
---Undoing: gnrtn(75): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (149(f=1.0), 150(f=11.0), )
Selected to next generation: IDs2--> (149(f=1.0), )
----------Running generation: 76, population size: 1

***** Generation 76 : 0
**Parent Variant: [Variant id: 151, #gens: 186, #ops: 0, parent:-]

--Child created id: 152
--Creating new operations for variant [Variant id: 152, #gens: 186, #ops: 0, parent:151]
---analyzing modificationPoint position: 53
location: AbstractLinearOptimizer.java99
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 152, #gens: 185, #ops: 1, parent:151] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 152
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-152/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(76): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (151(f=1.0), 152(f=14.0), )
Selected to next generation: IDs2--> (151(f=1.0), )
----------Running generation: 77, population size: 1

***** Generation 77 : 0
**Parent Variant: [Variant id: 153, #gens: 186, #ops: 0, parent:-]

--Child created id: 154
--Creating new operations for variant [Variant id: 154, #gens: 186, #ops: 0, parent:153]
---analyzing modificationPoint position: 33
location: SimplexSolver.java61
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 154, #gens: 185, #ops: 1, parent:153] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 154
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-154/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(77): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (153(f=1.0), 154(f=14.0), )
Selected to next generation: IDs2--> (153(f=1.0), )
----------Running generation: 78, population size: 1

***** Generation 78 : 0
**Parent Variant: [Variant id: 155, #gens: 186, #ops: 0, parent:-]

--Child created id: 156
--Creating new operations for variant [Variant id: 156, #gens: 186, #ops: 0, parent:155]
---analyzing modificationPoint position: 84
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 0 not mutation generated in  dot += data[i] * v[i]
---analyzing modificationPoint position: 113
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 1 not mutation generated in  this.epsilon = epsilon
---analyzing modificationPoint position: 87
Templates availables24
Attempts Base Ingredients  1 total 24
---modifPoint 2 not mutation generated in  java.lang.Integer row = null
---analyzing modificationPoint position: 126
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 3 not mutation generated in  org.apache.commons.math.linear.RealVector objectiveCoefficients =  (maximize) ? f.getCoefficients().[...]
---analyzing modificationPoint position: 133
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch [height, width]
--> var from patch: height spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: width spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java153
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i) ` -topatch--> `double[][] matrix = new double[height][width]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 153, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i) ` -topatch--> `double[][] matrix = new double[height][width]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 156, #gens: 186, #ops: 1, parent:155] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 156, errors: [SimplexTableau.java:153: error: variable matrix is already defined in method createTableau(boolean)
		for (int i = 0; i < constraints.size(); i++) { 			double[][] matrix = new double[height][width];
		                                               			           ^, SimplexTableau.java:158: error: cannot find symbol
			copyArray(constraint.getCoefficients().getData(), matrix[row], 1);
			          ^
  symbol:   variable constraint
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:163: error: cannot find symbol
				org.apache.commons.math.optimization.linear.SimplexTableau.getInvertedCoeffiecientSum(constraint.getCoefficients());
				                                                                                      ^
  symbol:   variable constraint
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:167: error: cannot find symbol
			matrix[row][width - 1] = constraint.getValue();
			                         ^
  symbol:   variable constraint
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:170: error: cannot find symbol
			if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.LEQ) {
			    ^
  symbol:   variable constraint
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:172: error: cannot find symbol
			} else if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ) {
			           ^
  symbol:   variable constraint
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:177: error: cannot find symbol
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || 
			     ^
  symbol:   variable constraint
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:178: error: cannot find symbol
			(constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) {
			 ^
  symbol:   variable constraint
  location: class org.apache.commons.math.optimization.linear.SimplexTableau]
Ingredient counter is Zero
---Undoing: gnrtn(78): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i) ` -topatch--> `double[][] matrix = new double[height][width]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (155(f=1.0), 156(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (155(f=1.0), )
----------Running generation: 79, population size: 1

***** Generation 79 : 0
**Parent Variant: [Variant id: 157, #gens: 186, #ops: 0, parent:-]

--Child created id: 158
--Creating new operations for variant [Variant id: 158, #gens: 186, #ops: 0, parent:157]
---analyzing modificationPoint position: 129
location: SimplexTableau.java144
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (!restrictToNonNegative) { 	matrix[zIndex][getSlackVariableOffset() - 1] =  	org.apache.commons.m[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 158, #gens: 185, #ops: 1, parent:157] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 158
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-158/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 6, was successful: false, cases executed: 14] ,[]
-Valid?: |false|6|14|[]|, fitness 6.0
Ingredient counter is Zero
---Undoing: gnrtn(79): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (!restrictToNonNegative) { 	matrix[zIndex][getSlackVariableOffset() - 1] =  	org.apache.commons.m[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (157(f=1.0), 158(f=6.0), )
Selected to next generation: IDs2--> (157(f=1.0), )
----------Running generation: 80, population size: 1

***** Generation 80 : 0
**Parent Variant: [Variant id: 159, #gens: 186, #ops: 0, parent:-]

--Child created id: 160
--Creating new operations for variant [Variant id: 160, #gens: 186, #ops: 0, parent:159]
---analyzing modificationPoint position: 155
Templates availables1
Attempts Base Ingredients  1 total 1
vars from patch [count]
--> var from patch: count spoon.support.reflect.code.CtVariableWriteImpl
location: SimplexTableau.java237
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `++count ` -topatch--> `++count` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 237, pointed element: CtUnaryOperatorImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `++count ` -topatch--> `++count` (spoon.support.reflect.code.CtUnaryOperatorImpl) 

--Summary Creation: for variant [Variant id: 160, #gens: 186, #ops: 1, parent:159] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 160
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-160/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(80): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `++count ` -topatch--> `++count` (spoon.support.reflect.code.CtUnaryOperatorImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (159(f=1.0), 160(f=1.0), )
Selected to next generation: IDs2--> (159(f=1.0), )
----------Running generation: 81, population size: 1

***** Generation 81 : 0
**Parent Variant: [Variant id: 161, #gens: 186, #ops: 0, parent:-]

--Child created id: 162
--Creating new operations for variant [Variant id: 162, #gens: 186, #ops: 0, parent:161]
---analyzing modificationPoint position: 97
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [f]
--> var from patch: f spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java387
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow,[...] ` -topatch--> `return f.getCoefficients().getDimension()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 387, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow,[...] ` -topatch--> `return f.getCoefficients().getDimension()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 162, #gens: 187, #ops: 1, parent:161] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 162, errors: [SimplexTableau.java:391: error: incompatible types: unexpected return value
		} 		return f.getCoefficients().getDimension();
		  		                                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(81): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow,[...] ` -topatch--> `return f.getCoefficients().getDimension()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (161(f=1.0), 162(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (161(f=1.0), )
----------Running generation: 82, population size: 1

***** Generation 82 : 0
**Parent Variant: [Variant id: 163, #gens: 186, #ops: 0, parent:-]

--Child created id: 164
--Creating new operations for variant [Variant id: 164, #gens: 186, #ops: 0, parent:163]
---analyzing modificationPoint position: 37
location: SimplexSolver.java64
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `minPos = i ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 164, #gens: 185, #ops: 1, parent:163] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 164
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-164/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(82): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `minPos = i ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (163(f=1.0), 164(f=14.0), )
Selected to next generation: IDs2--> (163(f=1.0), )
----------Running generation: 83, population size: 1

***** Generation 83 : 0
**Parent Variant: [Variant id: 165, #gens: 186, #ops: 0, parent:-]

--Child created id: 166
--Creating new operations for variant [Variant id: 166, #gens: 186, #ops: 0, parent:165]
---analyzing modificationPoint position: 45
Templates availables10
Attempts Base Ingredients  1 total 10
---modifPoint 0 not mutation generated in  if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 	final double ratio [...]
---analyzing modificationPoint position: 154
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java236
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (constraint.getRelationship() == relationship) { 	++count; } ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 236, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (constraint.getRelationship() == relationship) { 	++count; } ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 166, #gens: 187, #ops: 1, parent:165] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 166, errors: [SimplexTableau.java:578: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:578: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:578: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:578: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:578: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:578: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:580: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:580: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:580: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:580: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:580: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:580: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:580: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:582: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:582: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:583: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:584: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:584: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:585: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:585: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:586: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:587: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:587: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:587: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:588: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:588: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:588: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:588: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:588: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:588: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:601: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:601: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:601: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:601: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:601: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:601: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:605: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:605: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:609: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:609: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:617: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:617: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:617: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:617: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:626: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:626: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:626: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:626: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:626: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:630: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:630: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:634: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:634: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:638: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:638: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:643: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:643: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:653: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:653: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:658: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:658: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:662: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:662: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:666: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:666: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:670: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:670: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:672: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:672: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:675: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:682: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:682: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:682: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:682: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:682: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:682: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:691: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:691: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:691: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:691: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:691: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:691: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:691: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:691: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:691: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(83): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (constraint.getRelationship() == relationship) { 	++count; } ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (165(f=1.0), 166(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (165(f=1.0), )
----------Running generation: 84, population size: 1

***** Generation 84 : 0
**Parent Variant: [Variant id: 167, #gens: 186, #ops: 0, parent:-]

--Child created id: 168
--Creating new operations for variant [Variant id: 168, #gens: 186, #ops: 0, parent:167]
---analyzing modificationPoint position: 1
location: SimplexTableau.java308
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 168, #gens: 185, #ops: 1, parent:167] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 168
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-168/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 14] ,[]
-Valid?: |false|3|14|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(84): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (167(f=1.0), 168(f=3.0), )
Selected to next generation: IDs2--> (167(f=1.0), )
----------Running generation: 85, population size: 1

***** Generation 85 : 0
**Parent Variant: [Variant id: 169, #gens: 186, #ops: 0, parent:-]

--Child created id: 170
--Creating new operations for variant [Variant id: 170, #gens: 186, #ops: 0, parent:169]
---analyzing modificationPoint position: 43
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java80
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double rhs = tableau.getEntry(i, tableau.getWidth() - 1) ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 80, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double rhs = tableau.getEntry(i, tableau.getWidth() - 1) ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 170, #gens: 187, #ops: 1, parent:169] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 170, errors: [SimplexSolver.java:104: error: unreported exception org.apache.commons.math.optimization.OptimizationException; must be caught or declared to be thrown
			incrementIterationsCounter(); 			final double entry = tableau.getEntry(i, col); 			if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 				final double ratio = rhs / entry; 				if (ratio < minRatio) { 					minRatio = ratio; 					minRatioPos = i;}}} 		return minRatioPos;} 	/**
			                          ^]
Ingredient counter is Zero
---Undoing: gnrtn(85): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double rhs = tableau.getEntry(i, tableau.getWidth() - 1) ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (169(f=1.0), 170(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (169(f=1.0), )
----------Running generation: 86, population size: 1

***** Generation 86 : 0
**Parent Variant: [Variant id: 171, #gens: 186, #ops: 0, parent:-]

--Child created id: 172
--Creating new operations for variant [Variant id: 172, #gens: 186, #ops: 0, parent:171]
---analyzing modificationPoint position: 0
---modifPoint 0 not mutation generated in  return
---analyzing modificationPoint position: 17
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 1 not mutation generated in  basicRows.add(basicRow)
---analyzing modificationPoint position: 149
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 2 not mutation generated in  if (constraint.getValue() < 0) { 	return new org.apache.commons.math.optimization.linear.LinearConst[...]
---analyzing modificationPoint position: 62
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java113
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.divideRow(pivotRow, pivotVal) ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 113, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.divideRow(pivotRow, pivotVal) ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 172, #gens: 187, #ops: 1, parent:171] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 172, errors: [SimplexSolver.java:170: error: unreachable statement
		return; 		tableau.divideRow(pivotRow, pivotVal); 		// set the rest of the pivot column to 0
		        		^]
Ingredient counter is Zero
---Undoing: gnrtn(86): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.divideRow(pivotRow, pivotVal) ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (171(f=1.0), 172(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (171(f=1.0), )
----------Running generation: 87, population size: 1

***** Generation 87 : 0
**Parent Variant: [Variant id: 173, #gens: 186, #ops: 0, parent:-]

--Child created id: 174
--Creating new operations for variant [Variant id: 174, #gens: 186, #ops: 0, parent:173]
---analyzing modificationPoint position: 20
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  return getNumObjectiveFunctions() + getOriginalNumDecisionVariables()
---analyzing modificationPoint position: 129
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  if (!restrictToNonNegative) { 	matrix[zIndex][getSlackVariableOffset() - 1] =  	org.apache.commons.m[...]
---analyzing modificationPoint position: 154
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [numArtificialVariables]
--> var from patch: numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java236
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (constraint.getRelationship() == relationship) { 	++count; } ` -topatch--> `if (numArtificialVariables == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 236, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (constraint.getRelationship() == relationship) { 	++count; } ` -topatch--> `if (numArtificialVariables == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 174, #gens: 187, #ops: 1, parent:173] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 174, errors: [SimplexTableau.java:309: error: incompatible types: missing return value
				return;
				^]
Ingredient counter is Zero
---Undoing: gnrtn(87): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (constraint.getRelationship() == relationship) { 	++count; } ` -topatch--> `if (numArtificialVariables == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (173(f=1.0), 174(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (173(f=1.0), )
----------Running generation: 88, population size: 1

***** Generation 88 : 0
**Parent Variant: [Variant id: 175, #gens: 186, #ops: 0, parent:-]

--Child created id: 176
--Creating new operations for variant [Variant id: 176, #gens: 186, #ops: 0, parent:175]
---analyzing modificationPoint position: 72
Templates availables31
Attempts Base Ingredients  1 total 31
---modifPoint 0 not mutation generated in  return numArtificialVariables
---analyzing modificationPoint position: 79
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 	return null; [...]
---analyzing modificationPoint position: 150
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 2 not mutation generated in  return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients()[...]
---analyzing modificationPoint position: 21
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 3 not mutation generated in  return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1
---analyzing modificationPoint position: 76
---modifPoint 4 not mutation generated in  return -1
---analyzing modificationPoint position: 54
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch [iterations]
--> var from patch: iterations spoon.support.reflect.code.CtFieldWriteImpl
location: AbstractLinearOptimizer.java100
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.goalType = goalType ` -topatch--> `iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 100, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.goalType = goalType ` -topatch--> `iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 176, #gens: 186, #ops: 1, parent:175] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child compiles: id 176
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-176/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 14] ,[]
-Valid?: |false|8|14|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(88): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.goalType = goalType ` -topatch--> `iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (175(f=1.0), 176(f=8.0), )
Selected to next generation: IDs2--> (175(f=1.0), )
----------Running generation: 89, population size: 1

***** Generation 89 : 0
**Parent Variant: [Variant id: 177, #gens: 186, #ops: 0, parent:-]

--Child created id: 178
--Creating new operations for variant [Variant id: 178, #gens: 186, #ops: 0, parent:177]
---analyzing modificationPoint position: 78
Templates availables31
Attempts Base Ingredients  1 total 31
vars from patch [restrictToNonNegative, numDecisionVariables]
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java449
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return getWidth() - 1 ` -topatch--> `return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 449, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return getWidth() - 1 ` -topatch--> `return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 178, #gens: 186, #ops: 1, parent:177] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 178
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-178/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 14] ,[]
-Valid?: |false|13|14|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(89): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return getWidth() - 1 ` -topatch--> `return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (177(f=1.0), 178(f=13.0), )
Selected to next generation: IDs2--> (177(f=1.0), )
----------Running generation: 90, population size: 1

***** Generation 90 : 0
**Parent Variant: [Variant id: 179, #gens: 186, #ops: 0, parent:-]

--Child created id: 180
--Creating new operations for variant [Variant id: 180, #gens: 186, #ops: 0, parent:179]
---analyzing modificationPoint position: 110
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [this.constraints]
--> var from patch: this.constraints spoon.support.reflect.code.CtFieldWriteImpl
SameName: final 




































































































java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint> constraints
SameName: final 




































































































java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint> constraints
Transforming shadowed variable in constraints = constraints
location: SimplexTableau.java105
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.f = f ` -topatch--> `constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 105, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.f = f ` -topatch--> `constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 180, #gens: 187, #ops: 1, parent:179] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 180, errors: [SimplexTableau.java:107: error: final parameter constraints may not be assigned
	 */ 	SimplexTableau(final org.apache.commons.math.optimization.linear.LinearObjectiveFunction f, final java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint> constraints, final org.apache.commons.math.optimization.GoalType goalType, final boolean restrictToNonNegative, final double epsilon) { 		this.f = f; 		constraints = constraints; 		this.constraints = constraints;
	    	                                                                                                                                                                                                                                                                                                                             		            		^]
Ingredient counter is Zero
---Undoing: gnrtn(90): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.f = f ` -topatch--> `constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (179(f=1.0), 180(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (179(f=1.0), )
----------Running generation: 91, population size: 1

***** Generation 91 : 0
**Parent Variant: [Variant id: 181, #gens: 186, #ops: 0, parent:-]

--Child created id: 182
--Creating new operations for variant [Variant id: 182, #gens: 186, #ops: 0, parent:181]
---analyzing modificationPoint position: 90
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java294
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) [...] ` -topatch--> `return tableau.getColumnDimension()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 294, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) [...] ` -topatch--> `return tableau.getColumnDimension()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 182, #gens: 187, #ops: 1, parent:181] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 182, errors: [SimplexTableau.java:415: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:415: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:415: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:415: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:415: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:415: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:417: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:417: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:417: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:417: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:417: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:417: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:417: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:419: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:419: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:420: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:421: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:421: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:422: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:422: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:423: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:424: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:424: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:424: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:425: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:425: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:425: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:425: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:425: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:425: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:438: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:438: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:438: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:438: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:438: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:438: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:442: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:442: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:446: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:446: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:454: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:454: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:454: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:454: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:463: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:463: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:463: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:463: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:463: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:467: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:467: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:471: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:471: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:475: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:475: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:480: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:480: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:490: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:490: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:495: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:495: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:499: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:499: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:503: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:503: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:507: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();}
	    	^, SimplexTableau.java:507: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();}
	    	                                  ^, SimplexTableau.java:511: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) {
	    	                    	                     ^, SimplexTableau.java:511: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) {
	    	                    	                                            ^, SimplexTableau.java:542: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() {
	    	                    	                   ^, SimplexTableau.java:560: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	^, SimplexTableau.java:560: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	        ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                        ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                       ^, SimplexTableau.java:560: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                                       ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                                                   ^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	        ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                     ^, SimplexTableau.java:572: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                              ^, SimplexTableau.java:572: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                                                   ^, SimplexTableau.java:573: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(91): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) [...] ` -topatch--> `return tableau.getColumnDimension()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (181(f=1.0), 182(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (181(f=1.0), )
----------Running generation: 92, population size: 1

***** Generation 92 : 0
**Parent Variant: [Variant id: 183, #gens: 186, #ops: 0, parent:-]

--Child created id: 184
--Creating new operations for variant [Variant id: 184, #gens: 186, #ops: 0, parent:183]
---analyzing modificationPoint position: 11
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java341
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()) ` -topatch--> `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 341, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()) ` -topatch--> `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 184, #gens: 187, #ops: 1, parent:183] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 184
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-184/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(92): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()) ` -topatch--> `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (183(f=1.0), 184(f=1.0), )
Selected to next generation: IDs2--> (183(f=1.0), )
----------Running generation: 93, population size: 1

***** Generation 93 : 0
**Parent Variant: [Variant id: 185, #gens: 186, #ops: 0, parent:-]

--Child created id: 186
--Creating new operations for variant [Variant id: 186, #gens: 186, #ops: 0, parent:185]
---analyzing modificationPoint position: 97
location: SimplexTableau.java387
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow,[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 186, #gens: 185, #ops: 1, parent:185] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 186
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-186/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(93): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow,[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (185(f=1.0), 186(f=14.0), )
Selected to next generation: IDs2--> (185(f=1.0), )
----------Running generation: 94, population size: 1

***** Generation 94 : 0
**Parent Variant: [Variant id: 187, #gens: 186, #ops: 0, parent:-]

--Child created id: 188
--Creating new operations for variant [Variant id: 188, #gens: 186, #ops: 0, parent:187]
---analyzing modificationPoint position: 56
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch [this.f]
--> var from patch: this.f spoon.support.reflect.code.CtFieldWriteImpl
SameName: final 


























































































org.apache.commons.math.optimization.linear.LinearObjectiveFunction f
SameName: final 


























































































org.apache.commons.math.optimization.linear.LinearObjectiveFunction f
Transforming shadowed variable in // store linear problem characteristics
f = f
location: AbstractLinearOptimizer.java103
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `iterations = 0 ` -topatch--> `// store linear problem characteristics f = f` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 103, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `iterations = 0 ` -topatch--> `// store linear problem characteristics f = f` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 188, #gens: 186, #ops: 1, parent:187] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 188, errors: [AbstractLinearOptimizer.java:103: error: final parameter f may not be assigned
		f = f;
		^]
Ingredient counter is Zero
---Undoing: gnrtn(94): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `iterations = 0 ` -topatch--> `// store linear problem characteristics f = f` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (187(f=1.0), 188(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (187(f=1.0), )
----------Running generation: 95, population size: 1

***** Generation 95 : 0
**Parent Variant: [Variant id: 189, #gens: 186, #ops: 0, parent:-]

--Child created id: 190
--Creating new operations for variant [Variant id: 190, #gens: 186, #ops: 0, parent:189]
---analyzing modificationPoint position: 18
location: SimplexTableau.java352
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `coefficients[i] =  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -  (restrictToNonNega[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 190, #gens: 185, #ops: 1, parent:189] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 190
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-190/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 11, was successful: false, cases executed: 14] ,[]
-Valid?: |false|11|14|[]|, fitness 11.0
Ingredient counter is Zero
---Undoing: gnrtn(95): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `coefficients[i] =  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -  (restrictToNonNega[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (189(f=1.0), 190(f=11.0), )
Selected to next generation: IDs2--> (189(f=1.0), )
----------Running generation: 96, population size: 1

***** Generation 96 : 0
**Parent Variant: [Variant id: 191, #gens: 186, #ops: 0, parent:-]

--Child created id: 192
--Creating new operations for variant [Variant id: 192, #gens: 186, #ops: 0, parent:191]
---analyzing modificationPoint position: 94
Templates availables82
Attempts Base Ingredients  1 total 82
---modifPoint 0 not mutation generated in  for (int i = 0; i < data.length; i++) { 	out[i] = data[i] * d; }
---analyzing modificationPoint position: 75
Templates availables259
Attempts Base Ingredients  1 total 259
---modifPoint 1 not mutation generated in  if (x < y) { 	return -1; }
---analyzing modificationPoint position: 15
---modifPoint 2 not mutation generated in  java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i)
---analyzing modificationPoint position: 72
---modifPoint 3 not mutation generated in  return numArtificialVariables
---analyzing modificationPoint position: 113
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 4 not mutation generated in  this.epsilon = epsilon
---analyzing modificationPoint position: 39
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch []
location: SimplexSolver.java67
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return minPos ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 67, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return minPos ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 192, #gens: 186, #ops: 1, parent:191] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child does NOT compile: 192, errors: [SimplexSolver.java:132: error: incompatible types: boolean cannot be converted to java.lang.Integer
		return true;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(96): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return minPos ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (191(f=1.0), 192(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (191(f=1.0), )
----------Running generation: 97, population size: 1

***** Generation 97 : 0
**Parent Variant: [Variant id: 193, #gens: 186, #ops: 0, parent:-]

--Child created id: 194
--Creating new operations for variant [Variant id: 194, #gens: 186, #ops: 0, parent:193]
---analyzing modificationPoint position: 22
Templates availables10
Attempts Base Ingredients  1 total 10
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java147
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (tableau.getNumArtificialVariables() > 0) { 	return false; } ` -topatch--> `if (tableau.getNumArtificialVariables() == 0) { 	return true; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 147, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (tableau.getNumArtificialVariables() > 0) { 	return false; } ` -topatch--> `if (tableau.getNumArtificialVariables() == 0) { 	return true; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 194, #gens: 186, #ops: 1, parent:193] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 194
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-194/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 14] ,[]
-Valid?: |false|8|14|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(97): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (tableau.getNumArtificialVariables() > 0) { 	return false; } ` -topatch--> `if (tableau.getNumArtificialVariables() == 0) { 	return true; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (193(f=1.0), 194(f=8.0), )
Selected to next generation: IDs2--> (193(f=1.0), )
----------Running generation: 98, population size: 1

***** Generation 98 : 0
**Parent Variant: [Variant id: 195, #gens: 186, #ops: 0, parent:-]

--Child created id: 196
--Creating new operations for variant [Variant id: 196, #gens: 186, #ops: 0, parent:195]
---analyzing modificationPoint position: 109
location: LinearConstraint.java102
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.value = value ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 196, #gens: 185, #ops: 1, parent:195] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 196, errors: [LinearConstraint.java:104: error: variable value might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(98): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.value = value ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (195(f=1.0), 196(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (195(f=1.0), )
----------Running generation: 99, population size: 1

***** Generation 99 : 0
**Parent Variant: [Variant id: 197, #gens: 186, #ops: 0, parent:-]

--Child created id: 198
--Creating new operations for variant [Variant id: 198, #gens: 186, #ops: 0, parent:197]
---analyzing modificationPoint position: 20
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [restrictToNonNegative, numDecisionVariables, numSlackVariables, numArtificialVariables, epsilon, f, constraints, tableau]
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numSlackVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: f spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: constraints spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: tableau spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java458
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return getNumObjectiveFunctions() + getOriginalNumDecisionVariables() ` -topatch--> `return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^  numDecisionVariables) ^ [...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 458, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return getNumObjectiveFunctions() + getOriginalNumDecisionVariables() ` -topatch--> `return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^  numDecisionVariables) ^ [...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 198, #gens: 187, #ops: 1, parent:197] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 198, errors: [SimplexTableau.java:550: error: unreachable statement
		tableau.hashCode(); 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
		                    		^]
Ingredient counter is Zero
---Undoing: gnrtn(99): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return getNumObjectiveFunctions() + getOriginalNumDecisionVariables() ` -topatch--> `return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^  numDecisionVariables) ^ [...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (197(f=1.0), 198(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (197(f=1.0), )
----------Running generation: 100, population size: 1

***** Generation 100 : 0
**Parent Variant: [Variant id: 199, #gens: 186, #ops: 0, parent:-]

--Child created id: 200
--Creating new operations for variant [Variant id: 200, #gens: 186, #ops: 0, parent:199]
---analyzing modificationPoint position: 165
Templates availables68
Attempts Base Ingredients  1 total 68
---modifPoint 0 not mutation generated in  return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || (x == y)
---analyzing modificationPoint position: 178
Templates availables12
Attempts Base Ingredients  1 total 12
---modifPoint 1 not mutation generated in  data = new double[subMatrix.length][nCols]
---analyzing modificationPoint position: 91
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 2 not mutation generated in  row = i
---analyzing modificationPoint position: 47
location: SimplexSolver.java84
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 200, #gens: 185, #ops: 1, parent:199] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 200, errors: [SimplexSolver.java:84: error: variable declaration not allowed here
				final double ratio = rhs / entry;
				             ^]
Ingredient counter is Zero
---Undoing: gnrtn(100): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (199(f=1.0), 200(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (199(f=1.0), )
----------Running generation: 101, population size: 1

***** Generation 101 : 0
**Parent Variant: [Variant id: 201, #gens: 186, #ops: 0, parent:-]

--Child created id: 202
--Creating new operations for variant [Variant id: 202, #gens: 186, #ops: 0, parent:201]
---analyzing modificationPoint position: 44
---modifPoint 0 not mutation generated in  final double entry = tableau.getEntry(i, col)
---analyzing modificationPoint position: 61
---modifPoint 1 not mutation generated in  // set the pivot element to 1 double pivotVal = tableau.getEntry(pivotRow, pivotCol)
---analyzing modificationPoint position: 73
Templates availables259
Attempts Base Ingredients  1 total 259
vars from patch []
location: MathUtils.java367
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.equals(x, y, eps)) { 	return 0; } else if (x < y) { 	retu[...] ` -topatch--> `int result = 1` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.util.MathUtils line: 367, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.equals(x, y, eps)) { 	return 0; } else if (x < y) { 	retu[...] ` -topatch--> `int result = 1` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 202, #gens: 187, #ops: 1, parent:201] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 202, errors: [MathUtils.java:1475: error: illegal start of type
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		^, MathUtils.java:1475: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		     ^, MathUtils.java:1475: error: ';' expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		        ^, MathUtils.java:1475: error: illegal start of type
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		           ^, MathUtils.java:1475: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		            ^, MathUtils.java:1475: error: ';' expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		              ^, MathUtils.java:1475: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                            ^, MathUtils.java:1475: error: illegal start of type
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                             ^, MathUtils.java:1475: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                                                                 ^, MathUtils.java:1475: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                                                                    ^, MathUtils.java:1476: error: class, interface, or enum expected
		do { 			/* assert u<0 && v<0; */ 			// B4/B3: cast out twos from t.
		^, MathUtils.java:1479: error: class, interface, or enum expected
			if (t > 0) { 				u = -t;} else { 				v = t;} 			// B6/B3. at this point both u and v should be odd. 			t = (v - u) / 2; 			// |u| larger: t positive (replace u) 			// |v| larger: t negative (replace v)} while (t != 0 ); 		return (-u) * (1 << k);// gcd is u*2^k
			             				       ^, MathUtils.java:1479: error: class, interface, or enum expected
			if (t > 0) { 				u = -t;} else { 				v = t;} 			// B6/B3. at this point both u and v should be odd. 			t = (v - u) / 2; 			// |u| larger: t positive (replace u) 			// |v| larger: t negative (replace v)} while (t != 0 ); 		return (-u) * (1 << k);// gcd is u*2^k
			             				                				      ^, MathUtils.java:1486: error: class, interface, or enum expected
	 */ 	public static int hash(double value) { 		return new java.lang.Double(value).hashCode();} 	/**
	    	              ^, MathUtils.java:1486: error: class, interface, or enum expected
	 */ 	public static int hash(double value) { 		return new java.lang.Double(value).hashCode();} 	/**
	    	                                       		                                              ^, MathUtils.java:1493: error: class, interface, or enum expected
	 */ 	public static int hash(double[] value) { 		return java.util.Arrays.hashCode(value);} 	/**
	    	              ^, MathUtils.java:1493: error: class, interface, or enum expected
	 */ 	public static int hash(double[] value) { 		return java.util.Arrays.hashCode(value);} 	/**
	    	                                         		                                        ^, MathUtils.java:1500: error: class, interface, or enum expected
	 */ 	public static byte indicator(final byte x) { 		return x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	/**
	    	              ^, MathUtils.java:1500: error: class, interface, or enum expected
	 */ 	public static byte indicator(final byte x) { 		return x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	/**
	    	                                   ^, MathUtils.java:1500: error: class, interface, or enum expected
	 */ 	public static byte indicator(final byte x) { 		return x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	/**
	    	                                             		                                                                                                                                              ^, MathUtils.java:1508: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	              ^, MathUtils.java:1508: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	                                     ^, MathUtils.java:1508: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	                                                 		                                 			                            ^, MathUtils.java:1508: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	                                                 		                                 			                              		                             ^, MathUtils.java:1515: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	              ^, MathUtils.java:1515: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	                                    ^, MathUtils.java:1515: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	                                               		                                			                           ^, MathUtils.java:1515: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	                                               		                                			                             		                                ^, MathUtils.java:1521: error: class, interface, or enum expected
	 */ 	public static int indicator(final int x) { 		return x >= 0 ? 1 : -1;} 	/**
	    	              ^, MathUtils.java:1521: error: class, interface, or enum expected
	 */ 	public static int indicator(final int x) { 		return x >= 0 ? 1 : -1;} 	/**
	    	                                  ^, MathUtils.java:1521: error: class, interface, or enum expected
	 */ 	public static int indicator(final int x) { 		return x >= 0 ? 1 : -1;} 	/**
	    	                                           		                       ^, MathUtils.java:1527: error: class, interface, or enum expected
	 */ 	public static long indicator(final long x) { 		return x >= 0L ? 1L : -1L;} 	/**
	    	              ^, MathUtils.java:1527: error: class, interface, or enum expected
	 */ 	public static long indicator(final long x) { 		return x >= 0L ? 1L : -1L;} 	/**
	    	                                   ^, MathUtils.java:1527: error: class, interface, or enum expected
	 */ 	public static long indicator(final long x) { 		return x >= 0L ? 1L : -1L;} 	/**
	    	                                             		                          ^, MathUtils.java:1534: error: class, interface, or enum expected
	 */ 	public static short indicator(final short x) { 		return x >= org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} 	/**
	    	              ^, MathUtils.java:1534: error: class, interface, or enum expected
	 */ 	public static short indicator(final short x) { 		return x >= org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} 	/**
	    	                                    ^, MathUtils.java:1534: error: class, interface, or enum expected
	 */ 	public static short indicator(final short x) { 		return x >= org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} 	/**
	    	                                               		                                                                                                                                              ^, MathUtils.java:1558: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	              ^, MathUtils.java:1558: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			         ^, MathUtils.java:1558: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			           		                                                                                                                                           		^, MathUtils.java:1558: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			           		                                                                                                                                           		                                          			                                                                 ^, MathUtils.java:1558: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			           		                                                                                                                                           		                                          			                                                                   		           ^, MathUtils.java:1575: error: class, interface, or enum expected
	 */ 	public static double log(double base, double x) { 		return java.lang.Math.log(x) / java.lang.Math.log(base);} 	/**
	    	              ^, MathUtils.java:1575: error: class, interface, or enum expected
	 */ 	public static double log(double base, double x) { 		return java.lang.Math.log(x) / java.lang.Math.log(base);} 	/**
	    	                                                  		                                                        ^, MathUtils.java:1587: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	              ^, MathUtils.java:1587: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	                                              		                                      		^, MathUtils.java:1587: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	                                              		                                      		                                                                              			                                                         ^, MathUtils.java:1587: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	                                              		                                      		                                                                              			                                                           		                   ^, MathUtils.java:1599: error: class, interface, or enum expected
	 */ 	public static long mulAndCheck(long a, long b) { 		long ret; 		java.lang.String msg = "overflow: multiply"; 		if (a > b) { 			// use symmetry to reduce boundary cases 			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);} else if (a < 0) { 			if (b < 0) { 				// check for positive overflow with negative a, negative b
	    	              ^, MathUtils.java:1599: error: class, interface, or enum expected
	 */ 	public static long mulAndCheck(long a, long b) { 		long ret; 		java.lang.String msg = "overflow: multiply"; 		if (a > b) { 			// use symmetry to reduce boundary cases 			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);} else if (a < 0) { 			if (b < 0) { 				// check for positive overflow with negative a, negative b
	    	                                                 		          		^, MathUtils.java:1599: error: class, interface, or enum expected
	 */ 	public static long mulAndCheck(long a, long b) { 		long ret; 		java.lang.String msg = "overflow: multiply"; 		if (a > b) { 			// use symmetry to reduce boundary cases 			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);} else if (a < 0) { 			if (b < 0) { 				// check for positive overflow with negative a, negative b
	    	                                                 		          		                                             		^, MathUtils.java:1600: error: class, interface, or enum expected
				if (a >= (java.lang.Long.MAX_VALUE / b)) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else if (b > 0) { 				// check for negative overflow with negative a, positive b
				                                           					            ^, MathUtils.java:1600: error: class, interface, or enum expected
				if (a >= (java.lang.Long.MAX_VALUE / b)) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else if (b > 0) { 				// check for negative overflow with negative a, positive b
				                                           					                     					                                             ^, MathUtils.java:1601: error: class, interface, or enum expected
				if ((java.lang.Long.MIN_VALUE / b) <= a) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else { 				// assert b == 0 				ret = 0;}} else if (a > 0) { 			// assert a > 0 			// assert b > 0 			// check for positive overflow with positive a, positive b
				                                           					            ^, MathUtils.java:1601: error: class, interface, or enum expected
				if ((java.lang.Long.MIN_VALUE / b) <= a) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else { 				// assert b == 0 				ret = 0;}} else if (a > 0) { 			// assert a > 0 			// assert b > 0 			// check for positive overflow with positive a, positive b
				                                           					                     					                                             ^, MathUtils.java:1602: error: class, interface, or enum expected
			if (a <= (java.lang.Long.MAX_VALUE / b)) { 				ret = a * b;} else { 				throw new java.lang.ArithmeticException(msg);}} else { 			// assert a == 0 			ret = 0;} 		return ret;} 	/**
			                                           				            ^, MathUtils.java:1602: error: class, interface, or enum expected
			if (a <= (java.lang.Long.MAX_VALUE / b)) { 				ret = a * b;} else { 				throw new java.lang.ArithmeticException(msg);}} else { 			// assert a == 0 			ret = 0;} 		return ret;} 	/**
			                                           				                     				                                             ^, MathUtils.java:1608: error: class, interface, or enum expected
	 * <code>d</code> is returned; otherwise the largest representable number
	                               ^, MathUtils.java:1613: error: class, interface, or enum expected
	 * @param d
	          ^, MathUtils.java:1615: error: class, interface, or enum expected
	 * @param direction
	          ^, MathUtils.java:1618: error: <identifier> expected
	 * @return the next machine representable number in the specified direction
	    ^, MathUtils.java:1618: error: class, interface, or enum expected
	 * @return the next machine representable number in the specified direction
	           ^, MathUtils.java:1619: error: class, interface, or enum expected
	 * @since 1.2
	          ^, MathUtils.java:1620: error: class, interface, or enum expected
	 */ 	public static double nextAfter(double d, double direction) { 		// handling of some important special cases
	    	              ^, MathUtils.java:1621: error: class, interface, or enum expected
		if (java.lang.Double.isNaN(d) || java.lang.Double.isInfinite(d)) { 			return d;} else if (d == 0) { 			return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;} 		// special cases MAX_VALUE to infinity and  MIN_VALUE to 0 		// are handled just as normal numbers 		// split the double in raw components 		long bits = java.lang.Double.doubleToLongBits(d); 		long sign = bits & 0x8000000000000000L; 		long exponent = bits & 0x7ff0000000000000L; 		long mantissa = bits & 0xfffffffffffffL; 		if ((d * (direction - d)) >= 0) { 			// we should increase the mantissa
		                                                                   			         ^, MathUtils.java:1621: error: class, interface, or enum expected
		if (java.lang.Double.isNaN(d) || java.lang.Double.isInfinite(d)) { 			return d;} else if (d == 0) { 			return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;} 		// special cases MAX_VALUE to infinity and  MIN_VALUE to 0 		// are handled just as normal numbers 		// split the double in raw components 		long bits = java.lang.Double.doubleToLongBits(d); 		long sign = bits & 0x8000000000000000L; 		long exponent = bits & 0x7ff0000000000000L; 		long mantissa = bits & 0xfffffffffffffL; 		if ((d * (direction - d)) >= 0) { 			// we should increase the mantissa
		                                                                   			                              			                                                                                ^, MathUtils.java:1622: error: class, interface, or enum expected
			if (mantissa == 0xfffffffffffffL) { 				return java.lang.Double.longBitsToDouble(sign | (exponent + 0x10000000000000L));} else { 				return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa + 1));}} else // we should decrease the mantissa
			                                    				                                                                                ^, MathUtils.java:1622: error: class, interface, or enum expected
			if (mantissa == 0xfffffffffffffL) { 				return java.lang.Double.longBitsToDouble(sign | (exponent + 0x10000000000000L));} else { 				return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa + 1));}} else // we should decrease the mantissa
			                                    				                                                                                         				                                                                             ^, MathUtils.java:1623: error: class, interface, or enum expected
		if (mantissa == 0L) { 			return java.lang.Double.longBitsToDouble((sign | (exponent - 0x10000000000000L)) | 0xfffffffffffffL);} else { 			return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa - 1));}} 	/**
		                      			                                                                                                     ^, MathUtils.java:1623: error: class, interface, or enum expected
		if (mantissa == 0L) { 			return java.lang.Double.longBitsToDouble((sign | (exponent - 0x10000000000000L)) | 0xfffffffffffffL);} else { 			return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa - 1));}} 	/**
		                      			                                                                                                              			                                                                             ^, MathUtils.java:1633: error: class, interface, or enum expected
	 */ 	public static double scalb(final double d, final int scaleFactor) { 		// handling of some important special cases
	    	              ^, MathUtils.java:1633: error: class, interface, or enum expected
	 */ 	public static double scalb(final double d, final int scaleFactor) { 		// handling of some important special cases
	    	                                 ^, MathUtils.java:1633: error: class, interface, or enum expected
	 */ 	public static double scalb(final double d, final int scaleFactor) { 		// handling of some important special cases
	    	                                                 ^, MathUtils.java:1634: error: class, interface, or enum expected
		if (((d == 0) || java.lang.Double.isNaN(d)) || java.lang.Double.isInfinite(d)) { 			return d;} 		// split the double in raw components 		final long bits = java.lang.Double.doubleToLongBits(d); 		final long exponent = bits & 0x7ff0000000000000L; 		final long rest = bits & 0x800fffffffffffffL; 		// shift the exponent 		final long newBits = rest | (exponent + (((long) (scaleFactor)) << 52)); 		return java.lang.Double.longBitsToDouble(newBits);} 	/**
		                                                                                 			         ^, MathUtils.java:1638: error: class, interface, or enum expected
	 *   <li>normalize an angle between 0 and 2&pi;:<br/>
	                                               ^, MathUtils.java:1639: error: class, interface, or enum expected
	 *       <code>a = MathUtils.normalizeAngle(a, Math.PI);</code></li>
	                                                        ^, MathUtils.java:1640: error: class, interface, or enum expected
	 *   <li>normalize an angle between -&pi; and +&pi;<br/>
	                                          ^, MathUtils.java:1640: error: class, interface, or enum expected
	 *   <li>normalize an angle between -&pi; and +&pi;<br/>
	                                                   ^, MathUtils.java:1641: error: class, interface, or enum expected
	 *       <code>a = MathUtils.normalizeAngle(a, 0.0);</code></li>
	                                                    ^, MathUtils.java:1643: error: class, interface, or enum expected
	 *       <code>angle = MathUtils.normalizeAngle(end, start) - start;</code></li>
	                                                                    ^, MathUtils.java:1645: error: class, interface, or enum expected
	 * <p>Note that due to numerical accuracy and since &pi; cannot be represented
	                                                         ^, MathUtils.java:1649: error: class, interface, or enum expected
	 * @param a
	          ^, MathUtils.java:1651: error: class, interface, or enum expected
	 * @param center
	          ^, MathUtils.java:1652: error: class, interface, or enum expected
	 * 		center of the desired 2&pi; interval for the result
	   		                            ^, MathUtils.java:1653: error: <identifier> expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	    ^, MathUtils.java:1653: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	           ^, MathUtils.java:1653: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                    ^, MathUtils.java:1653: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                   ^, MathUtils.java:1653: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                       ^, MathUtils.java:1653: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                                  ^, MathUtils.java:1653: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                                      ^, MathUtils.java:1654: error: class, interface, or enum expected
	 * @since 1.2
	 ^, MathUtils.java:1654: error: class, interface, or enum expected
	 * @since 1.2
	          ^, MathUtils.java:1655: error: class, interface, or enum expected
	 */ 	public static double normalizeAngle(double a, double center) { 		return a - (org.apache.commons.math.util.MathUtils.TWO_PI * java.lang.Math.floor(((a + java.lang.Math.PI) - center) / org.apache.commons.math.util.MathUtils.TWO_PI));} 	/**
	    	              ^, MathUtils.java:1655: error: class, interface, or enum expected
	 */ 	public static double normalizeAngle(double a, double center) { 		return a - (org.apache.commons.math.util.MathUtils.TWO_PI * java.lang.Math.floor(((a + java.lang.Math.PI) - center) / org.apache.commons.math.util.MathUtils.TWO_PI));} 	/**
	    	                                                               		                                                                                                                                                                      ^, MathUtils.java:1665: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale) { 		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} 	/**
	    	              ^, MathUtils.java:1665: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale) { 		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} 	/**
	    	                                                  		                                                                                                  ^, MathUtils.java:1679: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale, int roundingMethod) { 		try { 			return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { 			if (java.lang.Double.isInfinite(x)) { 				return x;} else { 				return java.lang.Double.NaN;}}} 	/**
	    	              ^, MathUtils.java:1679: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale, int roundingMethod) { 		try { 			return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { 			if (java.lang.Double.isInfinite(x)) { 				return x;} else { 				return java.lang.Double.NaN;}}} 	/**
	    	                                                                      		      			                                                                                                            ^, MathUtils.java:1679: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale, int roundingMethod) { 		try { 			return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { 			if (java.lang.Double.isInfinite(x)) { 				return x;} else { 				return java.lang.Double.NaN;}}} 	/**
	    	                                                                      		      			                                                                                                                                                           			                                      				         ^]
Ingredient counter is Zero
---Undoing: gnrtn(101): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.equals(x, y, eps)) { 	return 0; } else if (x < y) { 	retu[...] ` -topatch--> `int result = 1` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (201(f=1.0), 202(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (201(f=1.0), )
----------Running generation: 102, population size: 1

***** Generation 102 : 0
**Parent Variant: [Variant id: 203, #gens: 186, #ops: 0, parent:-]

--Child created id: 204
--Creating new operations for variant [Variant id: 204, #gens: 186, #ops: 0, parent:203]
---analyzing modificationPoint position: 119
location: SimplexTableau.java126
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// create a matrix of the correct size java.util.List<org.apache.commons.math.optimization.linear.Li[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 204, #gens: 185, #ops: 1, parent:203] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 204, errors: [SimplexTableau.java:154: error: cannot find symbol
			org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i);
			                                                                                     ^
  symbol:   method get(int)
  location: variable constraints of type java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint>]
Ingredient counter is Zero
---Undoing: gnrtn(102): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// create a matrix of the correct size java.util.List<org.apache.commons.math.optimization.linear.Li[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (203(f=1.0), 204(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (203(f=1.0), )
----------Running generation: 103, population size: 1

***** Generation 103 : 0
**Parent Variant: [Variant id: 205, #gens: 186, #ops: 0, parent:-]

--Child created id: 206
--Creating new operations for variant [Variant id: 206, #gens: 186, #ops: 0, parent:205]
---analyzing modificationPoint position: 4
Templates availables31
Attempts Base Ingredients  1 total 31
vars from patch [f]
--> var from patch: f spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java297
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return null ` -topatch--> `return f.getCoefficients().getDimension()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 297, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return null ` -topatch--> `return f.getCoefficients().getDimension()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 206, #gens: 186, #ops: 1, parent:205] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 206
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-206/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 10, was successful: false, cases executed: 14] ,[]
-Valid?: |false|10|14|[]|, fitness 10.0
Ingredient counter is Zero
---Undoing: gnrtn(103): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return null ` -topatch--> `return f.getCoefficients().getDimension()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (205(f=1.0), 206(f=10.0), )
Selected to next generation: IDs2--> (205(f=1.0), )
----------Running generation: 104, population size: 1

***** Generation 104 : 0
**Parent Variant: [Variant id: 207, #gens: 186, #ops: 0, parent:-]

--Child created id: 208
--Creating new operations for variant [Variant id: 208, #gens: 186, #ops: 0, parent:207]
---analyzing modificationPoint position: 182
location: Array2DRowRealMatrix.java622
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setSubMatrix(in, 0, 0) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 208, #gens: 185, #ops: 1, parent:207] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 208
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-208/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(104): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setSubMatrix(in, 0, 0) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (207(f=1.0), 208(f=14.0), )
Selected to next generation: IDs2--> (207(f=1.0), )
----------Running generation: 105, population size: 1

***** Generation 105 : 0
**Parent Variant: [Variant id: 209, #gens: 186, #ops: 0, parent:-]

--Child created id: 210
--Creating new operations for variant [Variant id: 210, #gens: 186, #ops: 0, parent:209]
---analyzing modificationPoint position: 81
location: ArrayRealVector.java884
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `checkVectorDimensions(v.length) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 210, #gens: 185, #ops: 1, parent:209] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 210
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-210/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(105): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `checkVectorDimensions(v.length) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (209(f=1.0), 210(f=1.0), )
Selected to next generation: IDs2--> (209(f=1.0), )
----------Running generation: 106, population size: 1

***** Generation 106 : 0
**Parent Variant: [Variant id: 211, #gens: 186, #ops: 0, parent:-]

--Child created id: 212
--Creating new operations for variant [Variant id: 212, #gens: 186, #ops: 0, parent:211]
---analyzing modificationPoint position: 111
location: SimplexTableau.java106
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 212, #gens: 185, #ops: 1, parent:211] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 212, errors: [SimplexTableau.java:117: error: variable constraints might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(106): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (211(f=1.0), 212(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (211(f=1.0), )
----------Running generation: 107, population size: 1

***** Generation 107 : 0
**Parent Variant: [Variant id: 213, #gens: 186, #ops: 0, parent:-]

--Child created id: 214
--Creating new operations for variant [Variant id: 214, #gens: 186, #ops: 0, parent:213]
---analyzing modificationPoint position: 6
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [iterations]
--> var from patch: iterations spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLinearOptimizer.java106
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `// solve the problem return doOptimize() ` -topatch--> `return iterations` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 106, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `// solve the problem return doOptimize() ` -topatch--> `return iterations` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 214, #gens: 187, #ops: 1, parent:213] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 214, errors: [AbstractLinearOptimizer.java:104: error: incompatible types: int cannot be converted to org.apache.commons.math.optimization.RealPointValuePair
		iterations = 0; 		return iterations;
		                		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(107): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `// solve the problem return doOptimize() ` -topatch--> `return iterations` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (213(f=1.0), 214(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (213(f=1.0), )
----------Running generation: 108, population size: 1

***** Generation 108 : 0
**Parent Variant: [Variant id: 215, #gens: 186, #ops: 0, parent:-]

--Child created id: 216
--Creating new operations for variant [Variant id: 216, #gens: 186, #ops: 0, parent:215]
---analyzing modificationPoint position: 114
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1)
---analyzing modificationPoint position: 24
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java151
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { 	ret[...] ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 151, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { 	ret[...] ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 216, #gens: 187, #ops: 1, parent:215] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 216
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-216/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 6, was successful: false, cases executed: 14] ,[]
-Valid?: |false|6|14|[]|, fitness 6.0
Ingredient counter is Zero
---Undoing: gnrtn(108): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { 	ret[...] ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (215(f=1.0), 216(f=6.0), )
Selected to next generation: IDs2--> (215(f=1.0), )
----------Running generation: 109, population size: 1

***** Generation 109 : 0
**Parent Variant: [Variant id: 217, #gens: 186, #ops: 0, parent:-]

--Child created id: 218
--Creating new operations for variant [Variant id: 218, #gens: 186, #ops: 0, parent:217]
---analyzing modificationPoint position: 88
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0
---analyzing modificationPoint position: 75
Templates availables259
Attempts Base Ingredients  1 total 259
vars from patch [java.math.BigInteger.ONE]
--> var from patch: java.math.BigInteger.ONE spoon.support.reflect.code.CtFieldReadImpl
location: MathUtils.java369
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (x < y) { 	return -1; } ` -topatch--> `java.math.BigInteger result = java.math.BigInteger.ONE` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.util.MathUtils line: 369, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (x < y) { 	return -1; } ` -topatch--> `java.math.BigInteger result = java.math.BigInteger.ONE` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 218, #gens: 187, #ops: 1, parent:217] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 218, errors: [MathUtils.java:1615: error: illegal start of type
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		^, MathUtils.java:1615: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		     ^, MathUtils.java:1615: error: ';' expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		        ^, MathUtils.java:1615: error: illegal start of type
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		           ^, MathUtils.java:1615: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		            ^, MathUtils.java:1615: error: ';' expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		              ^, MathUtils.java:1615: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                            ^, MathUtils.java:1615: error: illegal start of type
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                             ^, MathUtils.java:1615: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                                                                 ^, MathUtils.java:1615: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                                                                    ^, MathUtils.java:1616: error: class, interface, or enum expected
		do { 			/* assert u<0 && v<0; */ 			// B4/B3: cast out twos from t.
		^, MathUtils.java:1619: error: class, interface, or enum expected
			if (t > 0) { 				u = -t;} else { 				v = t;} 			// B6/B3. at this point both u and v should be odd. 			t = (v - u) / 2; 			// |u| larger: t positive (replace u) 			// |v| larger: t negative (replace v)} while (t != 0 ); 		return (-u) * (1 << k);// gcd is u*2^k
			             				       ^, MathUtils.java:1619: error: class, interface, or enum expected
			if (t > 0) { 				u = -t;} else { 				v = t;} 			// B6/B3. at this point both u and v should be odd. 			t = (v - u) / 2; 			// |u| larger: t positive (replace u) 			// |v| larger: t negative (replace v)} while (t != 0 ); 		return (-u) * (1 << k);// gcd is u*2^k
			             				                				      ^, MathUtils.java:1626: error: class, interface, or enum expected
	 */ 	public static int hash(double value) { 		return new java.lang.Double(value).hashCode();} 	/**
	    	              ^, MathUtils.java:1626: error: class, interface, or enum expected
	 */ 	public static int hash(double value) { 		return new java.lang.Double(value).hashCode();} 	/**
	    	                                       		                                              ^, MathUtils.java:1633: error: class, interface, or enum expected
	 */ 	public static int hash(double[] value) { 		return java.util.Arrays.hashCode(value);} 	/**
	    	              ^, MathUtils.java:1633: error: class, interface, or enum expected
	 */ 	public static int hash(double[] value) { 		return java.util.Arrays.hashCode(value);} 	/**
	    	                                         		                                        ^, MathUtils.java:1640: error: class, interface, or enum expected
	 */ 	public static byte indicator(final byte x) { 		return x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	/**
	    	              ^, MathUtils.java:1640: error: class, interface, or enum expected
	 */ 	public static byte indicator(final byte x) { 		return x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	/**
	    	                                   ^, MathUtils.java:1640: error: class, interface, or enum expected
	 */ 	public static byte indicator(final byte x) { 		return x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	/**
	    	                                             		                                                                                                                                              ^, MathUtils.java:1648: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	              ^, MathUtils.java:1648: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	                                     ^, MathUtils.java:1648: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	                                                 		                                 			                            ^, MathUtils.java:1648: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	                                                 		                                 			                              		                             ^, MathUtils.java:1655: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	              ^, MathUtils.java:1655: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	                                    ^, MathUtils.java:1655: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	                                               		                                			                           ^, MathUtils.java:1655: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	                                               		                                			                             		                                ^, MathUtils.java:1661: error: class, interface, or enum expected
	 */ 	public static int indicator(final int x) { 		return x >= 0 ? 1 : -1;} 	/**
	    	              ^, MathUtils.java:1661: error: class, interface, or enum expected
	 */ 	public static int indicator(final int x) { 		return x >= 0 ? 1 : -1;} 	/**
	    	                                  ^, MathUtils.java:1661: error: class, interface, or enum expected
	 */ 	public static int indicator(final int x) { 		return x >= 0 ? 1 : -1;} 	/**
	    	                                           		                       ^, MathUtils.java:1667: error: class, interface, or enum expected
	 */ 	public static long indicator(final long x) { 		return x >= 0L ? 1L : -1L;} 	/**
	    	              ^, MathUtils.java:1667: error: class, interface, or enum expected
	 */ 	public static long indicator(final long x) { 		return x >= 0L ? 1L : -1L;} 	/**
	    	                                   ^, MathUtils.java:1667: error: class, interface, or enum expected
	 */ 	public static long indicator(final long x) { 		return x >= 0L ? 1L : -1L;} 	/**
	    	                                             		                          ^, MathUtils.java:1674: error: class, interface, or enum expected
	 */ 	public static short indicator(final short x) { 		return x >= org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} 	/**
	    	              ^, MathUtils.java:1674: error: class, interface, or enum expected
	 */ 	public static short indicator(final short x) { 		return x >= org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} 	/**
	    	                                    ^, MathUtils.java:1674: error: class, interface, or enum expected
	 */ 	public static short indicator(final short x) { 		return x >= org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} 	/**
	    	                                               		                                                                                                                                              ^, MathUtils.java:1698: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	              ^, MathUtils.java:1698: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			         ^, MathUtils.java:1698: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			           		                                                                                                                                           		^, MathUtils.java:1698: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			           		                                                                                                                                           		                                          			                                                                 ^, MathUtils.java:1698: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			           		                                                                                                                                           		                                          			                                                                   		           ^, MathUtils.java:1715: error: class, interface, or enum expected
	 */ 	public static double log(double base, double x) { 		return java.lang.Math.log(x) / java.lang.Math.log(base);} 	/**
	    	              ^, MathUtils.java:1715: error: class, interface, or enum expected
	 */ 	public static double log(double base, double x) { 		return java.lang.Math.log(x) / java.lang.Math.log(base);} 	/**
	    	                                                  		                                                        ^, MathUtils.java:1727: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	              ^, MathUtils.java:1727: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	                                              		                                      		^, MathUtils.java:1727: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	                                              		                                      		                                                                              			                                                         ^, MathUtils.java:1727: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	                                              		                                      		                                                                              			                                                           		                   ^, MathUtils.java:1739: error: class, interface, or enum expected
	 */ 	public static long mulAndCheck(long a, long b) { 		long ret; 		java.lang.String msg = "overflow: multiply"; 		if (a > b) { 			// use symmetry to reduce boundary cases 			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);} else if (a < 0) { 			if (b < 0) { 				// check for positive overflow with negative a, negative b
	    	              ^, MathUtils.java:1739: error: class, interface, or enum expected
	 */ 	public static long mulAndCheck(long a, long b) { 		long ret; 		java.lang.String msg = "overflow: multiply"; 		if (a > b) { 			// use symmetry to reduce boundary cases 			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);} else if (a < 0) { 			if (b < 0) { 				// check for positive overflow with negative a, negative b
	    	                                                 		          		^, MathUtils.java:1739: error: class, interface, or enum expected
	 */ 	public static long mulAndCheck(long a, long b) { 		long ret; 		java.lang.String msg = "overflow: multiply"; 		if (a > b) { 			// use symmetry to reduce boundary cases 			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);} else if (a < 0) { 			if (b < 0) { 				// check for positive overflow with negative a, negative b
	    	                                                 		          		                                             		^, MathUtils.java:1740: error: class, interface, or enum expected
				if (a >= (java.lang.Long.MAX_VALUE / b)) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else if (b > 0) { 				// check for negative overflow with negative a, positive b
				                                           					            ^, MathUtils.java:1740: error: class, interface, or enum expected
				if (a >= (java.lang.Long.MAX_VALUE / b)) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else if (b > 0) { 				// check for negative overflow with negative a, positive b
				                                           					                     					                                             ^, MathUtils.java:1741: error: class, interface, or enum expected
				if ((java.lang.Long.MIN_VALUE / b) <= a) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else { 				// assert b == 0 				ret = 0;}} else if (a > 0) { 			// assert a > 0 			// assert b > 0 			// check for positive overflow with positive a, positive b
				                                           					            ^, MathUtils.java:1741: error: class, interface, or enum expected
				if ((java.lang.Long.MIN_VALUE / b) <= a) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else { 				// assert b == 0 				ret = 0;}} else if (a > 0) { 			// assert a > 0 			// assert b > 0 			// check for positive overflow with positive a, positive b
				                                           					                     					                                             ^, MathUtils.java:1742: error: class, interface, or enum expected
			if (a <= (java.lang.Long.MAX_VALUE / b)) { 				ret = a * b;} else { 				throw new java.lang.ArithmeticException(msg);}} else { 			// assert a == 0 			ret = 0;} 		return ret;} 	/**
			                                           				            ^, MathUtils.java:1742: error: class, interface, or enum expected
			if (a <= (java.lang.Long.MAX_VALUE / b)) { 				ret = a * b;} else { 				throw new java.lang.ArithmeticException(msg);}} else { 			// assert a == 0 			ret = 0;} 		return ret;} 	/**
			                                           				                     				                                             ^, MathUtils.java:1748: error: class, interface, or enum expected
	 * <code>d</code> is returned; otherwise the largest representable number
	                               ^, MathUtils.java:1753: error: class, interface, or enum expected
	 * @param d
	          ^, MathUtils.java:1755: error: class, interface, or enum expected
	 * @param direction
	          ^, MathUtils.java:1758: error: <identifier> expected
	 * @return the next machine representable number in the specified direction
	    ^, MathUtils.java:1758: error: class, interface, or enum expected
	 * @return the next machine representable number in the specified direction
	           ^, MathUtils.java:1759: error: class, interface, or enum expected
	 * @since 1.2
	          ^, MathUtils.java:1760: error: class, interface, or enum expected
	 */ 	public static double nextAfter(double d, double direction) { 		// handling of some important special cases
	    	              ^, MathUtils.java:1761: error: class, interface, or enum expected
		if (java.lang.Double.isNaN(d) || java.lang.Double.isInfinite(d)) { 			return d;} else if (d == 0) { 			return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;} 		// special cases MAX_VALUE to infinity and  MIN_VALUE to 0 		// are handled just as normal numbers 		// split the double in raw components 		long bits = java.lang.Double.doubleToLongBits(d); 		long sign = bits & 0x8000000000000000L; 		long exponent = bits & 0x7ff0000000000000L; 		long mantissa = bits & 0xfffffffffffffL; 		if ((d * (direction - d)) >= 0) { 			// we should increase the mantissa
		                                                                   			         ^, MathUtils.java:1761: error: class, interface, or enum expected
		if (java.lang.Double.isNaN(d) || java.lang.Double.isInfinite(d)) { 			return d;} else if (d == 0) { 			return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;} 		// special cases MAX_VALUE to infinity and  MIN_VALUE to 0 		// are handled just as normal numbers 		// split the double in raw components 		long bits = java.lang.Double.doubleToLongBits(d); 		long sign = bits & 0x8000000000000000L; 		long exponent = bits & 0x7ff0000000000000L; 		long mantissa = bits & 0xfffffffffffffL; 		if ((d * (direction - d)) >= 0) { 			// we should increase the mantissa
		                                                                   			                              			                                                                                ^, MathUtils.java:1762: error: class, interface, or enum expected
			if (mantissa == 0xfffffffffffffL) { 				return java.lang.Double.longBitsToDouble(sign | (exponent + 0x10000000000000L));} else { 				return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa + 1));}} else // we should decrease the mantissa
			                                    				                                                                                ^, MathUtils.java:1762: error: class, interface, or enum expected
			if (mantissa == 0xfffffffffffffL) { 				return java.lang.Double.longBitsToDouble(sign | (exponent + 0x10000000000000L));} else { 				return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa + 1));}} else // we should decrease the mantissa
			                                    				                                                                                         				                                                                             ^, MathUtils.java:1763: error: class, interface, or enum expected
		if (mantissa == 0L) { 			return java.lang.Double.longBitsToDouble((sign | (exponent - 0x10000000000000L)) | 0xfffffffffffffL);} else { 			return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa - 1));}} 	/**
		                      			                                                                                                     ^, MathUtils.java:1763: error: class, interface, or enum expected
		if (mantissa == 0L) { 			return java.lang.Double.longBitsToDouble((sign | (exponent - 0x10000000000000L)) | 0xfffffffffffffL);} else { 			return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa - 1));}} 	/**
		                      			                                                                                                              			                                                                             ^, MathUtils.java:1773: error: class, interface, or enum expected
	 */ 	public static double scalb(final double d, final int scaleFactor) { 		// handling of some important special cases
	    	              ^, MathUtils.java:1773: error: class, interface, or enum expected
	 */ 	public static double scalb(final double d, final int scaleFactor) { 		// handling of some important special cases
	    	                                 ^, MathUtils.java:1773: error: class, interface, or enum expected
	 */ 	public static double scalb(final double d, final int scaleFactor) { 		// handling of some important special cases
	    	                                                 ^, MathUtils.java:1774: error: class, interface, or enum expected
		if (((d == 0) || java.lang.Double.isNaN(d)) || java.lang.Double.isInfinite(d)) { 			return d;} 		// split the double in raw components 		final long bits = java.lang.Double.doubleToLongBits(d); 		final long exponent = bits & 0x7ff0000000000000L; 		final long rest = bits & 0x800fffffffffffffL; 		// shift the exponent 		final long newBits = rest | (exponent + (((long) (scaleFactor)) << 52)); 		return java.lang.Double.longBitsToDouble(newBits);} 	/**
		                                                                                 			         ^, MathUtils.java:1778: error: class, interface, or enum expected
	 *   <li>normalize an angle between 0 and 2&pi;:<br/>
	                                               ^, MathUtils.java:1779: error: class, interface, or enum expected
	 *       <code>a = MathUtils.normalizeAngle(a, Math.PI);</code></li>
	                                                        ^, MathUtils.java:1780: error: class, interface, or enum expected
	 *   <li>normalize an angle between -&pi; and +&pi;<br/>
	                                          ^, MathUtils.java:1780: error: class, interface, or enum expected
	 *   <li>normalize an angle between -&pi; and +&pi;<br/>
	                                                   ^, MathUtils.java:1781: error: class, interface, or enum expected
	 *       <code>a = MathUtils.normalizeAngle(a, 0.0);</code></li>
	                                                    ^, MathUtils.java:1783: error: class, interface, or enum expected
	 *       <code>angle = MathUtils.normalizeAngle(end, start) - start;</code></li>
	                                                                    ^, MathUtils.java:1785: error: class, interface, or enum expected
	 * <p>Note that due to numerical accuracy and since &pi; cannot be represented
	                                                         ^, MathUtils.java:1789: error: class, interface, or enum expected
	 * @param a
	          ^, MathUtils.java:1791: error: class, interface, or enum expected
	 * @param center
	          ^, MathUtils.java:1792: error: class, interface, or enum expected
	 * 		center of the desired 2&pi; interval for the result
	   		                            ^, MathUtils.java:1793: error: <identifier> expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	    ^, MathUtils.java:1793: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	           ^, MathUtils.java:1793: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                    ^, MathUtils.java:1793: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                   ^, MathUtils.java:1793: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                       ^, MathUtils.java:1793: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                                  ^, MathUtils.java:1793: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                                      ^, MathUtils.java:1794: error: class, interface, or enum expected
	 * @since 1.2
	 ^, MathUtils.java:1794: error: class, interface, or enum expected
	 * @since 1.2
	          ^, MathUtils.java:1795: error: class, interface, or enum expected
	 */ 	public static double normalizeAngle(double a, double center) { 		return a - (org.apache.commons.math.util.MathUtils.TWO_PI * java.lang.Math.floor(((a + java.lang.Math.PI) - center) / org.apache.commons.math.util.MathUtils.TWO_PI));} 	/**
	    	              ^, MathUtils.java:1795: error: class, interface, or enum expected
	 */ 	public static double normalizeAngle(double a, double center) { 		return a - (org.apache.commons.math.util.MathUtils.TWO_PI * java.lang.Math.floor(((a + java.lang.Math.PI) - center) / org.apache.commons.math.util.MathUtils.TWO_PI));} 	/**
	    	                                                               		                                                                                                                                                                      ^, MathUtils.java:1805: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale) { 		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} 	/**
	    	              ^, MathUtils.java:1805: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale) { 		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} 	/**
	    	                                                  		                                                                                                  ^, MathUtils.java:1819: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale, int roundingMethod) { 		try { 			return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { 			if (java.lang.Double.isInfinite(x)) { 				return x;} else { 				return java.lang.Double.NaN;}}} 	/**
	    	              ^, MathUtils.java:1819: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale, int roundingMethod) { 		try { 			return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { 			if (java.lang.Double.isInfinite(x)) { 				return x;} else { 				return java.lang.Double.NaN;}}} 	/**
	    	                                                                      		      			                                                                                                            ^, MathUtils.java:1819: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale, int roundingMethod) { 		try { 			return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { 			if (java.lang.Double.isInfinite(x)) { 				return x;} else { 				return java.lang.Double.NaN;}}} 	/**
	    	                                                                      		      			                                                                                                                                                           			                                      				         ^]
Ingredient counter is Zero
---Undoing: gnrtn(109): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (x < y) { 	return -1; } ` -topatch--> `java.math.BigInteger result = java.math.BigInteger.ONE` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (217(f=1.0), 218(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (217(f=1.0), )
----------Running generation: 110, population size: 1

***** Generation 110 : 0
**Parent Variant: [Variant id: 219, #gens: 186, #ops: 0, parent:-]

--Child created id: 220
--Creating new operations for variant [Variant id: 220, #gens: 186, #ops: 0, parent:219]
---analyzing modificationPoint position: 141
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java176
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// artificial variables if ((constraint.getRelationship() == org.apache.commons.math.optimization.li[...] ` -topatch--> `java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset())` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 176, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// artificial variables if ((constraint.getRelationship() == org.apache.commons.math.optimization.li[...] ` -topatch--> `java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset())` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 220, #gens: 187, #ops: 1, parent:219] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 220, errors: [SimplexTableau.java:409: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:409: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:409: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:409: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:409: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:409: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:411: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:411: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:411: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:411: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:411: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:411: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:411: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:413: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:413: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:414: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:415: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:415: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:416: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:416: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:417: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:418: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:418: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:418: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:419: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:419: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:419: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:419: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:419: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:419: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:432: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:432: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:432: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:432: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:432: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:432: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:436: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:436: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:440: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:440: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:448: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:448: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:448: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:448: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:457: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:457: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:457: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:457: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:457: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:461: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:461: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:465: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:465: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:469: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:469: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:474: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:474: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:484: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:484: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:489: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:489: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:493: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:493: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:497: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() {
	    	^, SimplexTableau.java:497: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() {
	    	                                             ^, SimplexTableau.java:505: error: illegal start of expression
	 */ 	protected final double[][] getData() {
	    	^, SimplexTableau.java:505: error: ';' expected
	 */ 	protected final double[][] getData() {
	    	                                  ^, SimplexTableau.java:511: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) {
	    	                    	                     ^, SimplexTableau.java:511: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) {
	    	                    	                                            ^, SimplexTableau.java:542: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() {
	    	                    	                   ^, SimplexTableau.java:560: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	^, SimplexTableau.java:560: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	        ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                        ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                       ^, SimplexTableau.java:560: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                                       ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                                                   ^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	        ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                     ^, SimplexTableau.java:572: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                              ^, SimplexTableau.java:572: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                                                   ^, SimplexTableau.java:573: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(110): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// artificial variables if ((constraint.getRelationship() == org.apache.commons.math.optimization.li[...] ` -topatch--> `java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset())` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (219(f=1.0), 220(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (219(f=1.0), )
----------Running generation: 111, population size: 1

***** Generation 111 : 0
**Parent Variant: [Variant id: 221, #gens: 186, #ops: 0, parent:-]

--Child created id: 222
--Creating new operations for variant [Variant id: 222, #gens: 186, #ops: 0, parent:221]
---analyzing modificationPoint position: 30
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  this.epsilon = epsilon
---analyzing modificationPoint position: 4
---modifPoint 1 not mutation generated in  return null
---analyzing modificationPoint position: 88
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [numArtificialVariables]
--> var from patch: numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java292
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0 ` -topatch--> `if (numArtificialVariables == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 292, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0 ` -topatch--> `if (numArtificialVariables == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 222, #gens: 187, #ops: 1, parent:221] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 222, errors: [SimplexTableau.java:309: error: incompatible types: missing return value
			return;
			^]
Ingredient counter is Zero
---Undoing: gnrtn(111): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0 ` -topatch--> `if (numArtificialVariables == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (221(f=1.0), 222(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (221(f=1.0), )
----------Running generation: 112, population size: 1

***** Generation 112 : 0
**Parent Variant: [Variant id: 223, #gens: 186, #ops: 0, parent:-]

--Child created id: 224
--Creating new operations for variant [Variant id: 224, #gens: 186, #ops: 0, parent:223]
---analyzing modificationPoint position: 144
Templates availables31
Attempts Base Ingredients  1 total 31
---modifPoint 0 not mutation generated in  return f.getCoefficients().getDimension()
---analyzing modificationPoint position: 79
location: SimplexTableau.java296
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 	return null; [...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 224, #gens: 185, #ops: 1, parent:223] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 224
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-224/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 14] ,[]
-Valid?: |false|3|14|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(112): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 	return null; [...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (223(f=1.0), 224(f=3.0), )
Selected to next generation: IDs2--> (223(f=1.0), )
----------Running generation: 113, population size: 1

***** Generation 113 : 0
**Parent Variant: [Variant id: 225, #gens: 186, #ops: 0, parent:-]

--Child created id: 226
--Creating new operations for variant [Variant id: 226, #gens: 186, #ops: 0, parent:225]
---analyzing modificationPoint position: 81
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 0 not mutation generated in  checkVectorDimensions(v.length)
---analyzing modificationPoint position: 133
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [restrictToNonNegative, matrix, zIndex, objectiveCoefficients]
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: matrix spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: zIndex spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: objectiveCoefficients spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java153
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i) ` -topatch--> `if (!restrictToNonNegative) { 	matrix[zIndex][getSlackVariableOffset() - 1] =  	org.apache.commons.m[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 153, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i) ` -topatch--> `if (!restrictToNonNegative) { 	matrix[zIndex][getSlackVariableOffset() - 1] =  	org.apache.commons.m[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 226, #gens: 187, #ops: 1, parent:225] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 226
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-226/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(113): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i) ` -topatch--> `if (!restrictToNonNegative) { 	matrix[zIndex][getSlackVariableOffset() - 1] =  	org.apache.commons.m[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (225(f=1.0), 226(f=1.0), )
Selected to next generation: IDs2--> (225(f=1.0), )
----------Running generation: 114, population size: 1

***** Generation 114 : 0
**Parent Variant: [Variant id: 227, #gens: 186, #ops: 0, parent:-]

--Child created id: 228
--Creating new operations for variant [Variant id: 228, #gens: 186, #ops: 0, parent:227]
---analyzing modificationPoint position: 158
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length)
---analyzing modificationPoint position: 155
Templates availables1
Attempts Base Ingredients  1 total 1
--- no mutation left to apply in element spoon.support.reflect.code.CtUnaryOperatorImpl@1, search space size: 1
---modifPoint 1 not mutation generated in  ++count
---analyzing modificationPoint position: 40
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch []
location: SimplexSolver.java77
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double minRatio = java.lang.Double.MAX_VALUE ` -topatch--> `java.lang.Integer minPos = null` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 77, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double minRatio = java.lang.Double.MAX_VALUE ` -topatch--> `java.lang.Integer minPos = null` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 228, #gens: 186, #ops: 1, parent:227] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 228, errors: [SimplexSolver.java:85: error: cannot find symbol
				if (ratio < minRatio) {
				            ^
  symbol:   variable minRatio
  location: class org.apache.commons.math.optimization.linear.SimplexSolver, SimplexSolver.java:86: error: cannot find symbol
					minRatio = ratio;
					^
  symbol:   variable minRatio
  location: class org.apache.commons.math.optimization.linear.SimplexSolver]
Ingredient counter is Zero
---Undoing: gnrtn(114): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double minRatio = java.lang.Double.MAX_VALUE ` -topatch--> `java.lang.Integer minPos = null` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (227(f=1.0), 228(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (227(f=1.0), )
----------Running generation: 115, population size: 1

***** Generation 115 : 0
**Parent Variant: [Variant id: 229, #gens: 186, #ops: 0, parent:-]

--Child created id: 230
--Creating new operations for variant [Variant id: 230, #gens: 186, #ops: 0, parent:229]
---analyzing modificationPoint position: 24
location: SimplexSolver.java151
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { 	ret[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 230, #gens: 185, #ops: 1, parent:229] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 230
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-230/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 14] ,[]
-Valid?: |false|8|14|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(115): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { 	ret[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (229(f=1.0), 230(f=8.0), )
Selected to next generation: IDs2--> (229(f=1.0), )
----------Running generation: 116, population size: 1

***** Generation 116 : 0
**Parent Variant: [Variant id: 231, #gens: 186, #ops: 0, parent:-]

--Child created id: 232
--Creating new operations for variant [Variant id: 232, #gens: 186, #ops: 0, parent:231]
---analyzing modificationPoint position: 37
Templates availables5
Attempts Base Ingredients  1 total 5
---modifPoint 0 not mutation generated in  minPos = i
---analyzing modificationPoint position: 131
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  int artificialVar = 0
---analyzing modificationPoint position: 72
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 2 not mutation generated in  return numArtificialVariables
---analyzing modificationPoint position: 4
location: SimplexTableau.java297
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return null ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 232, #gens: 185, #ops: 1, parent:231] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 232
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-232/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 14] ,[]
-Valid?: |false|3|14|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(116): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return null ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (231(f=1.0), 232(f=3.0), )
Selected to next generation: IDs2--> (231(f=1.0), )
----------Running generation: 117, population size: 1

***** Generation 117 : 0
**Parent Variant: [Variant id: 233, #gens: 186, #ops: 0, parent:-]

--Child created id: 234
--Creating new operations for variant [Variant id: 234, #gens: 186, #ops: 0, parent:233]
---analyzing modificationPoint position: 154
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  if (constraint.getRelationship() == relationship) { 	++count; }
---analyzing modificationPoint position: 115
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  this.numSlackVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relatio[...]
---analyzing modificationPoint position: 157
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 2 not mutation generated in  for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...]
---analyzing modificationPoint position: 48
Templates availables5
Attempts Base Ingredients  1 total 5
---modifPoint 3 not mutation generated in  minRatio = ratio
---analyzing modificationPoint position: 15
---modifPoint 4 not mutation generated in  java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i)
---analyzing modificationPoint position: 26
location: SimplexSolver.java188
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 234, #gens: 185, #ops: 1, parent:233] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child compiles: id 234
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-234/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 5, was successful: false, cases executed: 14] ,[]
-Valid?: |false|5|14|[]|, fitness 5.0
Ingredient counter is Zero
---Undoing: gnrtn(117): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (233(f=1.0), 234(f=5.0), )
Selected to next generation: IDs2--> (233(f=1.0), )
----------Running generation: 118, population size: 1

***** Generation 118 : 0
**Parent Variant: [Variant id: 235, #gens: 186, #ops: 0, parent:-]

--Child created id: 236
--Creating new operations for variant [Variant id: 236, #gens: 186, #ops: 0, parent:235]
---analyzing modificationPoint position: 42
Templates availables4
Attempts Base Ingredients  1 total 4
---modifPoint 0 not mutation generated in  for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 	final double rhs =[...]
---analyzing modificationPoint position: 93
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 1 not mutation generated in  double[] out = new double[data.length]
---analyzing modificationPoint position: 139
Templates availables121
Attempts Base Ingredients  1 total 121
Name Conflict [constraints, normalized]
---modifPoint 2 not mutation generated in  // slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...]
---analyzing modificationPoint position: 21
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 3 not mutation generated in  return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1
---analyzing modificationPoint position: 162
Templates availables3
Attempts Base Ingredients  1 total 3
vars from patch [this.point]
--> var from patch: this.point spoon.support.reflect.code.CtFieldWriteImpl
SameName: final 














































double[] point
SameName: final 














































double[] point
Transforming shadowed variable in point = point.clone()
location: RealPointValuePair.java50
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.value = value ` -topatch--> `point = point.clone()` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.RealPointValuePair line: 50, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.value = value ` -topatch--> `point = point.clone()` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 236, #gens: 186, #ops: 1, parent:235] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 236, errors: [RealPointValuePair.java:52: error: final parameter point may not be assigned
	 */ 	public RealPointValuePair(final double[] point, final double value) { 		this.point = point.clone(); 		point = point.clone();}
	    	                                                                      		                            		^, RealPointValuePair.java:52: error: variable value might not have been initialized
	 */ 	public RealPointValuePair(final double[] point, final double value) { 		this.point = point.clone(); 		point = point.clone();}
	    	                                                                      		                            		                      ^]
Ingredient counter is Zero
---Undoing: gnrtn(118): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.value = value ` -topatch--> `point = point.clone()` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (235(f=1.0), 236(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (235(f=1.0), )
----------Running generation: 119, population size: 1

***** Generation 119 : 0
**Parent Variant: [Variant id: 237, #gens: 186, #ops: 0, parent:-]

--Child created id: 238
--Creating new operations for variant [Variant id: 238, #gens: 186, #ops: 0, parent:237]
---analyzing modificationPoint position: 59
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [f, constraints, goalType, restrictToNonNegative, epsilon]
--> var from patch: f spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: constraints spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: goalType spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java106
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer pivotRow = getPivotRow(pivotCol, tableau) ` -topatch--> `final org.apache.commons.math.optimization.linear.SimplexTableau tableau =  new org.apache.commons.m[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 106, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer pivotRow = getPivotRow(pivotCol, tableau) ` -topatch--> `final org.apache.commons.math.optimization.linear.SimplexTableau tableau =  new org.apache.commons.m[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 238, #gens: 187, #ops: 1, parent:237] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 238, errors: [SimplexSolver.java:187: error: variable tableau is already defined in method doIteration(org.apache.commons.math.optimization.linear.SimplexTableau)
		final org.apache.commons.math.optimization.linear.SimplexTableau tableau = 
		                                                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(119): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer pivotRow = getPivotRow(pivotCol, tableau) ` -topatch--> `final org.apache.commons.math.optimization.linear.SimplexTableau tableau =  new org.apache.commons.m[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (237(f=1.0), 238(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (237(f=1.0), )
----------Running generation: 120, population size: 1

***** Generation 120 : 0
**Parent Variant: [Variant id: 239, #gens: 186, #ops: 0, parent:-]

--Child created id: 240
--Creating new operations for variant [Variant id: 240, #gens: 186, #ops: 0, parent:239]
---analyzing modificationPoint position: 127
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions())
---analyzing modificationPoint position: 79
location: SimplexTableau.java296
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 	return null; [...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 240, #gens: 185, #ops: 1, parent:239] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 240
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-240/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 14] ,[]
-Valid?: |false|3|14|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(120): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 	return null; [...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (239(f=1.0), 240(f=3.0), )
Selected to next generation: IDs2--> (239(f=1.0), )
----------Running generation: 121, population size: 1

***** Generation 121 : 0
**Parent Variant: [Variant id: 241, #gens: 186, #ops: 0, parent:-]

--Child created id: 242
--Creating new operations for variant [Variant id: 242, #gens: 186, #ops: 0, parent:241]
---analyzing modificationPoint position: 14
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [this.numArtificialVariables]
--> var from patch: this.numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java344
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < coefficients.length; i++) { 	java.lang.Integer basicRow = getBasicRowForSolution[...] ` -topatch--> `return this.numArtificialVariables > 0 ? 2 : 1` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 344, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < coefficients.length; i++) { 	java.lang.Integer basicRow = getBasicRowForSolution[...] ` -topatch--> `return this.numArtificialVariables > 0 ? 2 : 1` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 242, #gens: 187, #ops: 1, parent:241] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 242, errors: [SimplexTableau.java:344: error: incompatible types: int cannot be converted to org.apache.commons.math.optimization.RealPointValuePair
		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		return this.numArtificialVariables > 0 ? 2 : 1;
		                                                                                         		                                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(121): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < coefficients.length; i++) { 	java.lang.Integer basicRow = getBasicRowForSolution[...] ` -topatch--> `return this.numArtificialVariables > 0 ? 2 : 1` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (241(f=1.0), 242(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (241(f=1.0), )
----------Running generation: 122, population size: 1

***** Generation 122 : 0
**Parent Variant: [Variant id: 243, #gens: 186, #ops: 0, parent:-]

--Child created id: 244
--Creating new operations for variant [Variant id: 244, #gens: 186, #ops: 0, parent:243]
---analyzing modificationPoint position: 145
Templates availables24
Attempts Base Ingredients  1 total 24
---modifPoint 0 not mutation generated in  java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...]
---analyzing modificationPoint position: 1
Templates availables31
Attempts Base Ingredients  1 total 31
vars from patch []
location: SimplexTableau.java308
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 308, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 244, #gens: 186, #ops: 1, parent:243] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 244, errors: [SimplexTableau.java:532: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:532: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:532: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:532: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:532: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:532: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:534: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:534: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:534: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:534: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:534: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:534: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:534: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:536: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:536: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:537: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:538: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:538: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:539: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:539: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:540: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:541: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:541: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:541: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:542: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:542: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:542: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:542: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:542: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:542: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:555: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:555: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:555: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:555: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:555: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:555: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:559: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:559: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:563: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:563: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:571: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:571: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:571: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:571: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:580: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:580: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:580: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:580: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:580: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:584: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:584: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:588: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:588: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:592: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:592: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:597: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:597: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:607: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:607: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:612: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:612: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:616: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:616: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:620: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:620: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:624: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:624: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:626: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:626: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:629: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:636: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:636: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:636: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:636: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:636: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:636: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:645: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:645: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:645: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:645: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:645: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:645: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:645: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:645: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:645: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(122): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (243(f=1.0), 244(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (243(f=1.0), )
----------Running generation: 123, population size: 1

***** Generation 123 : 0
**Parent Variant: [Variant id: 245, #gens: 186, #ops: 0, parent:-]

--Child created id: 246
--Creating new operations for variant [Variant id: 246, #gens: 186, #ops: 0, parent:245]
---analyzing modificationPoint position: 83
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 0 not mutation generated in  for (int i = 0; i < data.length; i++) { 	dot += data[i] * v[i]; }
---analyzing modificationPoint position: 42
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
vars from patch [tableau, i, col, entry, epsilon, rhs, ratio, minRatio, minRatioPos]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: i spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: col spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: entry spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: rhs spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: ratio spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: minRatio spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: minRatioPos spoon.support.reflect.code.CtVariableWriteImpl
location: SimplexSolver.java79
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 	final double rhs =[...] ` -topatch--> `for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 	final double rhs =[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 79, pointed element: CtForImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 	final double rhs =[...] ` -topatch--> `for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 	final double rhs =[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 246, #gens: 186, #ops: 1, parent:245] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 246
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-246/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(123): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 	final double rhs =[...] ` -topatch--> `for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 	final double rhs =[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (245(f=1.0), 246(f=1.0), )
Selected to next generation: IDs2--> (245(f=1.0), )
----------Running generation: 124, population size: 1

***** Generation 124 : 0
**Parent Variant: [Variant id: 247, #gens: 186, #ops: 0, parent:-]

--Child created id: 248
--Creating new operations for variant [Variant id: 248, #gens: 186, #ops: 0, parent:247]
---analyzing modificationPoint position: 57
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON]
--> var from patch: org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java103
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `incrementIterationsCounter() ` -topatch--> `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 103, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `incrementIterationsCounter() ` -topatch--> `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 248, #gens: 187, #ops: 1, parent:247] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 248, errors: [SimplexSolver.java:104: error: call to this must be first statement in constructor
		incrementIterationsCounter(); 		this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON);
		                              		    ^]
Ingredient counter is Zero
---Undoing: gnrtn(124): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `incrementIterationsCounter() ` -topatch--> `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (247(f=1.0), 248(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (247(f=1.0), )
----------Running generation: 125, population size: 1

***** Generation 125 : 0
**Parent Variant: [Variant id: 249, #gens: 186, #ops: 0, parent:-]

--Child created id: 250
--Creating new operations for variant [Variant id: 250, #gens: 186, #ops: 0, parent:249]
---analyzing modificationPoint position: 105
Templates availables8
Attempts Base Ingredients  1 total 8
---modifPoint 0 not mutation generated in  return coefficients
---analyzing modificationPoint position: 158
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 1 not mutation generated in  java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length)
---analyzing modificationPoint position: 81
location: ArrayRealVector.java884
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `checkVectorDimensions(v.length) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 250, #gens: 185, #ops: 1, parent:249] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 250
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-250/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(125): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `checkVectorDimensions(v.length) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (249(f=1.0), 250(f=1.0), )
Selected to next generation: IDs2--> (249(f=1.0), )
----------Running generation: 126, population size: 1

***** Generation 126 : 0
**Parent Variant: [Variant id: 251, #gens: 186, #ops: 0, parent:-]

--Child created id: 252
--Creating new operations for variant [Variant id: 252, #gens: 186, #ops: 0, parent:251]
---analyzing modificationPoint position: 137
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java166
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// RHS matrix[row][width - 1] = constraint.getValue() ` -topatch--> `// create a matrix of the correct size java.util.List<org.apache.commons.math.optimization.linear.Li[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 166, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// RHS matrix[row][width - 1] = constraint.getValue() ` -topatch--> `// create a matrix of the correct size java.util.List<org.apache.commons.math.optimization.linear.Li[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 252, #gens: 187, #ops: 1, parent:251] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 252
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-252/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(126): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// RHS matrix[row][width - 1] = constraint.getValue() ` -topatch--> `// create a matrix of the correct size java.util.List<org.apache.commons.math.optimization.linear.Li[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (251(f=1.0), 252(f=1.0), )
Selected to next generation: IDs2--> (251(f=1.0), )
----------Running generation: 127, population size: 1

***** Generation 127 : 0
**Parent Variant: [Variant id: 253, #gens: 186, #ops: 0, parent:-]

--Child created id: 254
--Creating new operations for variant [Variant id: 254, #gens: 186, #ops: 0, parent:253]
---analyzing modificationPoint position: 70
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRo[...]
---analyzing modificationPoint position: 18
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [artificialVar, numArtificialVariables, row]
--> var from patch: artificialVar spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: row spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java352
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `coefficients[i] =  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -  (restrictToNonNega[...] ` -topatch--> `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 352, pointed element: CtForImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `coefficients[i] =  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -  (restrictToNonNega[...] ` -topatch--> `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 254, #gens: 187, #ops: 1, parent:253] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 254
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-254/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(127): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `coefficients[i] =  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -  (restrictToNonNega[...] ` -topatch--> `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (253(f=1.0), 254(f=1.0), )
Selected to next generation: IDs2--> (253(f=1.0), )
----------Running generation: 128, population size: 1

***** Generation 128 : 0
**Parent Variant: [Variant id: 255, #gens: 186, #ops: 0, parent:-]

--Child created id: 256
--Creating new operations for variant [Variant id: 256, #gens: 186, #ops: 0, parent:255]
---analyzing modificationPoint position: 154
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 0 not mutation generated in  if (constraint.getRelationship() == relationship) { 	++count; }
---analyzing modificationPoint position: 112
location: SimplexTableau.java107
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 256, #gens: 185, #ops: 1, parent:255] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 256, errors: [SimplexTableau.java:117: error: variable restrictToNonNegative might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(128): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (255(f=1.0), 256(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (255(f=1.0), )
----------Running generation: 129, population size: 1

***** Generation 129 : 0
**Parent Variant: [Variant id: 257, #gens: 186, #ops: 0, parent:-]

--Child created id: 258
--Creating new operations for variant [Variant id: 258, #gens: 186, #ops: 0, parent:257]
---analyzing modificationPoint position: 24
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { 	ret[...]
---analyzing modificationPoint position: 51
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java90
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return minRatioPos ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 90, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return minRatioPos ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 258, #gens: 187, #ops: 1, parent:257] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 258, errors: [SimplexSolver.java:104: error: unreported exception org.apache.commons.math.optimization.OptimizationException; must be caught or declared to be thrown
		incrementIterationsCounter(); 		return minRatioPos;} 	/**
		                          ^]
Ingredient counter is Zero
---Undoing: gnrtn(129): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return minRatioPos ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (257(f=1.0), 258(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (257(f=1.0), )
----------Running generation: 130, population size: 1

***** Generation 130 : 0
**Parent Variant: [Variant id: 259, #gens: 186, #ops: 0, parent:-]

--Child created id: 260
--Creating new operations for variant [Variant id: 260, #gens: 186, #ops: 0, parent:259]
---analyzing modificationPoint position: 16
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  if (basicRows.contains(basicRow)) { 	// if multiple variables can take a given value 	// then we cho[...]
---analyzing modificationPoint position: 53
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [this.maxIterations]
--> var from patch: this.maxIterations spoon.support.reflect.code.CtFieldWriteImpl
location: AbstractLinearOptimizer.java99
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 99, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 260, #gens: 187, #ops: 1, parent:259] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 260
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-260/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(130): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (259(f=1.0), 260(f=1.0), )
Selected to next generation: IDs2--> (259(f=1.0), )
----------Running generation: 131, population size: 1

***** Generation 131 : 0
**Parent Variant: [Variant id: 261, #gens: 186, #ops: 0, parent:-]

--Child created id: 262
--Creating new operations for variant [Variant id: 262, #gens: 186, #ops: 0, parent:261]
---analyzing modificationPoint position: 78
---modifPoint 0 not mutation generated in  return getWidth() - 1
---analyzing modificationPoint position: 90
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) [...]
---analyzing modificationPoint position: 74
location: MathUtils.java368
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return 0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 262, #gens: 185, #ops: 1, parent:261] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 262
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-262/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(131): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return 0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (261(f=1.0), 262(f=1.0), )
Selected to next generation: IDs2--> (261(f=1.0), )
----------Running generation: 132, population size: 1

***** Generation 132 : 0
**Parent Variant: [Variant id: 263, #gens: 186, #ops: 0, parent:-]

--Child created id: 264
--Creating new operations for variant [Variant id: 264, #gens: 186, #ops: 0, parent:263]
---analyzing modificationPoint position: 157
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java248
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 248, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 264, #gens: 187, #ops: 1, parent:263] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 264
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-264/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(132): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (263(f=1.0), 264(f=1.0), )
Selected to next generation: IDs2--> (263(f=1.0), )
----------Running generation: 133, population size: 1

***** Generation 133 : 0
**Parent Variant: [Variant id: 265, #gens: 186, #ops: 0, parent:-]

--Child created id: 266
--Creating new operations for variant [Variant id: 266, #gens: 186, #ops: 0, parent:265]
---analyzing modificationPoint position: 57
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java103
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `incrementIterationsCounter() ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 103, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `incrementIterationsCounter() ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 266, #gens: 187, #ops: 1, parent:265] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 266, errors: [SimplexSolver.java:132: error: incompatible types: unexpected return value
		return true; 		incrementIterationsCounter(); 		java.lang.Integer pivotCol = getPivotColumn(tableau); 		java.lang.Integer pivotRow = getPivotRow(pivotCol, tableau); 		if (pivotRow == null) { 			throw new org.apache.commons.math.optimization.linear.UnboundedSolutionException();} 		// set the pivot element to 1 		double pivotVal = tableau.getEntry(pivotRow, pivotCol); 		tableau.divideRow(pivotRow, pivotVal); 		// set the rest of the pivot column to 0
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(133): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `incrementIterationsCounter() ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (265(f=1.0), 266(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (265(f=1.0), )
----------Running generation: 134, population size: 1

***** Generation 134 : 0
**Parent Variant: [Variant id: 267, #gens: 186, #ops: 0, parent:-]

--Child created id: 268
--Creating new operations for variant [Variant id: 268, #gens: 186, #ops: 0, parent:267]
---analyzing modificationPoint position: 150
---modifPoint 0 not mutation generated in  return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients()[...]
---analyzing modificationPoint position: 14
location: SimplexTableau.java344
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < coefficients.length; i++) { 	java.lang.Integer basicRow = getBasicRowForSolution[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 268, #gens: 185, #ops: 1, parent:267] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 268
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-268/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 11, was successful: false, cases executed: 14] ,[]
-Valid?: |false|11|14|[]|, fitness 11.0
Ingredient counter is Zero
---Undoing: gnrtn(134): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < coefficients.length; i++) { 	java.lang.Integer basicRow = getBasicRowForSolution[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (267(f=1.0), 268(f=11.0), )
Selected to next generation: IDs2--> (267(f=1.0), )
----------Running generation: 135, population size: 1

***** Generation 135 : 0
**Parent Variant: [Variant id: 269, #gens: 186, #ops: 0, parent:-]

--Child created id: 270
--Creating new operations for variant [Variant id: 270, #gens: 186, #ops: 0, parent:269]
---analyzing modificationPoint position: 41
---modifPoint 0 not mutation generated in  java.lang.Integer minRatioPos = null
---analyzing modificationPoint position: 149
location: SimplexTableau.java211
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (constraint.getValue() < 0) { 	return new org.apache.commons.math.optimization.linear.LinearConst[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 270, #gens: 185, #ops: 1, parent:269] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 270
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-270/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(135): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (constraint.getValue() < 0) { 	return new org.apache.commons.math.optimization.linear.LinearConst[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (269(f=1.0), 270(f=1.0), )
Selected to next generation: IDs2--> (269(f=1.0), )
----------Running generation: 136, population size: 1

***** Generation 136 : 0
**Parent Variant: [Variant id: 271, #gens: 186, #ops: 0, parent:-]

--Child created id: 272
--Creating new operations for variant [Variant id: 272, #gens: 186, #ops: 0, parent:271]
---analyzing modificationPoint position: 96
---modifPoint 0 not mutation generated in  return new org.apache.commons.math.linear.ArrayRealVector(out)
---analyzing modificationPoint position: 101
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  return tableau.getEntry(row, column)
---analyzing modificationPoint position: 38
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch [f]
--> var from patch: f spoon.support.reflect.code.CtVariableReadImpl
location: AbstractLinearOptimizer.java67
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `// store linear problem characteristics f = f` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 67, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `// store linear problem characteristics f = f` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 272, #gens: 186, #ops: 1, parent:271] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 272
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-272/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(136): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `// store linear problem characteristics f = f` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (271(f=1.0), 272(f=14.0), )
Selected to next generation: IDs2--> (271(f=1.0), )
----------Running generation: 137, population size: 1

***** Generation 137 : 0
**Parent Variant: [Variant id: 273, #gens: 186, #ops: 0, parent:-]

--Child created id: 274
--Creating new operations for variant [Variant id: 274, #gens: 186, #ops: 0, parent:273]
---analyzing modificationPoint position: 125
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  matrix[zIndex][zIndex] = (maximize) ? 1 : -1
---analyzing modificationPoint position: 111
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  this.constraints = constraints
---analyzing modificationPoint position: 99
Templates availables31
Attempts Base Ingredients  1 total 31
---modifPoint 2 not mutation generated in  return tableau.getColumnDimension()
---analyzing modificationPoint position: 104
location: LinearObjectiveFunction.java67
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constantTerm = constantTerm ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 274, #gens: 185, #ops: 1, parent:273] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 274, errors: [LinearObjectiveFunction.java:69: error: variable constantTerm might not have been initialized
	 */ 	public LinearObjectiveFunction(org.apache.commons.math.linear.RealVector coefficients, double constantTerm) { 		this.coefficients = coefficients;}
	    	                                                                                                              		                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(137): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constantTerm = constantTerm ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (273(f=1.0), 274(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (273(f=1.0), )
----------Running generation: 138, population size: 1

***** Generation 138 : 0
**Parent Variant: [Variant id: 275, #gens: 186, #ops: 0, parent:-]

--Child created id: 276
--Creating new operations for variant [Variant id: 276, #gens: 186, #ops: 0, parent:275]
---analyzing modificationPoint position: 125
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [height, width]
--> var from patch: height spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: width spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java137
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[zIndex][zIndex] = (maximize) ? 1 : -1 ` -topatch--> `double[][] matrix = new double[height][width]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 137, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[zIndex][zIndex] = (maximize) ? 1 : -1 ` -topatch--> `double[][] matrix = new double[height][width]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 276, #gens: 187, #ops: 1, parent:275] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 276, errors: [SimplexTableau.java:138: error: variable matrix is already defined in method createTableau(boolean)
		matrix[zIndex][zIndex] = (maximize) ? 1 : -1; 		double[][] matrix = new double[height][width];
		                                              		           ^]
Ingredient counter is Zero
---Undoing: gnrtn(138): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[zIndex][zIndex] = (maximize) ? 1 : -1 ` -topatch--> `double[][] matrix = new double[height][width]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (275(f=1.0), 276(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (275(f=1.0), )
----------Running generation: 139, population size: 1

***** Generation 139 : 0
**Parent Variant: [Variant id: 277, #gens: 186, #ops: 0, parent:-]

--Child created id: 278
--Creating new operations for variant [Variant id: 278, #gens: 186, #ops: 0, parent:277]
---analyzing modificationPoint position: 153
Templates availables3
Attempts Base Ingredients  1 total 3
vars from patch [constraints, constraint, relationship, count]
--> var from patch: constraints spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: constraint spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: relationship spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: count spoon.support.reflect.code.CtVariableWriteImpl
location: SimplexTableau.java235
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForEachImpl) `for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { [...] ` -topatch--> `for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { [...]` (spoon.support.reflect.code.CtForEachImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 235, pointed element: CtForEachImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForEachImpl) `for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { [...] ` -topatch--> `for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { [...]` (spoon.support.reflect.code.CtForEachImpl) 

--Summary Creation: for variant [Variant id: 278, #gens: 186, #ops: 1, parent:277] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 278
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-278/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(139): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForEachImpl) `for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { [...] ` -topatch--> `for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { [...]` (spoon.support.reflect.code.CtForEachImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (277(f=1.0), 278(f=1.0), )
Selected to next generation: IDs2--> (277(f=1.0), )
----------Running generation: 140, population size: 1

***** Generation 140 : 0
**Parent Variant: [Variant id: 279, #gens: 186, #ops: 0, parent:-]

--Child created id: 280
--Creating new operations for variant [Variant id: 280, #gens: 186, #ops: 0, parent:279]
---analyzing modificationPoint position: 158
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 0 not mutation generated in  java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length)
---analyzing modificationPoint position: 0
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 1 not mutation generated in  return
---analyzing modificationPoint position: 45
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java82
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 	final double ratio [...] ` -topatch--> `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 82, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 	final double ratio [...] ` -topatch--> `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 280, #gens: 187, #ops: 1, parent:279] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 280, errors: [SimplexSolver.java:170: error: incompatible types: missing return value
				return;
				^]
Ingredient counter is Zero
---Undoing: gnrtn(140): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 	final double ratio [...] ` -topatch--> `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (279(f=1.0), 280(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (279(f=1.0), )
----------Running generation: 141, population size: 1

***** Generation 141 : 0
**Parent Variant: [Variant id: 281, #gens: 186, #ops: 0, parent:-]

--Child created id: 282
--Creating new operations for variant [Variant id: 282, #gens: 186, #ops: 0, parent:281]
---analyzing modificationPoint position: 5
Templates availables18
Attempts Base Ingredients  1 total 18
vars from patch [coefficients, point, constantTerm]
--> var from patch: coefficients spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: point spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: constantTerm spoon.support.reflect.code.CtFieldReadImpl
location: LinearObjectiveFunction.java92
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients.dotProduct(point) + constantTerm ` -topatch--> `return coefficients.dotProduct(point) + constantTerm` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearObjectiveFunction line: 92, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients.dotProduct(point) + constantTerm ` -topatch--> `return coefficients.dotProduct(point) + constantTerm` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 282, #gens: 187, #ops: 1, parent:281] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 282, errors: [LinearObjectiveFunction.java:93: error: unreachable statement
	 */ 	public double getValue(final double[] point) { 		return coefficients.dotProduct(point) + constantTerm; 		return coefficients.dotProduct(point) + constantTerm;
	    	                                               		                                                      		^]
Ingredient counter is Zero
---Undoing: gnrtn(141): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients.dotProduct(point) + constantTerm ` -topatch--> `return coefficients.dotProduct(point) + constantTerm` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (281(f=1.0), 282(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (281(f=1.0), )
----------Running generation: 142, population size: 1

***** Generation 142 : 0
**Parent Variant: [Variant id: 283, #gens: 186, #ops: 0, parent:-]

--Child created id: 284
--Creating new operations for variant [Variant id: 284, #gens: 186, #ops: 0, parent:283]
---analyzing modificationPoint position: 21
---modifPoint 0 not mutation generated in  return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1
---analyzing modificationPoint position: 49
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [maxIterations]
--> var from patch: maxIterations spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLinearOptimizer.java86
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...] ` -topatch--> `return maxIterations` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 86, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...] ` -topatch--> `return maxIterations` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 284, #gens: 187, #ops: 1, parent:283] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 284, errors: [AbstractLinearOptimizer.java:89: error: incompatible types: unexpected return value
		} 		return maxIterations;
		  		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(142): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...] ` -topatch--> `return maxIterations` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (283(f=1.0), 284(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (283(f=1.0), )
----------Running generation: 143, population size: 1

***** Generation 143 : 0
**Parent Variant: [Variant id: 285, #gens: 186, #ops: 0, parent:-]

--Child created id: 286
--Creating new operations for variant [Variant id: 286, #gens: 186, #ops: 0, parent:285]
---analyzing modificationPoint position: 8
---modifPoint 0 not mutation generated in  return tableau.getSolution()
---analyzing modificationPoint position: 61
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java112
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// set the pivot element to 1 double pivotVal = tableau.getEntry(pivotRow, pivotCol) ` -topatch--> `java.lang.Integer minRatioPos = null` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 112, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// set the pivot element to 1 double pivotVal = tableau.getEntry(pivotRow, pivotCol) ` -topatch--> `java.lang.Integer minRatioPos = null` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 286, #gens: 187, #ops: 1, parent:285] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 286
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-286/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(143): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// set the pivot element to 1 double pivotVal = tableau.getEntry(pivotRow, pivotCol) ` -topatch--> `java.lang.Integer minRatioPos = null` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (285(f=1.0), 286(f=1.0), )
Selected to next generation: IDs2--> (285(f=1.0), )
----------Running generation: 144, population size: 1

***** Generation 144 : 0
**Parent Variant: [Variant id: 287, #gens: 186, #ops: 0, parent:-]

--Child created id: 288
--Creating new operations for variant [Variant id: 288, #gens: 186, #ops: 0, parent:287]
---analyzing modificationPoint position: 158
location: SimplexTableau.java331
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 288, #gens: 185, #ops: 1, parent:287] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 288
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-288/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 14] ,[]
-Valid?: |false|12|14|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(144): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (287(f=1.0), 288(f=12.0), )
Selected to next generation: IDs2--> (287(f=1.0), )
----------Running generation: 145, population size: 1

***** Generation 145 : 0
**Parent Variant: [Variant id: 289, #gens: 186, #ops: 0, parent:-]

--Child created id: 290
--Creating new operations for variant [Variant id: 290, #gens: 186, #ops: 0, parent:289]
---analyzing modificationPoint position: 41
Templates availables12
Attempts Base Ingredients  1 total 12
---modifPoint 0 not mutation generated in  java.lang.Integer minRatioPos = null
---analyzing modificationPoint position: 124
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1
---analyzing modificationPoint position: 32
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [f, constraints, goalType, restrictToNonNegative, epsilon]
--> var from patch: f spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: constraints spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: goalType spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java60
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer minPos = null ` -topatch--> `final org.apache.commons.math.optimization.linear.SimplexTableau tableau =  new org.apache.commons.m[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 60, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer minPos = null ` -topatch--> `final org.apache.commons.math.optimization.linear.SimplexTableau tableau =  new org.apache.commons.m[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 290, #gens: 187, #ops: 1, parent:289] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 290, errors: [SimplexSolver.java:187: error: variable tableau is already defined in method getPivotColumn(org.apache.commons.math.optimization.linear.SimplexTableau)
		final org.apache.commons.math.optimization.linear.SimplexTableau tableau = 
		                                                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(145): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer minPos = null ` -topatch--> `final org.apache.commons.math.optimization.linear.SimplexTableau tableau =  new org.apache.commons.m[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (289(f=1.0), 290(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (289(f=1.0), )
----------Running generation: 146, population size: 1

***** Generation 146 : 0
**Parent Variant: [Variant id: 291, #gens: 186, #ops: 0, parent:-]

--Child created id: 292
--Creating new operations for variant [Variant id: 292, #gens: 186, #ops: 0, parent:291]
---analyzing modificationPoint position: 47
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; }
---analyzing modificationPoint position: 143
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 1 not mutation generated in  return value
---analyzing modificationPoint position: 26
Templates availables7
Attempts Base Ingredients  1 total 7
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java188
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `solvePhase1(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 188, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `solvePhase1(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 292, #gens: 186, #ops: 1, parent:291] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 292
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-292/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(146): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `solvePhase1(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (291(f=1.0), 292(f=1.0), )
Selected to next generation: IDs2--> (291(f=1.0), )
----------Running generation: 147, population size: 1

***** Generation 147 : 0
**Parent Variant: [Variant id: 293, #gens: 186, #ops: 0, parent:-]

--Child created id: 294
--Creating new operations for variant [Variant id: 294, #gens: 186, #ops: 0, parent:293]
---analyzing modificationPoint position: 25
location: SimplexTableau.java170
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack  ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 294, #gens: 185, #ops: 1, parent:293] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 294
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-294/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(147): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack  ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (293(f=1.0), 294(f=1.0), )
Selected to next generation: IDs2--> (293(f=1.0), )
----------Running generation: 148, population size: 1

***** Generation 148 : 0
**Parent Variant: [Variant id: 295, #gens: 186, #ops: 0, parent:-]

--Child created id: 296
--Creating new operations for variant [Variant id: 296, #gens: 186, #ops: 0, parent:295]
---analyzing modificationPoint position: 60
Templates availables10
Attempts Base Ingredients  1 total 10
---modifPoint 0 not mutation generated in  if (pivotRow == null) { 	throw new org.apache.commons.math.optimization.linear.UnboundedSolutionExce[...]
---analyzing modificationPoint position: 18
location: SimplexTableau.java352
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `coefficients[i] =  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -  (restrictToNonNega[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 296, #gens: 185, #ops: 1, parent:295] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 296
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-296/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 11, was successful: false, cases executed: 14] ,[]
-Valid?: |false|11|14|[]|, fitness 11.0
Ingredient counter is Zero
---Undoing: gnrtn(148): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `coefficients[i] =  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -  (restrictToNonNega[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (295(f=1.0), 296(f=11.0), )
Selected to next generation: IDs2--> (295(f=1.0), )
----------Running generation: 149, population size: 1

***** Generation 149 : 0
**Parent Variant: [Variant id: 297, #gens: 186, #ops: 0, parent:-]

--Child created id: 298
--Creating new operations for variant [Variant id: 298, #gens: 186, #ops: 0, parent:297]
---analyzing modificationPoint position: 172
Templates availables120
Attempts Base Ingredients  1 total 120
---modifPoint 0 not mutation generated in  if (row > 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalStateException( 	"fi[...]
---analyzing modificationPoint position: 69
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  if (numArtificialVariables == 0) { 	return; }
---analyzing modificationPoint position: 77
---modifPoint 2 not mutation generated in  return 1
---analyzing modificationPoint position: 35
Templates availables10
Attempts Base Ingredients  1 total 10
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java62
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)[...] ` -topatch--> `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 62, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)[...] ` -topatch--> `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 298, #gens: 186, #ops: 1, parent:297] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 298, errors: [SimplexSolver.java:170: error: incompatible types: missing return value
				return;
				^]
Ingredient counter is Zero
---Undoing: gnrtn(149): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)[...] ` -topatch--> `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (297(f=1.0), 298(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (297(f=1.0), )
----------Running generation: 150, population size: 1

***** Generation 150 : 0
**Parent Variant: [Variant id: 299, #gens: 186, #ops: 0, parent:-]

--Child created id: 300
--Creating new operations for variant [Variant id: 300, #gens: 186, #ops: 0, parent:299]
---analyzing modificationPoint position: 106
---modifPoint 0 not mutation generated in  return constantTerm
---analyzing modificationPoint position: 82
---modifPoint 1 not mutation generated in  double dot = 0
---analyzing modificationPoint position: 83
Templates availables82
Attempts Base Ingredients  1 total 82
---modifPoint 2 not mutation generated in  for (int i = 0; i < data.length; i++) { 	dot += data[i] * v[i]; }
---analyzing modificationPoint position: 2
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 3 not mutation generated in  doIteration(tableau)
---analyzing modificationPoint position: 12
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 4 not mutation generated in  double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset[...]
---analyzing modificationPoint position: 125
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 5 not mutation generated in  matrix[zIndex][zIndex] = (maximize) ? 1 : -1
---analyzing modificationPoint position: 101
---modifPoint 6 not mutation generated in  return tableau.getEntry(row, column)
---analyzing modificationPoint position: 51
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java90
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return minRatioPos ` -topatch--> `while (!isOptimal(tableau)) { 	doIteration(tableau); } ` (spoon.support.reflect.code.CtWhileImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 90, pointed element: CtWhileImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return minRatioPos ` -topatch--> `while (!isOptimal(tableau)) { 	doIteration(tableau); } ` (spoon.support.reflect.code.CtWhileImpl) 

--Summary Creation: for variant [Variant id: 300, #gens: 187, #ops: 1, parent:299] gen mutated: 1 , gen not mut: 7, gen not applied  0
-The child does NOT compile: 300, errors: [SimplexSolver.java:192: error: unreported exception org.apache.commons.math.optimization.OptimizationException; must be caught or declared to be thrown
			doIteration(tableau);
			           ^]
Ingredient counter is Zero
---Undoing: gnrtn(150): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return minRatioPos ` -topatch--> `while (!isOptimal(tableau)) { 	doIteration(tableau); } ` (spoon.support.reflect.code.CtWhileImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (299(f=1.0), 300(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (299(f=1.0), )
----------Running generation: 151, population size: 1

***** Generation 151 : 0
**Parent Variant: [Variant id: 301, #gens: 186, #ops: 0, parent:-]

--Child created id: 302
--Creating new operations for variant [Variant id: 302, #gens: 186, #ops: 0, parent:301]
---analyzing modificationPoint position: 132
Templates availables8
Attempts Base Ingredients  1 total 8
vars from patch [i, constraints, constraint, matrix, row, restrictToNonNegative, width, org.apache.commons.math.optimization.linear.Relationship.LEQ, slackVar, org.apache.commons.math.optimization.linear.Relationship.GEQ, org.apache.commons.math.optimization.linear.Relationship.EQ, artificialVar]
--> var from patch: i spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: constraints spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: constraint spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: matrix spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: row spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: width spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: org.apache.commons.math.optimization.linear.Relationship.LEQ spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: slackVar spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: org.apache.commons.math.optimization.linear.Relationship.GEQ spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math.optimization.linear.Relationship.EQ spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: artificialVar spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java152
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < constraints.size(); i++) { 	org.apache.commons.math.optimization.linear.LinearCo[...] ` -topatch--> `for (int i = 0; i < constraints.size(); i++) { 	org.apache.commons.math.optimization.linear.LinearCo[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 152, pointed element: CtForImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < constraints.size(); i++) { 	org.apache.commons.math.optimization.linear.LinearCo[...] ` -topatch--> `for (int i = 0; i < constraints.size(); i++) { 	org.apache.commons.math.optimization.linear.LinearCo[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 302, #gens: 186, #ops: 1, parent:301] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 302
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-302/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(151): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < constraints.size(); i++) { 	org.apache.commons.math.optimization.linear.LinearCo[...] ` -topatch--> `for (int i = 0; i < constraints.size(); i++) { 	org.apache.commons.math.optimization.linear.LinearCo[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (301(f=1.0), 302(f=1.0), )
Selected to next generation: IDs2--> (301(f=1.0), )
----------Running generation: 152, population size: 1

***** Generation 152 : 0
**Parent Variant: [Variant id: 303, #gens: 186, #ops: 0, parent:-]

--Child created id: 304
--Creating new operations for variant [Variant id: 304, #gens: 186, #ops: 0, parent:303]
---analyzing modificationPoint position: 50
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java86
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatioPos = i ` -topatch--> `if (tableau.getNumArtificialVariables() == 0) { 	return true; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 86, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatioPos = i ` -topatch--> `if (tableau.getNumArtificialVariables() == 0) { 	return true; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 304, #gens: 187, #ops: 1, parent:303] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 304, errors: [SimplexSolver.java:132: error: incompatible types: boolean cannot be converted to java.lang.Integer
						return true;
						       ^]
Ingredient counter is Zero
---Undoing: gnrtn(152): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatioPos = i ` -topatch--> `if (tableau.getNumArtificialVariables() == 0) { 	return true; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (303(f=1.0), 304(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (303(f=1.0), )
----------Running generation: 153, population size: 1

***** Generation 153 : 0
**Parent Variant: [Variant id: 305, #gens: 186, #ops: 0, parent:-]

--Child created id: 306
--Creating new operations for variant [Variant id: 306, #gens: 186, #ops: 0, parent:305]
---analyzing modificationPoint position: 1
location: SimplexTableau.java308
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 306, #gens: 185, #ops: 1, parent:305] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 306
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-306/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 14] ,[]
-Valid?: |false|3|14|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(153): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (305(f=1.0), 306(f=3.0), )
Selected to next generation: IDs2--> (305(f=1.0), )
----------Running generation: 154, population size: 1

***** Generation 154 : 0
**Parent Variant: [Variant id: 307, #gens: 186, #ops: 0, parent:-]

--Child created id: 308
--Creating new operations for variant [Variant id: 308, #gens: 186, #ops: 0, parent:307]
---analyzing modificationPoint position: 116
Templates availables25
Attempts Base Ingredients  1 total 25
vars from patch [this.restrictToNonNegative]
--> var from patch: this.restrictToNonNegative spoon.support.reflect.code.CtFieldWriteImpl
SameName: final 





































































































boolean restrictToNonNegative
SameName: final 





































































































boolean restrictToNonNegative
Transforming shadowed variable in restrictToNonNegative = restrictToNonNegative
location: SimplexTableau.java112
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...] ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 112, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...] ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 308, #gens: 186, #ops: 1, parent:307] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 308, errors: [SimplexTableau.java:112: error: final parameter restrictToNonNegative may not be assigned
		getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relationship.GEQ); 		restrictToNonNegative = restrictToNonNegative;
		                                                                                       		^]
Ingredient counter is Zero
---Undoing: gnrtn(154): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...] ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (307(f=1.0), 308(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (307(f=1.0), )
----------Running generation: 155, population size: 1

***** Generation 155 : 0
**Parent Variant: [Variant id: 309, #gens: 186, #ops: 0, parent:-]

--Child created id: 310
--Creating new operations for variant [Variant id: 310, #gens: 186, #ops: 0, parent:309]
---analyzing modificationPoint position: 33
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java61
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...] ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 61, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...] ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 310, #gens: 187, #ops: 1, parent:309] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 310, errors: [SimplexSolver.java:132: error: incompatible types: boolean cannot be converted to java.lang.Integer
		return true; 		for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 			if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) { 				minValue = tableau.getEntry(0, i); 				minPos = i;}} 		return minPos;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(155): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...] ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (309(f=1.0), 310(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (309(f=1.0), )
----------Running generation: 156, population size: 1

***** Generation 156 : 0
**Parent Variant: [Variant id: 311, #gens: 186, #ops: 0, parent:-]

--Child created id: 312
--Creating new operations for variant [Variant id: 312, #gens: 186, #ops: 0, parent:311]
---analyzing modificationPoint position: 136
Templates availables14
Attempts Base Ingredients  1 total 14
vars from patch [restrictToNonNegative, matrix, zIndex, objectiveCoefficients]
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: matrix spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: zIndex spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: objectiveCoefficients spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java160
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `// x- if (!restrictToNonNegative) { 	matrix[row][getSlackVariableOffset() - 1] =  	org.apache.common[...] ` -topatch--> `if (!restrictToNonNegative) { 	matrix[zIndex][getSlackVariableOffset() - 1] =  	org.apache.commons.m[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 160, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `// x- if (!restrictToNonNegative) { 	matrix[row][getSlackVariableOffset() - 1] =  	org.apache.common[...] ` -topatch--> `if (!restrictToNonNegative) { 	matrix[zIndex][getSlackVariableOffset() - 1] =  	org.apache.commons.m[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 312, #gens: 186, #ops: 1, parent:311] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 312
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-312/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 14] ,[]
-Valid?: |false|3|14|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(156): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `// x- if (!restrictToNonNegative) { 	matrix[row][getSlackVariableOffset() - 1] =  	org.apache.common[...] ` -topatch--> `if (!restrictToNonNegative) { 	matrix[zIndex][getSlackVariableOffset() - 1] =  	org.apache.commons.m[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (311(f=1.0), 312(f=3.0), )
Selected to next generation: IDs2--> (311(f=1.0), )
----------Running generation: 157, population size: 1

***** Generation 157 : 0
**Parent Variant: [Variant id: 313, #gens: 186, #ops: 0, parent:-]

--Child created id: 314
--Creating new operations for variant [Variant id: 314, #gens: 186, #ops: 0, parent:313]
---analyzing modificationPoint position: 92
---modifPoint 0 not mutation generated in  return row
---analyzing modificationPoint position: 12
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset[...]
---analyzing modificationPoint position: 139
Templates availables14
Attempts Base Ingredients  1 total 14
vars from patch [restrictToNonNegative, matrix, zIndex, objectiveCoefficients]
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: matrix spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: zIndex spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: objectiveCoefficients spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java169
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `// slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...] ` -topatch--> `if (!restrictToNonNegative) { 	matrix[zIndex][getSlackVariableOffset() - 1] =  	org.apache.commons.m[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 169, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `// slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...] ` -topatch--> `if (!restrictToNonNegative) { 	matrix[zIndex][getSlackVariableOffset() - 1] =  	org.apache.commons.m[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 314, #gens: 186, #ops: 1, parent:313] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 314
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-314/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 14] ,[]
-Valid?: |false|3|14|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(157): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `// slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...] ` -topatch--> `if (!restrictToNonNegative) { 	matrix[zIndex][getSlackVariableOffset() - 1] =  	org.apache.commons.m[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (313(f=1.0), 314(f=3.0), )
Selected to next generation: IDs2--> (313(f=1.0), )
----------Running generation: 158, population size: 1

***** Generation 158 : 0
**Parent Variant: [Variant id: 315, #gens: 186, #ops: 0, parent:-]

--Child created id: 316
--Creating new operations for variant [Variant id: 316, #gens: 186, #ops: 0, parent:315]
---analyzing modificationPoint position: 96
---modifPoint 0 not mutation generated in  return new org.apache.commons.math.linear.ArrayRealVector(out)
---analyzing modificationPoint position: 108
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 1 not mutation generated in  this.relationship = relationship
---analyzing modificationPoint position: 122
---modifPoint 2 not mutation generated in  double[][] matrix = new double[height][width]
---analyzing modificationPoint position: 77
---modifPoint 3 not mutation generated in  return 1
---analyzing modificationPoint position: 148
Templates availables31
Attempts Base Ingredients  1 total 31
vars from patch [restrictToNonNegative, numDecisionVariables, numSlackVariables, numArtificialVariables, epsilon, f, constraints, tableau]
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numSlackVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: f spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: constraints spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: tableau spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java202
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return normalized ` -topatch--> `return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^  numDecisionVariables) ^ [...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 202, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return normalized ` -topatch--> `return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^  numDecisionVariables) ^ [...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 316, #gens: 186, #ops: 1, parent:315] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 316, errors: [SimplexTableau.java:609: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:609: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:609: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:609: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:609: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:609: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:611: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:611: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:611: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:611: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:611: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:611: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:611: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:613: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:613: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:614: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:615: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:615: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:616: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:616: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:617: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:618: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:618: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:618: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:619: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:619: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:619: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:619: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:619: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:619: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:632: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:632: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:632: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:632: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:632: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:632: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:636: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:636: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:640: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:640: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:648: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:648: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:648: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:648: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:657: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:657: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:657: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:657: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:657: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:661: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:661: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:665: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:665: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:669: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:669: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:674: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:674: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:684: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:684: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:689: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:689: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:693: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:693: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:697: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:697: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:701: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:701: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:703: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:703: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:706: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:713: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:713: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:713: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:713: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:713: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:713: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:722: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:722: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:722: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:722: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:722: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:722: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:722: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:722: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:722: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(158): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return normalized ` -topatch--> `return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^  numDecisionVariables) ^ [...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (315(f=1.0), 316(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (315(f=1.0), )
----------Running generation: 159, population size: 1

***** Generation 159 : 0
**Parent Variant: [Variant id: 317, #gens: 186, #ops: 0, parent:-]

--Child created id: 318
--Creating new operations for variant [Variant id: 318, #gens: 186, #ops: 0, parent:317]
---analyzing modificationPoint position: 8
---modifPoint 0 not mutation generated in  return tableau.getSolution()
---analyzing modificationPoint position: 65
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java118
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double multiplier = tableau.getEntry(i, pivotCol) ` -topatch--> `if (tableau.getNumArtificialVariables() > 0) { 	return false; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 118, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double multiplier = tableau.getEntry(i, pivotCol) ` -topatch--> `if (tableau.getNumArtificialVariables() > 0) { 	return false; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 318, #gens: 187, #ops: 1, parent:317] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 318, errors: [SimplexSolver.java:149: error: incompatible types: unexpected return value
					return false;
					       ^]
Ingredient counter is Zero
---Undoing: gnrtn(159): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double multiplier = tableau.getEntry(i, pivotCol) ` -topatch--> `if (tableau.getNumArtificialVariables() > 0) { 	return false; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (317(f=1.0), 318(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (317(f=1.0), )
----------Running generation: 160, population size: 1

***** Generation 160 : 0
**Parent Variant: [Variant id: 319, #gens: 186, #ops: 0, parent:-]

--Child created id: 320
--Creating new operations for variant [Variant id: 320, #gens: 186, #ops: 0, parent:319]
---analyzing modificationPoint position: 10
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  double[] coefficients = new double[getOriginalNumDecisionVariables()]
---analyzing modificationPoint position: 44
---modifPoint 1 not mutation generated in  final double entry = tableau.getEntry(i, col)
---analyzing modificationPoint position: 43
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java80
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double rhs = tableau.getEntry(i, tableau.getWidth() - 1) ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 80, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double rhs = tableau.getEntry(i, tableau.getWidth() - 1) ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 320, #gens: 187, #ops: 1, parent:319] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 320, errors: [SimplexSolver.java:132: error: incompatible types: boolean cannot be converted to java.lang.Integer
			return true; 			final double entry = tableau.getEntry(i, col); 			if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 				final double ratio = rhs / entry; 				if (ratio < minRatio) { 					minRatio = ratio; 					minRatioPos = i;}}} 		return minRatioPos;} 	/**
			       ^]
Ingredient counter is Zero
---Undoing: gnrtn(160): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double rhs = tableau.getEntry(i, tableau.getWidth() - 1) ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (319(f=1.0), 320(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (319(f=1.0), )
----------Running generation: 161, population size: 1

***** Generation 161 : 0
**Parent Variant: [Variant id: 321, #gens: 186, #ops: 0, parent:-]

--Child created id: 322
--Creating new operations for variant [Variant id: 322, #gens: 186, #ops: 0, parent:321]
---analyzing modificationPoint position: 109
Templates availables7
Attempts Base Ingredients  1 total 7
vars from patch [this.relationship]
--> var from patch: this.relationship spoon.support.reflect.code.CtFieldWriteImpl
SameName: final 
































































































org.apache.commons.math.optimization.linear.Relationship relationship
SameName: final 
































































































org.apache.commons.math.optimization.linear.Relationship relationship
Transforming shadowed variable in relationship = relationship
location: LinearConstraint.java102
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.value = value ` -topatch--> `relationship = relationship` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearConstraint line: 102, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.value = value ` -topatch--> `relationship = relationship` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 322, #gens: 186, #ops: 1, parent:321] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 322, errors: [LinearConstraint.java:102: error: final parameter relationship may not be assigned
	 */ 	public LinearConstraint(final org.apache.commons.math.linear.RealVector coefficients, final org.apache.commons.math.optimization.linear.Relationship relationship, final double value) { 		this.coefficients = coefficients; 		this.relationship = relationship; 		relationship = relationship;
	    	                                                                                                                                                                                         		                                  		                                  		^, LinearConstraint.java:104: error: variable value might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(161): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.value = value ` -topatch--> `relationship = relationship` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (321(f=1.0), 322(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (321(f=1.0), )
----------Running generation: 162, population size: 1

***** Generation 162 : 0
**Parent Variant: [Variant id: 323, #gens: 186, #ops: 0, parent:-]

--Child created id: 324
--Creating new operations for variant [Variant id: 324, #gens: 186, #ops: 0, parent:323]
---analyzing modificationPoint position: 35
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau, epsilon]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java62
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)[...] ` -topatch--> `// if W is not zero then we have no feasible solution if (!org.apache.commons.math.util.MathUtils.eq[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 62, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)[...] ` -topatch--> `// if W is not zero then we have no feasible solution if (!org.apache.commons.math.util.MathUtils.eq[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 324, #gens: 187, #ops: 1, parent:323] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 324, errors: [SimplexSolver.java:179: error: unreported exception org.apache.commons.math.optimization.linear.NoFeasibleSolutionException; must be caught or declared to be thrown
				throw new org.apache.commons.math.optimization.linear.NoFeasibleSolutionException();
				^]
Ingredient counter is Zero
---Undoing: gnrtn(162): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)[...] ` -topatch--> `// if W is not zero then we have no feasible solution if (!org.apache.commons.math.util.MathUtils.eq[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (323(f=1.0), 324(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (323(f=1.0), )
----------Running generation: 163, population size: 1

***** Generation 163 : 0
**Parent Variant: [Variant id: 325, #gens: 186, #ops: 0, parent:-]

--Child created id: 326
--Creating new operations for variant [Variant id: 326, #gens: 186, #ops: 0, parent:325]
---analyzing modificationPoint position: 19
---modifPoint 0 not mutation generated in  return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coeffici[...]
---analyzing modificationPoint position: 90
location: SimplexTableau.java294
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) [...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 326, #gens: 185, #ops: 1, parent:325] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 326
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-326/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(163): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) [...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (325(f=1.0), 326(f=14.0), )
Selected to next generation: IDs2--> (325(f=1.0), )
----------Running generation: 164, population size: 1

***** Generation 164 : 0
**Parent Variant: [Variant id: 327, #gens: 186, #ops: 0, parent:-]

--Child created id: 328
--Creating new operations for variant [Variant id: 328, #gens: 186, #ops: 0, parent:327]
---analyzing modificationPoint position: 82
---modifPoint 0 not mutation generated in  double dot = 0
---analyzing modificationPoint position: 50
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [this.epsilon]
--> var from patch: this.epsilon spoon.support.reflect.code.CtFieldWriteImpl
location: SimplexSolver.java86
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatioPos = i ` -topatch--> `this.epsilon = epsilon` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 86, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatioPos = i ` -topatch--> `this.epsilon = epsilon` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 328, #gens: 187, #ops: 1, parent:327] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 328, errors: [SimplexSolver.java:86: error: cannot assign a value to final variable epsilon
					minRatio = ratio; 					this.epsilon = epsilon;
					                  					    ^]
Ingredient counter is Zero
---Undoing: gnrtn(164): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatioPos = i ` -topatch--> `this.epsilon = epsilon` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (327(f=1.0), 328(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (327(f=1.0), )
----------Running generation: 165, population size: 1

***** Generation 165 : 0
**Parent Variant: [Variant id: 329, #gens: 186, #ops: 0, parent:-]

--Child created id: 330
--Creating new operations for variant [Variant id: 330, #gens: 186, #ops: 0, parent:329]
---analyzing modificationPoint position: 62
location: SimplexSolver.java113
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.divideRow(pivotRow, pivotVal) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 330, #gens: 185, #ops: 1, parent:329] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 330
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-330/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 14] ,[]
-Valid?: |false|4|14|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(165): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.divideRow(pivotRow, pivotVal) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (329(f=1.0), 330(f=4.0), )
Selected to next generation: IDs2--> (329(f=1.0), )
----------Running generation: 166, population size: 1

***** Generation 166 : 0
**Parent Variant: [Variant id: 331, #gens: 186, #ops: 0, parent:-]

--Child created id: 332
--Creating new operations for variant [Variant id: 332, #gens: 186, #ops: 0, parent:331]
---analyzing modificationPoint position: 39
---modifPoint 0 not mutation generated in  return minPos
---analyzing modificationPoint position: 99
Templates availables31
Attempts Base Ingredients  1 total 31
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java398
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getColumnDimension() ` -topatch--> `return tableau.getRowDimension()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 398, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getColumnDimension() ` -topatch--> `return tableau.getRowDimension()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 332, #gens: 186, #ops: 1, parent:331] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 332
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-332/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(166): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getColumnDimension() ` -topatch--> `return tableau.getRowDimension()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (331(f=1.0), 332(f=14.0), )
Selected to next generation: IDs2--> (331(f=1.0), )
----------Running generation: 167, population size: 1

***** Generation 167 : 0
**Parent Variant: [Variant id: 333, #gens: 186, #ops: 0, parent:-]

--Child created id: 334
--Creating new operations for variant [Variant id: 334, #gens: 186, #ops: 0, parent:333]
---analyzing modificationPoint position: 125
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java137
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[zIndex][zIndex] = (maximize) ? 1 : -1 ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 137, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[zIndex][zIndex] = (maximize) ? 1 : -1 ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 334, #gens: 187, #ops: 1, parent:333] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 334, errors: [SimplexTableau.java:540: error: illegal start of type
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		^, SimplexTableau.java:540: error: ';' expected
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		      ^, SimplexTableau.java:544: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	       ^, SimplexTableau.java:544: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	                               		                                          ^, SimplexTableau.java:548: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	       ^, SimplexTableau.java:548: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		^, SimplexTableau.java:548: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                      ^, SimplexTableau.java:548: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                        		                  ^, SimplexTableau.java:554: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                     ^, SimplexTableau.java:554: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                         ^, SimplexTableau.java:554: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                           		                                                                                                                                                           ^, SimplexTableau.java:558: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                ^, SimplexTableau.java:558: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                                                 		                                               ^, SimplexTableau.java:564: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                          ^, SimplexTableau.java:564: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		^, SimplexTableau.java:564: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		           ^, SimplexTableau.java:564: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				        ^, SimplexTableau.java:564: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				           		             ^, SimplexTableau.java:567: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                            ^, SimplexTableau.java:567: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                    ^, SimplexTableau.java:567: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			^, SimplexTableau.java:567: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			                         ^, SimplexTableau.java:573: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                         ^, SimplexTableau.java:573: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		^, SimplexTableau.java:573: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                   ^, SimplexTableau.java:573: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                     		           ^, SimplexTableau.java:579: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                            ^, SimplexTableau.java:579: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                                       		                              ^, SimplexTableau.java:585: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                       ^, SimplexTableau.java:585: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                                  		                               ^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                            ^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                    ^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                     ^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				        ^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				            ^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				               		           ^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			       ^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                ^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                            ^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                ^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                 ^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                      ^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                       ^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		                                ^, SimplexTableau.java:602: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                             ^, SimplexTableau.java:602: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                 ^, SimplexTableau.java:602: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                      ^, SimplexTableau.java:602: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:606: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		^, SimplexTableau.java:606: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		^, SimplexTableau.java:606: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		^, SimplexTableau.java:606: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		^, SimplexTableau.java:606: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                ^, SimplexTableau.java:606: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                         ^, SimplexTableau.java:606: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                                			                                                                                     			^, SimplexTableau.java:613: error: class, interface, or enum expected
	 * @param dividendRow
	          ^, SimplexTableau.java:615: error: class, interface, or enum expected
	 * @param divisor
	          ^, SimplexTableau.java:617: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                               ^, SimplexTableau.java:617: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                      ^, SimplexTableau.java:617: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                ^, SimplexTableau.java:617: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                ^, SimplexTableau.java:617: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                       			                                                                             ^, SimplexTableau.java:630: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                 ^, SimplexTableau.java:630: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                       ^, SimplexTableau.java:630: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                ^, SimplexTableau.java:630: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                ^, SimplexTableau.java:630: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                ^, SimplexTableau.java:630: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                       			                                                                                                                   ^, SimplexTableau.java:634: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                ^, SimplexTableau.java:634: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                                 		                                    ^, SimplexTableau.java:638: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                ^, SimplexTableau.java:638: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                                  		                                 ^, SimplexTableau.java:646: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                ^, SimplexTableau.java:646: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                      ^, SimplexTableau.java:646: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                     ^, SimplexTableau.java:646: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                                   		                                     ^, SimplexTableau.java:655: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                ^, SimplexTableau.java:655: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                    ^, SimplexTableau.java:655: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                   ^, SimplexTableau.java:655: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                     ^, SimplexTableau.java:655: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                     		                                     ^, SimplexTableau.java:659: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:659: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                               		                                                         ^, SimplexTableau.java:663: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                ^, SimplexTableau.java:663: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                                    		                                                                               ^, SimplexTableau.java:667: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                ^, SimplexTableau.java:667: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                     		                      ^, SimplexTableau.java:672: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                ^, SimplexTableau.java:672: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                          		                                                                      ^, SimplexTableau.java:682: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:682: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                                		                            ^, SimplexTableau.java:687: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                ^, SimplexTableau.java:687: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                        		                                                                               ^, SimplexTableau.java:691: error: class, interface, or enum expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(167): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[zIndex][zIndex] = (maximize) ? 1 : -1 ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (333(f=1.0), 334(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (333(f=1.0), )
----------Running generation: 168, population size: 1

***** Generation 168 : 0
**Parent Variant: [Variant id: 335, #gens: 186, #ops: 0, parent:-]

--Child created id: 336
--Creating new operations for variant [Variant id: 336, #gens: 186, #ops: 0, parent:335]
---analyzing modificationPoint position: 70
Templates availables8
Attempts Base Ingredients  1 total 8
---modifPoint 0 not mutation generated in  for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRo[...]
---analyzing modificationPoint position: 154
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java236
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (constraint.getRelationship() == relationship) { 	++count; } ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 236, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (constraint.getRelationship() == relationship) { 	++count; } ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 336, #gens: 187, #ops: 1, parent:335] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 336, errors: [SimplexTableau.java:578: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:578: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:578: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:578: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:578: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:578: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:580: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:580: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:580: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:580: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:580: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:580: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:580: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:582: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:582: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:583: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:584: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:584: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:585: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:585: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:586: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:587: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:587: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:587: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:588: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:588: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:588: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:588: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:588: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:588: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:601: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:601: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:601: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:601: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:601: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:601: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:605: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:605: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:609: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:609: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:617: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:617: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:617: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:617: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:626: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:626: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:626: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:626: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:626: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:630: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:630: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:634: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:634: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:638: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:638: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:643: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:643: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:653: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:653: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:658: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:658: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:662: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:662: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:666: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:666: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:670: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:670: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:672: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:672: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:675: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:682: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:682: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:682: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:682: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:682: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:682: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:691: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:691: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:691: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:691: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:691: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:691: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:691: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:691: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:691: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(168): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (constraint.getRelationship() == relationship) { 	++count; } ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (335(f=1.0), 336(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (335(f=1.0), )
----------Running generation: 169, population size: 1

***** Generation 169 : 0
**Parent Variant: [Variant id: 337, #gens: 186, #ops: 0, parent:-]

--Child created id: 338
--Creating new operations for variant [Variant id: 338, #gens: 186, #ops: 0, parent:337]
---analyzing modificationPoint position: 48
location: SimplexSolver.java85
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatio = ratio ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 338, #gens: 185, #ops: 1, parent:337] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 338
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-338/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 14] ,[]
-Valid?: |false|4|14|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(169): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatio = ratio ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (337(f=1.0), 338(f=4.0), )
Selected to next generation: IDs2--> (337(f=1.0), )
----------Running generation: 170, population size: 1

***** Generation 170 : 0
**Parent Variant: [Variant id: 339, #gens: 186, #ops: 0, parent:-]

--Child created id: 340
--Creating new operations for variant [Variant id: 340, #gens: 186, #ops: 0, parent:339]
---analyzing modificationPoint position: 58
---modifPoint 0 not mutation generated in  java.lang.Integer pivotCol = getPivotColumn(tableau)
---analyzing modificationPoint position: 24
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java151
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { 	ret[...] ` -topatch--> `java.lang.Integer pivotCol = getPivotColumn(tableau)` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 151, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { 	ret[...] ` -topatch--> `java.lang.Integer pivotCol = getPivotColumn(tableau)` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 340, #gens: 187, #ops: 1, parent:339] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 340
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-340/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(170): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { 	ret[...] ` -topatch--> `java.lang.Integer pivotCol = getPivotColumn(tableau)` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (339(f=1.0), 340(f=1.0), )
Selected to next generation: IDs2--> (339(f=1.0), )
----------Running generation: 171, population size: 1

***** Generation 171 : 0
**Parent Variant: [Variant id: 341, #gens: 186, #ops: 0, parent:-]

--Child created id: 342
--Creating new operations for variant [Variant id: 342, #gens: 186, #ops: 0, parent:341]
---analyzing modificationPoint position: 75
Templates availables259
Attempts Base Ingredients  1 total 259
---modifPoint 0 not mutation generated in  if (x < y) { 	return -1; }
---analyzing modificationPoint position: 83
location: ArrayRealVector.java886
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < data.length; i++) { 	dot += data[i] * v[i]; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 342, #gens: 185, #ops: 1, parent:341] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 342
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-342/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 11, was successful: false, cases executed: 14] ,[]
-Valid?: |false|11|14|[]|, fitness 11.0
Ingredient counter is Zero
---Undoing: gnrtn(171): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < data.length; i++) { 	dot += data[i] * v[i]; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (341(f=1.0), 342(f=11.0), )
Selected to next generation: IDs2--> (341(f=1.0), )
----------Running generation: 172, population size: 1

***** Generation 172 : 0
**Parent Variant: [Variant id: 343, #gens: 186, #ops: 0, parent:-]

--Child created id: 344
--Creating new operations for variant [Variant id: 344, #gens: 186, #ops: 0, parent:343]
---analyzing modificationPoint position: 157
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...]
---analyzing modificationPoint position: 145
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch []
location: SimplexTableau.java198
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...] ` -topatch--> `java.lang.Integer row = null` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 198, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...] ` -topatch--> `java.lang.Integer row = null` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 344, #gens: 186, #ops: 1, parent:343] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 344, errors: [SimplexTableau.java:292: error: cannot find symbol
		java.lang.Integer row = null; 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
		                              		                                                                                              			^
  symbol:   variable normalized
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:292: error: cannot find symbol
		java.lang.Integer row = null; 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
		                              		                                                                                              			                                        		       ^
  symbol:   variable normalized
  location: class org.apache.commons.math.optimization.linear.SimplexTableau]
Ingredient counter is Zero
---Undoing: gnrtn(172): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...] ` -topatch--> `java.lang.Integer row = null` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (343(f=1.0), 344(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (343(f=1.0), )
----------Running generation: 173, population size: 1

***** Generation 173 : 0
**Parent Variant: [Variant id: 345, #gens: 186, #ops: 0, parent:-]

--Child created id: 346
--Creating new operations for variant [Variant id: 346, #gens: 186, #ops: 0, parent:345]
---analyzing modificationPoint position: 46
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java83
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double ratio = rhs / entry ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 83, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double ratio = rhs / entry ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 346, #gens: 187, #ops: 1, parent:345] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 346, errors: [SimplexSolver.java:132: error: incompatible types: boolean cannot be converted to java.lang.Integer
				return true; 				if (ratio < minRatio) { 					minRatio = ratio; 					minRatioPos = i;}}} 		return minRatioPos;} 	/**
				       ^]
Ingredient counter is Zero
---Undoing: gnrtn(173): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double ratio = rhs / entry ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (345(f=1.0), 346(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (345(f=1.0), )
----------Running generation: 174, population size: 1

***** Generation 174 : 0
**Parent Variant: [Variant id: 347, #gens: 186, #ops: 0, parent:-]

--Child created id: 348
--Creating new operations for variant [Variant id: 348, #gens: 186, #ops: 0, parent:347]
---analyzing modificationPoint position: 3
Templates availables6
Attempts Base Ingredients  1 total 6
---modifPoint 0 not mutation generated in  return false
---analyzing modificationPoint position: 138
---modifPoint 1 not mutation generated in  return coefficients
---analyzing modificationPoint position: 6
---modifPoint 2 not mutation generated in  // solve the problem return doOptimize()
---analyzing modificationPoint position: 53
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [iterations]
--> var from patch: iterations spoon.support.reflect.code.CtFieldWriteImpl
location: AbstractLinearOptimizer.java99
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 99, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 348, #gens: 187, #ops: 1, parent:347] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 348
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-348/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(174): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (347(f=1.0), 348(f=1.0), )
Selected to next generation: IDs2--> (347(f=1.0), )
----------Running generation: 175, population size: 1

***** Generation 175 : 0
**Parent Variant: [Variant id: 349, #gens: 186, #ops: 0, parent:-]

--Child created id: 350
--Creating new operations for variant [Variant id: 350, #gens: 186, #ops: 0, parent:349]
---analyzing modificationPoint position: 62
Templates availables7
Attempts Base Ingredients  1 total 7
vars from patch [org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON]
--> var from patch: org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java113
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.divideRow(pivotRow, pivotVal) ` -topatch--> `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 113, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.divideRow(pivotRow, pivotVal) ` -topatch--> `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 350, #gens: 186, #ops: 1, parent:349] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 350, errors: [SimplexSolver.java:113: error: call to this must be first statement in constructor
		double pivotVal = tableau.getEntry(pivotRow, pivotCol); 		this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON);
		                                                        		    ^]
Ingredient counter is Zero
---Undoing: gnrtn(175): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.divideRow(pivotRow, pivotVal) ` -topatch--> `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (349(f=1.0), 350(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (349(f=1.0), )
----------Running generation: 176, population size: 1

***** Generation 176 : 0
**Parent Variant: [Variant id: 351, #gens: 186, #ops: 0, parent:-]

--Child created id: 352
--Creating new operations for variant [Variant id: 352, #gens: 186, #ops: 0, parent:351]
---analyzing modificationPoint position: 116
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java112
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...] ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 112, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...] ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 352, #gens: 187, #ops: 1, parent:351] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 352, errors: [SimplexTableau.java:547: error: illegal start of type
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		^, SimplexTableau.java:547: error: ';' expected
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		      ^, SimplexTableau.java:551: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	       ^, SimplexTableau.java:551: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	                               		                                          ^, SimplexTableau.java:555: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	       ^, SimplexTableau.java:555: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		^, SimplexTableau.java:555: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                      ^, SimplexTableau.java:555: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                        		                  ^, SimplexTableau.java:561: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                     ^, SimplexTableau.java:561: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                         ^, SimplexTableau.java:561: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                           		                                                                                                                                                           ^, SimplexTableau.java:565: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                ^, SimplexTableau.java:565: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                                                 		                                               ^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                          ^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		           ^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				        ^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				           		             ^, SimplexTableau.java:574: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                            ^, SimplexTableau.java:574: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                    ^, SimplexTableau.java:574: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			^, SimplexTableau.java:574: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			                         ^, SimplexTableau.java:580: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                         ^, SimplexTableau.java:580: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		^, SimplexTableau.java:580: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                   ^, SimplexTableau.java:580: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                     		           ^, SimplexTableau.java:586: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                            ^, SimplexTableau.java:586: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                                       		                              ^, SimplexTableau.java:592: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                       ^, SimplexTableau.java:592: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                                  		                               ^, SimplexTableau.java:598: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                            ^, SimplexTableau.java:598: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		^, SimplexTableau.java:598: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		^, SimplexTableau.java:598: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                    ^, SimplexTableau.java:598: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                     ^, SimplexTableau.java:598: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				        ^, SimplexTableau.java:598: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				            ^, SimplexTableau.java:598: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				               		           ^, SimplexTableau.java:600: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			       ^, SimplexTableau.java:600: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		^, SimplexTableau.java:600: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		^, SimplexTableau.java:600: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		^, SimplexTableau.java:600: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                ^, SimplexTableau.java:600: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                            ^, SimplexTableau.java:600: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                ^, SimplexTableau.java:600: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                 ^, SimplexTableau.java:600: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                      ^, SimplexTableau.java:600: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                       ^, SimplexTableau.java:600: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		^, SimplexTableau.java:600: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		                                ^, SimplexTableau.java:609: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                             ^, SimplexTableau.java:609: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                 ^, SimplexTableau.java:609: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                      ^, SimplexTableau.java:609: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:613: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		^, SimplexTableau.java:613: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		^, SimplexTableau.java:613: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		^, SimplexTableau.java:613: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		^, SimplexTableau.java:613: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                ^, SimplexTableau.java:613: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                         ^, SimplexTableau.java:613: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                                			                                                                                     			^, SimplexTableau.java:620: error: class, interface, or enum expected
	 * @param dividendRow
	          ^, SimplexTableau.java:622: error: class, interface, or enum expected
	 * @param divisor
	          ^, SimplexTableau.java:624: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                               ^, SimplexTableau.java:624: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                      ^, SimplexTableau.java:624: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                ^, SimplexTableau.java:624: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                ^, SimplexTableau.java:624: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                       			                                                                             ^, SimplexTableau.java:637: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                 ^, SimplexTableau.java:637: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                       ^, SimplexTableau.java:637: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                ^, SimplexTableau.java:637: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                ^, SimplexTableau.java:637: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                ^, SimplexTableau.java:637: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                       			                                                                                                                   ^, SimplexTableau.java:641: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                ^, SimplexTableau.java:641: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                                 		                                    ^, SimplexTableau.java:645: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                ^, SimplexTableau.java:645: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                                  		                                 ^, SimplexTableau.java:653: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                ^, SimplexTableau.java:653: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                      ^, SimplexTableau.java:653: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                     ^, SimplexTableau.java:653: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                                   		                                     ^, SimplexTableau.java:662: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                ^, SimplexTableau.java:662: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                    ^, SimplexTableau.java:662: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                   ^, SimplexTableau.java:662: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                     ^, SimplexTableau.java:662: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                     		                                     ^, SimplexTableau.java:666: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:666: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                               		                                                         ^, SimplexTableau.java:670: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                ^, SimplexTableau.java:670: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                                    		                                                                               ^, SimplexTableau.java:674: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                ^, SimplexTableau.java:674: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                     		                      ^, SimplexTableau.java:679: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                ^, SimplexTableau.java:679: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                          		                                                                      ^, SimplexTableau.java:689: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:689: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                                		                            ^, SimplexTableau.java:694: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                ^, SimplexTableau.java:694: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                        		                                                                               ^, SimplexTableau.java:698: error: class, interface, or enum expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(176): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...] ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (351(f=1.0), 352(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (351(f=1.0), )
----------Running generation: 177, population size: 1

***** Generation 177 : 0
**Parent Variant: [Variant id: 353, #gens: 186, #ops: 0, parent:-]

--Child created id: 354
--Creating new operations for variant [Variant id: 354, #gens: 186, #ops: 0, parent:353]
---analyzing modificationPoint position: 102
Templates availables5
Attempts Base Ingredients  1 total 5
---modifPoint 0 not mutation generated in  this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), constantTerm)
---analyzing modificationPoint position: 95
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 1 not mutation generated in  out[i] = data[i] * d
---analyzing modificationPoint position: 66
Templates availables48
Attempts Base Ingredients  1 total 48
Name Conflict [i, pivotRow, tableau, pivotCol]
---modifPoint 2 not mutation generated in  tableau.subtractRow(i, pivotRow, multiplier)
---analyzing modificationPoint position: 59
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java106
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer pivotRow = getPivotRow(pivotCol, tableau) ` -topatch--> `solvePhase1(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 106, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer pivotRow = getPivotRow(pivotCol, tableau) ` -topatch--> `solvePhase1(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 354, #gens: 187, #ops: 1, parent:353] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 354
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-354/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 14] ,[]
-Valid?: |false|12|14|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(177): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer pivotRow = getPivotRow(pivotCol, tableau) ` -topatch--> `solvePhase1(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (353(f=1.0), 354(f=12.0), )
Selected to next generation: IDs2--> (353(f=1.0), )
----------Running generation: 178, population size: 1

***** Generation 178 : 0
**Parent Variant: [Variant id: 355, #gens: 186, #ops: 0, parent:-]

--Child created id: 356
--Creating new operations for variant [Variant id: 356, #gens: 186, #ops: 0, parent:355]
---analyzing modificationPoint position: 141
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 0 not mutation generated in  // artificial variables if ((constraint.getRelationship() == org.apache.commons.math.optimization.li[...]
---analyzing modificationPoint position: 21
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1
---analyzing modificationPoint position: 34
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [f]
--> var from patch: f spoon.support.reflect.code.CtVariableReadImpl
location: AbstractLinearOptimizer.java62
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `setMaxIterations(org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.DEFAULT_MAX_ITE[...] ` -topatch--> `// store linear problem characteristics f = f` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 62, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `setMaxIterations(org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.DEFAULT_MAX_ITE[...] ` -topatch--> `// store linear problem characteristics f = f` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 356, #gens: 187, #ops: 1, parent:355] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 356
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-356/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(178): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `setMaxIterations(org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.DEFAULT_MAX_ITE[...] ` -topatch--> `// store linear problem characteristics f = f` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (355(f=1.0), 356(f=14.0), )
Selected to next generation: IDs2--> (355(f=1.0), )
----------Running generation: 179, population size: 1

***** Generation 179 : 0
**Parent Variant: [Variant id: 357, #gens: 186, #ops: 0, parent:-]

--Child created id: 358
--Creating new operations for variant [Variant id: 358, #gens: 186, #ops: 0, parent:357]
---analyzing modificationPoint position: 85
Templates availables45
Attempts Base Ingredients  1 total 45
---modifPoint 0 not mutation generated in  return dot
---analyzing modificationPoint position: 148
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  return normalized
---analyzing modificationPoint position: 71
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 2 not mutation generated in  tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor)
---analyzing modificationPoint position: 178
location: Array2DRowRealMatrix.java334
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `data = new double[subMatrix.length][nCols] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 358, #gens: 185, #ops: 1, parent:357] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 358
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-358/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(179): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `data = new double[subMatrix.length][nCols] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (357(f=1.0), 358(f=14.0), )
Selected to next generation: IDs2--> (357(f=1.0), )
----------Running generation: 180, population size: 1

***** Generation 180 : 0
**Parent Variant: [Variant id: 359, #gens: 186, #ops: 0, parent:-]

--Child created id: 360
--Creating new operations for variant [Variant id: 360, #gens: 186, #ops: 0, parent:359]
---analyzing modificationPoint position: 112
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java107
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `// initialize the constraint rows int slackVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 107, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `// initialize the constraint rows int slackVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 360, #gens: 187, #ops: 1, parent:359] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 360, errors: [SimplexTableau.java:184: error: illegal start of type
		return matrix;
		^, SimplexTableau.java:184: error: ';' expected
		return matrix;
		      ^, SimplexTableau.java:191: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();
	    	       ^, SimplexTableau.java:192: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:198: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() {
	    	       ^, SimplexTableau.java:200: error: class, interface, or enum expected
		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) {
		^, SimplexTableau.java:202: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:204: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:212: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) {
	    	                                                                                     ^, SimplexTableau.java:216: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:219: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:225: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() {
	    	                ^, SimplexTableau.java:227: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:235: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0;
	    	                                          ^, SimplexTableau.java:236: error: class, interface, or enum expected
		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) {
		^, SimplexTableau.java:236: error: class, interface, or enum expected
		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) {
		           ^, SimplexTableau.java:239: error: class, interface, or enum expected
			}
			^, SimplexTableau.java:242: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:249: error: class, interface, or enum expected
		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) {
		                            ^, SimplexTableau.java:249: error: class, interface, or enum expected
		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) {
		                                                                    ^, SimplexTableau.java:251: error: class, interface, or enum expected
			subtractRow(0, row, 1.0);
			^, SimplexTableau.java:252: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:261: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0;
	    	                                                         ^, SimplexTableau.java:262: error: class, interface, or enum expected
		for (double coefficient : coefficients.getData()) {
		^, SimplexTableau.java:264: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:266: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:274: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);
	    	                                            ^, SimplexTableau.java:275: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:283: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);
	    	                                                       ^, SimplexTableau.java:284: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:292: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null;
	    	                                            ^, SimplexTableau.java:293: error: class, interface, or enum expected
		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0;
		^, SimplexTableau.java:294: error: class, interface, or enum expected
		for (int i = start; i < getHeight(); i++) {
		^, SimplexTableau.java:294: error: class, interface, or enum expected
		for (int i = start; i < getHeight(); i++) {
		                    ^, SimplexTableau.java:294: error: class, interface, or enum expected
		for (int i = start; i < getHeight(); i++) {
		                                     ^, SimplexTableau.java:297: error: class, interface, or enum expected
			} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
			^, SimplexTableau.java:299: error: class, interface, or enum expected
			}
			^, SimplexTableau.java:302: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:310: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:312: error: class, interface, or enum expected
		int height = getHeight() - 1;
		^, SimplexTableau.java:313: error: class, interface, or enum expected
		double[][] matrix = new double[height][width];
		^, SimplexTableau.java:314: error: class, interface, or enum expected
		for (int i = 0; i < height; i++) {
		^, SimplexTableau.java:314: error: class, interface, or enum expected
		for (int i = 0; i < height; i++) {
		                ^, SimplexTableau.java:314: error: class, interface, or enum expected
		for (int i = 0; i < height; i++) {
		                            ^, SimplexTableau.java:315: error: class, interface, or enum expected
			for (int j = 0; j < (width - 1); j++) {
			                ^, SimplexTableau.java:315: error: class, interface, or enum expected
			for (int j = 0; j < (width - 1); j++) {
			                                 ^, SimplexTableau.java:317: error: class, interface, or enum expected
			}
			^, SimplexTableau.java:319: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:321: error: class, interface, or enum expected
		this.numArtificialVariables = 0;
		^, SimplexTableau.java:322: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:334: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);}
	    	                             ^, SimplexTableau.java:334: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);}
	    	                                                 ^, SimplexTableau.java:334: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);}
	    	                                                                      ^, SimplexTableau.java:334: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);}
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:342: error: class, interface, or enum expected
		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());
		^, SimplexTableau.java:343: error: class, interface, or enum expected
		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
		^, SimplexTableau.java:344: error: class, interface, or enum expected
		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>();
		^, SimplexTableau.java:345: error: class, interface, or enum expected
		for (int i = 0; i < coefficients.length; i++) {
		^, SimplexTableau.java:345: error: class, interface, or enum expected
		for (int i = 0; i < coefficients.length; i++) {
		                ^, SimplexTableau.java:345: error: class, interface, or enum expected
		for (int i = 0; i < coefficients.length; i++) {
		                                         ^, SimplexTableau.java:347: error: class, interface, or enum expected
			if (basicRows.contains(basicRow)) {
			^, SimplexTableau.java:351: error: class, interface, or enum expected
			} else {
			^, SimplexTableau.java:353: error: class, interface, or enum expected
				coefficients[i] = 
				^, SimplexTableau.java:356: error: class, interface, or enum expected
			}
			^, SimplexTableau.java:359: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                               ^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                                                      ^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                                                                        		                ^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                                                                        		                                ^, SimplexTableau.java:373: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                 ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                       ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                                                ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                                                                   		                ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                                                                   		                                ^, SimplexTableau.java:391: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:398: error: class, interface, or enum expected
	 */ 	protected final int getWidth() {
	    	                ^, SimplexTableau.java:400: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:406: error: class, interface, or enum expected
	 */ 	protected final int getHeight() {
	    	                ^, SimplexTableau.java:408: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                ^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                      ^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                                     ^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                                                   		                                     ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                    ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                   ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                                     ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                                                     		                                     ^, SimplexTableau.java:433: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() {
	    	                ^, SimplexTableau.java:435: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:441: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() {
	    	                ^, SimplexTableau.java:443: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:449: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() {
	    	                ^, SimplexTableau.java:451: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:458: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() {
	    	                ^, SimplexTableau.java:460: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:472: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() {
	    	                ^, SimplexTableau.java:474: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:481: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() {
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(180): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `// initialize the constraint rows int slackVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (359(f=1.0), 360(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (359(f=1.0), )
----------Running generation: 181, population size: 1

***** Generation 181 : 0
**Parent Variant: [Variant id: 361, #gens: 186, #ops: 0, parent:-]

--Child created id: 362
--Creating new operations for variant [Variant id: 362, #gens: 186, #ops: 0, parent:361]
---analyzing modificationPoint position: 36
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau, i, minValue, epsilon, minPos]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: i spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: minValue spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: minPos spoon.support.reflect.code.CtVariableWriteImpl
location: SimplexSolver.java63
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `minValue = tableau.getEntry(0, i) ` -topatch--> `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 63, pointed element: CtForImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `minValue = tableau.getEntry(0, i) ` -topatch--> `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 362, #gens: 187, #ops: 1, parent:361] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 362, errors: [SimplexSolver.java:64: error: variable i is already defined in method getPivotColumn(org.apache.commons.math.optimization.linear.SimplexTableau)
				minValue = tableau.getEntry(0, i); 				for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 					if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) { 						minValue = tableau.getEntry(0, i);
				                                   				         ^]
Ingredient counter is Zero
---Undoing: gnrtn(181): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `minValue = tableau.getEntry(0, i) ` -topatch--> `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (361(f=1.0), 362(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (361(f=1.0), )
----------Running generation: 182, population size: 1

***** Generation 182 : 0
**Parent Variant: [Variant id: 363, #gens: 186, #ops: 0, parent:-]

--Child created id: 364
--Creating new operations for variant [Variant id: 364, #gens: 186, #ops: 0, parent:363]
---analyzing modificationPoint position: 62
Templates availables7
Attempts Base Ingredients  1 total 7
Attempts Base Ingredients  2 total 7
Attempts Base Ingredients  3 total 7
Attempts Base Ingredients  4 total 7
vars from patch []
location: SimplexSolver.java113
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.divideRow(pivotRow, pivotVal) ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 113, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.divideRow(pivotRow, pivotVal) ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 364, #gens: 186, #ops: 1, parent:363] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 364
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-364/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 5, was successful: false, cases executed: 14] ,[]
-Valid?: |false|5|14|[]|, fitness 5.0
Ingredient counter is Zero
---Undoing: gnrtn(182): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.divideRow(pivotRow, pivotVal) ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (363(f=1.0), 364(f=5.0), )
Selected to next generation: IDs2--> (363(f=1.0), )
----------Running generation: 183, population size: 1

***** Generation 183 : 0
**Parent Variant: [Variant id: 365, #gens: 186, #ops: 0, parent:-]

--Child created id: 366
--Creating new operations for variant [Variant id: 366, #gens: 186, #ops: 0, parent:365]
---analyzing modificationPoint position: 26
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java188
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `throw new org.apache.commons.math.optimization.linear.NoFeasibleSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 188, pointed element: CtThrowImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `throw new org.apache.commons.math.optimization.linear.NoFeasibleSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 

--Summary Creation: for variant [Variant id: 366, #gens: 187, #ops: 1, parent:365] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 366, errors: [SimplexSolver.java:189: error: unreachable statement
		solvePhase1(tableau);
		^]
Ingredient counter is Zero
---Undoing: gnrtn(183): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `throw new org.apache.commons.math.optimization.linear.NoFeasibleSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (365(f=1.0), 366(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (365(f=1.0), )
----------Running generation: 184, population size: 1

***** Generation 184 : 0
**Parent Variant: [Variant id: 367, #gens: 186, #ops: 0, parent:-]

--Child created id: 368
--Creating new operations for variant [Variant id: 368, #gens: 186, #ops: 0, parent:367]
---analyzing modificationPoint position: 157
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java248
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `return null` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 248, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `return null` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 368, #gens: 187, #ops: 1, parent:367] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 368, errors: [SimplexTableau.java:298: error: incompatible types: unexpected return value
		return null;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(184): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `return null` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (367(f=1.0), 368(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (367(f=1.0), )
----------Running generation: 185, population size: 1

***** Generation 185 : 0
**Parent Variant: [Variant id: 369, #gens: 186, #ops: 0, parent:-]

--Child created id: 370
--Creating new operations for variant [Variant id: 370, #gens: 186, #ops: 0, parent:369]
---analyzing modificationPoint position: 135
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [f]
--> var from patch: f spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java157
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `// decision variable coefficients copyArray(constraint.getCoefficients().getData(), matrix[row], 1) ` -topatch--> `return f.getCoefficients().getDimension()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 157, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `// decision variable coefficients copyArray(constraint.getCoefficients().getData(), matrix[row], 1) ` -topatch--> `return f.getCoefficients().getDimension()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 370, #gens: 187, #ops: 1, parent:369] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 370, errors: [SimplexTableau.java:191: error: incompatible types: int cannot be converted to double[][]
			return f.getCoefficients().getDimension(); 			// decision variable coefficients 			copyArray(constraint.getCoefficients().getData(), matrix[row], 1); 			// x-
			                                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(185): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `// decision variable coefficients copyArray(constraint.getCoefficients().getData(), matrix[row], 1) ` -topatch--> `return f.getCoefficients().getDimension()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (369(f=1.0), 370(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (369(f=1.0), )
----------Running generation: 186, population size: 1

***** Generation 186 : 0
**Parent Variant: [Variant id: 371, #gens: 186, #ops: 0, parent:-]

--Child created id: 372
--Creating new operations for variant [Variant id: 372, #gens: 186, #ops: 0, parent:371]
---analyzing modificationPoint position: 140
Templates availables25
Attempts Base Ingredients  1 total 25
vars from patch []
location: LinearConstraint.java176
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return relationship ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearConstraint line: 176, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return relationship ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 372, #gens: 187, #ops: 1, parent:371] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 372, errors: [LinearConstraint.java:197: error: incompatible types: boolean cannot be converted to org.apache.commons.math.optimization.linear.Relationship
		return false; 		return relationship;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(186): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return relationship ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (371(f=1.0), 372(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (371(f=1.0), )
----------Running generation: 187, population size: 1

***** Generation 187 : 0
**Parent Variant: [Variant id: 373, #gens: 186, #ops: 0, parent:-]

--Child created id: 374
--Creating new operations for variant [Variant id: 374, #gens: 186, #ops: 0, parent:373]
---analyzing modificationPoint position: 131
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [this.numDecisionVariables, restrictToNonNegative]
--> var from patch: this.numDecisionVariables spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java151
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int artificialVar = 0 ` -topatch--> `this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 151, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int artificialVar = 0 ` -topatch--> `this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 374, #gens: 187, #ops: 1, parent:373] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 374, errors: [SimplexTableau.java:152: error: cannot assign a value to final variable numDecisionVariables
		int artificialVar = 0; 		this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1);
		                       		    ^]
Ingredient counter is Zero
---Undoing: gnrtn(187): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int artificialVar = 0 ` -topatch--> `this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (373(f=1.0), 374(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (373(f=1.0), )
----------Running generation: 188, population size: 1

***** Generation 188 : 0
**Parent Variant: [Variant id: 375, #gens: 186, #ops: 0, parent:-]

--Child created id: 376
--Creating new operations for variant [Variant id: 376, #gens: 186, #ops: 0, parent:375]
---analyzing modificationPoint position: 106
Templates availables18
Attempts Base Ingredients  1 total 18
vars from patch [coefficients]
--> var from patch: coefficients spoon.support.reflect.code.CtVariableReadImpl
location: LinearObjectiveFunction.java83
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return constantTerm ` -topatch--> `coefficients = coefficients` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearObjectiveFunction line: 83, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return constantTerm ` -topatch--> `coefficients = coefficients` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 376, #gens: 187, #ops: 1, parent:375] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 376, errors: [LinearObjectiveFunction.java:83: error: cannot assign a value to final variable coefficients
	 */ 	public double getConstantTerm() { 		coefficients = coefficients;
	    	                                  		^]
Ingredient counter is Zero
---Undoing: gnrtn(188): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return constantTerm ` -topatch--> `coefficients = coefficients` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (375(f=1.0), 376(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (375(f=1.0), )
----------Running generation: 189, population size: 1

***** Generation 189 : 0
**Parent Variant: [Variant id: 377, #gens: 186, #ops: 0, parent:-]

--Child created id: 378
--Creating new operations for variant [Variant id: 378, #gens: 186, #ops: 0, parent:377]
---analyzing modificationPoint position: 67
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java168
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; } ` -topatch--> `java.lang.Integer minPos = null` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 168, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; } ` -topatch--> `java.lang.Integer minPos = null` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 378, #gens: 187, #ops: 1, parent:377] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 378
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-378/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(189): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; } ` -topatch--> `java.lang.Integer minPos = null` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (377(f=1.0), 378(f=1.0), )
Selected to next generation: IDs2--> (377(f=1.0), )
----------Running generation: 190, population size: 1

***** Generation 190 : 0
**Parent Variant: [Variant id: 379, #gens: 186, #ops: 0, parent:-]

--Child created id: 380
--Creating new operations for variant [Variant id: 380, #gens: 186, #ops: 0, parent:379]
---analyzing modificationPoint position: 17
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java351
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `basicRows.add(basicRow) ` -topatch--> `// create a matrix of the correct size java.util.List<org.apache.commons.math.optimization.linear.Li[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 351, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `basicRows.add(basicRow) ` -topatch--> `// create a matrix of the correct size java.util.List<org.apache.commons.math.optimization.linear.Li[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 380, #gens: 187, #ops: 1, parent:379] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 380
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-380/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(190): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `basicRows.add(basicRow) ` -topatch--> `// create a matrix of the correct size java.util.List<org.apache.commons.math.optimization.linear.Li[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (379(f=1.0), 380(f=1.0), )
Selected to next generation: IDs2--> (379(f=1.0), )
----------Running generation: 191, population size: 1

***** Generation 191 : 0
**Parent Variant: [Variant id: 381, #gens: 186, #ops: 0, parent:-]

--Child created id: 382
--Creating new operations for variant [Variant id: 382, #gens: 186, #ops: 0, parent:381]
---analyzing modificationPoint position: 27
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau, epsilon]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java189
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `// if W is not zero then we have no feasible solution if (!org.apache.commons.math.util.MathUtils.eq[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 189, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `// if W is not zero then we have no feasible solution if (!org.apache.commons.math.util.MathUtils.eq[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 382, #gens: 187, #ops: 1, parent:381] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 382
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-382/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(191): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `// if W is not zero then we have no feasible solution if (!org.apache.commons.math.util.MathUtils.eq[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (381(f=1.0), 382(f=1.0), )
Selected to next generation: IDs2--> (381(f=1.0), )
----------Running generation: 192, population size: 1

***** Generation 192 : 0
**Parent Variant: [Variant id: 383, #gens: 186, #ops: 0, parent:-]

--Child created id: 384
--Creating new operations for variant [Variant id: 384, #gens: 186, #ops: 0, parent:383]
---analyzing modificationPoint position: 50
location: SimplexSolver.java86
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatioPos = i ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 384, #gens: 185, #ops: 1, parent:383] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 384
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-384/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 14] ,[]
-Valid?: |false|13|14|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(192): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatioPos = i ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (383(f=1.0), 384(f=13.0), )
Selected to next generation: IDs2--> (383(f=1.0), )
----------Running generation: 193, population size: 1

***** Generation 193 : 0
**Parent Variant: [Variant id: 385, #gens: 186, #ops: 0, parent:-]

--Child created id: 386
--Creating new operations for variant [Variant id: 386, #gens: 186, #ops: 0, parent:385]
---analyzing modificationPoint position: 125
location: SimplexTableau.java137
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[zIndex][zIndex] = (maximize) ? 1 : -1 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 386, #gens: 185, #ops: 1, parent:385] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 386
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-386/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(193): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[zIndex][zIndex] = (maximize) ? 1 : -1 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (385(f=1.0), 386(f=1.0), )
Selected to next generation: IDs2--> (385(f=1.0), )
----------Running generation: 194, population size: 1

***** Generation 194 : 0
**Parent Variant: [Variant id: 387, #gens: 186, #ops: 0, parent:-]

--Child created id: 388
--Creating new operations for variant [Variant id: 388, #gens: 186, #ops: 0, parent:387]
---analyzing modificationPoint position: 16
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  if (basicRows.contains(basicRow)) { 	// if multiple variables can take a given value 	// then we cho[...]
---analyzing modificationPoint position: 27
Templates availables7
Attempts Base Ingredients  1 total 7
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java189
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `doIteration(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 189, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `doIteration(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 388, #gens: 186, #ops: 1, parent:387] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 388
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-388/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 11, was successful: false, cases executed: 14] ,[]
-Valid?: |false|11|14|[]|, fitness 11.0
Ingredient counter is Zero
---Undoing: gnrtn(194): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `doIteration(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (387(f=1.0), 388(f=11.0), )
Selected to next generation: IDs2--> (387(f=1.0), )
----------Running generation: 195, population size: 1

***** Generation 195 : 0
**Parent Variant: [Variant id: 389, #gens: 186, #ops: 0, parent:-]

--Child created id: 390
--Creating new operations for variant [Variant id: 390, #gens: 186, #ops: 0, parent:389]
---analyzing modificationPoint position: 143
Templates availables8
Attempts Base Ingredients  1 total 8
---modifPoint 0 not mutation generated in  return value
---analyzing modificationPoint position: 53
location: AbstractLinearOptimizer.java99
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 390, #gens: 185, #ops: 1, parent:389] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 390
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-390/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(195): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (389(f=1.0), 390(f=14.0), )
Selected to next generation: IDs2--> (389(f=1.0), )
----------Running generation: 196, population size: 1

***** Generation 196 : 0
**Parent Variant: [Variant id: 391, #gens: 186, #ops: 0, parent:-]

--Child created id: 392
--Creating new operations for variant [Variant id: 392, #gens: 186, #ops: 0, parent:391]
---analyzing modificationPoint position: 42
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java79
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 	final double rhs =[...] ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 79, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 	final double rhs =[...] ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 392, #gens: 187, #ops: 1, parent:391] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 392, errors: [SimplexSolver.java:170: error: incompatible types: missing return value
		return; 		return minRatioPos;} 	/**
		^]
Ingredient counter is Zero
---Undoing: gnrtn(196): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 	final double rhs =[...] ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (391(f=1.0), 392(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (391(f=1.0), )
----------Running generation: 197, population size: 1

***** Generation 197 : 0
**Parent Variant: [Variant id: 393, #gens: 186, #ops: 0, parent:-]

--Child created id: 394
--Creating new operations for variant [Variant id: 394, #gens: 186, #ops: 0, parent:393]
---analyzing modificationPoint position: 63
Templates availables4
Attempts Base Ingredients  1 total 4
---modifPoint 0 not mutation generated in  // set the rest of the pivot column to 0 for (int i = 0; i < tableau.getHeight(); i++) { 	if (i != p[...]
---analyzing modificationPoint position: 67
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 1 not mutation generated in  // make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }
---analyzing modificationPoint position: 151
Templates availables31
Attempts Base Ingredients  1 total 31
vars from patch [numSlackVariables]
--> var from patch: numSlackVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java225
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return this.numArtificialVariables > 0 ? 2 : 1 ` -topatch--> `return numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 225, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return this.numArtificialVariables > 0 ? 2 : 1 ` -topatch--> `return numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 394, #gens: 186, #ops: 1, parent:393] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 394, errors: [SimplexTableau.java:539: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:539: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:539: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:539: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:539: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:539: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:541: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:541: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:541: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:541: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:541: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:541: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:541: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:543: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:543: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:544: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:545: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:545: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:546: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:546: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:547: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:548: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:548: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:548: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:549: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:549: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:549: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:549: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:549: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:549: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:562: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:562: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:562: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:562: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:562: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:562: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:566: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:566: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:570: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:570: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:578: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:578: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:578: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:578: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:587: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:587: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:587: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:587: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:587: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:591: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:591: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:595: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:595: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:599: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:599: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:604: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:604: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:614: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:614: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:619: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:619: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:623: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:623: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:627: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:627: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:631: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:631: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:633: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:633: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:636: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:643: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:643: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:643: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:643: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:643: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:643: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:652: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:652: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:652: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:652: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:652: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:652: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:652: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:652: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:652: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(197): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return this.numArtificialVariables > 0 ? 2 : 1 ` -topatch--> `return numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (393(f=1.0), 394(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (393(f=1.0), )
----------Running generation: 198, population size: 1

***** Generation 198 : 0
**Parent Variant: [Variant id: 395, #gens: 186, #ops: 0, parent:-]

--Child created id: 396
--Creating new operations for variant [Variant id: 396, #gens: 186, #ops: 0, parent:395]
---analyzing modificationPoint position: 19
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coeffici[...]
---analyzing modificationPoint position: 156
---modifPoint 1 not mutation generated in  return count
---analyzing modificationPoint position: 18
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java352
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `coefficients[i] =  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -  (restrictToNonNega[...] ` -topatch--> `java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset())` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 352, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `coefficients[i] =  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -  (restrictToNonNega[...] ` -topatch--> `java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset())` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 396, #gens: 187, #ops: 1, parent:395] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 396, errors: [SimplexTableau.java:355: error: variable negativeVarBasicRow is already defined in method getSolution()
				(restrictToNonNegative ? 0 : mostNegative); 				java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());
				                                            				                  ^]
Ingredient counter is Zero
---Undoing: gnrtn(198): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `coefficients[i] =  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -  (restrictToNonNega[...] ` -topatch--> `java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset())` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (395(f=1.0), 396(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (395(f=1.0), )
----------Running generation: 199, population size: 1

***** Generation 199 : 0
**Parent Variant: [Variant id: 397, #gens: 186, #ops: 0, parent:-]

--Child created id: 398
--Creating new operations for variant [Variant id: 398, #gens: 186, #ops: 0, parent:397]
---analyzing modificationPoint position: 44
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch []
location: SimplexSolver.java81
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double entry = tableau.getEntry(i, col) ` -topatch--> `double minValue = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 81, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double entry = tableau.getEntry(i, col) ` -topatch--> `double minValue = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 398, #gens: 186, #ops: 1, parent:397] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 398, errors: [SimplexSolver.java:83: error: cannot find symbol
			if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) {
			                                                     ^
  symbol:   variable entry
  location: class org.apache.commons.math.optimization.linear.SimplexSolver, SimplexSolver.java:84: error: cannot find symbol
				final double ratio = rhs / entry;
				                           ^
  symbol:   variable entry
  location: class org.apache.commons.math.optimization.linear.SimplexSolver]
Ingredient counter is Zero
---Undoing: gnrtn(199): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double entry = tableau.getEntry(i, col) ` -topatch--> `double minValue = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (397(f=1.0), 398(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (397(f=1.0), )
----------Running generation: 200, population size: 1

***** Generation 200 : 0
**Parent Variant: [Variant id: 399, #gens: 186, #ops: 0, parent:-]

--Child created id: 400
--Creating new operations for variant [Variant id: 400, #gens: 186, #ops: 0, parent:399]
---analyzing modificationPoint position: 91
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 0 not mutation generated in  row = i
---analyzing modificationPoint position: 119
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  // create a matrix of the correct size java.util.List<org.apache.commons.math.optimization.linear.Li[...]
---analyzing modificationPoint position: 93
---modifPoint 2 not mutation generated in  double[] out = new double[data.length]
---analyzing modificationPoint position: 107
Templates availables25
Attempts Base Ingredients  1 total 25
vars from patch []
location: LinearConstraint.java100
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.coefficients = coefficients ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearConstraint line: 100, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.coefficients = coefficients ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 400, #gens: 187, #ops: 1, parent:399] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 400, errors: [LinearConstraint.java:193: error: incompatible types: unexpected return value
		return true; 		this.relationship = relationship; 		this.value = value;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(200): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.coefficients = coefficients ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (399(f=1.0), 400(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (399(f=1.0), )
----------Running generation: 201, population size: 1

***** Generation 201 : 0
**Parent Variant: [Variant id: 401, #gens: 186, #ops: 0, parent:-]

--Child created id: 402
--Creating new operations for variant [Variant id: 402, #gens: 186, #ops: 0, parent:401]
---analyzing modificationPoint position: 135
Templates availables121
Attempts Base Ingredients  1 total 121
Attempts Base Ingredients  2 total 121
vars from patch [constraint, org.apache.commons.math.optimization.linear.Relationship.GEQ, matrix, row, slackVar]
--> var from patch: constraint spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: org.apache.commons.math.optimization.linear.Relationship.GEQ spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: matrix spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: row spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: slackVar spoon.support.reflect.code.CtVariableWriteImpl
location: SimplexTableau.java157
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `// decision variable coefficients copyArray(constraint.getCoefficients().getData(), matrix[row], 1) ` -topatch--> `if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ) { [...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 157, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `// decision variable coefficients copyArray(constraint.getCoefficients().getData(), matrix[row], 1) ` -topatch--> `if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ) { [...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 402, #gens: 187, #ops: 1, parent:401] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 402
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-402/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 14] ,[]
-Valid?: |false|13|14|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(201): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `// decision variable coefficients copyArray(constraint.getCoefficients().getData(), matrix[row], 1) ` -topatch--> `if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ) { [...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (401(f=1.0), 402(f=13.0), )
Selected to next generation: IDs2--> (401(f=1.0), )
----------Running generation: 202, population size: 1

***** Generation 202 : 0
**Parent Variant: [Variant id: 403, #gens: 186, #ops: 0, parent:-]

--Child created id: 404
--Creating new operations for variant [Variant id: 404, #gens: 186, #ops: 0, parent:403]
---analyzing modificationPoint position: 73
Templates availables259
Attempts Base Ingredients  1 total 259
---modifPoint 0 not mutation generated in  if (org.apache.commons.math.util.MathUtils.equals(x, y, eps)) { 	return 0; } else if (x < y) { 	retu[...]
---analyzing modificationPoint position: 33
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 1 not mutation generated in  for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...]
---analyzing modificationPoint position: 177
location: Array2DRowRealMatrix.java331
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (nCols == 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 404, #gens: 185, #ops: 1, parent:403] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 404
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-404/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(202): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (nCols == 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (403(f=1.0), 404(f=1.0), )
Selected to next generation: IDs2--> (403(f=1.0), )
----------Running generation: 203, population size: 1

***** Generation 203 : 0
**Parent Variant: [Variant id: 405, #gens: 186, #ops: 0, parent:-]

--Child created id: 406
--Creating new operations for variant [Variant id: 406, #gens: 186, #ops: 0, parent:405]
---analyzing modificationPoint position: 155
location: SimplexTableau.java237
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `++count ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 406, #gens: 185, #ops: 1, parent:405] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 406
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-406/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 14] ,[]
-Valid?: |false|13|14|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(203): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `++count ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (405(f=1.0), 406(f=13.0), )
Selected to next generation: IDs2--> (405(f=1.0), )
----------Running generation: 204, population size: 1

***** Generation 204 : 0
**Parent Variant: [Variant id: 407, #gens: 186, #ops: 0, parent:-]

--Child created id: 408
--Creating new operations for variant [Variant id: 408, #gens: 186, #ops: 0, parent:407]
---analyzing modificationPoint position: 65
---modifPoint 0 not mutation generated in  double multiplier = tableau.getEntry(i, pivotCol)
---analyzing modificationPoint position: 58
Templates availables12
Attempts Base Ingredients  1 total 12
---modifPoint 1 not mutation generated in  java.lang.Integer pivotCol = getPivotColumn(tableau)
---analyzing modificationPoint position: 158
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java331
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length) ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 331, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length) ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 408, #gens: 187, #ops: 1, parent:407] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 408
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-408/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(204): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length) ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (407(f=1.0), 408(f=1.0), )
Selected to next generation: IDs2--> (407(f=1.0), )
----------Running generation: 205, population size: 1

***** Generation 205 : 0
**Parent Variant: [Variant id: 409, #gens: 186, #ops: 0, parent:-]

--Child created id: 410
--Creating new operations for variant [Variant id: 410, #gens: 186, #ops: 0, parent:409]
---analyzing modificationPoint position: 59
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  java.lang.Integer pivotRow = getPivotRow(pivotCol, tableau)
---analyzing modificationPoint position: 140
---modifPoint 1 not mutation generated in  return relationship
---analyzing modificationPoint position: 91
location: SimplexTableau.java295
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `row = i ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 410, #gens: 185, #ops: 1, parent:409] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 410
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-410/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(205): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `row = i ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (409(f=1.0), 410(f=14.0), )
Selected to next generation: IDs2--> (409(f=1.0), )
----------Running generation: 206, population size: 1

***** Generation 206 : 0
**Parent Variant: [Variant id: 411, #gens: 186, #ops: 0, parent:-]

--Child created id: 412
--Creating new operations for variant [Variant id: 412, #gens: 186, #ops: 0, parent:411]
---analyzing modificationPoint position: 107
Templates availables25
Attempts Base Ingredients  1 total 25
vars from patch [relationship]
--> var from patch: relationship spoon.support.reflect.code.CtVariableReadImpl
location: LinearConstraint.java100
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.coefficients = coefficients ` -topatch--> `relationship = relationship` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearConstraint line: 100, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.coefficients = coefficients ` -topatch--> `relationship = relationship` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 412, #gens: 187, #ops: 1, parent:411] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 412, errors: [LinearConstraint.java:102: error: final parameter relationship may not be assigned
	 */ 	public LinearConstraint(final org.apache.commons.math.linear.RealVector coefficients, final org.apache.commons.math.optimization.linear.Relationship relationship, final double value) { 		relationship = relationship; 		this.coefficients = coefficients; 		this.relationship = relationship;
	    	                                                                                                                                                                                         		^]
Ingredient counter is Zero
---Undoing: gnrtn(206): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.coefficients = coefficients ` -topatch--> `relationship = relationship` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (411(f=1.0), 412(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (411(f=1.0), )
----------Running generation: 207, population size: 1

***** Generation 207 : 0
**Parent Variant: [Variant id: 413, #gens: 186, #ops: 0, parent:-]

--Child created id: 414
--Creating new operations for variant [Variant id: 414, #gens: 186, #ops: 0, parent:413]
---analyzing modificationPoint position: 146
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [restrictToNonNegative, numDecisionVariables]
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java199
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 	norma[...] ` -topatch--> `return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 199, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 	norma[...] ` -topatch--> `return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 414, #gens: 187, #ops: 1, parent:413] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 414, errors: [SimplexTableau.java:541: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:541: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:541: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:541: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:541: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:541: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:543: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:543: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:543: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:543: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:543: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:543: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:543: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:545: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:545: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:546: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:547: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:547: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:548: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:548: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:549: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:550: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:550: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:550: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:551: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:551: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:551: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:551: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:551: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:551: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:564: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:564: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:564: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:564: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:564: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:564: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:568: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:568: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:572: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:580: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:580: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:580: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:580: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:589: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:589: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:589: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:589: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:589: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:593: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:593: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:597: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:597: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:601: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:601: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:606: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:606: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:616: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:616: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:621: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:621: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:625: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:625: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:629: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:629: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:633: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:633: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:635: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:635: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:638: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:645: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:645: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:645: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:645: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:645: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:645: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:654: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:654: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:654: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:654: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:654: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:654: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:654: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:654: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:654: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(207): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 	norma[...] ` -topatch--> `return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (413(f=1.0), 414(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (413(f=1.0), )
----------Running generation: 208, population size: 1

***** Generation 208 : 0
**Parent Variant: [Variant id: 415, #gens: 186, #ops: 0, parent:-]

--Child created id: 416
--Creating new operations for variant [Variant id: 416, #gens: 186, #ops: 0, parent:415]
---analyzing modificationPoint position: 121
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  int height = constraints.size() + getNumObjectiveFunctions()
---analyzing modificationPoint position: 22
Templates availables10
Attempts Base Ingredients  1 total 10
---modifPoint 1 not mutation generated in  if (tableau.getNumArtificialVariables() > 0) { 	return false; }
---analyzing modificationPoint position: 110
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 2 not mutation generated in  this.f = f
---analyzing modificationPoint position: 125
Templates availables25
Attempts Base Ingredients  1 total 25
vars from patch [matrix, zIndex, maximize]
--> var from patch: matrix spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: zIndex spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: maximize spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java137
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[zIndex][zIndex] = (maximize) ? 1 : -1 ` -topatch--> `matrix[zIndex][zIndex] = (maximize) ? 1 : -1` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 137, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[zIndex][zIndex] = (maximize) ? 1 : -1 ` -topatch--> `matrix[zIndex][zIndex] = (maximize) ? 1 : -1` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 416, #gens: 186, #ops: 1, parent:415] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 416
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-416/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(208): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[zIndex][zIndex] = (maximize) ? 1 : -1 ` -topatch--> `matrix[zIndex][zIndex] = (maximize) ? 1 : -1` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (415(f=1.0), 416(f=1.0), )
Selected to next generation: IDs2--> (415(f=1.0), )
----------Running generation: 209, population size: 1

***** Generation 209 : 0
**Parent Variant: [Variant id: 417, #gens: 186, #ops: 0, parent:-]

--Child created id: 418
--Creating new operations for variant [Variant id: 418, #gens: 186, #ops: 0, parent:417]
---analyzing modificationPoint position: 71
location: SimplexTableau.java371
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 418, #gens: 185, #ops: 1, parent:417] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 418
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-418/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 14] ,[]
-Valid?: |false|4|14|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(209): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (417(f=1.0), 418(f=4.0), )
Selected to next generation: IDs2--> (417(f=1.0), )
----------Running generation: 210, population size: 1

***** Generation 210 : 0
**Parent Variant: [Variant id: 419, #gens: 186, #ops: 0, parent:-]

--Child created id: 420
--Creating new operations for variant [Variant id: 420, #gens: 186, #ops: 0, parent:419]
---analyzing modificationPoint position: 86
Templates availables5
Attempts Base Ingredients  1 total 5
---modifPoint 0 not mutation generated in  this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), relationship, value)
---analyzing modificationPoint position: 10
Templates availables24
Attempts Base Ingredients  1 total 24
---modifPoint 1 not mutation generated in  double[] coefficients = new double[getOriginalNumDecisionVariables()]
---analyzing modificationPoint position: 53
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [maxIterations]
--> var from patch: maxIterations spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLinearOptimizer.java99
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(new org.apache.commons.math.Max[...]` (spoon.support.reflect.code.CtThrowImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 99, pointed element: CtThrowImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(new org.apache.commons.math.Max[...]` (spoon.support.reflect.code.CtThrowImpl) 

--Summary Creation: for variant [Variant id: 420, #gens: 187, #ops: 1, parent:419] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 420, errors: [AbstractLinearOptimizer.java:100: error: unreachable statement
		this.constraints = constraints;
		^]
Ingredient counter is Zero
---Undoing: gnrtn(210): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(new org.apache.commons.math.Max[...]` (spoon.support.reflect.code.CtThrowImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (419(f=1.0), 420(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (419(f=1.0), )
----------Running generation: 211, population size: 1

***** Generation 211 : 0
**Parent Variant: [Variant id: 421, #gens: 186, #ops: 0, parent:-]

--Child created id: 422
--Creating new operations for variant [Variant id: 422, #gens: 186, #ops: 0, parent:421]
---analyzing modificationPoint position: 104
Templates availables2
Attempts Base Ingredients  1 total 2
vars from patch [this.constantTerm]
--> var from patch: this.constantTerm spoon.support.reflect.code.CtFieldWriteImpl
SameName: double constantTerm
SameName: double constantTerm
Transforming shadowed variable in constantTerm = constantTerm
location: LinearObjectiveFunction.java67
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constantTerm = constantTerm ` -topatch--> `constantTerm = constantTerm` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearObjectiveFunction line: 67, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constantTerm = constantTerm ` -topatch--> `constantTerm = constantTerm` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 422, #gens: 186, #ops: 1, parent:421] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 422, errors: [LinearObjectiveFunction.java:69: error: variable constantTerm might not have been initialized
	 */ 	public LinearObjectiveFunction(org.apache.commons.math.linear.RealVector coefficients, double constantTerm) { 		this.coefficients = coefficients; 		constantTerm = constantTerm;}
	    	                                                                                                              		                                  		                            ^]
Ingredient counter is Zero
---Undoing: gnrtn(211): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constantTerm = constantTerm ` -topatch--> `constantTerm = constantTerm` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (421(f=1.0), 422(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (421(f=1.0), )
----------Running generation: 212, population size: 1

***** Generation 212 : 0
**Parent Variant: [Variant id: 423, #gens: 186, #ops: 0, parent:-]

--Child created id: 424
--Creating new operations for variant [Variant id: 424, #gens: 186, #ops: 0, parent:423]
---analyzing modificationPoint position: 22
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  if (tableau.getNumArtificialVariables() > 0) { 	return false; }
---analyzing modificationPoint position: 114
location: SimplexTableau.java109
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 424, #gens: 185, #ops: 1, parent:423] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 424, errors: [SimplexTableau.java:117: error: variable numDecisionVariables might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(212): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (423(f=1.0), 424(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (423(f=1.0), )
----------Running generation: 213, population size: 1

***** Generation 213 : 0
**Parent Variant: [Variant id: 425, #gens: 186, #ops: 0, parent:-]

--Child created id: 426
--Creating new operations for variant [Variant id: 426, #gens: 186, #ops: 0, parent:425]
---analyzing modificationPoint position: 88
Templates availables24
Attempts Base Ingredients  1 total 24
---modifPoint 0 not mutation generated in  int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0
---analyzing modificationPoint position: 109
location: LinearConstraint.java102
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.value = value ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 426, #gens: 185, #ops: 1, parent:425] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 426, errors: [LinearConstraint.java:104: error: variable value might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(213): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.value = value ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (425(f=1.0), 426(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (425(f=1.0), )
----------Running generation: 214, population size: 1

***** Generation 214 : 0
**Parent Variant: [Variant id: 427, #gens: 186, #ops: 0, parent:-]

--Child created id: 428
--Creating new operations for variant [Variant id: 428, #gens: 186, #ops: 0, parent:427]
---analyzing modificationPoint position: 114
location: SimplexTableau.java109
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 428, #gens: 185, #ops: 1, parent:427] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 428, errors: [SimplexTableau.java:117: error: variable numDecisionVariables might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(214): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (427(f=1.0), 428(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (427(f=1.0), )
----------Running generation: 215, population size: 1

***** Generation 215 : 0
**Parent Variant: [Variant id: 429, #gens: 186, #ops: 0, parent:-]

--Child created id: 430
--Creating new operations for variant [Variant id: 430, #gens: 186, #ops: 0, parent:429]
---analyzing modificationPoint position: 150
---modifPoint 0 not mutation generated in  return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients()[...]
---analyzing modificationPoint position: 100
---modifPoint 1 not mutation generated in  return tableau.getRowDimension()
---analyzing modificationPoint position: 25
location: SimplexTableau.java170
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack  ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 430, #gens: 185, #ops: 1, parent:429] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 430
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-430/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(215): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack  ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (429(f=1.0), 430(f=1.0), )
Selected to next generation: IDs2--> (429(f=1.0), )
----------Running generation: 216, population size: 1

***** Generation 216 : 0
**Parent Variant: [Variant id: 431, #gens: 186, #ops: 0, parent:-]

--Child created id: 432
--Creating new operations for variant [Variant id: 432, #gens: 186, #ops: 0, parent:431]
---analyzing modificationPoint position: 128
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [height, width]
--> var from patch: height spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: width spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java141
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[zIndex][width - 1] =  (maximize) ? f.getConstantTerm() : (-1) * f.getConstantTerm() ` -topatch--> `double[][] matrix = new double[height][width]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 141, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[zIndex][width - 1] =  (maximize) ? f.getConstantTerm() : (-1) * f.getConstantTerm() ` -topatch--> `double[][] matrix = new double[height][width]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 432, #gens: 187, #ops: 1, parent:431] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 432, errors: [SimplexTableau.java:141: error: variable matrix is already defined in method createTableau(boolean)
		copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions()); 		double[][] matrix = new double[height][width];
		                                                                                        		           ^]
Ingredient counter is Zero
---Undoing: gnrtn(216): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[zIndex][width - 1] =  (maximize) ? f.getConstantTerm() : (-1) * f.getConstantTerm() ` -topatch--> `double[][] matrix = new double[height][width]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (431(f=1.0), 432(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (431(f=1.0), )
----------Running generation: 217, population size: 1

***** Generation 217 : 0
**Parent Variant: [Variant id: 433, #gens: 186, #ops: 0, parent:-]

--Child created id: 434
--Creating new operations for variant [Variant id: 434, #gens: 186, #ops: 0, parent:433]
---analyzing modificationPoint position: 91
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java295
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `row = i ` -topatch--> `int height = getHeight() - 1` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 295, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `row = i ` -topatch--> `int height = getHeight() - 1` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 434, #gens: 187, #ops: 1, parent:433] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 434
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-434/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(217): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `row = i ` -topatch--> `int height = getHeight() - 1` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (433(f=1.0), 434(f=1.0), )
Selected to next generation: IDs2--> (433(f=1.0), )
----------Running generation: 218, population size: 1

***** Generation 218 : 0
**Parent Variant: [Variant id: 435, #gens: 186, #ops: 0, parent:-]

--Child created id: 436
--Creating new operations for variant [Variant id: 436, #gens: 186, #ops: 0, parent:435]
---analyzing modificationPoint position: 53
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.DEFAULT_MAX_ITERATIONS]
--> var from patch: org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.DEFAULT_MAX_ITERATIONS spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLinearOptimizer.java99
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `setMaxIterations(org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.DEFAULT_MAX_ITE[...]` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 99, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `setMaxIterations(org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.DEFAULT_MAX_ITE[...]` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 436, #gens: 187, #ops: 1, parent:435] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 436
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-436/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(218): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `setMaxIterations(org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.DEFAULT_MAX_ITE[...]` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (435(f=1.0), 436(f=1.0), )
Selected to next generation: IDs2--> (435(f=1.0), )
----------Running generation: 219, population size: 1

***** Generation 219 : 0
**Parent Variant: [Variant id: 437, #gens: 186, #ops: 0, parent:-]

--Child created id: 438
--Creating new operations for variant [Variant id: 438, #gens: 186, #ops: 0, parent:437]
---analyzing modificationPoint position: 92
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [this.f]
--> var from patch: this.f spoon.support.reflect.code.CtFieldWriteImpl
location: SimplexTableau.java300
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return row ` -topatch--> `this.f = f` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 300, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return row ` -topatch--> `this.f = f` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 438, #gens: 187, #ops: 1, parent:437] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 438, errors: [SimplexTableau.java:300: error: cannot assign a value to final variable f
		} 		this.f = f;
		  		    ^]
Ingredient counter is Zero
---Undoing: gnrtn(219): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return row ` -topatch--> `this.f = f` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (437(f=1.0), 438(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (437(f=1.0), )
----------Running generation: 220, population size: 1

***** Generation 220 : 0
**Parent Variant: [Variant id: 439, #gens: 186, #ops: 0, parent:-]

--Child created id: 440
--Creating new operations for variant [Variant id: 440, #gens: 186, #ops: 0, parent:439]
---analyzing modificationPoint position: 91
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 0 not mutation generated in  row = i
---analyzing modificationPoint position: 55
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [this.restrictToNonNegative]
--> var from patch: this.restrictToNonNegative spoon.support.reflect.code.CtFieldWriteImpl
SameName: final 




























































































boolean restrictToNonNegative
SameName: final 




























































































boolean restrictToNonNegative
Transforming shadowed variable in restrictToNonNegative = restrictToNonNegative
location: AbstractLinearOptimizer.java101
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 101, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 440, #gens: 187, #ops: 1, parent:439] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 440, errors: [AbstractLinearOptimizer.java:102: error: final parameter restrictToNonNegative may not be assigned
		restrictToNonNegative = restrictToNonNegative; 		this.restrictToNonNegative = restrictToNonNegative;
		^]
Ingredient counter is Zero
---Undoing: gnrtn(220): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (439(f=1.0), 440(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (439(f=1.0), )
----------Running generation: 221, population size: 1

***** Generation 221 : 0
**Parent Variant: [Variant id: 441, #gens: 186, #ops: 0, parent:-]

--Child created id: 442
--Creating new operations for variant [Variant id: 442, #gens: 186, #ops: 0, parent:441]
---analyzing modificationPoint position: 70
Templates availables8
Attempts Base Ingredients  1 total 8
---modifPoint 0 not mutation generated in  for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRo[...]
---analyzing modificationPoint position: 0
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 1 not mutation generated in  return
---analyzing modificationPoint position: 40
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java77
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double minRatio = java.lang.Double.MAX_VALUE ` -topatch--> `java.lang.Integer minPos = null` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 77, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double minRatio = java.lang.Double.MAX_VALUE ` -topatch--> `java.lang.Integer minPos = null` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 442, #gens: 187, #ops: 1, parent:441] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 442
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-442/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(221): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double minRatio = java.lang.Double.MAX_VALUE ` -topatch--> `java.lang.Integer minPos = null` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (441(f=1.0), 442(f=1.0), )
Selected to next generation: IDs2--> (441(f=1.0), )
----------Running generation: 222, population size: 1

***** Generation 222 : 0
**Parent Variant: [Variant id: 443, #gens: 186, #ops: 0, parent:-]

--Child created id: 444
--Creating new operations for variant [Variant id: 444, #gens: 186, #ops: 0, parent:443]
---analyzing modificationPoint position: 56
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [restrictToNonNegative]
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtVariableReadImpl
location: AbstractLinearOptimizer.java103
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `iterations = 0 ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 103, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `iterations = 0 ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 444, #gens: 187, #ops: 1, parent:443] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 444, errors: [AbstractLinearOptimizer.java:102: error: final parameter restrictToNonNegative may not be assigned
		this.restrictToNonNegative = restrictToNonNegative; 		restrictToNonNegative = restrictToNonNegative;
		                                                    		^]
Ingredient counter is Zero
---Undoing: gnrtn(222): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `iterations = 0 ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (443(f=1.0), 444(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (443(f=1.0), )
----------Running generation: 223, population size: 1

***** Generation 223 : 0
**Parent Variant: [Variant id: 445, #gens: 186, #ops: 0, parent:-]

--Child created id: 446
--Creating new operations for variant [Variant id: 446, #gens: 186, #ops: 0, parent:445]
---analyzing modificationPoint position: 19
---modifPoint 0 not mutation generated in  return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coeffici[...]
---analyzing modificationPoint position: 0
location: SimplexSolver.java169
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 446, #gens: 185, #ops: 1, parent:445] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 446
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-446/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(223): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (445(f=1.0), 446(f=1.0), )
Selected to next generation: IDs2--> (445(f=1.0), )
----------Running generation: 224, population size: 1

***** Generation 224 : 0
**Parent Variant: [Variant id: 447, #gens: 186, #ops: 0, parent:-]

--Child created id: 448
--Creating new operations for variant [Variant id: 448, #gens: 186, #ops: 0, parent:447]
---analyzing modificationPoint position: 84
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 0 not mutation generated in  dot += data[i] * v[i]
---analyzing modificationPoint position: 108
Templates availables25
Attempts Base Ingredients  1 total 25
vars from patch [relationship]
--> var from patch: relationship spoon.support.reflect.code.CtVariableReadImpl
location: LinearConstraint.java101
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.relationship = relationship ` -topatch--> `relationship = relationship` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearConstraint line: 101, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.relationship = relationship ` -topatch--> `relationship = relationship` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 448, #gens: 187, #ops: 1, parent:447] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 448, errors: [LinearConstraint.java:102: error: final parameter relationship may not be assigned
	 */ 	public LinearConstraint(final org.apache.commons.math.linear.RealVector coefficients, final org.apache.commons.math.optimization.linear.Relationship relationship, final double value) { 		this.coefficients = coefficients; 		this.relationship = relationship; 		relationship = relationship;
	    	                                                                                                                                                                                         		                                  		                                  		^]
Ingredient counter is Zero
---Undoing: gnrtn(224): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.relationship = relationship ` -topatch--> `relationship = relationship` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (447(f=1.0), 448(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (447(f=1.0), )
----------Running generation: 225, population size: 1

***** Generation 225 : 0
**Parent Variant: [Variant id: 449, #gens: 186, #ops: 0, parent:-]

--Child created id: 450
--Creating new operations for variant [Variant id: 450, #gens: 186, #ops: 0, parent:449]
---analyzing modificationPoint position: 126
---modifPoint 0 not mutation generated in  org.apache.commons.math.linear.RealVector objectiveCoefficients =  (maximize) ? f.getCoefficients().[...]
---analyzing modificationPoint position: 47
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 1 not mutation generated in  if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; }
---analyzing modificationPoint position: 88
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 2 not mutation generated in  int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0
---analyzing modificationPoint position: 60
location: SimplexSolver.java107
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (pivotRow == null) { 	throw new org.apache.commons.math.optimization.linear.UnboundedSolutionExce[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 450, #gens: 185, #ops: 1, parent:449] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 450
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-450/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 14] ,[]
-Valid?: |false|2|14|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(225): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (pivotRow == null) { 	throw new org.apache.commons.math.optimization.linear.UnboundedSolutionExce[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (449(f=1.0), 450(f=2.0), )
Selected to next generation: IDs2--> (449(f=1.0), )
----------Running generation: 226, population size: 1

***** Generation 226 : 0
**Parent Variant: [Variant id: 451, #gens: 186, #ops: 0, parent:-]

--Child created id: 452
--Creating new operations for variant [Variant id: 452, #gens: 186, #ops: 0, parent:451]
---analyzing modificationPoint position: 72
Templates availables31
Attempts Base Ingredients  1 total 31
---modifPoint 0 not mutation generated in  return numArtificialVariables
---analyzing modificationPoint position: 40
---modifPoint 1 not mutation generated in  double minRatio = java.lang.Double.MAX_VALUE
---analyzing modificationPoint position: 21
Templates availables31
Attempts Base Ingredients  1 total 31
vars from patch []
location: SimplexTableau.java481
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1 ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 481, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1 ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 452, #gens: 186, #ops: 1, parent:451] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 452, errors: [SimplexTableau.java:514: error: incompatible types: boolean cannot be converted to int
		return true;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(226): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1 ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (451(f=1.0), 452(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (451(f=1.0), )
----------Running generation: 227, population size: 1

***** Generation 227 : 0
**Parent Variant: [Variant id: 453, #gens: 186, #ops: 0, parent:-]

--Child created id: 454
--Creating new operations for variant [Variant id: 454, #gens: 186, #ops: 0, parent:453]
---analyzing modificationPoint position: 105
Templates availables8
Attempts Base Ingredients  1 total 8
vars from patch [constantTerm]
--> var from patch: constantTerm spoon.support.reflect.code.CtFieldReadImpl
location: LinearObjectiveFunction.java75
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients ` -topatch--> `return constantTerm` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearObjectiveFunction line: 75, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients ` -topatch--> `return constantTerm` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 454, #gens: 186, #ops: 1, parent:453] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 454, errors: [LinearObjectiveFunction.java:84: error: incompatible types: double cannot be converted to org.apache.commons.math.linear.RealVector
		return constantTerm;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(227): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients ` -topatch--> `return constantTerm` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (453(f=1.0), 454(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (453(f=1.0), )
----------Running generation: 228, population size: 1

***** Generation 228 : 0
**Parent Variant: [Variant id: 455, #gens: 186, #ops: 0, parent:-]

--Child created id: 456
--Creating new operations for variant [Variant id: 456, #gens: 186, #ops: 0, parent:455]
---analyzing modificationPoint position: 111
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 0 not mutation generated in  this.constraints = constraints
---analyzing modificationPoint position: 99
---modifPoint 1 not mutation generated in  return tableau.getColumnDimension()
---analyzing modificationPoint position: 21
---modifPoint 2 not mutation generated in  return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1
---analyzing modificationPoint position: 15
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 3 not mutation generated in  java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i)
---analyzing modificationPoint position: 92
---modifPoint 4 not mutation generated in  return row
---analyzing modificationPoint position: 157
Templates availables8
Attempts Base Ingredients  1 total 8
vars from patch [artificialVar, numArtificialVariables, row]
--> var from patch: artificialVar spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: row spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java248
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 248, pointed element: CtForImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 456, #gens: 186, #ops: 1, parent:455] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child compiles: id 456
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-456/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(228): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (455(f=1.0), 456(f=1.0), )
Selected to next generation: IDs2--> (455(f=1.0), )
----------Running generation: 229, population size: 1

***** Generation 229 : 0
**Parent Variant: [Variant id: 457, #gens: 186, #ops: 0, parent:-]

--Child created id: 458
--Creating new operations for variant [Variant id: 458, #gens: 186, #ops: 0, parent:457]
---analyzing modificationPoint position: 8
---modifPoint 0 not mutation generated in  return tableau.getSolution()
---analyzing modificationPoint position: 42
location: SimplexSolver.java79
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 	final double rhs =[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 458, #gens: 185, #ops: 1, parent:457] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 458
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-458/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 14] ,[]
-Valid?: |false|13|14|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(229): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 	final double rhs =[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (457(f=1.0), 458(f=13.0), )
Selected to next generation: IDs2--> (457(f=1.0), )
----------Running generation: 230, population size: 1

***** Generation 230 : 0
**Parent Variant: [Variant id: 459, #gens: 186, #ops: 0, parent:-]

--Child created id: 460
--Creating new operations for variant [Variant id: 460, #gens: 186, #ops: 0, parent:459]
---analyzing modificationPoint position: 59
---modifPoint 0 not mutation generated in  java.lang.Integer pivotRow = getPivotRow(pivotCol, tableau)
---analyzing modificationPoint position: 41
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [java.lang.Double.MAX_VALUE]
--> var from patch: java.lang.Double.MAX_VALUE spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java78
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer minRatioPos = null ` -topatch--> `double minRatio = java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 78, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer minRatioPos = null ` -topatch--> `double minRatio = java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 460, #gens: 186, #ops: 1, parent:459] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 460, errors: [SimplexSolver.java:79: error: variable minRatio is already defined in method getPivotRow(int,org.apache.commons.math.optimization.linear.SimplexTableau)
	 */ 	private java.lang.Integer getPivotRow(final int col, final org.apache.commons.math.optimization.linear.SimplexTableau tableau) { 		double minRatio = java.lang.Double.MAX_VALUE; 		double minRatio = java.lang.Double.MAX_VALUE;
	    	                                                                                                                                 		                                              		       ^, SimplexSolver.java:87: error: cannot find symbol
					minRatioPos = i;
					^
  symbol:   variable minRatioPos
  location: class org.apache.commons.math.optimization.linear.SimplexSolver, SimplexSolver.java:91: error: cannot find symbol
		return minRatioPos;
		       ^
  symbol:   variable minRatioPos
  location: class org.apache.commons.math.optimization.linear.SimplexSolver]
Ingredient counter is Zero
---Undoing: gnrtn(230): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer minRatioPos = null ` -topatch--> `double minRatio = java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (459(f=1.0), 460(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (459(f=1.0), )
----------Running generation: 231, population size: 1

***** Generation 231 : 0
**Parent Variant: [Variant id: 461, #gens: 186, #ops: 0, parent:-]

--Child created id: 462
--Creating new operations for variant [Variant id: 462, #gens: 186, #ops: 0, parent:461]
---analyzing modificationPoint position: 18
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [numArtificialVariables]
--> var from patch: numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java352
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `coefficients[i] =  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -  (restrictToNonNega[...] ` -topatch--> `return numArtificialVariables` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 352, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `coefficients[i] =  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -  (restrictToNonNega[...] ` -topatch--> `return numArtificialVariables` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 462, #gens: 187, #ops: 1, parent:461] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 462, errors: [SimplexTableau.java:498: error: incompatible types: int cannot be converted to org.apache.commons.math.optimization.RealPointValuePair
				return numArtificialVariables;}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
				       ^]
Ingredient counter is Zero
---Undoing: gnrtn(231): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `coefficients[i] =  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -  (restrictToNonNega[...] ` -topatch--> `return numArtificialVariables` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (461(f=1.0), 462(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (461(f=1.0), )
----------Running generation: 232, population size: 1

***** Generation 232 : 0
**Parent Variant: [Variant id: 463, #gens: 186, #ops: 0, parent:-]

--Child created id: 464
--Creating new operations for variant [Variant id: 464, #gens: 186, #ops: 0, parent:463]
---analyzing modificationPoint position: 57
location: SimplexSolver.java103
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `incrementIterationsCounter() ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 464, #gens: 185, #ops: 1, parent:463] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 464
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-464/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(232): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `incrementIterationsCounter() ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (463(f=1.0), 464(f=1.0), )
Selected to next generation: IDs2--> (463(f=1.0), )
----------Running generation: 233, population size: 1

***** Generation 233 : 0
**Parent Variant: [Variant id: 465, #gens: 186, #ops: 0, parent:-]

--Child created id: 466
--Creating new operations for variant [Variant id: 466, #gens: 186, #ops: 0, parent:465]
---analyzing modificationPoint position: 141
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [matrix, artificialVar]
--> var from patch: matrix spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: artificialVar spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java176
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `// artificial variables if ((constraint.getRelationship() == org.apache.commons.math.optimization.li[...] ` -topatch--> `matrix[0][getArtificialVariableOffset() + artificialVar] = 1` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 176, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `// artificial variables if ((constraint.getRelationship() == org.apache.commons.math.optimization.li[...] ` -topatch--> `matrix[0][getArtificialVariableOffset() + artificialVar] = 1` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 466, #gens: 187, #ops: 1, parent:465] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 466
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-466/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 14] ,[]
-Valid?: |false|3|14|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(233): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `// artificial variables if ((constraint.getRelationship() == org.apache.commons.math.optimization.li[...] ` -topatch--> `matrix[0][getArtificialVariableOffset() + artificialVar] = 1` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (465(f=1.0), 466(f=3.0), )
Selected to next generation: IDs2--> (465(f=1.0), )
----------Running generation: 234, population size: 1

***** Generation 234 : 0
**Parent Variant: [Variant id: 467, #gens: 186, #ops: 0, parent:-]

--Child created id: 468
--Creating new operations for variant [Variant id: 468, #gens: 186, #ops: 0, parent:467]
---analyzing modificationPoint position: 49
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [maxIterations]
--> var from patch: maxIterations spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLinearOptimizer.java86
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...] ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(new org.apache.commons.math.Max[...]` (spoon.support.reflect.code.CtThrowImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 86, pointed element: CtThrowImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...] ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(new org.apache.commons.math.Max[...]` (spoon.support.reflect.code.CtThrowImpl) 

--Summary Creation: for variant [Variant id: 468, #gens: 187, #ops: 1, parent:467] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 468
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-468/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(234): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...] ` -topatch--> `throw new org.apache.commons.math.optimization.OptimizationException(new org.apache.commons.math.Max[...]` (spoon.support.reflect.code.CtThrowImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (467(f=1.0), 468(f=14.0), )
Selected to next generation: IDs2--> (467(f=1.0), )
----------Running generation: 235, population size: 1

***** Generation 235 : 0
**Parent Variant: [Variant id: 469, #gens: 186, #ops: 0, parent:-]

--Child created id: 470
--Creating new operations for variant [Variant id: 470, #gens: 186, #ops: 0, parent:469]
---analyzing modificationPoint position: 155
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  ++count
---analyzing modificationPoint position: 99
---modifPoint 1 not mutation generated in  return tableau.getColumnDimension()
---analyzing modificationPoint position: 38
location: AbstractLinearOptimizer.java67
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 470, #gens: 185, #ops: 1, parent:469] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 470
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-470/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(235): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (469(f=1.0), 470(f=14.0), )
Selected to next generation: IDs2--> (469(f=1.0), )
----------Running generation: 236, population size: 1

***** Generation 236 : 0
**Parent Variant: [Variant id: 471, #gens: 186, #ops: 0, parent:-]

--Child created id: 472
--Creating new operations for variant [Variant id: 472, #gens: 186, #ops: 0, parent:471]
---analyzing modificationPoint position: 9
---modifPoint 0 not mutation generated in  return getBasicRow(col, false)
---analyzing modificationPoint position: 21
Templates availables121
Attempts Base Ingredients  1 total 121
Attempts Base Ingredients  2 total 121
---modifPoint 1 not mutation generated in  return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1
---analyzing modificationPoint position: 43
Templates availables12
Attempts Base Ingredients  1 total 12
---modifPoint 2 not mutation generated in  final double rhs = tableau.getEntry(i, tableau.getWidth() - 1)
---analyzing modificationPoint position: 174
Templates availables120
Attempts Base Ingredients  1 total 120
---modifPoint 3 not mutation generated in  final int nRows = subMatrix.length
---analyzing modificationPoint position: 28
location: SimplexSolver.java190
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (!isOptimal(tableau)) { 	doIteration(tableau); }  ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 472, #gens: 185, #ops: 1, parent:471] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 472
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-472/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 14] ,[]
-Valid?: |false|8|14|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(236): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (!isOptimal(tableau)) { 	doIteration(tableau); }  ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (471(f=1.0), 472(f=8.0), )
Selected to next generation: IDs2--> (471(f=1.0), )
----------Running generation: 237, population size: 1

***** Generation 237 : 0
**Parent Variant: [Variant id: 473, #gens: 186, #ops: 0, parent:-]

--Child created id: 474
--Creating new operations for variant [Variant id: 474, #gens: 186, #ops: 0, parent:473]
---analyzing modificationPoint position: 159
Templates availables68
Attempts Base Ingredients  1 total 68
---modifPoint 0 not mutation generated in  return org.apache.commons.math.util.MathUtils.equals(x, y) || (java.lang.Math.abs(y - x) <= eps)
---analyzing modificationPoint position: 122
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch []
location: SimplexTableau.java130
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[][] matrix = new double[height][width] ` -topatch--> `java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset())` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 130, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[][] matrix = new double[height][width] ` -topatch--> `java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset())` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 474, #gens: 186, #ops: 1, parent:473] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 474, errors: [SimplexTableau.java:348: error: illegal start of type
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		^, SimplexTableau.java:348: error: ';' expected
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		      ^, SimplexTableau.java:352: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	       ^, SimplexTableau.java:352: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	                               		                                          ^, SimplexTableau.java:356: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	       ^, SimplexTableau.java:356: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		^, SimplexTableau.java:356: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                      ^, SimplexTableau.java:356: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                        		                  ^, SimplexTableau.java:362: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                     ^, SimplexTableau.java:362: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                         ^, SimplexTableau.java:362: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                           		                                                                                                                                                           ^, SimplexTableau.java:366: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                ^, SimplexTableau.java:366: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                                                 		                                               ^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                          ^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		           ^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				        ^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				           		             ^, SimplexTableau.java:375: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                            ^, SimplexTableau.java:375: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                    ^, SimplexTableau.java:375: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			^, SimplexTableau.java:375: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			                         ^, SimplexTableau.java:381: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                         ^, SimplexTableau.java:381: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		^, SimplexTableau.java:381: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                   ^, SimplexTableau.java:381: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                     		           ^, SimplexTableau.java:387: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                            ^, SimplexTableau.java:387: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                                       		                              ^, SimplexTableau.java:393: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                       ^, SimplexTableau.java:393: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                                  		                               ^, SimplexTableau.java:399: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                            ^, SimplexTableau.java:399: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		^, SimplexTableau.java:399: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		^, SimplexTableau.java:399: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                    ^, SimplexTableau.java:399: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                     ^, SimplexTableau.java:399: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				        ^, SimplexTableau.java:399: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				            ^, SimplexTableau.java:399: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				               		           ^, SimplexTableau.java:401: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			       ^, SimplexTableau.java:401: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		^, SimplexTableau.java:401: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		^, SimplexTableau.java:401: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		^, SimplexTableau.java:401: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                ^, SimplexTableau.java:401: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                            ^, SimplexTableau.java:401: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                ^, SimplexTableau.java:401: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                 ^, SimplexTableau.java:401: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                      ^, SimplexTableau.java:401: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                       ^, SimplexTableau.java:401: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		^, SimplexTableau.java:401: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		                                ^, SimplexTableau.java:410: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                             ^, SimplexTableau.java:410: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                 ^, SimplexTableau.java:410: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                      ^, SimplexTableau.java:410: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:414: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		^, SimplexTableau.java:414: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		^, SimplexTableau.java:414: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		^, SimplexTableau.java:414: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		^, SimplexTableau.java:414: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                ^, SimplexTableau.java:414: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                         ^, SimplexTableau.java:414: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                                			                                                                                     			^, SimplexTableau.java:421: error: class, interface, or enum expected
	 * @param dividendRow
	          ^, SimplexTableau.java:423: error: class, interface, or enum expected
	 * @param divisor
	          ^, SimplexTableau.java:425: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                               ^, SimplexTableau.java:425: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                      ^, SimplexTableau.java:425: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                ^, SimplexTableau.java:425: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                ^, SimplexTableau.java:425: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                       			                                                                             ^, SimplexTableau.java:438: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                 ^, SimplexTableau.java:438: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                       ^, SimplexTableau.java:438: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                ^, SimplexTableau.java:438: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                ^, SimplexTableau.java:438: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                ^, SimplexTableau.java:438: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                       			                                                                                                                   ^, SimplexTableau.java:442: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                ^, SimplexTableau.java:442: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                                 		                                    ^, SimplexTableau.java:446: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                ^, SimplexTableau.java:446: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                                  		                                 ^, SimplexTableau.java:454: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                ^, SimplexTableau.java:454: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                      ^, SimplexTableau.java:454: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                     ^, SimplexTableau.java:454: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                                   		                                     ^, SimplexTableau.java:463: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                ^, SimplexTableau.java:463: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                    ^, SimplexTableau.java:463: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                   ^, SimplexTableau.java:463: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                     ^, SimplexTableau.java:463: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                     		                                     ^, SimplexTableau.java:467: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:467: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                               		                                                         ^, SimplexTableau.java:471: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                ^, SimplexTableau.java:471: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                                    		                                                                               ^, SimplexTableau.java:475: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                ^, SimplexTableau.java:475: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                     		                      ^, SimplexTableau.java:480: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                ^, SimplexTableau.java:480: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                          		                                                                      ^, SimplexTableau.java:490: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:490: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                                		                            ^, SimplexTableau.java:495: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                ^, SimplexTableau.java:495: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                        		                                                                               ^, SimplexTableau.java:499: error: class, interface, or enum expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(237): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[][] matrix = new double[height][width] ` -topatch--> `java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset())` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (473(f=1.0), 474(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (473(f=1.0), )
----------Running generation: 238, population size: 1

***** Generation 238 : 0
**Parent Variant: [Variant id: 475, #gens: 186, #ops: 0, parent:-]

--Child created id: 476
--Creating new operations for variant [Variant id: 476, #gens: 186, #ops: 0, parent:475]
---analyzing modificationPoint position: 39
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  return minPos
---analyzing modificationPoint position: 25
Templates availables25
Attempts Base Ingredients  1 total 25
vars from patch [this.numDecisionVariables, restrictToNonNegative]
--> var from patch: this.numDecisionVariables spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java170
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack  ` -topatch--> `this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 170, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack  ` -topatch--> `this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 476, #gens: 186, #ops: 1, parent:475] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 476, errors: [SimplexTableau.java:170: error: cannot assign a value to final variable numDecisionVariables
			if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.LEQ) { 				this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1);
			                                                                                                    				    ^]
Ingredient counter is Zero
---Undoing: gnrtn(238): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack  ` -topatch--> `this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (475(f=1.0), 476(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (475(f=1.0), )
----------Running generation: 239, population size: 1

***** Generation 239 : 0
**Parent Variant: [Variant id: 477, #gens: 186, #ops: 0, parent:-]

--Child created id: 478
--Creating new operations for variant [Variant id: 478, #gens: 186, #ops: 0, parent:477]
---analyzing modificationPoint position: 130
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [matrix]
--> var from patch: matrix spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java150
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// initialize the constraint rows int slackVar = 0 ` -topatch--> `// initialize the objective function rows if (getNumObjectiveFunctions() == 2) { 	matrix[0][0] = -1;[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 150, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// initialize the constraint rows int slackVar = 0 ` -topatch--> `// initialize the objective function rows if (getNumObjectiveFunctions() == 2) { 	matrix[0][0] = -1;[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 478, #gens: 187, #ops: 1, parent:477] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 478
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-478/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(239): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// initialize the constraint rows int slackVar = 0 ` -topatch--> `// initialize the objective function rows if (getNumObjectiveFunctions() == 2) { 	matrix[0][0] = -1;[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (477(f=1.0), 478(f=1.0), )
Selected to next generation: IDs2--> (477(f=1.0), )
----------Running generation: 240, population size: 1

***** Generation 240 : 0
**Parent Variant: [Variant id: 479, #gens: 186, #ops: 0, parent:-]

--Child created id: 480
--Creating new operations for variant [Variant id: 480, #gens: 186, #ops: 0, parent:479]
---analyzing modificationPoint position: 77
Templates availables259
Attempts Base Ingredients  1 total 259
vars from patch []
location: MathUtils.java372
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return 1 ` -topatch--> `int result = 1` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.util.MathUtils line: 372, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return 1 ` -topatch--> `int result = 1` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 480, #gens: 187, #ops: 1, parent:479] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 480, errors: [MathUtils.java:1475: error: illegal start of type
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		^, MathUtils.java:1475: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		     ^, MathUtils.java:1475: error: ';' expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		        ^, MathUtils.java:1475: error: illegal start of type
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		           ^, MathUtils.java:1475: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		            ^, MathUtils.java:1475: error: ';' expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		              ^, MathUtils.java:1475: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                            ^, MathUtils.java:1475: error: illegal start of type
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                             ^, MathUtils.java:1475: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                                                                 ^, MathUtils.java:1475: error: <identifier> expected
		} 		if (k == 31) { 			throw org.apache.commons.math.MathRuntimeException.createArithmeticException("overflow: gcd({0}, {1}) is 2^31", p, q);} 		// B2. Initialize: u and v have been divided by 2^k and at least 		// one is odd. 		/* B3 */ 		int t = ((u & 1) == 1) ? v : -(u / 2); 		// t negative: u was odd, v may be even (t replaces v) 		// t positive: u was even, v is odd (t replaces u)
		  		               			                                                                                                                    ^, MathUtils.java:1476: error: class, interface, or enum expected
		do { 			/* assert u<0 && v<0; */ 			// B4/B3: cast out twos from t.
		^, MathUtils.java:1479: error: class, interface, or enum expected
			if (t > 0) { 				u = -t;} else { 				v = t;} 			// B6/B3. at this point both u and v should be odd. 			t = (v - u) / 2; 			// |u| larger: t positive (replace u) 			// |v| larger: t negative (replace v)} while (t != 0 ); 		return (-u) * (1 << k);// gcd is u*2^k
			             				       ^, MathUtils.java:1479: error: class, interface, or enum expected
			if (t > 0) { 				u = -t;} else { 				v = t;} 			// B6/B3. at this point both u and v should be odd. 			t = (v - u) / 2; 			// |u| larger: t positive (replace u) 			// |v| larger: t negative (replace v)} while (t != 0 ); 		return (-u) * (1 << k);// gcd is u*2^k
			             				                				      ^, MathUtils.java:1486: error: class, interface, or enum expected
	 */ 	public static int hash(double value) { 		return new java.lang.Double(value).hashCode();} 	/**
	    	              ^, MathUtils.java:1486: error: class, interface, or enum expected
	 */ 	public static int hash(double value) { 		return new java.lang.Double(value).hashCode();} 	/**
	    	                                       		                                              ^, MathUtils.java:1493: error: class, interface, or enum expected
	 */ 	public static int hash(double[] value) { 		return java.util.Arrays.hashCode(value);} 	/**
	    	              ^, MathUtils.java:1493: error: class, interface, or enum expected
	 */ 	public static int hash(double[] value) { 		return java.util.Arrays.hashCode(value);} 	/**
	    	                                         		                                        ^, MathUtils.java:1500: error: class, interface, or enum expected
	 */ 	public static byte indicator(final byte x) { 		return x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	/**
	    	              ^, MathUtils.java:1500: error: class, interface, or enum expected
	 */ 	public static byte indicator(final byte x) { 		return x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	/**
	    	                                   ^, MathUtils.java:1500: error: class, interface, or enum expected
	 */ 	public static byte indicator(final byte x) { 		return x >= org.apache.commons.math.util.MathUtils.ZB ? org.apache.commons.math.util.MathUtils.PB : org.apache.commons.math.util.MathUtils.NB;} 	/**
	    	                                             		                                                                                                                                              ^, MathUtils.java:1508: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	              ^, MathUtils.java:1508: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	                                     ^, MathUtils.java:1508: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	                                                 		                                 			                            ^, MathUtils.java:1508: error: class, interface, or enum expected
	 */ 	public static double indicator(final double x) { 		if (java.lang.Double.isNaN(x)) { 			return java.lang.Double.NaN;} 		return x >= 0.0 ? 1.0 : -1.0;} 	/**
	    	                                                 		                                 			                              		                             ^, MathUtils.java:1515: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	              ^, MathUtils.java:1515: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	                                    ^, MathUtils.java:1515: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	                                               		                                			                           ^, MathUtils.java:1515: error: class, interface, or enum expected
	 */ 	public static float indicator(final float x) { 		if (java.lang.Float.isNaN(x)) { 			return java.lang.Float.NaN;} 		return x >= 0.0F ? 1.0F : -1.0F;} 	/**
	    	                                               		                                			                             		                                ^, MathUtils.java:1521: error: class, interface, or enum expected
	 */ 	public static int indicator(final int x) { 		return x >= 0 ? 1 : -1;} 	/**
	    	              ^, MathUtils.java:1521: error: class, interface, or enum expected
	 */ 	public static int indicator(final int x) { 		return x >= 0 ? 1 : -1;} 	/**
	    	                                  ^, MathUtils.java:1521: error: class, interface, or enum expected
	 */ 	public static int indicator(final int x) { 		return x >= 0 ? 1 : -1;} 	/**
	    	                                           		                       ^, MathUtils.java:1527: error: class, interface, or enum expected
	 */ 	public static long indicator(final long x) { 		return x >= 0L ? 1L : -1L;} 	/**
	    	              ^, MathUtils.java:1527: error: class, interface, or enum expected
	 */ 	public static long indicator(final long x) { 		return x >= 0L ? 1L : -1L;} 	/**
	    	                                   ^, MathUtils.java:1527: error: class, interface, or enum expected
	 */ 	public static long indicator(final long x) { 		return x >= 0L ? 1L : -1L;} 	/**
	    	                                             		                          ^, MathUtils.java:1534: error: class, interface, or enum expected
	 */ 	public static short indicator(final short x) { 		return x >= org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} 	/**
	    	              ^, MathUtils.java:1534: error: class, interface, or enum expected
	 */ 	public static short indicator(final short x) { 		return x >= org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} 	/**
	    	                                    ^, MathUtils.java:1534: error: class, interface, or enum expected
	 */ 	public static short indicator(final short x) { 		return x >= org.apache.commons.math.util.MathUtils.ZS ? org.apache.commons.math.util.MathUtils.PS : org.apache.commons.math.util.MathUtils.NS;} 	/**
	    	                                               		                                                                                                                                              ^, MathUtils.java:1558: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	              ^, MathUtils.java:1558: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			         ^, MathUtils.java:1558: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			           		                                                                                                                                           		^, MathUtils.java:1558: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			           		                                                                                                                                           		                                          			                                                                 ^, MathUtils.java:1558: error: class, interface, or enum expected
	 */ 	public static int lcm(int a, int b) { 		if ((a == 0) || (b == 0)) { 			return 0;} 		int lcm = java.lang.Math.abs(org.apache.commons.math.util.MathUtils.mulAndCheck(a / org.apache.commons.math.util.MathUtils.gcd(a, b), b)); 		if (lcm == java.lang.Integer.MIN_VALUE) { 			throw new java.lang.ArithmeticException("overflow: lcm is 2^31");} 		return lcm;} 	/**
	    	                                      		                            			           		                                                                                                                                           		                                          			                                                                   		           ^, MathUtils.java:1575: error: class, interface, or enum expected
	 */ 	public static double log(double base, double x) { 		return java.lang.Math.log(x) / java.lang.Math.log(base);} 	/**
	    	              ^, MathUtils.java:1575: error: class, interface, or enum expected
	 */ 	public static double log(double base, double x) { 		return java.lang.Math.log(x) / java.lang.Math.log(base);} 	/**
	    	                                                  		                                                        ^, MathUtils.java:1587: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	              ^, MathUtils.java:1587: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	                                              		                                      		^, MathUtils.java:1587: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	                                              		                                      		                                                                              			                                                         ^, MathUtils.java:1587: error: class, interface, or enum expected
	 */ 	public static int mulAndCheck(int x, int y) { 		long m = ((long) (x)) * ((long) (y)); 		if ((m < java.lang.Integer.MIN_VALUE) || (m > java.lang.Integer.MAX_VALUE)) { 			throw new java.lang.ArithmeticException("overflow: mul");} 		return ((int) (m));} 	/**
	    	                                              		                                      		                                                                              			                                                           		                   ^, MathUtils.java:1599: error: class, interface, or enum expected
	 */ 	public static long mulAndCheck(long a, long b) { 		long ret; 		java.lang.String msg = "overflow: multiply"; 		if (a > b) { 			// use symmetry to reduce boundary cases 			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);} else if (a < 0) { 			if (b < 0) { 				// check for positive overflow with negative a, negative b
	    	              ^, MathUtils.java:1599: error: class, interface, or enum expected
	 */ 	public static long mulAndCheck(long a, long b) { 		long ret; 		java.lang.String msg = "overflow: multiply"; 		if (a > b) { 			// use symmetry to reduce boundary cases 			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);} else if (a < 0) { 			if (b < 0) { 				// check for positive overflow with negative a, negative b
	    	                                                 		          		^, MathUtils.java:1599: error: class, interface, or enum expected
	 */ 	public static long mulAndCheck(long a, long b) { 		long ret; 		java.lang.String msg = "overflow: multiply"; 		if (a > b) { 			// use symmetry to reduce boundary cases 			ret = org.apache.commons.math.util.MathUtils.mulAndCheck(b, a);} else if (a < 0) { 			if (b < 0) { 				// check for positive overflow with negative a, negative b
	    	                                                 		          		                                             		^, MathUtils.java:1600: error: class, interface, or enum expected
				if (a >= (java.lang.Long.MAX_VALUE / b)) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else if (b > 0) { 				// check for negative overflow with negative a, positive b
				                                           					            ^, MathUtils.java:1600: error: class, interface, or enum expected
				if (a >= (java.lang.Long.MAX_VALUE / b)) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else if (b > 0) { 				// check for negative overflow with negative a, positive b
				                                           					                     					                                             ^, MathUtils.java:1601: error: class, interface, or enum expected
				if ((java.lang.Long.MIN_VALUE / b) <= a) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else { 				// assert b == 0 				ret = 0;}} else if (a > 0) { 			// assert a > 0 			// assert b > 0 			// check for positive overflow with positive a, positive b
				                                           					            ^, MathUtils.java:1601: error: class, interface, or enum expected
				if ((java.lang.Long.MIN_VALUE / b) <= a) { 					ret = a * b;} else { 					throw new java.lang.ArithmeticException(msg);}} else { 				// assert b == 0 				ret = 0;}} else if (a > 0) { 			// assert a > 0 			// assert b > 0 			// check for positive overflow with positive a, positive b
				                                           					                     					                                             ^, MathUtils.java:1602: error: class, interface, or enum expected
			if (a <= (java.lang.Long.MAX_VALUE / b)) { 				ret = a * b;} else { 				throw new java.lang.ArithmeticException(msg);}} else { 			// assert a == 0 			ret = 0;} 		return ret;} 	/**
			                                           				            ^, MathUtils.java:1602: error: class, interface, or enum expected
			if (a <= (java.lang.Long.MAX_VALUE / b)) { 				ret = a * b;} else { 				throw new java.lang.ArithmeticException(msg);}} else { 			// assert a == 0 			ret = 0;} 		return ret;} 	/**
			                                           				                     				                                             ^, MathUtils.java:1608: error: class, interface, or enum expected
	 * <code>d</code> is returned; otherwise the largest representable number
	                               ^, MathUtils.java:1613: error: class, interface, or enum expected
	 * @param d
	          ^, MathUtils.java:1615: error: class, interface, or enum expected
	 * @param direction
	          ^, MathUtils.java:1618: error: <identifier> expected
	 * @return the next machine representable number in the specified direction
	    ^, MathUtils.java:1618: error: class, interface, or enum expected
	 * @return the next machine representable number in the specified direction
	           ^, MathUtils.java:1619: error: class, interface, or enum expected
	 * @since 1.2
	          ^, MathUtils.java:1620: error: class, interface, or enum expected
	 */ 	public static double nextAfter(double d, double direction) { 		// handling of some important special cases
	    	              ^, MathUtils.java:1621: error: class, interface, or enum expected
		if (java.lang.Double.isNaN(d) || java.lang.Double.isInfinite(d)) { 			return d;} else if (d == 0) { 			return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;} 		// special cases MAX_VALUE to infinity and  MIN_VALUE to 0 		// are handled just as normal numbers 		// split the double in raw components 		long bits = java.lang.Double.doubleToLongBits(d); 		long sign = bits & 0x8000000000000000L; 		long exponent = bits & 0x7ff0000000000000L; 		long mantissa = bits & 0xfffffffffffffL; 		if ((d * (direction - d)) >= 0) { 			// we should increase the mantissa
		                                                                   			         ^, MathUtils.java:1621: error: class, interface, or enum expected
		if (java.lang.Double.isNaN(d) || java.lang.Double.isInfinite(d)) { 			return d;} else if (d == 0) { 			return direction < 0 ? -java.lang.Double.MIN_VALUE : java.lang.Double.MIN_VALUE;} 		// special cases MAX_VALUE to infinity and  MIN_VALUE to 0 		// are handled just as normal numbers 		// split the double in raw components 		long bits = java.lang.Double.doubleToLongBits(d); 		long sign = bits & 0x8000000000000000L; 		long exponent = bits & 0x7ff0000000000000L; 		long mantissa = bits & 0xfffffffffffffL; 		if ((d * (direction - d)) >= 0) { 			// we should increase the mantissa
		                                                                   			                              			                                                                                ^, MathUtils.java:1622: error: class, interface, or enum expected
			if (mantissa == 0xfffffffffffffL) { 				return java.lang.Double.longBitsToDouble(sign | (exponent + 0x10000000000000L));} else { 				return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa + 1));}} else // we should decrease the mantissa
			                                    				                                                                                ^, MathUtils.java:1622: error: class, interface, or enum expected
			if (mantissa == 0xfffffffffffffL) { 				return java.lang.Double.longBitsToDouble(sign | (exponent + 0x10000000000000L));} else { 				return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa + 1));}} else // we should decrease the mantissa
			                                    				                                                                                         				                                                                             ^, MathUtils.java:1623: error: class, interface, or enum expected
		if (mantissa == 0L) { 			return java.lang.Double.longBitsToDouble((sign | (exponent - 0x10000000000000L)) | 0xfffffffffffffL);} else { 			return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa - 1));}} 	/**
		                      			                                                                                                     ^, MathUtils.java:1623: error: class, interface, or enum expected
		if (mantissa == 0L) { 			return java.lang.Double.longBitsToDouble((sign | (exponent - 0x10000000000000L)) | 0xfffffffffffffL);} else { 			return java.lang.Double.longBitsToDouble((sign | exponent) | (mantissa - 1));}} 	/**
		                      			                                                                                                              			                                                                             ^, MathUtils.java:1633: error: class, interface, or enum expected
	 */ 	public static double scalb(final double d, final int scaleFactor) { 		// handling of some important special cases
	    	              ^, MathUtils.java:1633: error: class, interface, or enum expected
	 */ 	public static double scalb(final double d, final int scaleFactor) { 		// handling of some important special cases
	    	                                 ^, MathUtils.java:1633: error: class, interface, or enum expected
	 */ 	public static double scalb(final double d, final int scaleFactor) { 		// handling of some important special cases
	    	                                                 ^, MathUtils.java:1634: error: class, interface, or enum expected
		if (((d == 0) || java.lang.Double.isNaN(d)) || java.lang.Double.isInfinite(d)) { 			return d;} 		// split the double in raw components 		final long bits = java.lang.Double.doubleToLongBits(d); 		final long exponent = bits & 0x7ff0000000000000L; 		final long rest = bits & 0x800fffffffffffffL; 		// shift the exponent 		final long newBits = rest | (exponent + (((long) (scaleFactor)) << 52)); 		return java.lang.Double.longBitsToDouble(newBits);} 	/**
		                                                                                 			         ^, MathUtils.java:1638: error: class, interface, or enum expected
	 *   <li>normalize an angle between 0 and 2&pi;:<br/>
	                                               ^, MathUtils.java:1639: error: class, interface, or enum expected
	 *       <code>a = MathUtils.normalizeAngle(a, Math.PI);</code></li>
	                                                        ^, MathUtils.java:1640: error: class, interface, or enum expected
	 *   <li>normalize an angle between -&pi; and +&pi;<br/>
	                                          ^, MathUtils.java:1640: error: class, interface, or enum expected
	 *   <li>normalize an angle between -&pi; and +&pi;<br/>
	                                                   ^, MathUtils.java:1641: error: class, interface, or enum expected
	 *       <code>a = MathUtils.normalizeAngle(a, 0.0);</code></li>
	                                                    ^, MathUtils.java:1643: error: class, interface, or enum expected
	 *       <code>angle = MathUtils.normalizeAngle(end, start) - start;</code></li>
	                                                                    ^, MathUtils.java:1645: error: class, interface, or enum expected
	 * <p>Note that due to numerical accuracy and since &pi; cannot be represented
	                                                         ^, MathUtils.java:1649: error: class, interface, or enum expected
	 * @param a
	          ^, MathUtils.java:1651: error: class, interface, or enum expected
	 * @param center
	          ^, MathUtils.java:1652: error: class, interface, or enum expected
	 * 		center of the desired 2&pi; interval for the result
	   		                            ^, MathUtils.java:1653: error: <identifier> expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	    ^, MathUtils.java:1653: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	           ^, MathUtils.java:1653: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                    ^, MathUtils.java:1653: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                   ^, MathUtils.java:1653: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                       ^, MathUtils.java:1653: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                                  ^, MathUtils.java:1653: error: class, interface, or enum expected
	 * @return a-2k&pi; with integer k and center-&pi; &lt;= a-2k&pi; &lt;= center+&pi;
	                                                                      ^, MathUtils.java:1654: error: class, interface, or enum expected
	 * @since 1.2
	 ^, MathUtils.java:1654: error: class, interface, or enum expected
	 * @since 1.2
	          ^, MathUtils.java:1655: error: class, interface, or enum expected
	 */ 	public static double normalizeAngle(double a, double center) { 		return a - (org.apache.commons.math.util.MathUtils.TWO_PI * java.lang.Math.floor(((a + java.lang.Math.PI) - center) / org.apache.commons.math.util.MathUtils.TWO_PI));} 	/**
	    	              ^, MathUtils.java:1655: error: class, interface, or enum expected
	 */ 	public static double normalizeAngle(double a, double center) { 		return a - (org.apache.commons.math.util.MathUtils.TWO_PI * java.lang.Math.floor(((a + java.lang.Math.PI) - center) / org.apache.commons.math.util.MathUtils.TWO_PI));} 	/**
	    	                                                               		                                                                                                                                                                      ^, MathUtils.java:1665: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale) { 		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} 	/**
	    	              ^, MathUtils.java:1665: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale) { 		return org.apache.commons.math.util.MathUtils.round(x, scale, java.math.BigDecimal.ROUND_HALF_UP);} 	/**
	    	                                                  		                                                                                                  ^, MathUtils.java:1679: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale, int roundingMethod) { 		try { 			return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { 			if (java.lang.Double.isInfinite(x)) { 				return x;} else { 				return java.lang.Double.NaN;}}} 	/**
	    	              ^, MathUtils.java:1679: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale, int roundingMethod) { 		try { 			return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { 			if (java.lang.Double.isInfinite(x)) { 				return x;} else { 				return java.lang.Double.NaN;}}} 	/**
	    	                                                                      		      			                                                                                                            ^, MathUtils.java:1679: error: class, interface, or enum expected
	 */ 	public static double round(double x, int scale, int roundingMethod) { 		try { 			return new java.math.BigDecimal(java.lang.Double.toString(x)).setScale(scale, roundingMethod).doubleValue();} catch (java.lang.NumberFormatException ex) { 			if (java.lang.Double.isInfinite(x)) { 				return x;} else { 				return java.lang.Double.NaN;}}} 	/**
	    	                                                                      		      			                                                                                                                                                           			                                      				         ^]
Ingredient counter is Zero
---Undoing: gnrtn(240): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return 1 ` -topatch--> `int result = 1` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (479(f=1.0), 480(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (479(f=1.0), )
----------Running generation: 241, population size: 1

***** Generation 241 : 0
**Parent Variant: [Variant id: 481, #gens: 186, #ops: 0, parent:-]

--Child created id: 482
--Creating new operations for variant [Variant id: 482, #gens: 186, #ops: 0, parent:481]
---analyzing modificationPoint position: 31
---modifPoint 0 not mutation generated in  double minValue = 0
---analyzing modificationPoint position: 54
location: AbstractLinearOptimizer.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.goalType = goalType ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 482, #gens: 185, #ops: 1, parent:481] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 482
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-482/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 14] ,[]
-Valid?: |false|8|14|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(241): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.goalType = goalType ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (481(f=1.0), 482(f=8.0), )
Selected to next generation: IDs2--> (481(f=1.0), )
----------Running generation: 242, population size: 1

***** Generation 242 : 0
**Parent Variant: [Variant id: 483, #gens: 186, #ops: 0, parent:-]

--Child created id: 484
--Creating new operations for variant [Variant id: 484, #gens: 186, #ops: 0, parent:483]
---analyzing modificationPoint position: 25
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [this.numArtificialVariables]
--> var from patch: this.numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java170
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack  ` -topatch--> `return this.numArtificialVariables > 0 ? 2 : 1` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 170, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack  ` -topatch--> `return this.numArtificialVariables > 0 ? 2 : 1` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 484, #gens: 187, #ops: 1, parent:483] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 484, errors: [SimplexTableau.java:226: error: incompatible types: int cannot be converted to double[][]
				return this.numArtificialVariables > 0 ? 2 : 1;} else if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ) { 				matrix[row][getSlackVariableOffset() + (slackVar++)] = -1;// excess
				                                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(242): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack  ` -topatch--> `return this.numArtificialVariables > 0 ? 2 : 1` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (483(f=1.0), 484(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (483(f=1.0), )
----------Running generation: 243, population size: 1

***** Generation 243 : 0
**Parent Variant: [Variant id: 485, #gens: 186, #ops: 0, parent:-]

--Child created id: 486
--Creating new operations for variant [Variant id: 486, #gens: 186, #ops: 0, parent:485]
---analyzing modificationPoint position: 53
location: AbstractLinearOptimizer.java99
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 486, #gens: 185, #ops: 1, parent:485] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 486
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-486/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(243): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (485(f=1.0), 486(f=14.0), )
Selected to next generation: IDs2--> (485(f=1.0), )
----------Running generation: 244, population size: 1

***** Generation 244 : 0
**Parent Variant: [Variant id: 487, #gens: 186, #ops: 0, parent:-]

--Child created id: 488
--Creating new operations for variant [Variant id: 488, #gens: 186, #ops: 0, parent:487]
---analyzing modificationPoint position: 131
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch []
location: SimplexTableau.java151
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int artificialVar = 0 ` -topatch--> `double[] coefficients = new double[getOriginalNumDecisionVariables()]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 151, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int artificialVar = 0 ` -topatch--> `double[] coefficients = new double[getOriginalNumDecisionVariables()]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 488, #gens: 186, #ops: 1, parent:487] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 488, errors: [SimplexTableau.java:413: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:413: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:413: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:413: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:413: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:413: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:415: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:415: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:415: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:415: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:415: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:415: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:415: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:417: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:417: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:418: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:419: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:419: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:420: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:420: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:421: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:422: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:422: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:422: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:423: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:423: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:423: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:423: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:423: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:423: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:436: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:436: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:436: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:436: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:436: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:436: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:440: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:440: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:444: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:444: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:452: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:452: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:452: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:452: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:461: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:461: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:461: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:461: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:461: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:465: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:465: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:469: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:469: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:473: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:473: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:478: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:478: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:488: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:488: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:493: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:493: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:497: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:497: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:501: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:501: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:505: error: illegal start of expression
	 */ 	protected final double[][] getData() {
	    	^, SimplexTableau.java:505: error: ';' expected
	 */ 	protected final double[][] getData() {
	    	                                  ^, SimplexTableau.java:511: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) {
	    	                    	                     ^, SimplexTableau.java:511: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) {
	    	                    	                                            ^, SimplexTableau.java:542: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() {
	    	                    	                   ^, SimplexTableau.java:560: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	^, SimplexTableau.java:560: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	        ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                        ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                       ^, SimplexTableau.java:560: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                                       ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                                                   ^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	        ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                     ^, SimplexTableau.java:572: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                              ^, SimplexTableau.java:572: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                                                   ^, SimplexTableau.java:573: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(244): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int artificialVar = 0 ` -topatch--> `double[] coefficients = new double[getOriginalNumDecisionVariables()]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (487(f=1.0), 488(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (487(f=1.0), )
----------Running generation: 245, population size: 1

***** Generation 245 : 0
**Parent Variant: [Variant id: 489, #gens: 186, #ops: 0, parent:-]

--Child created id: 490
--Creating new operations for variant [Variant id: 490, #gens: 186, #ops: 0, parent:489]
---analyzing modificationPoint position: 72
---modifPoint 0 not mutation generated in  return numArtificialVariables
---analyzing modificationPoint position: 134
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [numDecisionVariables, numSlackVariables]
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numSlackVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java154
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int row = getNumObjectiveFunctions() + i ` -topatch--> `return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 154, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int row = getNumObjectiveFunctions() + i ` -topatch--> `return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 490, #gens: 187, #ops: 1, parent:489] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 490, errors: [SimplexTableau.java:514: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:514: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:514: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:514: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:514: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:514: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:516: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:516: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:516: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:516: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:516: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:516: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:516: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:518: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:518: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:519: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:520: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:520: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:521: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:521: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:522: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:523: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:523: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:523: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:524: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:524: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:524: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:524: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:524: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:524: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:537: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:537: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:537: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:537: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:537: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:537: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:541: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:541: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:545: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:545: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:553: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:553: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:553: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:553: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:562: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:562: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:562: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:562: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:562: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:566: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:566: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:570: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:570: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:574: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:574: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:579: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:579: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:589: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:589: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:594: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:594: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:598: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:598: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:602: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:602: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:606: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:606: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:608: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:608: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:611: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:618: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:618: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:618: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:618: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:618: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:618: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:627: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:627: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:627: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:627: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:627: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:627: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:627: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:627: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:627: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(245): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int row = getNumObjectiveFunctions() + i ` -topatch--> `return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (489(f=1.0), 490(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (489(f=1.0), )
----------Running generation: 246, population size: 1

***** Generation 246 : 0
**Parent Variant: [Variant id: 491, #gens: 186, #ops: 0, parent:-]

--Child created id: 492
--Creating new operations for variant [Variant id: 492, #gens: 186, #ops: 0, parent:491]
---analyzing modificationPoint position: 13
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>()
---analyzing modificationPoint position: 139
Templates availables14
Attempts Base Ingredients  1 total 14
vars from patch [constraint, org.apache.commons.math.optimization.linear.Relationship.GEQ, matrix, row, slackVar]
--> var from patch: constraint spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: org.apache.commons.math.optimization.linear.Relationship.GEQ spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: matrix spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: row spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: slackVar spoon.support.reflect.code.CtVariableWriteImpl
location: SimplexTableau.java169
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `// slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...] ` -topatch--> `if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ) { [...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 169, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `// slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...] ` -topatch--> `if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ) { [...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 492, #gens: 186, #ops: 1, parent:491] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 492
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-492/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(246): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `// slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...] ` -topatch--> `if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ) { [...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (491(f=1.0), 492(f=1.0), )
Selected to next generation: IDs2--> (491(f=1.0), )
----------Running generation: 247, population size: 1

***** Generation 247 : 0
**Parent Variant: [Variant id: 493, #gens: 186, #ops: 0, parent:-]

--Child created id: 494
--Creating new operations for variant [Variant id: 494, #gens: 186, #ops: 0, parent:493]
---analyzing modificationPoint position: 37
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java64
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `minPos = i ` -topatch--> `tableau.discardArtificialVariables()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 64, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `minPos = i ` -topatch--> `tableau.discardArtificialVariables()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 494, #gens: 187, #ops: 1, parent:493] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 494
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-494/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 10, was successful: false, cases executed: 14] ,[]
-Valid?: |false|10|14|[]|, fitness 10.0
Ingredient counter is Zero
---Undoing: gnrtn(247): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `minPos = i ` -topatch--> `tableau.discardArtificialVariables()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (493(f=1.0), 494(f=10.0), )
Selected to next generation: IDs2--> (493(f=1.0), )
----------Running generation: 248, population size: 1

***** Generation 248 : 0
**Parent Variant: [Variant id: 495, #gens: 186, #ops: 0, parent:-]

--Child created id: 496
--Creating new operations for variant [Variant id: 496, #gens: 186, #ops: 0, parent:495]
---analyzing modificationPoint position: 17
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 0 not mutation generated in  basicRows.add(basicRow)
---analyzing modificationPoint position: 148
---modifPoint 1 not mutation generated in  return normalized
---analyzing modificationPoint position: 80
Templates availables31
Attempts Base Ingredients  1 total 31
vars from patch []
location: SimplexTableau.java433
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return getNumObjectiveFunctions() + numDecisionVariables ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 433, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return getNumObjectiveFunctions() + numDecisionVariables ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 496, #gens: 186, #ops: 1, parent:495] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 496, errors: [SimplexTableau.java:514: error: incompatible types: boolean cannot be converted to int
		return true;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(248): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return getNumObjectiveFunctions() + numDecisionVariables ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (495(f=1.0), 496(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (495(f=1.0), )
----------Running generation: 249, population size: 1

***** Generation 249 : 0
**Parent Variant: [Variant id: 497, #gens: 186, #ops: 0, parent:-]

--Child created id: 498
--Creating new operations for variant [Variant id: 498, #gens: 186, #ops: 0, parent:497]
---analyzing modificationPoint position: 46
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java83
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double ratio = rhs / entry ` -topatch--> `double minValue = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 83, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double ratio = rhs / entry ` -topatch--> `double minValue = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 498, #gens: 187, #ops: 1, parent:497] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 498
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-498/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(249): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double ratio = rhs / entry ` -topatch--> `double minValue = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (497(f=1.0), 498(f=1.0), )
Selected to next generation: IDs2--> (497(f=1.0), )
----------Running generation: 250, population size: 1

***** Generation 250 : 0
**Parent Variant: [Variant id: 499, #gens: 186, #ops: 0, parent:-]

--Child created id: 500
--Creating new operations for variant [Variant id: 500, #gens: 186, #ops: 0, parent:499]
---analyzing modificationPoint position: 114
location: SimplexTableau.java109
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 500, #gens: 185, #ops: 1, parent:499] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 500, errors: [SimplexTableau.java:117: error: variable numDecisionVariables might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(250): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (499(f=1.0), 500(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (499(f=1.0), )
----------Running generation: 251, population size: 1

***** Generation 251 : 0
**Parent Variant: [Variant id: 501, #gens: 186, #ops: 0, parent:-]

--Child created id: 502
--Creating new operations for variant [Variant id: 502, #gens: 186, #ops: 0, parent:501]
---analyzing modificationPoint position: 117
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [numDecisionVariables, numSlackVariables]
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numSlackVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java114
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(createTableau(goalType == org[...] ` -topatch--> `return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 114, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(createTableau(goalType == org[...] ` -topatch--> `return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 502, #gens: 187, #ops: 1, parent:501] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 502, errors: [SimplexTableau.java:454: error: illegal start of type
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		^, SimplexTableau.java:454: error: ';' expected
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		      ^, SimplexTableau.java:458: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	       ^, SimplexTableau.java:458: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	                               		                                          ^, SimplexTableau.java:462: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	       ^, SimplexTableau.java:462: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		^, SimplexTableau.java:462: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                      ^, SimplexTableau.java:462: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                        		                  ^, SimplexTableau.java:468: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                     ^, SimplexTableau.java:468: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                         ^, SimplexTableau.java:468: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                           		                                                                                                                                                           ^, SimplexTableau.java:472: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                ^, SimplexTableau.java:472: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                                                 		                                               ^, SimplexTableau.java:478: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                          ^, SimplexTableau.java:478: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		^, SimplexTableau.java:478: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		           ^, SimplexTableau.java:478: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				        ^, SimplexTableau.java:478: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				           		             ^, SimplexTableau.java:481: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                            ^, SimplexTableau.java:481: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                    ^, SimplexTableau.java:481: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			^, SimplexTableau.java:481: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			                         ^, SimplexTableau.java:487: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                         ^, SimplexTableau.java:487: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		^, SimplexTableau.java:487: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                   ^, SimplexTableau.java:487: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                     		           ^, SimplexTableau.java:493: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                            ^, SimplexTableau.java:493: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                                       		                              ^, SimplexTableau.java:499: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                       ^, SimplexTableau.java:499: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                                  		                               ^, SimplexTableau.java:505: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                            ^, SimplexTableau.java:505: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		^, SimplexTableau.java:505: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		^, SimplexTableau.java:505: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                    ^, SimplexTableau.java:505: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                     ^, SimplexTableau.java:505: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				        ^, SimplexTableau.java:505: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				            ^, SimplexTableau.java:505: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				               		           ^, SimplexTableau.java:507: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			       ^, SimplexTableau.java:507: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		^, SimplexTableau.java:507: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		^, SimplexTableau.java:507: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		^, SimplexTableau.java:507: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                ^, SimplexTableau.java:507: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                            ^, SimplexTableau.java:507: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                ^, SimplexTableau.java:507: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                 ^, SimplexTableau.java:507: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                      ^, SimplexTableau.java:507: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                       ^, SimplexTableau.java:507: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		^, SimplexTableau.java:507: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		                                ^, SimplexTableau.java:516: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                             ^, SimplexTableau.java:516: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                 ^, SimplexTableau.java:516: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                      ^, SimplexTableau.java:516: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:520: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		^, SimplexTableau.java:520: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		^, SimplexTableau.java:520: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		^, SimplexTableau.java:520: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		^, SimplexTableau.java:520: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                ^, SimplexTableau.java:520: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                         ^, SimplexTableau.java:520: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                                			                                                                                     			^, SimplexTableau.java:527: error: class, interface, or enum expected
	 * @param dividendRow
	          ^, SimplexTableau.java:529: error: class, interface, or enum expected
	 * @param divisor
	          ^, SimplexTableau.java:531: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                               ^, SimplexTableau.java:531: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                      ^, SimplexTableau.java:531: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                ^, SimplexTableau.java:531: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                ^, SimplexTableau.java:531: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                       			                                                                             ^, SimplexTableau.java:544: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                 ^, SimplexTableau.java:544: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                       ^, SimplexTableau.java:544: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                ^, SimplexTableau.java:544: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                ^, SimplexTableau.java:544: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                ^, SimplexTableau.java:544: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                       			                                                                                                                   ^, SimplexTableau.java:548: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                ^, SimplexTableau.java:548: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                                 		                                    ^, SimplexTableau.java:552: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                ^, SimplexTableau.java:552: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                                  		                                 ^, SimplexTableau.java:560: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                ^, SimplexTableau.java:560: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                      ^, SimplexTableau.java:560: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                     ^, SimplexTableau.java:560: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                                   		                                     ^, SimplexTableau.java:569: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                ^, SimplexTableau.java:569: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                    ^, SimplexTableau.java:569: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                   ^, SimplexTableau.java:569: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                     ^, SimplexTableau.java:569: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                     		                                     ^, SimplexTableau.java:573: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:573: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                               		                                                         ^, SimplexTableau.java:577: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                ^, SimplexTableau.java:577: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                                    		                                                                               ^, SimplexTableau.java:581: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                ^, SimplexTableau.java:581: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                     		                      ^, SimplexTableau.java:586: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                ^, SimplexTableau.java:586: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                          		                                                                      ^, SimplexTableau.java:596: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:596: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                                		                            ^, SimplexTableau.java:601: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                ^, SimplexTableau.java:601: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                        		                                                                               ^, SimplexTableau.java:605: error: class, interface, or enum expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(251): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(createTableau(goalType == org[...] ` -topatch--> `return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (501(f=1.0), 502(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (501(f=1.0), )
----------Running generation: 252, population size: 1

***** Generation 252 : 0
**Parent Variant: [Variant id: 503, #gens: 186, #ops: 0, parent:-]

--Child created id: 504
--Creating new operations for variant [Variant id: 504, #gens: 186, #ops: 0, parent:503]
---analyzing modificationPoint position: 150
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients()[...]
---analyzing modificationPoint position: 45
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 1 not mutation generated in  if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 	final double ratio [...]
---analyzing modificationPoint position: 144
Templates availables31
Attempts Base Ingredients  1 total 31
vars from patch [numDecisionVariables]
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java190
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return f.getCoefficients().getDimension() ` -topatch--> `return getNumObjectiveFunctions() + numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 190, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return f.getCoefficients().getDimension() ` -topatch--> `return getNumObjectiveFunctions() + numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 504, #gens: 186, #ops: 1, parent:503] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 504, errors: [SimplexTableau.java:497: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:497: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:497: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:497: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:497: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:497: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:499: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:499: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:499: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:499: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:499: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:499: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:499: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:501: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:501: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:502: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:503: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:503: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:504: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:504: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:505: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:506: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:506: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:506: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:507: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:507: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:507: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:507: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:507: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:507: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:520: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:520: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:520: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:520: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:520: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:520: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:524: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:524: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:528: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:528: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:536: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:536: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:536: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:536: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:545: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:545: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:545: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:545: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:545: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:549: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:549: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:553: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:553: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:557: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:557: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:562: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:562: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:572: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:577: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:577: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:581: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:581: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:585: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:585: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:589: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:589: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:591: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:591: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:594: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:601: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:601: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:601: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:601: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:601: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:601: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:610: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:610: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:610: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:610: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:610: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:610: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:610: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:610: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:610: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(252): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return f.getCoefficients().getDimension() ` -topatch--> `return getNumObjectiveFunctions() + numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (503(f=1.0), 504(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (503(f=1.0), )
----------Running generation: 253, population size: 1

***** Generation 253 : 0
**Parent Variant: [Variant id: 505, #gens: 186, #ops: 0, parent:-]

--Child created id: 506
--Creating new operations for variant [Variant id: 506, #gens: 186, #ops: 0, parent:505]
---analyzing modificationPoint position: 34
location: AbstractLinearOptimizer.java62
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setMaxIterations(org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.DEFAULT_MAX_ITE[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 506, #gens: 185, #ops: 1, parent:505] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 506
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-506/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(253): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setMaxIterations(org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.DEFAULT_MAX_ITE[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (505(f=1.0), 506(f=14.0), )
Selected to next generation: IDs2--> (505(f=1.0), )
----------Running generation: 254, population size: 1

***** Generation 254 : 0
**Parent Variant: [Variant id: 507, #gens: 186, #ops: 0, parent:-]

--Child created id: 508
--Creating new operations for variant [Variant id: 508, #gens: 186, #ops: 0, parent:507]
---analyzing modificationPoint position: 141
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 0 not mutation generated in  // artificial variables if ((constraint.getRelationship() == org.apache.commons.math.optimization.li[...]
---analyzing modificationPoint position: 81
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 1 not mutation generated in  checkVectorDimensions(v.length)
---analyzing modificationPoint position: 87
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 2 not mutation generated in  java.lang.Integer row = null
---analyzing modificationPoint position: 57
Templates availables7
Attempts Base Ingredients  1 total 7
vars from patch [org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON]
--> var from patch: org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java103
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `incrementIterationsCounter() ` -topatch--> `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 103, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `incrementIterationsCounter() ` -topatch--> `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 508, #gens: 186, #ops: 1, parent:507] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 508, errors: [SimplexSolver.java:103: error: call to this must be first statement in constructor
	 */ 	protected void doIteration(final org.apache.commons.math.optimization.linear.SimplexTableau tableau) throws org.apache.commons.math.optimization.OptimizationException { 		this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON);
	    	                                                                                                                                                                         		    ^]
Ingredient counter is Zero
---Undoing: gnrtn(254): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `incrementIterationsCounter() ` -topatch--> `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (507(f=1.0), 508(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (507(f=1.0), )
----------Running generation: 255, population size: 1

***** Generation 255 : 0
**Parent Variant: [Variant id: 509, #gens: 186, #ops: 0, parent:-]

--Child created id: 510
--Creating new operations for variant [Variant id: 510, #gens: 186, #ops: 0, parent:509]
---analyzing modificationPoint position: 78
---modifPoint 0 not mutation generated in  return getWidth() - 1
---analyzing modificationPoint position: 109
location: LinearConstraint.java102
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.value = value ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 510, #gens: 185, #ops: 1, parent:509] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 510, errors: [LinearConstraint.java:104: error: variable value might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(255): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.value = value ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (509(f=1.0), 510(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (509(f=1.0), )
----------Running generation: 256, population size: 1

***** Generation 256 : 0
**Parent Variant: [Variant id: 511, #gens: 186, #ops: 0, parent:-]

--Child created id: 512
--Creating new operations for variant [Variant id: 512, #gens: 186, #ops: 0, parent:511]
---analyzing modificationPoint position: 103
location: LinearObjectiveFunction.java66
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.coefficients = coefficients ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 512, #gens: 185, #ops: 1, parent:511] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 512, errors: [LinearObjectiveFunction.java:69: error: variable coefficients might not have been initialized
	 */ 	public LinearObjectiveFunction(org.apache.commons.math.linear.RealVector coefficients, double constantTerm) { 		this.constantTerm = constantTerm;}
	    	                                                                                                              		                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(256): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.coefficients = coefficients ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (511(f=1.0), 512(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (511(f=1.0), )
----------Running generation: 257, population size: 1

***** Generation 257 : 0
**Parent Variant: [Variant id: 513, #gens: 186, #ops: 0, parent:-]

--Child created id: 514
--Creating new operations for variant [Variant id: 514, #gens: 186, #ops: 0, parent:513]
---analyzing modificationPoint position: 2
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java191
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `doIteration(tableau) ` -topatch--> `tableau.discardArtificialVariables()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 191, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `doIteration(tableau) ` -topatch--> `tableau.discardArtificialVariables()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 514, #gens: 187, #ops: 1, parent:513] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 514
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-514/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(257): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `doIteration(tableau) ` -topatch--> `tableau.discardArtificialVariables()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (513(f=1.0), 514(f=1.0), )
Selected to next generation: IDs2--> (513(f=1.0), )
----------Running generation: 258, population size: 1

***** Generation 258 : 0
**Parent Variant: [Variant id: 515, #gens: 186, #ops: 0, parent:-]

--Child created id: 516
--Creating new operations for variant [Variant id: 516, #gens: 186, #ops: 0, parent:515]
---analyzing modificationPoint position: 18
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 0 not mutation generated in  coefficients[i] =  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -  (restrictToNonNega[...]
---analyzing modificationPoint position: 143
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 1 not mutation generated in  return value
---analyzing modificationPoint position: 98
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 2 not mutation generated in  tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -  (multiple * tableau.getEntry(subt[...]
---analyzing modificationPoint position: 161
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch [point]
--> var from patch: point spoon.support.reflect.code.CtFieldReadImpl
SameName: final 














































double[] point
SameName: final 














































double[] point
Transforming shadowed variable in return point
location: RealPointValuePair.java49
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = point.clone() ` -topatch--> `return point` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.RealPointValuePair line: 49, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = point.clone() ` -topatch--> `return point` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 516, #gens: 187, #ops: 1, parent:515] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 516, errors: [RealPointValuePair.java:80: error: incompatible types: unexpected return value
		return point; 		this.point = point.clone(); 		this.value = value;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(258): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = point.clone() ` -topatch--> `return point` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (515(f=1.0), 516(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (515(f=1.0), )
----------Running generation: 259, population size: 1

***** Generation 259 : 0
**Parent Variant: [Variant id: 517, #gens: 186, #ops: 0, parent:-]

--Child created id: 518
--Creating new operations for variant [Variant id: 518, #gens: 186, #ops: 0, parent:517]
---analyzing modificationPoint position: 143
---modifPoint 0 not mutation generated in  return value
---analyzing modificationPoint position: 80
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  return getNumObjectiveFunctions() + numDecisionVariables
---analyzing modificationPoint position: 117
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 2 not mutation generated in  this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(createTableau(goalType == org[...]
---analyzing modificationPoint position: 151
Templates availables31
Attempts Base Ingredients  1 total 31
vars from patch []
location: SimplexTableau.java225
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return this.numArtificialVariables > 0 ? 2 : 1 ` -topatch--> `return getWidth() - 1` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 225, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return this.numArtificialVariables > 0 ? 2 : 1 ` -topatch--> `return getWidth() - 1` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 518, #gens: 186, #ops: 1, parent:517] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 518, errors: [SimplexTableau.java:499: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:499: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:499: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:499: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:499: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:499: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:501: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:501: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:501: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:501: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:501: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:501: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:501: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:503: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:503: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:504: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:505: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:505: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:506: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:506: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:507: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:508: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:508: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:508: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:509: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:509: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:509: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:509: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:509: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:509: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:522: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:522: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:522: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:522: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:522: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:522: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:526: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:526: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:530: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:530: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:538: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:538: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:538: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:538: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:547: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:547: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:547: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:547: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:547: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:551: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:551: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:555: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:555: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:559: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:559: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:564: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:564: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:574: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:574: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:579: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:579: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:583: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:583: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:587: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:587: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:591: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:591: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:593: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:593: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:596: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:603: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:603: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:603: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:603: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:603: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:603: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:612: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:612: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:612: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:612: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:612: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:612: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:612: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:612: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:612: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(259): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return this.numArtificialVariables > 0 ? 2 : 1 ` -topatch--> `return getWidth() - 1` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (517(f=1.0), 518(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (517(f=1.0), )
----------Running generation: 260, population size: 1

***** Generation 260 : 0
**Parent Variant: [Variant id: 519, #gens: 186, #ops: 0, parent:-]

--Child created id: 520
--Creating new operations for variant [Variant id: 520, #gens: 186, #ops: 0, parent:519]
---analyzing modificationPoint position: 120
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  int width = (((numDecisionVariables + numSlackVariables) +  numArtificialVariables) + getNumObjectiv[...]
---analyzing modificationPoint position: 127
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [matrix, zIndex, objectiveCoefficients]
--> var from patch: matrix spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: zIndex spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: objectiveCoefficients spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java140
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions()) ` -topatch--> `matrix[zIndex][getSlackVariableOffset() - 1] =  org.apache.commons.math.optimization.linear.SimplexT[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 140, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions()) ` -topatch--> `matrix[zIndex][getSlackVariableOffset() - 1] =  org.apache.commons.math.optimization.linear.SimplexT[...]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 520, #gens: 187, #ops: 1, parent:519] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 520
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-520/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 14] ,[]
-Valid?: |false|4|14|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(260): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions()) ` -topatch--> `matrix[zIndex][getSlackVariableOffset() - 1] =  org.apache.commons.math.optimization.linear.SimplexT[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (519(f=1.0), 520(f=4.0), )
Selected to next generation: IDs2--> (519(f=1.0), )
----------Running generation: 261, population size: 1

***** Generation 261 : 0
**Parent Variant: [Variant id: 521, #gens: 186, #ops: 0, parent:-]

--Child created id: 522
--Creating new operations for variant [Variant id: 522, #gens: 186, #ops: 0, parent:521]
---analyzing modificationPoint position: 89
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [numDecisionVariables]
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java293
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = start; i < getHeight(); i++) { 	if (org.apache.commons.math.util.MathUtils.equals(getEn[...] ` -topatch--> `return numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 293, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = start; i < getHeight(); i++) { 	if (org.apache.commons.math.util.MathUtils.equals(getEn[...] ` -topatch--> `return numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 522, #gens: 187, #ops: 1, parent:521] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 522, errors: [SimplexTableau.java:489: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:489: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:489: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:489: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:489: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:489: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:491: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:491: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:491: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:491: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:491: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:491: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:491: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:493: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:493: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:494: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:495: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:495: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:496: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:496: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:497: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:498: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:498: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:498: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:499: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:499: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:499: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:499: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:499: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:499: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:512: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:512: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:512: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:512: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:512: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:512: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:516: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:516: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:520: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:520: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:528: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:528: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:528: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:528: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:537: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:537: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:537: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:537: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:537: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:541: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:541: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:545: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:545: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:549: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:549: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:554: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:554: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:564: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:564: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:569: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:569: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:573: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:573: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:577: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:577: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:581: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:581: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:583: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:583: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:586: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:593: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:593: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:593: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:593: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:593: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:593: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:602: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:602: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:602: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:602: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:602: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:602: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:602: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:602: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:602: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(261): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = start; i < getHeight(); i++) { 	if (org.apache.commons.math.util.MathUtils.equals(getEn[...] ` -topatch--> `return numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (521(f=1.0), 522(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (521(f=1.0), )
----------Running generation: 262, population size: 1

***** Generation 262 : 0
**Parent Variant: [Variant id: 523, #gens: 186, #ops: 0, parent:-]

--Child created id: 524
--Creating new operations for variant [Variant id: 524, #gens: 186, #ops: 0, parent:523]
---analyzing modificationPoint position: 5
Templates availables8
Attempts Base Ingredients  1 total 8
vars from patch [constantTerm, coefficients]
--> var from patch: constantTerm spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: coefficients spoon.support.reflect.code.CtFieldReadImpl
location: LinearObjectiveFunction.java92
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients.dotProduct(point) + constantTerm ` -topatch--> `return java.lang.Double.valueOf(constantTerm).hashCode() ^ coefficients.hashCode()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearObjectiveFunction line: 92, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients.dotProduct(point) + constantTerm ` -topatch--> `return java.lang.Double.valueOf(constantTerm).hashCode() ^ coefficients.hashCode()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 524, #gens: 186, #ops: 1, parent:523] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 524
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-524/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 14] ,[]
-Valid?: |false|12|14|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(262): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients.dotProduct(point) + constantTerm ` -topatch--> `return java.lang.Double.valueOf(constantTerm).hashCode() ^ coefficients.hashCode()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (523(f=1.0), 524(f=12.0), )
Selected to next generation: IDs2--> (523(f=1.0), )
----------Running generation: 263, population size: 1

***** Generation 263 : 0
**Parent Variant: [Variant id: 525, #gens: 186, #ops: 0, parent:-]

--Child created id: 526
--Creating new operations for variant [Variant id: 526, #gens: 186, #ops: 0, parent:525]
---analyzing modificationPoint position: 151
---modifPoint 0 not mutation generated in  return this.numArtificialVariables > 0 ? 2 : 1
---analyzing modificationPoint position: 126
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  org.apache.commons.math.linear.RealVector objectiveCoefficients =  (maximize) ? f.getCoefficients().[...]
---analyzing modificationPoint position: 130
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 2 not mutation generated in  // initialize the constraint rows int slackVar = 0
---analyzing modificationPoint position: 145
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch []
location: SimplexTableau.java198
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...] ` -topatch--> `int count = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 198, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...] ` -topatch--> `int count = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 526, #gens: 186, #ops: 1, parent:525] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 526, errors: [SimplexTableau.java:235: error: cannot find symbol
		int count = 0; 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
		               		                                                                                              			^
  symbol:   variable normalized
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:235: error: cannot find symbol
		int count = 0; 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
		               		                                                                                              			                                        		       ^
  symbol:   variable normalized
  location: class org.apache.commons.math.optimization.linear.SimplexTableau]
Ingredient counter is Zero
---Undoing: gnrtn(263): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...] ` -topatch--> `int count = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (525(f=1.0), 526(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (525(f=1.0), )
----------Running generation: 264, population size: 1

***** Generation 264 : 0
**Parent Variant: [Variant id: 527, #gens: 186, #ops: 0, parent:-]

--Child created id: 528
--Creating new operations for variant [Variant id: 528, #gens: 186, #ops: 0, parent:527]
---analyzing modificationPoint position: 115
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  this.numSlackVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relatio[...]
---analyzing modificationPoint position: 99
---modifPoint 1 not mutation generated in  return tableau.getColumnDimension()
---analyzing modificationPoint position: 2
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java191
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `doIteration(tableau) ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 191, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `doIteration(tableau) ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 528, #gens: 187, #ops: 1, parent:527] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 528
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-528/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(264): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `doIteration(tableau) ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (527(f=1.0), 528(f=1.0), )
Selected to next generation: IDs2--> (527(f=1.0), )
----------Running generation: 265, population size: 1

***** Generation 265 : 0
**Parent Variant: [Variant id: 529, #gens: 186, #ops: 0, parent:-]

--Child created id: 530
--Creating new operations for variant [Variant id: 530, #gens: 186, #ops: 0, parent:529]
---analyzing modificationPoint position: 113
location: SimplexTableau.java108
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.epsilon = epsilon ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 530, #gens: 185, #ops: 1, parent:529] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 530, errors: [SimplexTableau.java:117: error: variable epsilon might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(265): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.epsilon = epsilon ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (529(f=1.0), 530(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (529(f=1.0), )
----------Running generation: 266, population size: 1

***** Generation 266 : 0
**Parent Variant: [Variant id: 531, #gens: 186, #ops: 0, parent:-]

--Child created id: 532
--Creating new operations for variant [Variant id: 532, #gens: 186, #ops: 0, parent:531]
---analyzing modificationPoint position: 160
---modifPoint 0 not mutation generated in  return data.clone()
---analyzing modificationPoint position: 147
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  normalized.add(normalize(constraint))
---analyzing modificationPoint position: 1
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 2 not mutation generated in  return
---analyzing modificationPoint position: 42
Templates availables4
Attempts Base Ingredients  1 total 4
vars from patch [tableau, i, epsilon]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: i spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java79
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 	final double rhs =[...] ` -topatch--> `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 79, pointed element: CtForImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 	final double rhs =[...] ` -topatch--> `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 532, #gens: 186, #ops: 1, parent:531] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 532, errors: [SimplexSolver.java:136: error: incompatible types: boolean cannot be converted to java.lang.Integer
				return false;
				       ^]
Ingredient counter is Zero
---Undoing: gnrtn(266): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 	final double rhs =[...] ` -topatch--> `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (531(f=1.0), 532(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (531(f=1.0), )
----------Running generation: 267, population size: 1

***** Generation 267 : 0
**Parent Variant: [Variant id: 533, #gens: 186, #ops: 0, parent:-]

--Child created id: 534
--Creating new operations for variant [Variant id: 534, #gens: 186, #ops: 0, parent:533]
---analyzing modificationPoint position: 168
location: Array2DRowRealMatrix.java354
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return data[row][column] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 534, #gens: 185, #ops: 1, parent:533] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 534, errors: [Array2DRowRealMatrix.java:361: error: missing return statement
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(267): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return data[row][column] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (533(f=1.0), 534(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (533(f=1.0), )
----------Running generation: 268, population size: 1

***** Generation 268 : 0
**Parent Variant: [Variant id: 535, #gens: 186, #ops: 0, parent:-]

--Child created id: 536
--Creating new operations for variant [Variant id: 536, #gens: 186, #ops: 0, parent:535]
---analyzing modificationPoint position: 61
---modifPoint 0 not mutation generated in  // set the pivot element to 1 double pivotVal = tableau.getEntry(pivotRow, pivotCol)
---analyzing modificationPoint position: 91
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java295
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `row = i ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 295, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `row = i ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 536, #gens: 187, #ops: 1, parent:535] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 536, errors: [SimplexTableau.java:551: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:551: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:551: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:551: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:551: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:551: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:553: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:553: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:553: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:553: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:553: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:553: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:553: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:555: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:555: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:556: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:557: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:557: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:558: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:558: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:559: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:560: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:560: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:560: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:561: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:561: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:561: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:561: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:561: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:561: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:574: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:574: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:574: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:574: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:574: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:574: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:578: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:578: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:582: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:582: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:590: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:590: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:590: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:590: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:599: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:599: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:599: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:599: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:599: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:603: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:603: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:607: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:607: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:611: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:611: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:616: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:616: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:626: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:626: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:631: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:631: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:635: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:635: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:639: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:639: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:643: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:643: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:645: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:645: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:648: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:655: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:655: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:655: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:655: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:655: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:655: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:664: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:664: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:664: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:664: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:664: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:664: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:664: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:664: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:664: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(268): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `row = i ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (535(f=1.0), 536(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (535(f=1.0), )
----------Running generation: 269, population size: 1

***** Generation 269 : 0
**Parent Variant: [Variant id: 537, #gens: 186, #ops: 0, parent:-]

--Child created id: 538
--Creating new operations for variant [Variant id: 538, #gens: 186, #ops: 0, parent:537]
---analyzing modificationPoint position: 53
Templates availables12
Attempts Base Ingredients  1 total 12
Attempts Base Ingredients  2 total 12
vars from patch []
location: AbstractLinearOptimizer.java99
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `// solve the problem return doOptimize()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 99, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `// solve the problem return doOptimize()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 538, #gens: 187, #ops: 1, parent:537] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 538, errors: [AbstractLinearOptimizer.java:107: error: unreachable statement
		return doOptimize(); 		this.goalType = goalType; 		this.restrictToNonNegative = restrictToNonNegative; 		iterations = 0; 		// solve the problem
		                     		^]
Ingredient counter is Zero
---Undoing: gnrtn(269): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `// solve the problem return doOptimize()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (537(f=1.0), 538(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (537(f=1.0), )
----------Running generation: 270, population size: 1

***** Generation 270 : 0
**Parent Variant: [Variant id: 539, #gens: 186, #ops: 0, parent:-]

--Child created id: 540
--Creating new operations for variant [Variant id: 540, #gens: 186, #ops: 0, parent:539]
---analyzing modificationPoint position: 51
---modifPoint 0 not mutation generated in  return minRatioPos
---analyzing modificationPoint position: 1
location: SimplexTableau.java308
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 540, #gens: 185, #ops: 1, parent:539] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 540
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-540/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 14] ,[]
-Valid?: |false|3|14|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(270): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (539(f=1.0), 540(f=3.0), )
Selected to next generation: IDs2--> (539(f=1.0), )
----------Running generation: 271, population size: 1

***** Generation 271 : 0
**Parent Variant: [Variant id: 541, #gens: 186, #ops: 0, parent:-]

--Child created id: 542
--Creating new operations for variant [Variant id: 542, #gens: 186, #ops: 0, parent:541]
---analyzing modificationPoint position: 152
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [this.numArtificialVariables]
--> var from patch: this.numArtificialVariables spoon.support.reflect.code.CtFieldWriteImpl
location: SimplexTableau.java234
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int count = 0 ` -topatch--> `this.numArtificialVariables = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 234, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int count = 0 ` -topatch--> `this.numArtificialVariables = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 542, #gens: 187, #ops: 1, parent:541] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 542, errors: [SimplexTableau.java:364: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:364: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:364: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:364: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:364: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:364: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:366: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:366: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:366: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:366: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:366: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:366: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:366: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:368: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:368: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:369: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:370: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:370: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:371: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:371: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:372: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:373: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:373: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:373: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:374: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}}
	  ^, SimplexTableau.java:374: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}}
	    	^, SimplexTableau.java:374: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}}
	    	          ^, SimplexTableau.java:374: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}}
	    	                        ^, SimplexTableau.java:374: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}}
	    	                                               ^, SimplexTableau.java:374: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}}
	    	                                                                    ^, SimplexTableau.java:389: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	^, SimplexTableau.java:389: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	          ^, SimplexTableau.java:389: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                          ^, SimplexTableau.java:389: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                ^, SimplexTableau.java:389: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                                         ^, SimplexTableau.java:389: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                                                               ^, SimplexTableau.java:398: error: illegal start of expression
	 */ 	protected final int getWidth() {
	    	^, SimplexTableau.java:398: error: ';' expected
	 */ 	protected final int getWidth() {
	    	                            ^, SimplexTableau.java:406: error: illegal start of expression
	 */ 	protected final int getHeight() {
	    	^, SimplexTableau.java:406: error: ';' expected
	 */ 	protected final int getHeight() {
	    	                             ^, SimplexTableau.java:418: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	^, SimplexTableau.java:418: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                               ^, SimplexTableau.java:418: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                              ^, SimplexTableau.java:418: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                                               ^, SimplexTableau.java:428: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	^, SimplexTableau.java:428: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                             ^, SimplexTableau.java:428: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                            ^, SimplexTableau.java:428: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                              ^, SimplexTableau.java:428: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                                                 ^, SimplexTableau.java:433: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() {
	    	^, SimplexTableau.java:433: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() {
	    	                                          ^, SimplexTableau.java:441: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() {
	    	^, SimplexTableau.java:441: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() {
	    	                                               ^, SimplexTableau.java:449: error: illegal start of expression
	 */ 	protected final int getRhsOffset() {
	    	^, SimplexTableau.java:449: error: ';' expected
	 */ 	protected final int getRhsOffset() {
	    	                                ^, SimplexTableau.java:458: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() {
	    	^, SimplexTableau.java:458: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() {
	    	                                                     ^, SimplexTableau.java:472: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() {
	    	^, SimplexTableau.java:472: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() {
	    	                                           ^, SimplexTableau.java:481: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() {
	    	^, SimplexTableau.java:481: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() {
	    	                                                   ^, SimplexTableau.java:489: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() {
	    	^, SimplexTableau.java:489: error: ';' expected
	 */ 	protected final int getNumSlackVariables() {
	    	                                        ^, SimplexTableau.java:497: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() {
	    	^, SimplexTableau.java:497: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() {
	    	                                             ^, SimplexTableau.java:505: error: illegal start of expression
	 */ 	protected final double[][] getData() {
	    	^, SimplexTableau.java:505: error: ';' expected
	 */ 	protected final double[][] getData() {
	    	                                  ^, SimplexTableau.java:511: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) {
	    	                    	                     ^, SimplexTableau.java:511: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) {
	    	                    	                                            ^, SimplexTableau.java:542: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() {
	    	                    	                   ^, SimplexTableau.java:560: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	^, SimplexTableau.java:560: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	        ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                        ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                       ^, SimplexTableau.java:560: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                                       ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                                                   ^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	        ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                     ^, SimplexTableau.java:572: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                              ^, SimplexTableau.java:572: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                                                   ^, SimplexTableau.java:573: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(271): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int count = 0 ` -topatch--> `this.numArtificialVariables = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (541(f=1.0), 542(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (541(f=1.0), )
----------Running generation: 272, population size: 1

***** Generation 272 : 0
**Parent Variant: [Variant id: 543, #gens: 186, #ops: 0, parent:-]

--Child created id: 544
--Creating new operations for variant [Variant id: 544, #gens: 186, #ops: 0, parent:543]
---analyzing modificationPoint position: 52
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [f]
--> var from patch: f spoon.support.reflect.code.CtVariableReadImpl
location: AbstractLinearOptimizer.java98
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `// store linear problem characteristics f = f` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 98, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `// store linear problem characteristics f = f` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 544, #gens: 187, #ops: 1, parent:543] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 544, errors: [AbstractLinearOptimizer.java:100: error: final parameter f may not be assigned
		f = f; 		this.constraints = constraints;
		^]
Ingredient counter is Zero
---Undoing: gnrtn(272): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `// store linear problem characteristics f = f` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (543(f=1.0), 544(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (543(f=1.0), )
----------Running generation: 273, population size: 1

***** Generation 273 : 0
**Parent Variant: [Variant id: 545, #gens: 186, #ops: 0, parent:-]

--Child created id: 546
--Creating new operations for variant [Variant id: 546, #gens: 186, #ops: 0, parent:545]
---analyzing modificationPoint position: 121
---modifPoint 0 not mutation generated in  int height = constraints.size() + getNumObjectiveFunctions()
---analyzing modificationPoint position: 157
location: SimplexTableau.java248
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 546, #gens: 185, #ops: 1, parent:545] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 546
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-546/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 5, was successful: false, cases executed: 14] ,[]
-Valid?: |false|5|14|[]|, fitness 5.0
Ingredient counter is Zero
---Undoing: gnrtn(273): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (545(f=1.0), 546(f=5.0), )
Selected to next generation: IDs2--> (545(f=1.0), )
----------Running generation: 274, population size: 1

***** Generation 274 : 0
**Parent Variant: [Variant id: 547, #gens: 186, #ops: 0, parent:-]

--Child created id: 548
--Creating new operations for variant [Variant id: 548, #gens: 186, #ops: 0, parent:547]
---analyzing modificationPoint position: 181
Templates availables120
Attempts Base Ingredients  1 total 120
vars from patch []
location: Array2DRowRealMatrix.java341
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `java.lang.System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols) ` -topatch--> `final int nRows = this.getRowDimension()` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.linear.Array2DRowRealMatrix line: 341, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `java.lang.System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols) ` -topatch--> `final int nRows = this.getRowDimension()` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 548, #gens: 187, #ops: 1, parent:547] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 548, errors: [Array2DRowRealMatrix.java:341: error: variable nRows is already defined in method setSubMatrix(double[][],int,int)
				} 				final int nRows = this.getRowDimension();
				  				          ^]
Ingredient counter is Zero
---Undoing: gnrtn(274): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `java.lang.System.arraycopy(subMatrix[i], 0, data[i + row], column, nCols) ` -topatch--> `final int nRows = this.getRowDimension()` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (547(f=1.0), 548(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (547(f=1.0), )
----------Running generation: 275, population size: 1

***** Generation 275 : 0
**Parent Variant: [Variant id: 549, #gens: 186, #ops: 0, parent:-]

--Child created id: 550
--Creating new operations for variant [Variant id: 550, #gens: 186, #ops: 0, parent:549]
---analyzing modificationPoint position: 88
---modifPoint 0 not mutation generated in  int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0
---analyzing modificationPoint position: 146
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 	norma[...]
---analyzing modificationPoint position: 48
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 2 not mutation generated in  minRatio = ratio
---analyzing modificationPoint position: 124
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 3 not mutation generated in  int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1
---analyzing modificationPoint position: 47
Templates availables10
Attempts Base Ingredients  1 total 10
vars from patch [tableau, epsilon]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java84
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; } ` -topatch--> `// if W is not zero then we have no feasible solution if (!org.apache.commons.math.util.MathUtils.eq[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 84, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; } ` -topatch--> `// if W is not zero then we have no feasible solution if (!org.apache.commons.math.util.MathUtils.eq[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 550, #gens: 186, #ops: 1, parent:549] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 550, errors: [SimplexSolver.java:179: error: unreported exception org.apache.commons.math.optimization.linear.NoFeasibleSolutionException; must be caught or declared to be thrown
					throw new org.apache.commons.math.optimization.linear.NoFeasibleSolutionException();
					^]
Ingredient counter is Zero
---Undoing: gnrtn(275): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; } ` -topatch--> `// if W is not zero then we have no feasible solution if (!org.apache.commons.math.util.MathUtils.eq[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (549(f=1.0), 550(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (549(f=1.0), )
----------Running generation: 276, population size: 1

***** Generation 276 : 0
**Parent Variant: [Variant id: 551, #gens: 186, #ops: 0, parent:-]

--Child created id: 552
--Creating new operations for variant [Variant id: 552, #gens: 186, #ops: 0, parent:551]
---analyzing modificationPoint position: 8
---modifPoint 0 not mutation generated in  return tableau.getSolution()
---analyzing modificationPoint position: 139
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [numDecisionVariables, numSlackVariables]
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numSlackVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java169
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `// slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...] ` -topatch--> `return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 169, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `// slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...] ` -topatch--> `return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 552, #gens: 187, #ops: 1, parent:551] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 552, errors: [SimplexTableau.java:513: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:513: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:513: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:513: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:513: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:513: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:515: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:515: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:515: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:515: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:515: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:515: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:515: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:517: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:517: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:518: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:519: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:519: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:520: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:520: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:521: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:522: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:522: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:522: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:523: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:523: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:523: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:523: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:523: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:523: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:536: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:536: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:536: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:536: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:536: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:536: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:540: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:540: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:544: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:544: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:552: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:552: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:552: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:552: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:561: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:561: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:561: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:561: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:561: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:565: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:565: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:569: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:569: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:573: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:573: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:578: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:578: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:588: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:588: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:593: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:593: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:597: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:597: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:601: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:601: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:605: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:605: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:607: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:607: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:610: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:617: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:617: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:617: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:617: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:617: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:617: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:626: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:626: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:626: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:626: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:626: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:626: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:626: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:626: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:626: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(276): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `// slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...] ` -topatch--> `return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (551(f=1.0), 552(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (551(f=1.0), )
----------Running generation: 277, population size: 1

***** Generation 277 : 0
**Parent Variant: [Variant id: 553, #gens: 186, #ops: 0, parent:-]

--Child created id: 554
--Creating new operations for variant [Variant id: 554, #gens: 186, #ops: 0, parent:553]
---analyzing modificationPoint position: 13
Templates availables24
Attempts Base Ingredients  1 total 24
---modifPoint 0 not mutation generated in  java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>()
---analyzing modificationPoint position: 21
---modifPoint 1 not mutation generated in  return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1
---analyzing modificationPoint position: 136
location: SimplexTableau.java160
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// x- if (!restrictToNonNegative) { 	matrix[row][getSlackVariableOffset() - 1] =  	org.apache.common[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 554, #gens: 185, #ops: 1, parent:553] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 554
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-554/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 14] ,[]
-Valid?: |false|3|14|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(277): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// x- if (!restrictToNonNegative) { 	matrix[row][getSlackVariableOffset() - 1] =  	org.apache.common[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (553(f=1.0), 554(f=3.0), )
Selected to next generation: IDs2--> (553(f=1.0), )
----------Running generation: 278, population size: 1

***** Generation 278 : 0
**Parent Variant: [Variant id: 555, #gens: 186, #ops: 0, parent:-]

--Child created id: 556
--Creating new operations for variant [Variant id: 556, #gens: 186, #ops: 0, parent:555]
---analyzing modificationPoint position: 95
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 0 not mutation generated in  out[i] = data[i] * d
---analyzing modificationPoint position: 41
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 1 not mutation generated in  java.lang.Integer minRatioPos = null
---analyzing modificationPoint position: 68
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 2 not mutation generated in  final org.apache.commons.math.optimization.linear.SimplexTableau tableau =  new org.apache.commons.m[...]
---analyzing modificationPoint position: 155
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 3 not mutation generated in  ++count
---analyzing modificationPoint position: 135
location: SimplexTableau.java157
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `// decision variable coefficients copyArray(constraint.getCoefficients().getData(), matrix[row], 1) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 556, #gens: 185, #ops: 1, parent:555] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 556
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-556/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 14] ,[]
-Valid?: |false|13|14|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(278): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `// decision variable coefficients copyArray(constraint.getCoefficients().getData(), matrix[row], 1) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (555(f=1.0), 556(f=13.0), )
Selected to next generation: IDs2--> (555(f=1.0), )
----------Running generation: 279, population size: 1

***** Generation 279 : 0
**Parent Variant: [Variant id: 557, #gens: 186, #ops: 0, parent:-]

--Child created id: 558
--Creating new operations for variant [Variant id: 558, #gens: 186, #ops: 0, parent:557]
---analyzing modificationPoint position: 145
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [this.numArtificialVariables]
--> var from patch: this.numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java198
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...] ` -topatch--> `return this.numArtificialVariables > 0 ? 2 : 1` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 198, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...] ` -topatch--> `return this.numArtificialVariables > 0 ? 2 : 1` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 558, #gens: 187, #ops: 1, parent:557] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 558, errors: [SimplexTableau.java:226: error: incompatible types: int cannot be converted to java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint>
		return this.numArtificialVariables > 0 ? 2 : 1; 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
		                                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(279): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...] ` -topatch--> `return this.numArtificialVariables > 0 ? 2 : 1` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (557(f=1.0), 558(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (557(f=1.0), )
----------Running generation: 280, population size: 1

***** Generation 280 : 0
**Parent Variant: [Variant id: 559, #gens: 186, #ops: 0, parent:-]

--Child created id: 560
--Creating new operations for variant [Variant id: 560, #gens: 186, #ops: 0, parent:559]
---analyzing modificationPoint position: 55
location: AbstractLinearOptimizer.java101
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 560, #gens: 185, #ops: 1, parent:559] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 560
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-560/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 14] ,[]
-Valid?: |false|4|14|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(280): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (559(f=1.0), 560(f=4.0), )
Selected to next generation: IDs2--> (559(f=1.0), )
----------Running generation: 281, population size: 1

***** Generation 281 : 0
**Parent Variant: [Variant id: 561, #gens: 186, #ops: 0, parent:-]

--Child created id: 562
--Creating new operations for variant [Variant id: 562, #gens: 186, #ops: 0, parent:561]
---analyzing modificationPoint position: 20
---modifPoint 0 not mutation generated in  return getNumObjectiveFunctions() + getOriginalNumDecisionVariables()
---analyzing modificationPoint position: 91
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java295
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `row = i ` -topatch--> `int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 295, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `row = i ` -topatch--> `int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 562, #gens: 187, #ops: 1, parent:561] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 562
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-562/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(281): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `row = i ` -topatch--> `int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (561(f=1.0), 562(f=1.0), )
Selected to next generation: IDs2--> (561(f=1.0), )
----------Running generation: 282, population size: 1

***** Generation 282 : 0
**Parent Variant: [Variant id: 563, #gens: 186, #ops: 0, parent:-]

--Child created id: 564
--Creating new operations for variant [Variant id: 564, #gens: 186, #ops: 0, parent:563]
---analyzing modificationPoint position: 119
location: SimplexTableau.java126
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// create a matrix of the correct size java.util.List<org.apache.commons.math.optimization.linear.Li[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 564, #gens: 185, #ops: 1, parent:563] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 564, errors: [SimplexTableau.java:154: error: cannot find symbol
			org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i);
			                                                                                     ^
  symbol:   method get(int)
  location: variable constraints of type java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint>]
Ingredient counter is Zero
---Undoing: gnrtn(282): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// create a matrix of the correct size java.util.List<org.apache.commons.math.optimization.linear.Li[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (563(f=1.0), 564(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (563(f=1.0), )
----------Running generation: 283, population size: 1

***** Generation 283 : 0
**Parent Variant: [Variant id: 565, #gens: 186, #ops: 0, parent:-]

--Child created id: 566
--Creating new operations for variant [Variant id: 566, #gens: 186, #ops: 0, parent:565]
---analyzing modificationPoint position: 91
Templates availables25
Attempts Base Ingredients  1 total 25
vars from patch [this.numDecisionVariables, restrictToNonNegative]
--> var from patch: this.numDecisionVariables spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java295
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `row = i ` -topatch--> `this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 295, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `row = i ` -topatch--> `this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 566, #gens: 186, #ops: 1, parent:565] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 566, errors: [SimplexTableau.java:295: error: cannot assign a value to final variable numDecisionVariables
			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1);
			                                                                                                      				    ^]
Ingredient counter is Zero
---Undoing: gnrtn(283): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `row = i ` -topatch--> `this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (565(f=1.0), 566(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (565(f=1.0), )
----------Running generation: 284, population size: 1

***** Generation 284 : 0
**Parent Variant: [Variant id: 567, #gens: 186, #ops: 0, parent:-]

--Child created id: 568
--Creating new operations for variant [Variant id: 568, #gens: 186, #ops: 0, parent:567]
---analyzing modificationPoint position: 24
location: SimplexSolver.java151
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { 	ret[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 568, #gens: 185, #ops: 1, parent:567] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 568
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-568/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 14] ,[]
-Valid?: |false|8|14|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(284): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { 	ret[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (567(f=1.0), 568(f=8.0), )
Selected to next generation: IDs2--> (567(f=1.0), )
----------Running generation: 285, population size: 1

***** Generation 285 : 0
**Parent Variant: [Variant id: 569, #gens: 186, #ops: 0, parent:-]

--Child created id: 570
--Creating new operations for variant [Variant id: 570, #gens: 186, #ops: 0, parent:569]
---analyzing modificationPoint position: 116
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...]
---analyzing modificationPoint position: 75
Templates availables259
Attempts Base Ingredients  1 total 259
vars from patch []
location: MathUtils.java369
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (x < y) { 	return -1; } ` -topatch--> `return 1` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.util.MathUtils line: 369, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (x < y) { 	return -1; } ` -topatch--> `return 1` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 570, #gens: 187, #ops: 1, parent:569] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 570, errors: [MathUtils.java:370: error: unreachable statement
		} else { 			return 1; 			if (x < y) {
		         			          			^]
Ingredient counter is Zero
---Undoing: gnrtn(285): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (x < y) { 	return -1; } ` -topatch--> `return 1` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (569(f=1.0), 570(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (569(f=1.0), )
----------Running generation: 286, population size: 1

***** Generation 286 : 0
**Parent Variant: [Variant id: 571, #gens: 186, #ops: 0, parent:-]

--Child created id: 572
--Creating new operations for variant [Variant id: 572, #gens: 186, #ops: 0, parent:571]
---analyzing modificationPoint position: 137
Templates availables25
Attempts Base Ingredients  1 total 25
vars from patch [this.numDecisionVariables, restrictToNonNegative]
--> var from patch: this.numDecisionVariables spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java166
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// RHS matrix[row][width - 1] = constraint.getValue() ` -topatch--> `this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 166, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// RHS matrix[row][width - 1] = constraint.getValue() ` -topatch--> `this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 572, #gens: 186, #ops: 1, parent:571] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 572, errors: [SimplexTableau.java:164: error: cannot assign a value to final variable numDecisionVariables
			} 			this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1);
			  			    ^]
Ingredient counter is Zero
---Undoing: gnrtn(286): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// RHS matrix[row][width - 1] = constraint.getValue() ` -topatch--> `this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (571(f=1.0), 572(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (571(f=1.0), )
----------Running generation: 287, population size: 1

***** Generation 287 : 0
**Parent Variant: [Variant id: 573, #gens: 186, #ops: 0, parent:-]

--Child created id: 574
--Creating new operations for variant [Variant id: 574, #gens: 186, #ops: 0, parent:573]
---analyzing modificationPoint position: 69
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [this.numArtificialVariables]
--> var from patch: this.numArtificialVariables spoon.support.reflect.code.CtFieldWriteImpl
location: SimplexTableau.java307
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (numArtificialVariables == 0) { 	return; } ` -topatch--> `this.numArtificialVariables = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 307, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (numArtificialVariables == 0) { 	return; } ` -topatch--> `this.numArtificialVariables = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 574, #gens: 187, #ops: 1, parent:573] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 574
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-574/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 10, was successful: false, cases executed: 14] ,[]
-Valid?: |false|10|14|[]|, fitness 10.0
Ingredient counter is Zero
---Undoing: gnrtn(287): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (numArtificialVariables == 0) { 	return; } ` -topatch--> `this.numArtificialVariables = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (573(f=1.0), 574(f=10.0), )
Selected to next generation: IDs2--> (573(f=1.0), )
----------Running generation: 288, population size: 1

***** Generation 288 : 0
**Parent Variant: [Variant id: 575, #gens: 186, #ops: 0, parent:-]

--Child created id: 576
--Creating new operations for variant [Variant id: 576, #gens: 186, #ops: 0, parent:575]
---analyzing modificationPoint position: 7
---modifPoint 0 not mutation generated in  return true
---analyzing modificationPoint position: 76
Templates availables259
Attempts Base Ingredients  1 total 259
---modifPoint 1 not mutation generated in  return -1
---analyzing modificationPoint position: 19
Templates availables31
Attempts Base Ingredients  1 total 31
vars from patch []
location: SimplexTableau.java357
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coeffici[...] ` -topatch--> `return getWidth() - 1` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 357, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coeffici[...] ` -topatch--> `return getWidth() - 1` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 576, #gens: 186, #ops: 1, parent:575] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 576, errors: [SimplexTableau.java:450: error: incompatible types: int cannot be converted to org.apache.commons.math.optimization.RealPointValuePair
		return getWidth() - 1;} 	/**
		                  ^]
Ingredient counter is Zero
---Undoing: gnrtn(288): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coeffici[...] ` -topatch--> `return getWidth() - 1` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (575(f=1.0), 576(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (575(f=1.0), )
----------Running generation: 289, population size: 1

***** Generation 289 : 0
**Parent Variant: [Variant id: 577, #gens: 186, #ops: 0, parent:-]

--Child created id: 578
--Creating new operations for variant [Variant id: 578, #gens: 186, #ops: 0, parent:577]
---analyzing modificationPoint position: 72
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java497
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return numArtificialVariables ` -topatch--> `int artificialVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 497, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return numArtificialVariables ` -topatch--> `int artificialVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 578, #gens: 187, #ops: 1, parent:577] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 578
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-578/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(289): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return numArtificialVariables ` -topatch--> `int artificialVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (577(f=1.0), 578(f=1.0), )
Selected to next generation: IDs2--> (577(f=1.0), )
----------Running generation: 290, population size: 1

***** Generation 290 : 0
**Parent Variant: [Variant id: 579, #gens: 186, #ops: 0, parent:-]

--Child created id: 580
--Creating new operations for variant [Variant id: 580, #gens: 186, #ops: 0, parent:579]
---analyzing modificationPoint position: 99
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java398
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getColumnDimension() ` -topatch--> `return getWidth() - 1` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 398, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getColumnDimension() ` -topatch--> `return getWidth() - 1` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 580, #gens: 187, #ops: 1, parent:579] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 580, errors: [SimplexTableau.java:450: error: unreachable statement
		return getWidth() - 1; 		return tableau.getColumnDimension();} 	/**
		                       		^]
Ingredient counter is Zero
---Undoing: gnrtn(290): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getColumnDimension() ` -topatch--> `return getWidth() - 1` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (579(f=1.0), 580(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (579(f=1.0), )
----------Running generation: 291, population size: 1

***** Generation 291 : 0
**Parent Variant: [Variant id: 581, #gens: 186, #ops: 0, parent:-]

--Child created id: 582
--Creating new operations for variant [Variant id: 582, #gens: 186, #ops: 0, parent:581]
---analyzing modificationPoint position: 31
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  double minValue = 0
---analyzing modificationPoint position: 87
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch []
location: SimplexTableau.java291
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer row = null ` -topatch--> `double[] coefficients = new double[getOriginalNumDecisionVariables()]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 291, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer row = null ` -topatch--> `double[] coefficients = new double[getOriginalNumDecisionVariables()]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 582, #gens: 186, #ops: 1, parent:581] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 582, errors: [SimplexTableau.java:372: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	^, SimplexTableau.java:372: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	          ^, SimplexTableau.java:372: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                        ^, SimplexTableau.java:372: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                                               ^, SimplexTableau.java:372: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                                                                    ^, SimplexTableau.java:389: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	^, SimplexTableau.java:389: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	          ^, SimplexTableau.java:389: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                          ^, SimplexTableau.java:389: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                ^, SimplexTableau.java:389: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                                         ^, SimplexTableau.java:389: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                                                               ^, SimplexTableau.java:398: error: illegal start of expression
	 */ 	protected final int getWidth() {
	    	^, SimplexTableau.java:398: error: ';' expected
	 */ 	protected final int getWidth() {
	    	                            ^, SimplexTableau.java:406: error: illegal start of expression
	 */ 	protected final int getHeight() {
	    	^, SimplexTableau.java:406: error: ';' expected
	 */ 	protected final int getHeight() {
	    	                             ^, SimplexTableau.java:418: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	^, SimplexTableau.java:418: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                               ^, SimplexTableau.java:418: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                              ^, SimplexTableau.java:418: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                                               ^, SimplexTableau.java:428: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	^, SimplexTableau.java:428: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                             ^, SimplexTableau.java:428: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                            ^, SimplexTableau.java:428: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                              ^, SimplexTableau.java:428: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                                                 ^, SimplexTableau.java:433: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() {
	    	^, SimplexTableau.java:433: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() {
	    	                                          ^, SimplexTableau.java:441: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() {
	    	^, SimplexTableau.java:441: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() {
	    	                                               ^, SimplexTableau.java:449: error: illegal start of expression
	 */ 	protected final int getRhsOffset() {
	    	^, SimplexTableau.java:449: error: ';' expected
	 */ 	protected final int getRhsOffset() {
	    	                                ^, SimplexTableau.java:458: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() {
	    	^, SimplexTableau.java:458: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() {
	    	                                                     ^, SimplexTableau.java:472: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() {
	    	^, SimplexTableau.java:472: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() {
	    	                                           ^, SimplexTableau.java:481: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() {
	    	^, SimplexTableau.java:481: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() {
	    	                                                   ^, SimplexTableau.java:489: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() {
	    	^, SimplexTableau.java:489: error: ';' expected
	 */ 	protected final int getNumSlackVariables() {
	    	                                        ^, SimplexTableau.java:497: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() {
	    	^, SimplexTableau.java:497: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() {
	    	                                             ^, SimplexTableau.java:505: error: illegal start of expression
	 */ 	protected final double[][] getData() {
	    	^, SimplexTableau.java:505: error: ';' expected
	 */ 	protected final double[][] getData() {
	    	                                  ^, SimplexTableau.java:511: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) {
	    	                    	                     ^, SimplexTableau.java:511: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) {
	    	                    	                                            ^, SimplexTableau.java:542: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() {
	    	                    	                   ^, SimplexTableau.java:560: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	^, SimplexTableau.java:560: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	        ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                        ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                       ^, SimplexTableau.java:560: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                                       ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                                                   ^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	        ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                     ^, SimplexTableau.java:572: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                              ^, SimplexTableau.java:572: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                                                   ^, SimplexTableau.java:573: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(291): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer row = null ` -topatch--> `double[] coefficients = new double[getOriginalNumDecisionVariables()]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (581(f=1.0), 582(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (581(f=1.0), )
----------Running generation: 292, population size: 1

***** Generation 292 : 0
**Parent Variant: [Variant id: 583, #gens: 186, #ops: 0, parent:-]

--Child created id: 584
--Creating new operations for variant [Variant id: 584, #gens: 186, #ops: 0, parent:583]
---analyzing modificationPoint position: 13
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [this.f]
--> var from patch: this.f spoon.support.reflect.code.CtFieldWriteImpl
location: SimplexTableau.java343
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>() ` -topatch--> `this.f = f` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 343, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>() ` -topatch--> `this.f = f` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 584, #gens: 187, #ops: 1, parent:583] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 584, errors: [SimplexTableau.java:343: error: cannot assign a value to final variable f
		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		this.f = f;
		                                                                                                         		    ^]
Ingredient counter is Zero
---Undoing: gnrtn(292): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>() ` -topatch--> `this.f = f` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (583(f=1.0), 584(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (583(f=1.0), )
----------Running generation: 293, population size: 1

***** Generation 293 : 0
**Parent Variant: [Variant id: 585, #gens: 186, #ops: 0, parent:-]

--Child created id: 586
--Creating new operations for variant [Variant id: 586, #gens: 186, #ops: 0, parent:585]
---analyzing modificationPoint position: 52
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [iterations]
--> var from patch: iterations spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLinearOptimizer.java98
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `return iterations` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 98, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `return iterations` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 586, #gens: 187, #ops: 1, parent:585] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 586, errors: [AbstractLinearOptimizer.java:96: error: incompatible types: int cannot be converted to org.apache.commons.math.optimization.RealPointValuePair
	org.apache.commons.math.optimization.OptimizationException { 		return iterations;
	                                                             		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(293): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `return iterations` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (585(f=1.0), 586(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (585(f=1.0), )
----------Running generation: 294, population size: 1

***** Generation 294 : 0
**Parent Variant: [Variant id: 587, #gens: 186, #ops: 0, parent:-]

--Child created id: 588
--Creating new operations for variant [Variant id: 588, #gens: 186, #ops: 0, parent:587]
---analyzing modificationPoint position: 118
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  initialize()
---analyzing modificationPoint position: 138
---modifPoint 1 not mutation generated in  return coefficients
---analyzing modificationPoint position: 47
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 2 not mutation generated in  if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; }
---analyzing modificationPoint position: 15
Templates availables24
Attempts Base Ingredients  1 total 24
---modifPoint 3 not mutation generated in  java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i)
---analyzing modificationPoint position: 105
Templates availables8
Attempts Base Ingredients  1 total 8
vars from patch []
location: LinearObjectiveFunction.java75
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearObjectiveFunction line: 75, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 588, #gens: 186, #ops: 1, parent:587] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 588, errors: [LinearObjectiveFunction.java:114: error: incompatible types: boolean cannot be converted to org.apache.commons.math.linear.RealVector
		return false;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(294): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (587(f=1.0), 588(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (587(f=1.0), )
----------Running generation: 295, population size: 1

***** Generation 295 : 0
**Parent Variant: [Variant id: 589, #gens: 186, #ops: 0, parent:-]

--Child created id: 590
--Creating new operations for variant [Variant id: 590, #gens: 186, #ops: 0, parent:589]
---analyzing modificationPoint position: 90
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) [...]
---analyzing modificationPoint position: 9
Templates availables31
Attempts Base Ingredients  1 total 31
vars from patch [numDecisionVariables]
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java282
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return getBasicRow(col, false) ` -topatch--> `return numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 282, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return getBasicRow(col, false) ` -topatch--> `return numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 590, #gens: 186, #ops: 1, parent:589] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 590, errors: [SimplexTableau.java:495: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:495: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:495: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:495: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:495: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:495: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:497: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:497: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:497: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:497: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:497: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:497: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:497: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:499: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:499: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:500: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:501: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:501: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:502: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:502: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:503: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:504: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:504: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:504: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:505: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:505: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:505: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:505: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:505: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:505: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:518: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:518: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:518: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:518: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:518: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:518: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:522: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:522: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:526: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:526: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:534: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:534: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:534: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:534: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:543: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:543: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:543: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:543: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:543: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:547: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:547: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:551: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:551: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:555: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:555: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:560: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:560: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:570: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:570: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:575: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:575: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:579: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:579: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:583: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:583: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:587: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:587: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:589: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:589: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:592: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:599: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:599: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:599: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:599: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:599: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:599: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:608: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:608: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:608: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:608: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:608: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:608: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:608: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:608: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:608: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(295): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return getBasicRow(col, false) ` -topatch--> `return numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (589(f=1.0), 590(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (589(f=1.0), )
----------Running generation: 296, population size: 1

***** Generation 296 : 0
**Parent Variant: [Variant id: 591, #gens: 186, #ops: 0, parent:-]

--Child created id: 592
--Creating new operations for variant [Variant id: 592, #gens: 186, #ops: 0, parent:591]
---analyzing modificationPoint position: 91
Templates availables25
Attempts Base Ingredients  1 total 25
Attempts Base Ingredients  2 total 25
Attempts Base Ingredients  3 total 25
---modifPoint 0 not mutation generated in  row = i
---analyzing modificationPoint position: 24
location: SimplexSolver.java151
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { 	ret[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 592, #gens: 185, #ops: 1, parent:591] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 592
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-592/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 14] ,[]
-Valid?: |false|8|14|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(296): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { 	ret[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (591(f=1.0), 592(f=8.0), )
Selected to next generation: IDs2--> (591(f=1.0), )
----------Running generation: 297, population size: 1

***** Generation 297 : 0
**Parent Variant: [Variant id: 593, #gens: 186, #ops: 0, parent:-]

--Child created id: 594
--Creating new operations for variant [Variant id: 594, #gens: 186, #ops: 0, parent:593]
---analyzing modificationPoint position: 126
---modifPoint 0 not mutation generated in  org.apache.commons.math.linear.RealVector objectiveCoefficients =  (maximize) ? f.getCoefficients().[...]
---analyzing modificationPoint position: 22
location: SimplexSolver.java147
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (tableau.getNumArtificialVariables() > 0) { 	return false; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 594, #gens: 185, #ops: 1, parent:593] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 594
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-594/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(297): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (tableau.getNumArtificialVariables() > 0) { 	return false; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (593(f=1.0), 594(f=1.0), )
Selected to next generation: IDs2--> (593(f=1.0), )
----------Running generation: 298, population size: 1

***** Generation 298 : 0
**Parent Variant: [Variant id: 595, #gens: 186, #ops: 0, parent:-]

--Child created id: 596
--Creating new operations for variant [Variant id: 596, #gens: 186, #ops: 0, parent:595]
---analyzing modificationPoint position: 123
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  // initialize the objective function rows if (getNumObjectiveFunctions() == 2) { 	matrix[0][0] = -1;[...]
---analyzing modificationPoint position: 118
location: SimplexTableau.java115
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `initialize() ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 596, #gens: 185, #ops: 1, parent:595] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 596
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-596/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 5, was successful: false, cases executed: 14] ,[]
-Valid?: |false|5|14|[]|, fitness 5.0
Ingredient counter is Zero
---Undoing: gnrtn(298): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `initialize() ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (595(f=1.0), 596(f=5.0), )
Selected to next generation: IDs2--> (595(f=1.0), )
----------Running generation: 299, population size: 1

***** Generation 299 : 0
**Parent Variant: [Variant id: 597, #gens: 186, #ops: 0, parent:-]

--Child created id: 598
--Creating new operations for variant [Variant id: 598, #gens: 186, #ops: 0, parent:597]
---analyzing modificationPoint position: 170
location: Array2DRowRealMatrix.java95
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `copyIn(d) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 598, #gens: 185, #ops: 1, parent:597] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 598
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-598/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(299): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `copyIn(d) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (597(f=1.0), 598(f=14.0), )
Selected to next generation: IDs2--> (597(f=1.0), )
----------Running generation: 300, population size: 1

***** Generation 300 : 0
**Parent Variant: [Variant id: 599, #gens: 186, #ops: 0, parent:-]

--Child created id: 600
--Creating new operations for variant [Variant id: 600, #gens: 186, #ops: 0, parent:599]
---analyzing modificationPoint position: 70
location: SimplexTableau.java370
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRo[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 600, #gens: 185, #ops: 1, parent:599] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 600
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-600/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 14] ,[]
-Valid?: |false|4|14|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(300): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRo[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (599(f=1.0), 600(f=4.0), )
Selected to next generation: IDs2--> (599(f=1.0), )
----------Running generation: 301, population size: 1

***** Generation 301 : 0
**Parent Variant: [Variant id: 601, #gens: 186, #ops: 0, parent:-]

--Child created id: 602
--Creating new operations for variant [Variant id: 602, #gens: 186, #ops: 0, parent:601]
---analyzing modificationPoint position: 174
Templates availables120
Attempts Base Ingredients  1 total 120
---modifPoint 0 not mutation generated in  final int nRows = subMatrix.length
---analyzing modificationPoint position: 72
---modifPoint 1 not mutation generated in  return numArtificialVariables
---analyzing modificationPoint position: 178
Templates availables12
Attempts Base Ingredients  1 total 12
Attempts Base Ingredients  2 total 12
---modifPoint 2 not mutation generated in  data = new double[subMatrix.length][nCols]
---analyzing modificationPoint position: 141
Templates availables14
Attempts Base Ingredients  1 total 14
vars from patch [restrictToNonNegative, matrix, row, constraint]
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: matrix spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: row spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: constraint spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java176
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `// artificial variables if ((constraint.getRelationship() == org.apache.commons.math.optimization.li[...] ` -topatch--> `// x- if (!restrictToNonNegative) { 	matrix[row][getSlackVariableOffset() - 1] =  	org.apache.common[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 176, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `// artificial variables if ((constraint.getRelationship() == org.apache.commons.math.optimization.li[...] ` -topatch--> `// x- if (!restrictToNonNegative) { 	matrix[row][getSlackVariableOffset() - 1] =  	org.apache.common[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 602, #gens: 186, #ops: 1, parent:601] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 602
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-602/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 14] ,[]
-Valid?: |false|12|14|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(301): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `// artificial variables if ((constraint.getRelationship() == org.apache.commons.math.optimization.li[...] ` -topatch--> `// x- if (!restrictToNonNegative) { 	matrix[row][getSlackVariableOffset() - 1] =  	org.apache.common[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (601(f=1.0), 602(f=12.0), )
Selected to next generation: IDs2--> (601(f=1.0), )
----------Running generation: 302, population size: 1

***** Generation 302 : 0
**Parent Variant: [Variant id: 603, #gens: 186, #ops: 0, parent:-]

--Child created id: 604
--Creating new operations for variant [Variant id: 604, #gens: 186, #ops: 0, parent:603]
---analyzing modificationPoint position: 160
---modifPoint 0 not mutation generated in  return data.clone()
---analyzing modificationPoint position: 84
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 1 not mutation generated in  dot += data[i] * v[i]
---analyzing modificationPoint position: 53
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch [restrictToNonNegative]
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtVariableReadImpl
location: AbstractLinearOptimizer.java99
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 99, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 604, #gens: 186, #ops: 1, parent:603] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 604, errors: [AbstractLinearOptimizer.java:102: error: final parameter restrictToNonNegative may not be assigned
		restrictToNonNegative = restrictToNonNegative; 		this.goalType = goalType; 		this.restrictToNonNegative = restrictToNonNegative;
		^]
Ingredient counter is Zero
---Undoing: gnrtn(302): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (603(f=1.0), 604(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (603(f=1.0), )
----------Running generation: 303, population size: 1

***** Generation 303 : 0
**Parent Variant: [Variant id: 605, #gens: 186, #ops: 0, parent:-]

--Child created id: 606
--Creating new operations for variant [Variant id: 606, #gens: 186, #ops: 0, parent:605]
---analyzing modificationPoint position: 37
location: SimplexSolver.java64
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `minPos = i ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 606, #gens: 185, #ops: 1, parent:605] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 606
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-606/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(303): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `minPos = i ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (605(f=1.0), 606(f=14.0), )
Selected to next generation: IDs2--> (605(f=1.0), )
----------Running generation: 304, population size: 1

***** Generation 304 : 0
**Parent Variant: [Variant id: 607, #gens: 186, #ops: 0, parent:-]

--Child created id: 608
--Creating new operations for variant [Variant id: 608, #gens: 186, #ops: 0, parent:607]
---analyzing modificationPoint position: 53
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [goalType]
--> var from patch: goalType spoon.support.reflect.code.CtVariableReadImpl
location: AbstractLinearOptimizer.java99
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `goalType = goalType` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 99, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `goalType = goalType` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 608, #gens: 187, #ops: 1, parent:607] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 608, errors: [AbstractLinearOptimizer.java:101: error: final parameter goalType may not be assigned
		goalType = goalType; 		this.constraints = constraints; 		this.goalType = goalType;
		^]
Ingredient counter is Zero
---Undoing: gnrtn(304): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `goalType = goalType` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (607(f=1.0), 608(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (607(f=1.0), )
----------Running generation: 305, population size: 1

***** Generation 305 : 0
**Parent Variant: [Variant id: 609, #gens: 186, #ops: 0, parent:-]

--Child created id: 610
--Creating new operations for variant [Variant id: 610, #gens: 186, #ops: 0, parent:609]
---analyzing modificationPoint position: 129
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 0 not mutation generated in  if (!restrictToNonNegative) { 	matrix[zIndex][getSlackVariableOffset() - 1] =  	org.apache.commons.m[...]
---analyzing modificationPoint position: 9
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  return getBasicRow(col, false)
---analyzing modificationPoint position: 99
Templates availables31
Attempts Base Ingredients  1 total 31
---modifPoint 2 not mutation generated in  return tableau.getColumnDimension()
---analyzing modificationPoint position: 14
location: SimplexTableau.java344
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < coefficients.length; i++) { 	java.lang.Integer basicRow = getBasicRowForSolution[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 610, #gens: 185, #ops: 1, parent:609] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 610
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-610/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 11, was successful: false, cases executed: 14] ,[]
-Valid?: |false|11|14|[]|, fitness 11.0
Ingredient counter is Zero
---Undoing: gnrtn(305): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < coefficients.length; i++) { 	java.lang.Integer basicRow = getBasicRowForSolution[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (609(f=1.0), 610(f=11.0), )
Selected to next generation: IDs2--> (609(f=1.0), )
----------Running generation: 306, population size: 1

***** Generation 306 : 0
**Parent Variant: [Variant id: 611, #gens: 186, #ops: 0, parent:-]

--Child created id: 612
--Creating new operations for variant [Variant id: 612, #gens: 186, #ops: 0, parent:611]
---analyzing modificationPoint position: 149
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 0 not mutation generated in  if (constraint.getValue() < 0) { 	return new org.apache.commons.math.optimization.linear.LinearConst[...]
---analyzing modificationPoint position: 52
location: AbstractLinearOptimizer.java98
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 612, #gens: 185, #ops: 1, parent:611] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 612
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-612/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(306): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (611(f=1.0), 612(f=14.0), )
Selected to next generation: IDs2--> (611(f=1.0), )
----------Running generation: 307, population size: 1

***** Generation 307 : 0
**Parent Variant: [Variant id: 613, #gens: 186, #ops: 0, parent:-]

--Child created id: 614
--Creating new operations for variant [Variant id: 614, #gens: 186, #ops: 0, parent:613]
---analyzing modificationPoint position: 133
Templates availables24
Attempts Base Ingredients  1 total 24
Attempts Base Ingredients  2 total 24
vars from patch [numDecisionVariables, numSlackVariables, numArtificialVariables]
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numSlackVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java153
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i) ` -topatch--> `int width = (((numDecisionVariables + numSlackVariables) +  numArtificialVariables) + getNumObjectiv[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 153, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i) ` -topatch--> `int width = (((numDecisionVariables + numSlackVariables) +  numArtificialVariables) + getNumObjectiv[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 614, #gens: 186, #ops: 1, parent:613] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 614, errors: [SimplexTableau.java:153: error: variable width is already defined in method createTableau(boolean)
		for (int i = 0; i < constraints.size(); i++) { 			int width = (((numDecisionVariables + numSlackVariables) + numArtificialVariables) + getNumObjectiveFunctions()) + 1;// + 1 is for RHS
		                                               			    ^, SimplexTableau.java:158: error: cannot find symbol
			copyArray(constraint.getCoefficients().getData(), matrix[row], 1);
			          ^
  symbol:   variable constraint
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:163: error: cannot find symbol
				org.apache.commons.math.optimization.linear.SimplexTableau.getInvertedCoeffiecientSum(constraint.getCoefficients());
				                                                                                      ^
  symbol:   variable constraint
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:167: error: cannot find symbol
			matrix[row][width - 1] = constraint.getValue();
			                         ^
  symbol:   variable constraint
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:170: error: cannot find symbol
			if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.LEQ) {
			    ^
  symbol:   variable constraint
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:172: error: cannot find symbol
			} else if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ) {
			           ^
  symbol:   variable constraint
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:177: error: cannot find symbol
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || 
			     ^
  symbol:   variable constraint
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:178: error: cannot find symbol
			(constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) {
			 ^
  symbol:   variable constraint
  location: class org.apache.commons.math.optimization.linear.SimplexTableau]
Ingredient counter is Zero
---Undoing: gnrtn(307): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i) ` -topatch--> `int width = (((numDecisionVariables + numSlackVariables) +  numArtificialVariables) + getNumObjectiv[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (613(f=1.0), 614(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (613(f=1.0), )
----------Running generation: 308, population size: 1

***** Generation 308 : 0
**Parent Variant: [Variant id: 615, #gens: 186, #ops: 0, parent:-]

--Child created id: 616
--Creating new operations for variant [Variant id: 616, #gens: 186, #ops: 0, parent:615]
---analyzing modificationPoint position: 108
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 0 not mutation generated in  this.relationship = relationship
---analyzing modificationPoint position: 18
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 1 not mutation generated in  coefficients[i] =  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -  (restrictToNonNega[...]
---analyzing modificationPoint position: 27
location: SimplexSolver.java189
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 616, #gens: 185, #ops: 1, parent:615] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 616
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-616/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 11, was successful: false, cases executed: 14] ,[]
-Valid?: |false|11|14|[]|, fitness 11.0
Ingredient counter is Zero
---Undoing: gnrtn(308): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (615(f=1.0), 616(f=11.0), )
Selected to next generation: IDs2--> (615(f=1.0), )
----------Running generation: 309, population size: 1

***** Generation 309 : 0
**Parent Variant: [Variant id: 617, #gens: 186, #ops: 0, parent:-]

--Child created id: 618
--Creating new operations for variant [Variant id: 618, #gens: 186, #ops: 0, parent:617]
---analyzing modificationPoint position: 132
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  for (int i = 0; i < constraints.size(); i++) { 	org.apache.commons.math.optimization.linear.LinearCo[...]
---analyzing modificationPoint position: 114
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1)
---analyzing modificationPoint position: 29
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 2 not mutation generated in  this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)
---analyzing modificationPoint position: 66
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [pivotCol, tableau]
--> var from patch: pivotCol spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java119
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.subtractRow(i, pivotRow, multiplier) ` -topatch--> `java.lang.Integer pivotRow = getPivotRow(pivotCol, tableau)` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 119, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.subtractRow(i, pivotRow, multiplier) ` -topatch--> `java.lang.Integer pivotRow = getPivotRow(pivotCol, tableau)` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 618, #gens: 187, #ops: 1, parent:617] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 618, errors: [SimplexSolver.java:120: error: variable pivotRow is already defined in method doIteration(org.apache.commons.math.optimization.linear.SimplexTableau)
				tableau.subtractRow(i, pivotRow, multiplier); 				java.lang.Integer pivotRow = getPivotRow(pivotCol, tableau);
				                                              				                  ^]
Ingredient counter is Zero
---Undoing: gnrtn(309): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.subtractRow(i, pivotRow, multiplier) ` -topatch--> `java.lang.Integer pivotRow = getPivotRow(pivotCol, tableau)` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (617(f=1.0), 618(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (617(f=1.0), )
----------Running generation: 310, population size: 1

***** Generation 310 : 0
**Parent Variant: [Variant id: 619, #gens: 186, #ops: 0, parent:-]

--Child created id: 620
--Creating new operations for variant [Variant id: 620, #gens: 186, #ops: 0, parent:619]
---analyzing modificationPoint position: 127
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java140
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions()) ` -topatch--> `return null` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 140, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions()) ` -topatch--> `return null` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 620, #gens: 187, #ops: 1, parent:619] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 620, errors: [SimplexTableau.java:303: error: illegal start of type
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		^, SimplexTableau.java:303: error: ';' expected
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		      ^, SimplexTableau.java:307: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	       ^, SimplexTableau.java:307: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	                               		                                          ^, SimplexTableau.java:311: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	       ^, SimplexTableau.java:311: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		^, SimplexTableau.java:311: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                      ^, SimplexTableau.java:311: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                        		                  ^, SimplexTableau.java:317: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                     ^, SimplexTableau.java:317: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                         ^, SimplexTableau.java:317: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                           		                                                                                                                                                           ^, SimplexTableau.java:321: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                ^, SimplexTableau.java:321: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                                                 		                                               ^, SimplexTableau.java:327: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                          ^, SimplexTableau.java:327: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		^, SimplexTableau.java:327: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		           ^, SimplexTableau.java:327: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				        ^, SimplexTableau.java:327: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				           		             ^, SimplexTableau.java:330: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                            ^, SimplexTableau.java:330: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                    ^, SimplexTableau.java:330: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			^, SimplexTableau.java:330: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			                         ^, SimplexTableau.java:336: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                         ^, SimplexTableau.java:336: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		^, SimplexTableau.java:336: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                   ^, SimplexTableau.java:336: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                     		           ^, SimplexTableau.java:342: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                            ^, SimplexTableau.java:342: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                                       		                              ^, SimplexTableau.java:348: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                       ^, SimplexTableau.java:348: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                                  		                               ^, SimplexTableau.java:354: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                            ^, SimplexTableau.java:354: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		^, SimplexTableau.java:354: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		^, SimplexTableau.java:354: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                    ^, SimplexTableau.java:354: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                     ^, SimplexTableau.java:354: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				        ^, SimplexTableau.java:354: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				            ^, SimplexTableau.java:354: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				               		           ^, SimplexTableau.java:356: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			       ^, SimplexTableau.java:356: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		^, SimplexTableau.java:356: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		^, SimplexTableau.java:356: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		^, SimplexTableau.java:356: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                ^, SimplexTableau.java:356: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                            ^, SimplexTableau.java:356: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                ^, SimplexTableau.java:356: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                 ^, SimplexTableau.java:356: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                      ^, SimplexTableau.java:356: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                       ^, SimplexTableau.java:356: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		^, SimplexTableau.java:356: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		                                ^, SimplexTableau.java:365: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                             ^, SimplexTableau.java:365: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                 ^, SimplexTableau.java:365: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                      ^, SimplexTableau.java:365: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:369: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		^, SimplexTableau.java:369: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		^, SimplexTableau.java:369: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		^, SimplexTableau.java:369: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		^, SimplexTableau.java:369: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                ^, SimplexTableau.java:369: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                         ^, SimplexTableau.java:369: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                                			                                                                                     			^, SimplexTableau.java:376: error: class, interface, or enum expected
	 * @param dividendRow
	          ^, SimplexTableau.java:378: error: class, interface, or enum expected
	 * @param divisor
	          ^, SimplexTableau.java:380: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                               ^, SimplexTableau.java:380: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                      ^, SimplexTableau.java:380: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                ^, SimplexTableau.java:380: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                ^, SimplexTableau.java:380: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                       			                                                                             ^, SimplexTableau.java:393: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}}
	    	                                 ^, SimplexTableau.java:393: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}}
	    	                                                       ^, SimplexTableau.java:393: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}}
	    	                                                                                ^, SimplexTableau.java:393: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}}
	    	                                                                                                   		                ^, SimplexTableau.java:393: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}}
	    	                                                                                                   		                                ^, SimplexTableau.java:393: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}}
	    	                                                                                                   		                                       			                                                                                                                   ^, SimplexTableau.java:398: error: class, interface, or enum expected
	 */ 	protected final int getWidth() {
	    	                ^, SimplexTableau.java:400: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:406: error: class, interface, or enum expected
	 */ 	protected final int getHeight() {
	    	                ^, SimplexTableau.java:408: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                ^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                      ^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                                     ^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                                                   		                                     ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                    ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                   ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                                     ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                                                     		                                     ^, SimplexTableau.java:433: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() {
	    	                ^, SimplexTableau.java:435: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:441: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() {
	    	                ^, SimplexTableau.java:443: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:449: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() {
	    	                ^, SimplexTableau.java:451: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:458: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() {
	    	                ^, SimplexTableau.java:460: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:472: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() {
	    	                ^, SimplexTableau.java:474: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:481: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() {
	    	                ^, SimplexTableau.java:483: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:489: error: class, interface, or enum expected
	 */ 	protected final int getNumSlackVariables() {
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(310): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions()) ` -topatch--> `return null` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (619(f=1.0), 620(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (619(f=1.0), )
----------Running generation: 311, population size: 1

***** Generation 311 : 0
**Parent Variant: [Variant id: 621, #gens: 186, #ops: 0, parent:-]

--Child created id: 622
--Creating new operations for variant [Variant id: 622, #gens: 186, #ops: 0, parent:621]
---analyzing modificationPoint position: 61
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [tableau, pivotRow, pivotCol]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: pivotRow spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: pivotCol spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java112
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// set the pivot element to 1 double pivotVal = tableau.getEntry(pivotRow, pivotCol) ` -topatch--> `// set the pivot element to 1 double pivotVal = tableau.getEntry(pivotRow, pivotCol)` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 112, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// set the pivot element to 1 double pivotVal = tableau.getEntry(pivotRow, pivotCol) ` -topatch--> `// set the pivot element to 1 double pivotVal = tableau.getEntry(pivotRow, pivotCol)` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 622, #gens: 186, #ops: 1, parent:621] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 622
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-622/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(311): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// set the pivot element to 1 double pivotVal = tableau.getEntry(pivotRow, pivotCol) ` -topatch--> `// set the pivot element to 1 double pivotVal = tableau.getEntry(pivotRow, pivotCol)` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (621(f=1.0), 622(f=1.0), )
Selected to next generation: IDs2--> (621(f=1.0), )
----------Running generation: 312, population size: 1

***** Generation 312 : 0
**Parent Variant: [Variant id: 623, #gens: 186, #ops: 0, parent:-]

--Child created id: 624
--Creating new operations for variant [Variant id: 624, #gens: 186, #ops: 0, parent:623]
---analyzing modificationPoint position: 3
Templates availables6
Attempts Base Ingredients  1 total 6
---modifPoint 0 not mutation generated in  return false
---analyzing modificationPoint position: 141
location: SimplexTableau.java176
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// artificial variables if ((constraint.getRelationship() == org.apache.commons.math.optimization.li[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 624, #gens: 185, #ops: 1, parent:623] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 624
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-624/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 14] ,[]
-Valid?: |false|12|14|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(312): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// artificial variables if ((constraint.getRelationship() == org.apache.commons.math.optimization.li[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (623(f=1.0), 624(f=12.0), )
Selected to next generation: IDs2--> (623(f=1.0), )
----------Running generation: 313, population size: 1

***** Generation 313 : 0
**Parent Variant: [Variant id: 625, #gens: 186, #ops: 0, parent:-]

--Child created id: 626
--Creating new operations for variant [Variant id: 626, #gens: 186, #ops: 0, parent:625]
---analyzing modificationPoint position: 139
location: SimplexTableau.java169
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 626, #gens: 185, #ops: 1, parent:625] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 626
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-626/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 14] ,[]
-Valid?: |false|3|14|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(313): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (625(f=1.0), 626(f=3.0), )
Selected to next generation: IDs2--> (625(f=1.0), )
----------Running generation: 314, population size: 1

***** Generation 314 : 0
**Parent Variant: [Variant id: 627, #gens: 186, #ops: 0, parent:-]

--Child created id: 628
--Creating new operations for variant [Variant id: 628, #gens: 186, #ops: 0, parent:627]
---analyzing modificationPoint position: 10
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch [numArtificialVariables]
--> var from patch: numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java340
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] coefficients = new double[getOriginalNumDecisionVariables()] ` -topatch--> `int width = (getWidth() - numArtificialVariables) - 1` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 340, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] coefficients = new double[getOriginalNumDecisionVariables()] ` -topatch--> `int width = (getWidth() - numArtificialVariables) - 1` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 628, #gens: 186, #ops: 1, parent:627] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 628, errors: [SimplexTableau.java:345: error: cannot find symbol
		for (int i = 0; i < coefficients.length; i++) {
		                    ^
  symbol:   variable coefficients
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:350: error: cannot find symbol
				coefficients[i] = 0;
				^
  symbol:   variable coefficients
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:353: error: cannot find symbol
				coefficients[i] = 
				^
  symbol:   variable coefficients
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:358: error: cannot find symbol
		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));
		                                                                   ^
  symbol:   variable coefficients
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:358: error: cannot find symbol
		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));
		                                                                                            ^
  symbol:   variable coefficients
  location: class org.apache.commons.math.optimization.linear.SimplexTableau]
Ingredient counter is Zero
---Undoing: gnrtn(314): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] coefficients = new double[getOriginalNumDecisionVariables()] ` -topatch--> `int width = (getWidth() - numArtificialVariables) - 1` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (627(f=1.0), 628(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (627(f=1.0), )
----------Running generation: 315, population size: 1

***** Generation 315 : 0
**Parent Variant: [Variant id: 629, #gens: 186, #ops: 0, parent:-]

--Child created id: 630
--Creating new operations for variant [Variant id: 630, #gens: 186, #ops: 0, parent:629]
---analyzing modificationPoint position: 144
Templates availables31
Attempts Base Ingredients  1 total 31
---modifPoint 0 not mutation generated in  return f.getCoefficients().getDimension()
---analyzing modificationPoint position: 29
Templates availables7
Attempts Base Ingredients  1 total 7
Attempts Base Ingredients  2 total 7
vars from patch [org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON]
--> var from patch: org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java42
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON) ` -topatch--> `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 42, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON) ` -topatch--> `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 630, #gens: 186, #ops: 1, parent:629] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 630
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-630/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(315): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON) ` -topatch--> `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (629(f=1.0), 630(f=1.0), )
Selected to next generation: IDs2--> (629(f=1.0), )
----------Running generation: 316, population size: 1

***** Generation 316 : 0
**Parent Variant: [Variant id: 631, #gens: 186, #ops: 0, parent:-]

--Child created id: 632
--Creating new operations for variant [Variant id: 632, #gens: 186, #ops: 0, parent:631]
---analyzing modificationPoint position: 20
---modifPoint 0 not mutation generated in  return getNumObjectiveFunctions() + getOriginalNumDecisionVariables()
---analyzing modificationPoint position: 85
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 1 not mutation generated in  return dot
---analyzing modificationPoint position: 154
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java236
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (constraint.getRelationship() == relationship) { 	++count; } ` -topatch--> `return null` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 236, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (constraint.getRelationship() == relationship) { 	++count; } ` -topatch--> `return null` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 632, #gens: 187, #ops: 1, parent:631] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 632, errors: [SimplexTableau.java:298: error: incompatible types: <nulltype> cannot be converted to int
			return null;} 		return count;} 	/**
			       ^]
Ingredient counter is Zero
---Undoing: gnrtn(316): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (constraint.getRelationship() == relationship) { 	++count; } ` -topatch--> `return null` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (631(f=1.0), 632(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (631(f=1.0), )
----------Running generation: 317, population size: 1

***** Generation 317 : 0
**Parent Variant: [Variant id: 633, #gens: 186, #ops: 0, parent:-]

--Child created id: 634
--Creating new operations for variant [Variant id: 634, #gens: 186, #ops: 0, parent:633]
---analyzing modificationPoint position: 127
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java140
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions()) ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 140, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions()) ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 634, #gens: 187, #ops: 1, parent:633] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 634, errors: [SimplexTableau.java:540: error: illegal start of type
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		^, SimplexTableau.java:540: error: ';' expected
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		      ^, SimplexTableau.java:544: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	       ^, SimplexTableau.java:544: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	                               		                                          ^, SimplexTableau.java:548: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	       ^, SimplexTableau.java:548: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		^, SimplexTableau.java:548: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                      ^, SimplexTableau.java:548: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                        		                  ^, SimplexTableau.java:554: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                     ^, SimplexTableau.java:554: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                         ^, SimplexTableau.java:554: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                           		                                                                                                                                                           ^, SimplexTableau.java:558: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                ^, SimplexTableau.java:558: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                                                 		                                               ^, SimplexTableau.java:564: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                          ^, SimplexTableau.java:564: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		^, SimplexTableau.java:564: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		           ^, SimplexTableau.java:564: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				        ^, SimplexTableau.java:564: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				           		             ^, SimplexTableau.java:567: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                            ^, SimplexTableau.java:567: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                    ^, SimplexTableau.java:567: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			^, SimplexTableau.java:567: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			                         ^, SimplexTableau.java:573: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                         ^, SimplexTableau.java:573: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		^, SimplexTableau.java:573: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                   ^, SimplexTableau.java:573: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                     		           ^, SimplexTableau.java:579: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                            ^, SimplexTableau.java:579: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                                       		                              ^, SimplexTableau.java:585: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                       ^, SimplexTableau.java:585: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                                  		                               ^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                            ^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                    ^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                     ^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				        ^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				            ^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				               		           ^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			       ^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                ^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                            ^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                ^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                 ^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                      ^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                       ^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		                                ^, SimplexTableau.java:602: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                             ^, SimplexTableau.java:602: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                 ^, SimplexTableau.java:602: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                      ^, SimplexTableau.java:602: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:606: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		^, SimplexTableau.java:606: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		^, SimplexTableau.java:606: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		^, SimplexTableau.java:606: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		^, SimplexTableau.java:606: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                ^, SimplexTableau.java:606: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                         ^, SimplexTableau.java:606: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                                			                                                                                     			^, SimplexTableau.java:613: error: class, interface, or enum expected
	 * @param dividendRow
	          ^, SimplexTableau.java:615: error: class, interface, or enum expected
	 * @param divisor
	          ^, SimplexTableau.java:617: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                               ^, SimplexTableau.java:617: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                      ^, SimplexTableau.java:617: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                ^, SimplexTableau.java:617: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                ^, SimplexTableau.java:617: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                       			                                                                             ^, SimplexTableau.java:630: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                 ^, SimplexTableau.java:630: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                       ^, SimplexTableau.java:630: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                ^, SimplexTableau.java:630: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                ^, SimplexTableau.java:630: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                ^, SimplexTableau.java:630: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                       			                                                                                                                   ^, SimplexTableau.java:634: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                ^, SimplexTableau.java:634: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                                 		                                    ^, SimplexTableau.java:638: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                ^, SimplexTableau.java:638: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                                  		                                 ^, SimplexTableau.java:646: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                ^, SimplexTableau.java:646: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                      ^, SimplexTableau.java:646: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                     ^, SimplexTableau.java:646: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                                   		                                     ^, SimplexTableau.java:655: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                ^, SimplexTableau.java:655: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                    ^, SimplexTableau.java:655: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                   ^, SimplexTableau.java:655: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                     ^, SimplexTableau.java:655: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                     		                                     ^, SimplexTableau.java:659: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:659: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                               		                                                         ^, SimplexTableau.java:663: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                ^, SimplexTableau.java:663: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                                    		                                                                               ^, SimplexTableau.java:667: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                ^, SimplexTableau.java:667: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                     		                      ^, SimplexTableau.java:672: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                ^, SimplexTableau.java:672: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                          		                                                                      ^, SimplexTableau.java:682: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:682: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                                		                            ^, SimplexTableau.java:687: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                ^, SimplexTableau.java:687: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                        		                                                                               ^, SimplexTableau.java:691: error: class, interface, or enum expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(317): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions()) ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (633(f=1.0), 634(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (633(f=1.0), )
----------Running generation: 318, population size: 1

***** Generation 318 : 0
**Parent Variant: [Variant id: 635, #gens: 186, #ops: 0, parent:-]

--Child created id: 636
--Creating new operations for variant [Variant id: 636, #gens: 186, #ops: 0, parent:635]
---analyzing modificationPoint position: 111
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java106
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `return tableau.getData()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 106, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `return tableau.getData()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 636, #gens: 187, #ops: 1, parent:635] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 636, errors: [SimplexTableau.java:518: error: illegal start of type
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		^, SimplexTableau.java:518: error: ';' expected
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		      ^, SimplexTableau.java:522: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	       ^, SimplexTableau.java:522: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	                               		                                          ^, SimplexTableau.java:526: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	       ^, SimplexTableau.java:526: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		^, SimplexTableau.java:526: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                      ^, SimplexTableau.java:526: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                        		                  ^, SimplexTableau.java:532: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                     ^, SimplexTableau.java:532: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                         ^, SimplexTableau.java:532: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                           		                                                                                                                                                           ^, SimplexTableau.java:536: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                ^, SimplexTableau.java:536: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                                                 		                                               ^, SimplexTableau.java:542: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                          ^, SimplexTableau.java:542: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		^, SimplexTableau.java:542: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		           ^, SimplexTableau.java:542: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				        ^, SimplexTableau.java:542: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				           		             ^, SimplexTableau.java:545: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                            ^, SimplexTableau.java:545: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                    ^, SimplexTableau.java:545: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			^, SimplexTableau.java:545: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			                         ^, SimplexTableau.java:551: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                         ^, SimplexTableau.java:551: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		^, SimplexTableau.java:551: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                   ^, SimplexTableau.java:551: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                     		           ^, SimplexTableau.java:557: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                            ^, SimplexTableau.java:557: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                                       		                              ^, SimplexTableau.java:563: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                       ^, SimplexTableau.java:563: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                                  		                               ^, SimplexTableau.java:569: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                            ^, SimplexTableau.java:569: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		^, SimplexTableau.java:569: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		^, SimplexTableau.java:569: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                    ^, SimplexTableau.java:569: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                     ^, SimplexTableau.java:569: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				        ^, SimplexTableau.java:569: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				            ^, SimplexTableau.java:569: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				               		           ^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			       ^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                ^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                            ^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                ^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                 ^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                      ^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                       ^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		                                ^, SimplexTableau.java:580: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                             ^, SimplexTableau.java:580: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                 ^, SimplexTableau.java:580: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                      ^, SimplexTableau.java:580: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:584: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		^, SimplexTableau.java:584: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		^, SimplexTableau.java:584: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		^, SimplexTableau.java:584: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		^, SimplexTableau.java:584: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                ^, SimplexTableau.java:584: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                         ^, SimplexTableau.java:584: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                                			                                                                                     			^, SimplexTableau.java:591: error: class, interface, or enum expected
	 * @param dividendRow
	          ^, SimplexTableau.java:593: error: class, interface, or enum expected
	 * @param divisor
	          ^, SimplexTableau.java:595: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                               ^, SimplexTableau.java:595: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                      ^, SimplexTableau.java:595: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                ^, SimplexTableau.java:595: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                ^, SimplexTableau.java:595: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                       			                                                                             ^, SimplexTableau.java:608: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                 ^, SimplexTableau.java:608: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                       ^, SimplexTableau.java:608: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                ^, SimplexTableau.java:608: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                ^, SimplexTableau.java:608: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                ^, SimplexTableau.java:608: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                       			                                                                                                                   ^, SimplexTableau.java:612: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                ^, SimplexTableau.java:612: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                                 		                                    ^, SimplexTableau.java:616: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                ^, SimplexTableau.java:616: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                                  		                                 ^, SimplexTableau.java:624: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                ^, SimplexTableau.java:624: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                      ^, SimplexTableau.java:624: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                     ^, SimplexTableau.java:624: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                                   		                                     ^, SimplexTableau.java:633: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                ^, SimplexTableau.java:633: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                    ^, SimplexTableau.java:633: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                   ^, SimplexTableau.java:633: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                     ^, SimplexTableau.java:633: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                     		                                     ^, SimplexTableau.java:637: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:637: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                               		                                                         ^, SimplexTableau.java:641: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                ^, SimplexTableau.java:641: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                                    		                                                                               ^, SimplexTableau.java:645: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                ^, SimplexTableau.java:645: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                     		                      ^, SimplexTableau.java:650: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                ^, SimplexTableau.java:650: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                          		                                                                      ^, SimplexTableau.java:660: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:660: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                                		                            ^, SimplexTableau.java:665: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                ^, SimplexTableau.java:665: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                        		                                                                               ^, SimplexTableau.java:669: error: class, interface, or enum expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(318): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `return tableau.getData()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (635(f=1.0), 636(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (635(f=1.0), )
----------Running generation: 319, population size: 1

***** Generation 319 : 0
**Parent Variant: [Variant id: 637, #gens: 186, #ops: 0, parent:-]

--Child created id: 638
--Creating new operations for variant [Variant id: 638, #gens: 186, #ops: 0, parent:637]
---analyzing modificationPoint position: 156
---modifPoint 0 not mutation generated in  return count
---analyzing modificationPoint position: 111
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 1 not mutation generated in  this.constraints = constraints
---analyzing modificationPoint position: 15
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch []
location: SimplexTableau.java345
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i) ` -topatch--> `double sum = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 345, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i) ` -topatch--> `double sum = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 638, #gens: 186, #ops: 1, parent:637] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 638, errors: [SimplexTableau.java:347: error: cannot find symbol
			if (basicRows.contains(basicRow)) {
			                       ^
  symbol:   variable basicRow
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:352: error: cannot find symbol
				basicRows.add(basicRow);
				              ^
  symbol:   variable basicRow
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:354: error: cannot find symbol
				(basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - 
				 ^
  symbol:   variable basicRow
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:354: error: cannot find symbol
				(basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - 
				                                 ^
  symbol:   variable basicRow
  location: class org.apache.commons.math.optimization.linear.SimplexTableau]
Ingredient counter is Zero
---Undoing: gnrtn(319): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i) ` -topatch--> `double sum = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (637(f=1.0), 638(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (637(f=1.0), )
----------Running generation: 320, population size: 1

***** Generation 320 : 0
**Parent Variant: [Variant id: 639, #gens: 186, #ops: 0, parent:-]

--Child created id: 640
--Creating new operations for variant [Variant id: 640, #gens: 186, #ops: 0, parent:639]
---analyzing modificationPoint position: 153
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java235
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForEachImpl) `for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { [...] ` -topatch--> `// initialize the constraint rows int slackVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 235, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForEachImpl) `for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { [...] ` -topatch--> `// initialize the constraint rows int slackVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 640, #gens: 187, #ops: 1, parent:639] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 640
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-640/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(320): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForEachImpl) `for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { [...] ` -topatch--> `// initialize the constraint rows int slackVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (639(f=1.0), 640(f=1.0), )
Selected to next generation: IDs2--> (639(f=1.0), )
----------Running generation: 321, population size: 1

***** Generation 321 : 0
**Parent Variant: [Variant id: 641, #gens: 186, #ops: 0, parent:-]

--Child created id: 642
--Creating new operations for variant [Variant id: 642, #gens: 186, #ops: 0, parent:641]
---analyzing modificationPoint position: 45
location: SimplexSolver.java82
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 	final double ratio [...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 642, #gens: 185, #ops: 1, parent:641] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 642
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-642/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 14] ,[]
-Valid?: |false|13|14|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(321): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 	final double ratio [...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (641(f=1.0), 642(f=13.0), )
Selected to next generation: IDs2--> (641(f=1.0), )
----------Running generation: 322, population size: 1

***** Generation 322 : 0
**Parent Variant: [Variant id: 643, #gens: 186, #ops: 0, parent:-]

--Child created id: 644
--Creating new operations for variant [Variant id: 644, #gens: 186, #ops: 0, parent:643]
---analyzing modificationPoint position: 90
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java294
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) [...] ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 294, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) [...] ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 644, #gens: 187, #ops: 1, parent:643] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 644, errors: [SimplexTableau.java:309: error: incompatible types: missing return value
			return; 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
			^]
Ingredient counter is Zero
---Undoing: gnrtn(322): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) [...] ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (643(f=1.0), 644(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (643(f=1.0), )
----------Running generation: 323, population size: 1

***** Generation 323 : 0
**Parent Variant: [Variant id: 645, #gens: 186, #ops: 0, parent:-]

--Child created id: 646
--Creating new operations for variant [Variant id: 646, #gens: 186, #ops: 0, parent:645]
---analyzing modificationPoint position: 24
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java151
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { 	ret[...] ` -topatch--> `java.lang.Integer minPos = null` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 151, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { 	ret[...] ` -topatch--> `java.lang.Integer minPos = null` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 646, #gens: 187, #ops: 1, parent:645] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 646
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-646/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(323): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { 	ret[...] ` -topatch--> `java.lang.Integer minPos = null` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (645(f=1.0), 646(f=1.0), )
Selected to next generation: IDs2--> (645(f=1.0), )
----------Running generation: 324, population size: 1

***** Generation 324 : 0
**Parent Variant: [Variant id: 647, #gens: 186, #ops: 0, parent:-]

--Child created id: 648
--Creating new operations for variant [Variant id: 648, #gens: 186, #ops: 0, parent:647]
---analyzing modificationPoint position: 82
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 0 not mutation generated in  double dot = 0
---analyzing modificationPoint position: 70
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRo[...]
---analyzing modificationPoint position: 89
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java293
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int i = start; i < getHeight(); i++) { 	if (org.apache.commons.math.util.MathUtils.equals(getEn[...] ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 293, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int i = start; i < getHeight(); i++) { 	if (org.apache.commons.math.util.MathUtils.equals(getEn[...] ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 648, #gens: 187, #ops: 1, parent:647] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 648, errors: [SimplexTableau.java:534: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:534: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:534: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:534: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:534: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:534: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:536: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:536: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:536: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:536: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:536: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:536: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:536: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:538: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:538: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:539: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:540: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:540: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:541: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:541: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:542: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:543: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:543: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:543: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:544: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:544: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:544: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:544: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:544: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:544: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:557: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:557: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:557: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:557: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:557: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:557: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:561: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:561: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:565: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:565: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:573: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:573: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:573: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:573: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:582: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:582: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:582: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:582: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:582: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:586: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:586: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:590: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:590: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:594: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:594: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:599: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:599: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:609: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:609: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:614: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:614: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:618: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:618: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:622: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:622: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:626: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:626: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:628: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:628: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:631: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:638: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:638: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:638: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:638: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:638: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:638: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:647: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:647: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:647: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:647: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:647: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:647: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:647: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:647: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:647: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(324): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int i = start; i < getHeight(); i++) { 	if (org.apache.commons.math.util.MathUtils.equals(getEn[...] ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (647(f=1.0), 648(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (647(f=1.0), )
----------Running generation: 325, population size: 1

***** Generation 325 : 0
**Parent Variant: [Variant id: 649, #gens: 186, #ops: 0, parent:-]

--Child created id: 650
--Creating new operations for variant [Variant id: 650, #gens: 186, #ops: 0, parent:649]
---analyzing modificationPoint position: 129
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 0 not mutation generated in  if (!restrictToNonNegative) { 	matrix[zIndex][getSlackVariableOffset() - 1] =  	org.apache.commons.m[...]
---analyzing modificationPoint position: 123
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 1 not mutation generated in  // initialize the objective function rows if (getNumObjectiveFunctions() == 2) { 	matrix[0][0] = -1;[...]
---analyzing modificationPoint position: 93
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 2 not mutation generated in  double[] out = new double[data.length]
---analyzing modificationPoint position: 117
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java114
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(createTableau(goalType == org[...] ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 114, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(createTableau(goalType == org[...] ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 650, #gens: 187, #ops: 1, parent:649] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 650, errors: [SimplexTableau.java:526: error: illegal start of type
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		^, SimplexTableau.java:526: error: ';' expected
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		      ^, SimplexTableau.java:530: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	       ^, SimplexTableau.java:530: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	                               		                                          ^, SimplexTableau.java:534: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	       ^, SimplexTableau.java:534: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		^, SimplexTableau.java:534: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                      ^, SimplexTableau.java:534: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                        		                  ^, SimplexTableau.java:540: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                     ^, SimplexTableau.java:540: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                         ^, SimplexTableau.java:540: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                           		                                                                                                                                                           ^, SimplexTableau.java:544: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                ^, SimplexTableau.java:544: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                                                 		                                               ^, SimplexTableau.java:550: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                          ^, SimplexTableau.java:550: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		^, SimplexTableau.java:550: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		           ^, SimplexTableau.java:550: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				        ^, SimplexTableau.java:550: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				           		             ^, SimplexTableau.java:553: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                            ^, SimplexTableau.java:553: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                    ^, SimplexTableau.java:553: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			^, SimplexTableau.java:553: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			                         ^, SimplexTableau.java:559: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                         ^, SimplexTableau.java:559: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		^, SimplexTableau.java:559: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                   ^, SimplexTableau.java:559: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                     		           ^, SimplexTableau.java:565: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                            ^, SimplexTableau.java:565: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                                       		                              ^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                       ^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                                  		                               ^, SimplexTableau.java:577: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                            ^, SimplexTableau.java:577: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		^, SimplexTableau.java:577: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		^, SimplexTableau.java:577: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                    ^, SimplexTableau.java:577: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                     ^, SimplexTableau.java:577: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				        ^, SimplexTableau.java:577: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				            ^, SimplexTableau.java:577: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				               		           ^, SimplexTableau.java:579: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			       ^, SimplexTableau.java:579: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		^, SimplexTableau.java:579: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		^, SimplexTableau.java:579: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		^, SimplexTableau.java:579: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                ^, SimplexTableau.java:579: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                            ^, SimplexTableau.java:579: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                ^, SimplexTableau.java:579: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                 ^, SimplexTableau.java:579: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                      ^, SimplexTableau.java:579: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                       ^, SimplexTableau.java:579: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		^, SimplexTableau.java:579: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		                                ^, SimplexTableau.java:588: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                             ^, SimplexTableau.java:588: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                 ^, SimplexTableau.java:588: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                      ^, SimplexTableau.java:588: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:592: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		^, SimplexTableau.java:592: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		^, SimplexTableau.java:592: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		^, SimplexTableau.java:592: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		^, SimplexTableau.java:592: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                ^, SimplexTableau.java:592: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                         ^, SimplexTableau.java:592: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                                			                                                                                     			^, SimplexTableau.java:599: error: class, interface, or enum expected
	 * @param dividendRow
	          ^, SimplexTableau.java:601: error: class, interface, or enum expected
	 * @param divisor
	          ^, SimplexTableau.java:603: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                               ^, SimplexTableau.java:603: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                      ^, SimplexTableau.java:603: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                ^, SimplexTableau.java:603: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                ^, SimplexTableau.java:603: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                       			                                                                             ^, SimplexTableau.java:616: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                 ^, SimplexTableau.java:616: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                       ^, SimplexTableau.java:616: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                ^, SimplexTableau.java:616: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                ^, SimplexTableau.java:616: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                ^, SimplexTableau.java:616: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                       			                                                                                                                   ^, SimplexTableau.java:620: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                ^, SimplexTableau.java:620: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                                 		                                    ^, SimplexTableau.java:624: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                ^, SimplexTableau.java:624: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                                  		                                 ^, SimplexTableau.java:632: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                ^, SimplexTableau.java:632: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                      ^, SimplexTableau.java:632: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                     ^, SimplexTableau.java:632: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                                   		                                     ^, SimplexTableau.java:641: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                ^, SimplexTableau.java:641: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                    ^, SimplexTableau.java:641: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                   ^, SimplexTableau.java:641: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                     ^, SimplexTableau.java:641: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                     		                                     ^, SimplexTableau.java:645: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:645: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                               		                                                         ^, SimplexTableau.java:649: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                ^, SimplexTableau.java:649: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                                    		                                                                               ^, SimplexTableau.java:653: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                ^, SimplexTableau.java:653: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                     		                      ^, SimplexTableau.java:658: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                ^, SimplexTableau.java:658: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                          		                                                                      ^, SimplexTableau.java:668: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:668: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                                		                            ^, SimplexTableau.java:673: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                ^, SimplexTableau.java:673: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                        		                                                                               ^, SimplexTableau.java:677: error: class, interface, or enum expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(325): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(createTableau(goalType == org[...] ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (649(f=1.0), 650(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (649(f=1.0), )
----------Running generation: 326, population size: 1

***** Generation 326 : 0
**Parent Variant: [Variant id: 651, #gens: 186, #ops: 0, parent:-]

--Child created id: 652
--Creating new operations for variant [Variant id: 652, #gens: 186, #ops: 0, parent:651]
---analyzing modificationPoint position: 111
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java106
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `int artificialVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 106, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `int artificialVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 652, #gens: 187, #ops: 1, parent:651] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 652, errors: [SimplexTableau.java:184: error: illegal start of type
		return matrix;
		^, SimplexTableau.java:184: error: ';' expected
		return matrix;
		      ^, SimplexTableau.java:191: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();
	    	       ^, SimplexTableau.java:192: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:198: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() {
	    	       ^, SimplexTableau.java:200: error: class, interface, or enum expected
		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) {
		^, SimplexTableau.java:202: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:204: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:212: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) {
	    	                                                                                     ^, SimplexTableau.java:216: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:219: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:225: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() {
	    	                ^, SimplexTableau.java:227: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:235: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0;
	    	                                          ^, SimplexTableau.java:236: error: class, interface, or enum expected
		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) {
		^, SimplexTableau.java:236: error: class, interface, or enum expected
		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) {
		           ^, SimplexTableau.java:239: error: class, interface, or enum expected
			}
			^, SimplexTableau.java:242: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:249: error: class, interface, or enum expected
		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) {
		                            ^, SimplexTableau.java:249: error: class, interface, or enum expected
		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) {
		                                                                    ^, SimplexTableau.java:251: error: class, interface, or enum expected
			subtractRow(0, row, 1.0);
			^, SimplexTableau.java:252: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:261: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0;
	    	                                                         ^, SimplexTableau.java:262: error: class, interface, or enum expected
		for (double coefficient : coefficients.getData()) {
		^, SimplexTableau.java:264: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:266: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:274: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);
	    	                                            ^, SimplexTableau.java:275: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:283: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);
	    	                                                       ^, SimplexTableau.java:284: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:292: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null;
	    	                                            ^, SimplexTableau.java:293: error: class, interface, or enum expected
		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0;
		^, SimplexTableau.java:294: error: class, interface, or enum expected
		for (int i = start; i < getHeight(); i++) {
		^, SimplexTableau.java:294: error: class, interface, or enum expected
		for (int i = start; i < getHeight(); i++) {
		                    ^, SimplexTableau.java:294: error: class, interface, or enum expected
		for (int i = start; i < getHeight(); i++) {
		                                     ^, SimplexTableau.java:297: error: class, interface, or enum expected
			} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
			^, SimplexTableau.java:299: error: class, interface, or enum expected
			}
			^, SimplexTableau.java:302: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:310: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:312: error: class, interface, or enum expected
		int height = getHeight() - 1;
		^, SimplexTableau.java:313: error: class, interface, or enum expected
		double[][] matrix = new double[height][width];
		^, SimplexTableau.java:314: error: class, interface, or enum expected
		for (int i = 0; i < height; i++) {
		^, SimplexTableau.java:314: error: class, interface, or enum expected
		for (int i = 0; i < height; i++) {
		                ^, SimplexTableau.java:314: error: class, interface, or enum expected
		for (int i = 0; i < height; i++) {
		                            ^, SimplexTableau.java:315: error: class, interface, or enum expected
			for (int j = 0; j < (width - 1); j++) {
			                ^, SimplexTableau.java:315: error: class, interface, or enum expected
			for (int j = 0; j < (width - 1); j++) {
			                                 ^, SimplexTableau.java:317: error: class, interface, or enum expected
			}
			^, SimplexTableau.java:319: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:321: error: class, interface, or enum expected
		this.numArtificialVariables = 0;
		^, SimplexTableau.java:322: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:334: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);}
	    	                             ^, SimplexTableau.java:334: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);}
	    	                                                 ^, SimplexTableau.java:334: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);}
	    	                                                                      ^, SimplexTableau.java:334: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);}
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:342: error: class, interface, or enum expected
		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());
		^, SimplexTableau.java:343: error: class, interface, or enum expected
		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
		^, SimplexTableau.java:344: error: class, interface, or enum expected
		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>();
		^, SimplexTableau.java:345: error: class, interface, or enum expected
		for (int i = 0; i < coefficients.length; i++) {
		^, SimplexTableau.java:345: error: class, interface, or enum expected
		for (int i = 0; i < coefficients.length; i++) {
		                ^, SimplexTableau.java:345: error: class, interface, or enum expected
		for (int i = 0; i < coefficients.length; i++) {
		                                         ^, SimplexTableau.java:347: error: class, interface, or enum expected
			if (basicRows.contains(basicRow)) {
			^, SimplexTableau.java:351: error: class, interface, or enum expected
			} else {
			^, SimplexTableau.java:353: error: class, interface, or enum expected
				coefficients[i] = 
				^, SimplexTableau.java:356: error: class, interface, or enum expected
			}
			^, SimplexTableau.java:359: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                               ^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                                                      ^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                                                                        		                ^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                                                                        		                                ^, SimplexTableau.java:373: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                 ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                       ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                                                ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                                                                   		                ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                                                                   		                                ^, SimplexTableau.java:391: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:398: error: class, interface, or enum expected
	 */ 	protected final int getWidth() {
	    	                ^, SimplexTableau.java:400: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:406: error: class, interface, or enum expected
	 */ 	protected final int getHeight() {
	    	                ^, SimplexTableau.java:408: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                ^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                      ^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                                     ^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                                                   		                                     ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                    ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                   ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                                     ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                                                     		                                     ^, SimplexTableau.java:433: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() {
	    	                ^, SimplexTableau.java:435: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:441: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() {
	    	                ^, SimplexTableau.java:443: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:449: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() {
	    	                ^, SimplexTableau.java:451: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:458: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() {
	    	                ^, SimplexTableau.java:460: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:472: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() {
	    	                ^, SimplexTableau.java:474: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:481: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() {
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(326): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `int artificialVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (651(f=1.0), 652(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (651(f=1.0), )
----------Running generation: 327, population size: 1

***** Generation 327 : 0
**Parent Variant: [Variant id: 653, #gens: 186, #ops: 0, parent:-]

--Child created id: 654
--Creating new operations for variant [Variant id: 654, #gens: 186, #ops: 0, parent:653]
---analyzing modificationPoint position: 108
location: LinearConstraint.java101
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.relationship = relationship ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 654, #gens: 185, #ops: 1, parent:653] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 654, errors: [LinearConstraint.java:104: error: variable relationship might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(327): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.relationship = relationship ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (653(f=1.0), 654(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (653(f=1.0), )
----------Running generation: 328, population size: 1

***** Generation 328 : 0
**Parent Variant: [Variant id: 655, #gens: 186, #ops: 0, parent:-]

--Child created id: 656
--Creating new operations for variant [Variant id: 656, #gens: 186, #ops: 0, parent:655]
---analyzing modificationPoint position: 0
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java169
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `tableau.discardArtificialVariables()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 169, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `tableau.discardArtificialVariables()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 656, #gens: 187, #ops: 1, parent:655] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 656
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-656/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(328): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `tableau.discardArtificialVariables()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (655(f=1.0), 656(f=1.0), )
Selected to next generation: IDs2--> (655(f=1.0), )
----------Running generation: 329, population size: 1

***** Generation 329 : 0
**Parent Variant: [Variant id: 657, #gens: 186, #ops: 0, parent:-]

--Child created id: 658
--Creating new operations for variant [Variant id: 658, #gens: 186, #ops: 0, parent:657]
---analyzing modificationPoint position: 128
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 0 not mutation generated in  matrix[zIndex][width - 1] =  (maximize) ? f.getConstantTerm() : (-1) * f.getConstantTerm()
---analyzing modificationPoint position: 92
---modifPoint 1 not mutation generated in  return row
---analyzing modificationPoint position: 102
Templates availables18
Attempts Base Ingredients  1 total 18
vars from patch [coefficients]
--> var from patch: coefficients spoon.support.reflect.code.CtVariableReadImpl
location: LinearObjectiveFunction.java58
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), constantTerm) ` -topatch--> `coefficients = coefficients` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearObjectiveFunction line: 58, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), constantTerm) ` -topatch--> `coefficients = coefficients` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 658, #gens: 187, #ops: 1, parent:657] gen mutated: 1 , gen not mut: 2, gen not applied  0
Error at InsertBeforeOp appplying: Cannot insert before an Super or this: this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), constantTerm)
-The child compiles: id 658
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-658/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(329): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), constantTerm) ` -topatch--> `coefficients = coefficients` (spoon.support.reflect.code.CtAssignmentImpl) 
Error at InsertBeforeOp undoing: Cannot insert before an Super or this: this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), constantTerm)
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (657(f=1.0), 658(f=1.0), )
Selected to next generation: IDs2--> (657(f=1.0), )
----------Running generation: 330, population size: 1

***** Generation 330 : 0
**Parent Variant: [Variant id: 659, #gens: 186, #ops: 0, parent:-]

--Child created id: 660
--Creating new operations for variant [Variant id: 660, #gens: 186, #ops: 0, parent:659]
---analyzing modificationPoint position: 30
location: SimplexSolver.java50
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.epsilon = epsilon ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 660, #gens: 185, #ops: 1, parent:659] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 660, errors: [SimplexSolver.java:52: error: variable epsilon might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(330): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.epsilon = epsilon ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (659(f=1.0), 660(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (659(f=1.0), )
----------Running generation: 331, population size: 1

***** Generation 331 : 0
**Parent Variant: [Variant id: 661, #gens: 186, #ops: 0, parent:-]

--Child created id: 662
--Creating new operations for variant [Variant id: 662, #gens: 186, #ops: 0, parent:661]
---analyzing modificationPoint position: 34
location: AbstractLinearOptimizer.java62
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setMaxIterations(org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.DEFAULT_MAX_ITE[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 662, #gens: 185, #ops: 1, parent:661] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 662
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-662/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(331): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setMaxIterations(org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.DEFAULT_MAX_ITE[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (661(f=1.0), 662(f=14.0), )
Selected to next generation: IDs2--> (661(f=1.0), )
----------Running generation: 332, population size: 1

***** Generation 332 : 0
**Parent Variant: [Variant id: 663, #gens: 186, #ops: 0, parent:-]

--Child created id: 664
--Creating new operations for variant [Variant id: 664, #gens: 186, #ops: 0, parent:663]
---analyzing modificationPoint position: 85
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 0 not mutation generated in  return dot
---analyzing modificationPoint position: 80
---modifPoint 1 not mutation generated in  return getNumObjectiveFunctions() + numDecisionVariables
---analyzing modificationPoint position: 142
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 2 not mutation generated in  return matrix
---analyzing modificationPoint position: 23
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
---modifPoint 3 not mutation generated in  for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...]
---analyzing modificationPoint position: 0
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch []
location: SimplexSolver.java169
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 169, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 664, #gens: 186, #ops: 1, parent:663] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 664, errors: [SimplexSolver.java:169: error: incompatible types: unexpected return value
		if (tableau.getNumArtificialVariables() == 0) { 			return false;
		                                                			       ^]
Ingredient counter is Zero
---Undoing: gnrtn(332): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (663(f=1.0), 664(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (663(f=1.0), )
----------Running generation: 333, population size: 1

***** Generation 333 : 0
**Parent Variant: [Variant id: 665, #gens: 186, #ops: 0, parent:-]

--Child created id: 666
--Creating new operations for variant [Variant id: 666, #gens: 186, #ops: 0, parent:665]
---analyzing modificationPoint position: 146
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [constraints]
--> var from patch: constraints spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java199
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 	norma[...] ` -topatch--> `constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 199, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 	norma[...] ` -topatch--> `constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 666, #gens: 187, #ops: 1, parent:665] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 666, errors: [SimplexTableau.java:202: error: cannot assign a value to final variable constraints
		} 		constraints = constraints;
		  		^]
Ingredient counter is Zero
---Undoing: gnrtn(333): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 	norma[...] ` -topatch--> `constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (665(f=1.0), 666(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (665(f=1.0), )
----------Running generation: 334, population size: 1

***** Generation 334 : 0
**Parent Variant: [Variant id: 667, #gens: 186, #ops: 0, parent:-]

--Child created id: 668
--Creating new operations for variant [Variant id: 668, #gens: 186, #ops: 0, parent:667]
---analyzing modificationPoint position: 77
Templates availables68
Attempts Base Ingredients  1 total 68
---modifPoint 0 not mutation generated in  return 1
---analyzing modificationPoint position: 27
location: SimplexSolver.java189
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 668, #gens: 185, #ops: 1, parent:667] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 668
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-668/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 11, was successful: false, cases executed: 14] ,[]
-Valid?: |false|11|14|[]|, fitness 11.0
Ingredient counter is Zero
---Undoing: gnrtn(334): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (667(f=1.0), 668(f=11.0), )
Selected to next generation: IDs2--> (667(f=1.0), )
----------Running generation: 335, population size: 1

***** Generation 335 : 0
**Parent Variant: [Variant id: 669, #gens: 186, #ops: 0, parent:-]

--Child created id: 670
--Creating new operations for variant [Variant id: 670, #gens: 186, #ops: 0, parent:669]
---analyzing modificationPoint position: 95
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 0 not mutation generated in  out[i] = data[i] * d
---analyzing modificationPoint position: 41
---modifPoint 1 not mutation generated in  java.lang.Integer minRatioPos = null
---analyzing modificationPoint position: 26
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau, epsilon]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java188
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `// if W is not zero then we have no feasible solution if (!org.apache.commons.math.util.MathUtils.eq[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 188, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `// if W is not zero then we have no feasible solution if (!org.apache.commons.math.util.MathUtils.eq[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 670, #gens: 187, #ops: 1, parent:669] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 670
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-670/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 9, was successful: false, cases executed: 14] ,[]
-Valid?: |false|9|14|[]|, fitness 9.0
Ingredient counter is Zero
---Undoing: gnrtn(335): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `// if W is not zero then we have no feasible solution if (!org.apache.commons.math.util.MathUtils.eq[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (669(f=1.0), 670(f=9.0), )
Selected to next generation: IDs2--> (669(f=1.0), )
----------Running generation: 336, population size: 1

***** Generation 336 : 0
**Parent Variant: [Variant id: 671, #gens: 186, #ops: 0, parent:-]

--Child created id: 672
--Creating new operations for variant [Variant id: 672, #gens: 186, #ops: 0, parent:671]
---analyzing modificationPoint position: 64
Templates availables10
Attempts Base Ingredients  1 total 10
---modifPoint 0 not mutation generated in  if (i != pivotRow) { 	double multiplier = tableau.getEntry(i, pivotCol); 	tableau.subtractRow(i, piv[...]
---analyzing modificationPoint position: 55
location: AbstractLinearOptimizer.java101
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 672, #gens: 185, #ops: 1, parent:671] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 672
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-672/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 14] ,[]
-Valid?: |false|4|14|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(336): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (671(f=1.0), 672(f=4.0), )
Selected to next generation: IDs2--> (671(f=1.0), )
----------Running generation: 337, population size: 1

***** Generation 337 : 0
**Parent Variant: [Variant id: 673, #gens: 186, #ops: 0, parent:-]

--Child created id: 674
--Creating new operations for variant [Variant id: 674, #gens: 186, #ops: 0, parent:673]
---analyzing modificationPoint position: 47
location: SimplexSolver.java84
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 674, #gens: 185, #ops: 1, parent:673] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 674, errors: [SimplexSolver.java:84: error: variable declaration not allowed here
				final double ratio = rhs / entry;
				             ^]
Ingredient counter is Zero
---Undoing: gnrtn(337): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (673(f=1.0), 674(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (673(f=1.0), )
----------Running generation: 338, population size: 1

***** Generation 338 : 0
**Parent Variant: [Variant id: 675, #gens: 186, #ops: 0, parent:-]

--Child created id: 676
--Creating new operations for variant [Variant id: 676, #gens: 186, #ops: 0, parent:675]
---analyzing modificationPoint position: 129
Templates availables14
Attempts Base Ingredients  1 total 14
Attempts Base Ingredients  2 total 14
---modifPoint 0 not mutation generated in  if (!restrictToNonNegative) { 	matrix[zIndex][getSlackVariableOffset() - 1] =  	org.apache.commons.m[...]
---analyzing modificationPoint position: 50
Templates availables5
Attempts Base Ingredients  1 total 5
vars from patch [this.epsilon]
--> var from patch: this.epsilon spoon.support.reflect.code.CtFieldWriteImpl
location: SimplexSolver.java86
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatioPos = i ` -topatch--> `this.epsilon = epsilon` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 86, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatioPos = i ` -topatch--> `this.epsilon = epsilon` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 676, #gens: 186, #ops: 1, parent:675] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 676, errors: [SimplexSolver.java:86: error: cannot assign a value to final variable epsilon
					minRatio = ratio; 					this.epsilon = epsilon;
					                  					    ^]
Ingredient counter is Zero
---Undoing: gnrtn(338): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatioPos = i ` -topatch--> `this.epsilon = epsilon` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (675(f=1.0), 676(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (675(f=1.0), )
----------Running generation: 339, population size: 1

***** Generation 339 : 0
**Parent Variant: [Variant id: 677, #gens: 186, #ops: 0, parent:-]

--Child created id: 678
--Creating new operations for variant [Variant id: 678, #gens: 186, #ops: 0, parent:677]
---analyzing modificationPoint position: 68
---modifPoint 0 not mutation generated in  final org.apache.commons.math.optimization.linear.SimplexTableau tableau =  new org.apache.commons.m[...]
---analyzing modificationPoint position: 8
---modifPoint 1 not mutation generated in  return tableau.getSolution()
---analyzing modificationPoint position: 47
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [f, constraints, goalType, restrictToNonNegative, epsilon]
--> var from patch: f spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: constraints spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: goalType spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java84
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; } ` -topatch--> `final org.apache.commons.math.optimization.linear.SimplexTableau tableau =  new org.apache.commons.m[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 84, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; } ` -topatch--> `final org.apache.commons.math.optimization.linear.SimplexTableau tableau =  new org.apache.commons.m[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 678, #gens: 187, #ops: 1, parent:677] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 678, errors: [SimplexSolver.java:187: error: variable tableau is already defined in method getPivotRow(int,org.apache.commons.math.optimization.linear.SimplexTableau)
				final org.apache.commons.math.optimization.linear.SimplexTableau tableau = 
				                                                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(339): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; } ` -topatch--> `final org.apache.commons.math.optimization.linear.SimplexTableau tableau =  new org.apache.commons.m[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (677(f=1.0), 678(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (677(f=1.0), )
----------Running generation: 340, population size: 1

***** Generation 340 : 0
**Parent Variant: [Variant id: 679, #gens: 186, #ops: 0, parent:-]

--Child created id: 680
--Creating new operations for variant [Variant id: 680, #gens: 186, #ops: 0, parent:679]
---analyzing modificationPoint position: 157
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [numArtificialVariables]
--> var from patch: numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java248
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `return numArtificialVariables` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 248, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `return numArtificialVariables` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 680, #gens: 187, #ops: 1, parent:679] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 680, errors: [SimplexTableau.java:538: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:538: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:538: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:538: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:538: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:538: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:540: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:540: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:540: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:540: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:540: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:540: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:540: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:542: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:542: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:543: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:544: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:544: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:545: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:545: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:546: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:547: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:547: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:547: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:548: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:548: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:548: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:548: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:548: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:548: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:561: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:561: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:561: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:561: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:561: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:561: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:565: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:565: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:569: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:569: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:577: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:577: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:577: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:577: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:586: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:586: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:586: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:586: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:586: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:590: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:590: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:594: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:594: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:598: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:598: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:603: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:603: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:613: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:613: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:618: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:618: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:622: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:622: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:626: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:626: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:630: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:630: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:632: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:632: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:635: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:642: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:642: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:642: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:642: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:642: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:642: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:651: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:651: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:651: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:651: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:651: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:651: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:651: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:651: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:651: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(340): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `return numArtificialVariables` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (679(f=1.0), 680(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (679(f=1.0), )
----------Running generation: 341, population size: 1

***** Generation 341 : 0
**Parent Variant: [Variant id: 681, #gens: 186, #ops: 0, parent:-]

--Child created id: 682
--Creating new operations for variant [Variant id: 682, #gens: 186, #ops: 0, parent:681]
---analyzing modificationPoint position: 71
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [numArtificialVariables]
--> var from patch: numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java371
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor) ` -topatch--> `if (numArtificialVariables == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 371, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor) ` -topatch--> `if (numArtificialVariables == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 682, #gens: 187, #ops: 1, parent:681] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 682
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-682/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 14] ,[]
-Valid?: |false|4|14|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(341): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor) ` -topatch--> `if (numArtificialVariables == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (681(f=1.0), 682(f=4.0), )
Selected to next generation: IDs2--> (681(f=1.0), )
----------Running generation: 342, population size: 1

***** Generation 342 : 0
**Parent Variant: [Variant id: 683, #gens: 186, #ops: 0, parent:-]

--Child created id: 684
--Creating new operations for variant [Variant id: 684, #gens: 186, #ops: 0, parent:683]
---analyzing modificationPoint position: 117
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(createTableau(goalType == org[...]
---analyzing modificationPoint position: 148
---modifPoint 1 not mutation generated in  return normalized
---analyzing modificationPoint position: 130
Templates availables24
Attempts Base Ingredients  1 total 24
---modifPoint 2 not mutation generated in  // initialize the constraint rows int slackVar = 0
---analyzing modificationPoint position: 32
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch []
location: SimplexSolver.java60
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer minPos = null ` -topatch--> `double minValue = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 60, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer minPos = null ` -topatch--> `double minValue = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 684, #gens: 186, #ops: 1, parent:683] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 684, errors: [SimplexSolver.java:60: error: variable minValue is already defined in method getPivotColumn(org.apache.commons.math.optimization.linear.SimplexTableau)
	 */ 	private java.lang.Integer getPivotColumn(org.apache.commons.math.optimization.linear.SimplexTableau tableau) { 		double minValue = 0; 		double minValue = 0;
	    	                                                                                                               		                     		       ^, SimplexSolver.java:65: error: cannot find symbol
				minPos = i;
				^
  symbol:   variable minPos
  location: class org.apache.commons.math.optimization.linear.SimplexSolver, SimplexSolver.java:68: error: cannot find symbol
		return minPos;
		       ^
  symbol:   variable minPos
  location: class org.apache.commons.math.optimization.linear.SimplexSolver]
Ingredient counter is Zero
---Undoing: gnrtn(342): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer minPos = null ` -topatch--> `double minValue = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (683(f=1.0), 684(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (683(f=1.0), )
----------Running generation: 343, population size: 1

***** Generation 343 : 0
**Parent Variant: [Variant id: 685, #gens: 186, #ops: 0, parent:-]

--Child created id: 686
--Creating new operations for variant [Variant id: 686, #gens: 186, #ops: 0, parent:685]
---analyzing modificationPoint position: 86
Templates availables25
Attempts Base Ingredients  1 total 25
Attempts Base Ingredients  2 total 25
---modifPoint 0 not mutation generated in  this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), relationship, value)
---analyzing modificationPoint position: 75
Templates availables259
Attempts Base Ingredients  1 total 259
---modifPoint 1 not mutation generated in  if (x < y) { 	return -1; }
---analyzing modificationPoint position: 10
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 2 not mutation generated in  double[] coefficients = new double[getOriginalNumDecisionVariables()]
---analyzing modificationPoint position: 84
Templates availables281
Attempts Base Ingredients  1 total 281
Name Conflict [data]
---modifPoint 3 not mutation generated in  dot += data[i] * v[i]
---analyzing modificationPoint position: 108
Templates availables7
Attempts Base Ingredients  1 total 7
---modifPoint 4 not mutation generated in  this.relationship = relationship
---analyzing modificationPoint position: 150
Templates availables31
Attempts Base Ingredients  1 total 31
vars from patch []
location: SimplexTableau.java216
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients()[...] ` -topatch--> `return getNumObjectiveFunctions() + getOriginalNumDecisionVariables()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 216, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients()[...] ` -topatch--> `return getNumObjectiveFunctions() + getOriginalNumDecisionVariables()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 686, #gens: 186, #ops: 1, parent:685] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child does NOT compile: 686, errors: [SimplexTableau.java:512: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:512: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:512: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:512: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:512: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:512: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:514: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:514: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:514: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:514: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:514: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:514: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:514: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:516: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:516: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:517: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:518: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:518: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:519: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:519: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:520: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:521: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:521: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:521: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:522: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:522: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:522: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:522: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:522: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:522: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:535: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:535: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:535: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:535: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:535: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:535: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:539: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:539: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:543: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:543: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:551: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:551: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:551: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:551: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:560: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:560: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:560: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:560: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:560: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:564: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:564: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:568: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:568: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:572: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:577: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:577: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:587: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:587: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:592: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:592: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:596: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:596: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:600: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:600: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:604: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:604: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:606: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:606: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:609: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:616: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:616: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:616: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:616: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:616: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:616: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:625: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:625: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:625: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:625: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:625: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:625: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:625: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:625: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:625: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(343): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients()[...] ` -topatch--> `return getNumObjectiveFunctions() + getOriginalNumDecisionVariables()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (685(f=1.0), 686(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (685(f=1.0), )
----------Running generation: 344, population size: 1

***** Generation 344 : 0
**Parent Variant: [Variant id: 687, #gens: 186, #ops: 0, parent:-]

--Child created id: 688
--Creating new operations for variant [Variant id: 688, #gens: 186, #ops: 0, parent:687]
---analyzing modificationPoint position: 24
Templates availables10
Attempts Base Ingredients  1 total 10
---modifPoint 0 not mutation generated in  if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { 	ret[...]
---analyzing modificationPoint position: 160
Templates availables45
Attempts Base Ingredients  1 total 45
vars from patch []
location: ArrayRealVector.java854
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return data.clone() ` -topatch--> `return this.isNaN()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.linear.ArrayRealVector line: 854, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return data.clone() ` -topatch--> `return this.isNaN()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 688, #gens: 186, #ops: 1, parent:687] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 688, errors: [ArrayRealVector.java:1368: error: incompatible types: boolean cannot be converted to double[]
		return this.isNaN();} 	/**
		                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(344): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return data.clone() ` -topatch--> `return this.isNaN()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (687(f=1.0), 688(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (687(f=1.0), )
----------Running generation: 345, population size: 1

***** Generation 345 : 0
**Parent Variant: [Variant id: 689, #gens: 186, #ops: 0, parent:-]

--Child created id: 690
--Creating new operations for variant [Variant id: 690, #gens: 186, #ops: 0, parent:689]
---analyzing modificationPoint position: 108
location: LinearConstraint.java101
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.relationship = relationship ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 690, #gens: 185, #ops: 1, parent:689] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 690, errors: [LinearConstraint.java:104: error: variable relationship might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(345): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.relationship = relationship ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (689(f=1.0), 690(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (689(f=1.0), )
----------Running generation: 346, population size: 1

***** Generation 346 : 0
**Parent Variant: [Variant id: 691, #gens: 186, #ops: 0, parent:-]

--Child created id: 692
--Creating new operations for variant [Variant id: 692, #gens: 186, #ops: 0, parent:691]
---analyzing modificationPoint position: 72
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  return numArtificialVariables
---analyzing modificationPoint position: 49
location: AbstractLinearOptimizer.java86
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 692, #gens: 185, #ops: 1, parent:691] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 692
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-692/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(346): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (691(f=1.0), 692(f=1.0), )
Selected to next generation: IDs2--> (691(f=1.0), )
----------Running generation: 347, population size: 1

***** Generation 347 : 0
**Parent Variant: [Variant id: 693, #gens: 186, #ops: 0, parent:-]

--Child created id: 694
--Creating new operations for variant [Variant id: 694, #gens: 186, #ops: 0, parent:693]
---analyzing modificationPoint position: 138
---modifPoint 0 not mutation generated in  return coefficients
---analyzing modificationPoint position: 120
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch [maximize, f]
--> var from patch: maximize spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: f spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java127
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int width = (((numDecisionVariables + numSlackVariables) +  numArtificialVariables) + getNumObjectiv[...] ` -topatch--> `org.apache.commons.math.linear.RealVector objectiveCoefficients =  (maximize) ? f.getCoefficients().[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 127, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int width = (((numDecisionVariables + numSlackVariables) +  numArtificialVariables) + getNumObjectiv[...] ` -topatch--> `org.apache.commons.math.linear.RealVector objectiveCoefficients =  (maximize) ? f.getCoefficients().[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 694, #gens: 186, #ops: 1, parent:693] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 694, errors: [SimplexTableau.java:140: error: cannot find symbol
		(maximize) ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients(); 		int height = constraints.size() + getNumObjectiveFunctions(); 		double[][] matrix = new double[height][width]; 		// initialize the objective function rows
		                                                                        		                                                              		                                       ^
  symbol:   variable width
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:141: error: variable objectiveCoefficients is already defined in method createTableau(boolean)
		if (getNumObjectiveFunctions() == 2) { 			matrix[0][0] = -1;} 		int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1; 		matrix[zIndex][zIndex] = (maximize) ? 1 : -1; 		org.apache.commons.math.linear.RealVector objectiveCoefficients = (maximize) ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients(); 		copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());
		                                       			                    		                                                        		                                              		                                          ^, SimplexTableau.java:142: error: cannot find symbol
		matrix[zIndex][width - 1] = 
		               ^
  symbol:   variable width
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:167: error: cannot find symbol
			matrix[row][width - 1] = constraint.getValue();
			            ^
  symbol:   variable width
  location: class org.apache.commons.math.optimization.linear.SimplexTableau]
Ingredient counter is Zero
---Undoing: gnrtn(347): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int width = (((numDecisionVariables + numSlackVariables) +  numArtificialVariables) + getNumObjectiv[...] ` -topatch--> `org.apache.commons.math.linear.RealVector objectiveCoefficients =  (maximize) ? f.getCoefficients().[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (693(f=1.0), 694(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (693(f=1.0), )
----------Running generation: 348, population size: 1

***** Generation 348 : 0
**Parent Variant: [Variant id: 695, #gens: 186, #ops: 0, parent:-]

--Child created id: 696
--Creating new operations for variant [Variant id: 696, #gens: 186, #ops: 0, parent:695]
---analyzing modificationPoint position: 52
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [iterations]
--> var from patch: iterations spoon.support.reflect.code.CtFieldWriteImpl
location: AbstractLinearOptimizer.java98
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 98, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 696, #gens: 187, #ops: 1, parent:695] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 696
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-696/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(348): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (695(f=1.0), 696(f=1.0), )
Selected to next generation: IDs2--> (695(f=1.0), )
----------Running generation: 349, population size: 1

***** Generation 349 : 0
**Parent Variant: [Variant id: 697, #gens: 186, #ops: 0, parent:-]

--Child created id: 698
--Creating new operations for variant [Variant id: 698, #gens: 186, #ops: 0, parent:697]
---analyzing modificationPoint position: 22
Templates availables10
Attempts Base Ingredients  1 total 10
---modifPoint 0 not mutation generated in  if (tableau.getNumArtificialVariables() > 0) { 	return false; }
---analyzing modificationPoint position: 38
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [restrictToNonNegative]
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtVariableReadImpl
location: AbstractLinearOptimizer.java67
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 67, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 698, #gens: 187, #ops: 1, parent:697] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 698
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-698/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(349): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (697(f=1.0), 698(f=14.0), )
Selected to next generation: IDs2--> (697(f=1.0), )
----------Running generation: 350, population size: 1

***** Generation 350 : 0
**Parent Variant: [Variant id: 699, #gens: 186, #ops: 0, parent:-]

--Child created id: 700
--Creating new operations for variant [Variant id: 700, #gens: 186, #ops: 0, parent:699]
---analyzing modificationPoint position: 89
location: SimplexTableau.java293
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = start; i < getHeight(); i++) { 	if (org.apache.commons.math.util.MathUtils.equals(getEn[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 700, #gens: 185, #ops: 1, parent:699] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 700
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-700/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(350): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = start; i < getHeight(); i++) { 	if (org.apache.commons.math.util.MathUtils.equals(getEn[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (699(f=1.0), 700(f=14.0), )
Selected to next generation: IDs2--> (699(f=1.0), )
----------Running generation: 351, population size: 1

***** Generation 351 : 0
**Parent Variant: [Variant id: 701, #gens: 186, #ops: 0, parent:-]

--Child created id: 702
--Creating new operations for variant [Variant id: 702, #gens: 186, #ops: 0, parent:701]
---analyzing modificationPoint position: 144
Templates availables31
Attempts Base Ingredients  1 total 31
---modifPoint 0 not mutation generated in  return f.getCoefficients().getDimension()
---analyzing modificationPoint position: 78
---modifPoint 1 not mutation generated in  return getWidth() - 1
---analyzing modificationPoint position: 16
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [negativeVarBasicRow]
--> var from patch: negativeVarBasicRow spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java346
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (basicRows.contains(basicRow)) { 	// if multiple variables can take a given value 	// then we cho[...] ` -topatch--> `double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 346, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (basicRows.contains(basicRow)) { 	// if multiple variables can take a given value 	// then we cho[...] ` -topatch--> `double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 702, #gens: 187, #ops: 1, parent:701] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 702, errors: [SimplexTableau.java:356: error: variable mostNegative is already defined in method getSolution()
			} 			double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
			  			       ^]
Ingredient counter is Zero
---Undoing: gnrtn(351): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (basicRows.contains(basicRow)) { 	// if multiple variables can take a given value 	// then we cho[...] ` -topatch--> `double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (701(f=1.0), 702(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (701(f=1.0), )
----------Running generation: 352, population size: 1

***** Generation 352 : 0
**Parent Variant: [Variant id: 703, #gens: 186, #ops: 0, parent:-]

--Child created id: 704
--Creating new operations for variant [Variant id: 704, #gens: 186, #ops: 0, parent:703]
---analyzing modificationPoint position: 5
Templates availables8
Attempts Base Ingredients  1 total 8
vars from patch []
location: LinearObjectiveFunction.java92
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients.dotProduct(point) + constantTerm ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearObjectiveFunction line: 92, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients.dotProduct(point) + constantTerm ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 704, #gens: 186, #ops: 1, parent:703] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 704, errors: [LinearObjectiveFunction.java:124: error: incompatible types: boolean cannot be converted to double
		return false;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(352): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients.dotProduct(point) + constantTerm ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (703(f=1.0), 704(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (703(f=1.0), )
----------Running generation: 353, population size: 1

***** Generation 353 : 0
**Parent Variant: [Variant id: 705, #gens: 186, #ops: 0, parent:-]

--Child created id: 706
--Creating new operations for variant [Variant id: 706, #gens: 186, #ops: 0, parent:705]
---analyzing modificationPoint position: 27
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java189
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 189, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 706, #gens: 187, #ops: 1, parent:705] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 706, errors: [SimplexSolver.java:190: error: incompatible types: boolean cannot be converted to org.apache.commons.math.optimization.RealPointValuePair
		tableau.discardArtificialVariables(); 		return true;
		                                      		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(353): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (705(f=1.0), 706(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (705(f=1.0), )
----------Running generation: 354, population size: 1

***** Generation 354 : 0
**Parent Variant: [Variant id: 707, #gens: 186, #ops: 0, parent:-]

--Child created id: 708
--Creating new operations for variant [Variant id: 708, #gens: 186, #ops: 0, parent:707]
---analyzing modificationPoint position: 72
Templates availables31
Attempts Base Ingredients  1 total 31
---modifPoint 0 not mutation generated in  return numArtificialVariables
---analyzing modificationPoint position: 32
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 1 not mutation generated in  java.lang.Integer minPos = null
---analyzing modificationPoint position: 74
---modifPoint 2 not mutation generated in  return 0
---analyzing modificationPoint position: 157
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [numDecisionVariables]
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java248
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `return getNumObjectiveFunctions() + numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 248, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `return getNumObjectiveFunctions() + numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 708, #gens: 187, #ops: 1, parent:707] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 708, errors: [SimplexTableau.java:474: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:474: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:474: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:474: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:474: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:474: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:476: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:476: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:476: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:476: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:476: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:476: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:476: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:478: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:478: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:479: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:480: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:480: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:481: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:481: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:482: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:483: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:483: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:483: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:484: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:484: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:484: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:484: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:484: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:484: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:497: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:497: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:497: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:497: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:497: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:497: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:501: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:501: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:505: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:505: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:513: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:513: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:513: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:513: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:522: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:522: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:522: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:522: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:522: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:526: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:526: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:530: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:530: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:534: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:534: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:539: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:539: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:549: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:549: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:554: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:554: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:558: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:558: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:562: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:562: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:566: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:566: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:568: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:568: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:571: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:578: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:578: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:578: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:578: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:578: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:578: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:587: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:587: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:587: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:587: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:587: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:587: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:587: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:587: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:587: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(354): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `return getNumObjectiveFunctions() + numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (707(f=1.0), 708(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (707(f=1.0), )
----------Running generation: 355, population size: 1

***** Generation 355 : 0
**Parent Variant: [Variant id: 709, #gens: 186, #ops: 0, parent:-]

--Child created id: 710
--Creating new operations for variant [Variant id: 710, #gens: 186, #ops: 0, parent:709]
---analyzing modificationPoint position: 39
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  return minPos
---analyzing modificationPoint position: 96
Templates availables281
Attempts Base Ingredients  1 total 281
vars from patch [data]
--> var from patch: data spoon.support.reflect.code.CtFieldReadImpl
location: ArrayRealVector.java342
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return new org.apache.commons.math.linear.ArrayRealVector(out) ` -topatch--> `return org.apache.commons.math.util.MathUtils.hash(data)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.linear.ArrayRealVector line: 342, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return new org.apache.commons.math.linear.ArrayRealVector(out) ` -topatch--> `return org.apache.commons.math.util.MathUtils.hash(data)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 710, #gens: 187, #ops: 1, parent:709] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 710, errors: [ArrayRealVector.java:1395: error: incompatible types: int cannot be converted to org.apache.commons.math.linear.RealVector
		return org.apache.commons.math.util.MathUtils.hash(data); 		return new org.apache.commons.math.linear.ArrayRealVector(out);} 	/**
		                                                  ^]
Ingredient counter is Zero
---Undoing: gnrtn(355): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return new org.apache.commons.math.linear.ArrayRealVector(out) ` -topatch--> `return org.apache.commons.math.util.MathUtils.hash(data)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (709(f=1.0), 710(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (709(f=1.0), )
----------Running generation: 356, population size: 1

***** Generation 356 : 0
**Parent Variant: [Variant id: 711, #gens: 186, #ops: 0, parent:-]

--Child created id: 712
--Creating new operations for variant [Variant id: 712, #gens: 186, #ops: 0, parent:711]
---analyzing modificationPoint position: 156
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  return count
---analyzing modificationPoint position: 19
---modifPoint 1 not mutation generated in  return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coeffici[...]
---analyzing modificationPoint position: 10
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 2 not mutation generated in  double[] coefficients = new double[getOriginalNumDecisionVariables()]
---analyzing modificationPoint position: 26
Templates availables7
Attempts Base Ingredients  1 total 7
Attempts Base Ingredients  2 total 7
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java188
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `doIteration(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 188, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `doIteration(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 712, #gens: 186, #ops: 1, parent:711] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 712
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-712/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 14] ,[]
-Valid?: |false|4|14|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(356): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `doIteration(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (711(f=1.0), 712(f=4.0), )
Selected to next generation: IDs2--> (711(f=1.0), )
----------Running generation: 357, population size: 1

***** Generation 357 : 0
**Parent Variant: [Variant id: 713, #gens: 186, #ops: 0, parent:-]

--Child created id: 714
--Creating new operations for variant [Variant id: 714, #gens: 186, #ops: 0, parent:713]
---analyzing modificationPoint position: 110
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 0 not mutation generated in  this.f = f
---analyzing modificationPoint position: 134
---modifPoint 1 not mutation generated in  int row = getNumObjectiveFunctions() + i
---analyzing modificationPoint position: 75
location: MathUtils.java369
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (x < y) { 	return -1; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 714, #gens: 185, #ops: 1, parent:713] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 714
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-714/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 14] ,[]
-Valid?: |false|12|14|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(357): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (x < y) { 	return -1; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (713(f=1.0), 714(f=12.0), )
Selected to next generation: IDs2--> (713(f=1.0), )
----------Running generation: 358, population size: 1

***** Generation 358 : 0
**Parent Variant: [Variant id: 715, #gens: 186, #ops: 0, parent:-]

--Child created id: 716
--Creating new operations for variant [Variant id: 716, #gens: 186, #ops: 0, parent:715]
---analyzing modificationPoint position: 11
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset())
---analyzing modificationPoint position: 33
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 1 not mutation generated in  for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...]
---analyzing modificationPoint position: 21
---modifPoint 2 not mutation generated in  return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1
---analyzing modificationPoint position: 45
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java82
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 	final double ratio [...] ` -topatch--> `solvePhase1(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 82, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 	final double ratio [...] ` -topatch--> `solvePhase1(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 716, #gens: 187, #ops: 1, parent:715] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 716, errors: [SimplexSolver.java:189: error: unreported exception org.apache.commons.math.optimization.OptimizationException; must be caught or declared to be thrown
			solvePhase1(tableau); 			if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 				final double ratio = rhs / entry; 				if (ratio < minRatio) { 					minRatio = ratio; 					minRatioPos = i;}}} 		return minRatioPos;} 	/**
			           ^]
Ingredient counter is Zero
---Undoing: gnrtn(358): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 	final double ratio [...] ` -topatch--> `solvePhase1(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (715(f=1.0), 716(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (715(f=1.0), )
----------Running generation: 359, population size: 1

***** Generation 359 : 0
**Parent Variant: [Variant id: 717, #gens: 186, #ops: 0, parent:-]

--Child created id: 718
--Creating new operations for variant [Variant id: 718, #gens: 186, #ops: 0, parent:717]
---analyzing modificationPoint position: 145
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch []
location: SimplexTableau.java198
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...] ` -topatch--> `int height = getHeight() - 1` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 198, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...] ` -topatch--> `int height = getHeight() - 1` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 718, #gens: 186, #ops: 1, parent:717] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 718, errors: [SimplexTableau.java:371: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:371: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:371: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:371: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:371: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:371: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:373: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:373: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:373: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:373: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:373: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:373: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:373: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:375: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:375: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:376: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:377: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:377: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:378: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:378: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:379: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:380: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:380: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:380: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:381: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:381: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:381: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:381: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:381: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:381: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:394: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:394: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:394: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:394: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:394: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:394: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:398: error: illegal start of expression
	 */ 	protected final int getWidth() {
	    	^, SimplexTableau.java:398: error: ';' expected
	 */ 	protected final int getWidth() {
	    	                            ^, SimplexTableau.java:406: error: illegal start of expression
	 */ 	protected final int getHeight() {
	    	^, SimplexTableau.java:406: error: ';' expected
	 */ 	protected final int getHeight() {
	    	                             ^, SimplexTableau.java:418: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	^, SimplexTableau.java:418: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                               ^, SimplexTableau.java:418: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                              ^, SimplexTableau.java:418: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                                               ^, SimplexTableau.java:428: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	^, SimplexTableau.java:428: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                             ^, SimplexTableau.java:428: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                            ^, SimplexTableau.java:428: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                              ^, SimplexTableau.java:428: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                                                 ^, SimplexTableau.java:433: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() {
	    	^, SimplexTableau.java:433: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() {
	    	                                          ^, SimplexTableau.java:441: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() {
	    	^, SimplexTableau.java:441: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() {
	    	                                               ^, SimplexTableau.java:449: error: illegal start of expression
	 */ 	protected final int getRhsOffset() {
	    	^, SimplexTableau.java:449: error: ';' expected
	 */ 	protected final int getRhsOffset() {
	    	                                ^, SimplexTableau.java:458: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() {
	    	^, SimplexTableau.java:458: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() {
	    	                                                     ^, SimplexTableau.java:472: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() {
	    	^, SimplexTableau.java:472: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() {
	    	                                           ^, SimplexTableau.java:481: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() {
	    	^, SimplexTableau.java:481: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() {
	    	                                                   ^, SimplexTableau.java:489: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() {
	    	^, SimplexTableau.java:489: error: ';' expected
	 */ 	protected final int getNumSlackVariables() {
	    	                                        ^, SimplexTableau.java:497: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() {
	    	^, SimplexTableau.java:497: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() {
	    	                                             ^, SimplexTableau.java:505: error: illegal start of expression
	 */ 	protected final double[][] getData() {
	    	^, SimplexTableau.java:505: error: ';' expected
	 */ 	protected final double[][] getData() {
	    	                                  ^, SimplexTableau.java:511: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) {
	    	                    	                     ^, SimplexTableau.java:511: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) {
	    	                    	                                            ^, SimplexTableau.java:542: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() {
	    	                    	                   ^, SimplexTableau.java:560: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	^, SimplexTableau.java:560: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	        ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                        ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                       ^, SimplexTableau.java:560: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                                       ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                                                   ^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	        ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                     ^, SimplexTableau.java:572: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                              ^, SimplexTableau.java:572: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                                                   ^, SimplexTableau.java:573: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(359): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...] ` -topatch--> `int height = getHeight() - 1` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (717(f=1.0), 718(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (717(f=1.0), )
----------Running generation: 360, population size: 1

***** Generation 360 : 0
**Parent Variant: [Variant id: 719, #gens: 186, #ops: 0, parent:-]

--Child created id: 720
--Creating new operations for variant [Variant id: 720, #gens: 186, #ops: 0, parent:719]
---analyzing modificationPoint position: 57
Templates availables7
Attempts Base Ingredients  1 total 7
---modifPoint 0 not mutation generated in  incrementIterationsCounter()
---analyzing modificationPoint position: 156
---modifPoint 1 not mutation generated in  return count
---analyzing modificationPoint position: 79
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 2 not mutation generated in  if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 	return null; [...]
---analyzing modificationPoint position: 21
Templates availables31
Attempts Base Ingredients  1 total 31
vars from patch []
location: SimplexTableau.java481
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1 ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 481, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1 ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 720, #gens: 186, #ops: 1, parent:719] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 720, errors: [SimplexTableau.java:518: error: incompatible types: boolean cannot be converted to int
		return false;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(360): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1 ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (719(f=1.0), 720(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (719(f=1.0), )
----------Running generation: 361, population size: 1

***** Generation 361 : 0
**Parent Variant: [Variant id: 721, #gens: 186, #ops: 0, parent:-]

--Child created id: 722
--Creating new operations for variant [Variant id: 722, #gens: 186, #ops: 0, parent:721]
---analyzing modificationPoint position: 80
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java433
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return getNumObjectiveFunctions() + numDecisionVariables ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 433, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return getNumObjectiveFunctions() + numDecisionVariables ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 722, #gens: 187, #ops: 1, parent:721] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 722, errors: [SimplexTableau.java:518: error: incompatible types: boolean cannot be converted to int
		return false; 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(361): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return getNumObjectiveFunctions() + numDecisionVariables ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (721(f=1.0), 722(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (721(f=1.0), )
----------Running generation: 362, population size: 1

***** Generation 362 : 0
**Parent Variant: [Variant id: 723, #gens: 186, #ops: 0, parent:-]

--Child created id: 724
--Creating new operations for variant [Variant id: 724, #gens: 186, #ops: 0, parent:723]
---analyzing modificationPoint position: 182
Templates availables12
Attempts Base Ingredients  1 total 12
---modifPoint 0 not mutation generated in  setSubMatrix(in, 0, 0)
---analyzing modificationPoint position: 90
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 1 not mutation generated in  if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) [...]
---analyzing modificationPoint position: 100
---modifPoint 2 not mutation generated in  return tableau.getRowDimension()
---analyzing modificationPoint position: 64
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 3 not mutation generated in  if (i != pivotRow) { 	double multiplier = tableau.getEntry(i, pivotCol); 	tableau.subtractRow(i, piv[...]
---analyzing modificationPoint position: 79
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [restrictToNonNegative]
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java296
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 	return null; [...] ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 296, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 	return null; [...] ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 724, #gens: 187, #ops: 1, parent:723] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 724, errors: [SimplexTableau.java:299: error: cannot assign a value to final variable restrictToNonNegative
				} 				restrictToNonNegative = restrictToNonNegative;}
				  				^]
Ingredient counter is Zero
---Undoing: gnrtn(362): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 	return null; [...] ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (723(f=1.0), 724(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (723(f=1.0), )
----------Running generation: 363, population size: 1

***** Generation 363 : 0
**Parent Variant: [Variant id: 725, #gens: 186, #ops: 0, parent:-]

--Child created id: 726
--Creating new operations for variant [Variant id: 726, #gens: 186, #ops: 0, parent:725]
---analyzing modificationPoint position: 48
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java85
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatio = ratio ` -topatch--> `tableau.discardArtificialVariables()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 85, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatio = ratio ` -topatch--> `tableau.discardArtificialVariables()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 726, #gens: 187, #ops: 1, parent:725] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 726
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-726/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 11, was successful: false, cases executed: 14] ,[]
-Valid?: |false|11|14|[]|, fitness 11.0
Ingredient counter is Zero
---Undoing: gnrtn(363): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatio = ratio ` -topatch--> `tableau.discardArtificialVariables()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (725(f=1.0), 726(f=11.0), )
Selected to next generation: IDs2--> (725(f=1.0), )
----------Running generation: 364, population size: 1

***** Generation 364 : 0
**Parent Variant: [Variant id: 727, #gens: 186, #ops: 0, parent:-]

--Child created id: 728
--Creating new operations for variant [Variant id: 728, #gens: 186, #ops: 0, parent:727]
---analyzing modificationPoint position: 81
Templates availables23
Attempts Base Ingredients  1 total 23
---modifPoint 0 not mutation generated in  checkVectorDimensions(v.length)
---analyzing modificationPoint position: 58
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [f, constraints, goalType, restrictToNonNegative, epsilon]
--> var from patch: f spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: constraints spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: goalType spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java105
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer pivotCol = getPivotColumn(tableau) ` -topatch--> `final org.apache.commons.math.optimization.linear.SimplexTableau tableau =  new org.apache.commons.m[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 105, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer pivotCol = getPivotColumn(tableau) ` -topatch--> `final org.apache.commons.math.optimization.linear.SimplexTableau tableau =  new org.apache.commons.m[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 728, #gens: 186, #ops: 1, parent:727] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 728, errors: [SimplexSolver.java:187: error: variable tableau is already defined in method doIteration(org.apache.commons.math.optimization.linear.SimplexTableau)
		final org.apache.commons.math.optimization.linear.SimplexTableau tableau = 
		                                                                 ^, SimplexSolver.java:188: error: cannot find symbol
		new org.apache.commons.math.optimization.linear.SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon); 		java.lang.Integer pivotRow = getPivotRow(pivotCol, tableau); 		if (pivotRow == null) { 			throw new org.apache.commons.math.optimization.linear.UnboundedSolutionException();} 		// set the pivot element to 1 		double pivotVal = tableau.getEntry(pivotRow, pivotCol); 		tableau.divideRow(pivotRow, pivotVal); 		// set the rest of the pivot column to 0
		                                                                                                                          		                                         ^
  symbol:   variable pivotCol
  location: class org.apache.commons.math.optimization.linear.SimplexSolver, SimplexSolver.java:189: error: cannot find symbol
		for (int i = 0; i < tableau.getHeight(); i++) { 			if (i != pivotRow) { 				double multiplier = tableau.getEntry(i, pivotCol); 				tableau.subtractRow(i, pivotRow, multiplier);}}} 	/**
		                                                			                     				                                        ^
  symbol:   variable pivotCol
  location: class org.apache.commons.math.optimization.linear.SimplexSolver]
Ingredient counter is Zero
---Undoing: gnrtn(364): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer pivotCol = getPivotColumn(tableau) ` -topatch--> `final org.apache.commons.math.optimization.linear.SimplexTableau tableau =  new org.apache.commons.m[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (727(f=1.0), 728(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (727(f=1.0), )
----------Running generation: 365, population size: 1

***** Generation 365 : 0
**Parent Variant: [Variant id: 729, #gens: 186, #ops: 0, parent:-]

--Child created id: 730
--Creating new operations for variant [Variant id: 730, #gens: 186, #ops: 0, parent:729]
---analyzing modificationPoint position: 87
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  java.lang.Integer row = null
---analyzing modificationPoint position: 52
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [restrictToNonNegative]
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtVariableReadImpl
location: AbstractLinearOptimizer.java98
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 98, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 730, #gens: 187, #ops: 1, parent:729] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 730, errors: [AbstractLinearOptimizer.java:102: error: final parameter restrictToNonNegative may not be assigned
		restrictToNonNegative = restrictToNonNegative; 		this.constraints = constraints; 		this.goalType = goalType; 		this.restrictToNonNegative = restrictToNonNegative;
		^]
Ingredient counter is Zero
---Undoing: gnrtn(365): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (729(f=1.0), 730(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (729(f=1.0), )
----------Running generation: 366, population size: 1

***** Generation 366 : 0
**Parent Variant: [Variant id: 731, #gens: 186, #ops: 0, parent:-]

--Child created id: 732
--Creating new operations for variant [Variant id: 732, #gens: 186, #ops: 0, parent:731]
---analyzing modificationPoint position: 108
Templates availables7
Attempts Base Ingredients  1 total 7
vars from patch [relationship]
--> var from patch: relationship spoon.support.reflect.code.CtVariableReadImpl
location: LinearConstraint.java101
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.relationship = relationship ` -topatch--> `relationship = relationship` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearConstraint line: 101, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.relationship = relationship ` -topatch--> `relationship = relationship` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 732, #gens: 186, #ops: 1, parent:731] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 732, errors: [LinearConstraint.java:102: error: final parameter relationship may not be assigned
	 */ 	public LinearConstraint(final org.apache.commons.math.linear.RealVector coefficients, final org.apache.commons.math.optimization.linear.Relationship relationship, final double value) { 		this.coefficients = coefficients; 		relationship = relationship;
	    	                                                                                                                                                                                         		                                  		^, LinearConstraint.java:104: error: variable relationship might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(366): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.relationship = relationship ` -topatch--> `relationship = relationship` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (731(f=1.0), 732(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (731(f=1.0), )
----------Running generation: 367, population size: 1

***** Generation 367 : 0
**Parent Variant: [Variant id: 733, #gens: 186, #ops: 0, parent:-]

--Child created id: 734
--Creating new operations for variant [Variant id: 734, #gens: 186, #ops: 0, parent:733]
---analyzing modificationPoint position: 97
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow,[...]
---analyzing modificationPoint position: 85
---modifPoint 1 not mutation generated in  return dot
---analyzing modificationPoint position: 26
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java188
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 188, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 734, #gens: 187, #ops: 1, parent:733] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 734, errors: [SimplexSolver.java:188: error: incompatible types: boolean cannot be converted to org.apache.commons.math.optimization.RealPointValuePair
		new org.apache.commons.math.optimization.linear.SimplexTableau(f, constraints, goalType, restrictToNonNegative, epsilon); 		return true;
		                                                                                                                          		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(367): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (733(f=1.0), 734(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (733(f=1.0), )
----------Running generation: 368, population size: 1

***** Generation 368 : 0
**Parent Variant: [Variant id: 735, #gens: 186, #ops: 0, parent:-]

--Child created id: 736
--Creating new operations for variant [Variant id: 736, #gens: 186, #ops: 0, parent:735]
---analyzing modificationPoint position: 120
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  int width = (((numDecisionVariables + numSlackVariables) +  numArtificialVariables) + getNumObjectiv[...]
---analyzing modificationPoint position: 177
location: Array2DRowRealMatrix.java331
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (nCols == 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 736, #gens: 185, #ops: 1, parent:735] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 736
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-736/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(368): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (nCols == 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (735(f=1.0), 736(f=1.0), )
Selected to next generation: IDs2--> (735(f=1.0), )
----------Running generation: 369, population size: 1

***** Generation 369 : 0
**Parent Variant: [Variant id: 737, #gens: 186, #ops: 0, parent:-]

--Child created id: 738
--Creating new operations for variant [Variant id: 738, #gens: 186, #ops: 0, parent:737]
---analyzing modificationPoint position: 126
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java138
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math.linear.RealVector objectiveCoefficients =  (maximize) ? f.getCoefficients().[...] ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 138, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math.linear.RealVector objectiveCoefficients =  (maximize) ? f.getCoefficients().[...] ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 738, #gens: 187, #ops: 1, parent:737] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 738, errors: [SimplexTableau.java:540: error: illegal start of type
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		^, SimplexTableau.java:540: error: ';' expected
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		      ^, SimplexTableau.java:544: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	       ^, SimplexTableau.java:544: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	                               		                                          ^, SimplexTableau.java:548: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	       ^, SimplexTableau.java:548: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		^, SimplexTableau.java:548: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                      ^, SimplexTableau.java:548: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                        		                  ^, SimplexTableau.java:554: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                     ^, SimplexTableau.java:554: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                         ^, SimplexTableau.java:554: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                           		                                                                                                                                                           ^, SimplexTableau.java:558: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                ^, SimplexTableau.java:558: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                                                 		                                               ^, SimplexTableau.java:564: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                          ^, SimplexTableau.java:564: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		^, SimplexTableau.java:564: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		           ^, SimplexTableau.java:564: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				        ^, SimplexTableau.java:564: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				           		             ^, SimplexTableau.java:567: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                            ^, SimplexTableau.java:567: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                    ^, SimplexTableau.java:567: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			^, SimplexTableau.java:567: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			                         ^, SimplexTableau.java:573: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                         ^, SimplexTableau.java:573: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		^, SimplexTableau.java:573: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                   ^, SimplexTableau.java:573: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                     		           ^, SimplexTableau.java:579: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                            ^, SimplexTableau.java:579: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                                       		                              ^, SimplexTableau.java:585: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                       ^, SimplexTableau.java:585: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                                  		                               ^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                            ^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                    ^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                     ^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				        ^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				            ^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				               		           ^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			       ^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                ^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                            ^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                ^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                 ^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                      ^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                       ^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		^, SimplexTableau.java:593: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		                                ^, SimplexTableau.java:602: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                             ^, SimplexTableau.java:602: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                 ^, SimplexTableau.java:602: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                      ^, SimplexTableau.java:602: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:606: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		^, SimplexTableau.java:606: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		^, SimplexTableau.java:606: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		^, SimplexTableau.java:606: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		^, SimplexTableau.java:606: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                ^, SimplexTableau.java:606: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                         ^, SimplexTableau.java:606: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                                			                                                                                     			^, SimplexTableau.java:613: error: class, interface, or enum expected
	 * @param dividendRow
	          ^, SimplexTableau.java:615: error: class, interface, or enum expected
	 * @param divisor
	          ^, SimplexTableau.java:617: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                               ^, SimplexTableau.java:617: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                      ^, SimplexTableau.java:617: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                ^, SimplexTableau.java:617: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                ^, SimplexTableau.java:617: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                       			                                                                             ^, SimplexTableau.java:630: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                 ^, SimplexTableau.java:630: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                       ^, SimplexTableau.java:630: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                ^, SimplexTableau.java:630: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                ^, SimplexTableau.java:630: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                ^, SimplexTableau.java:630: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                       			                                                                                                                   ^, SimplexTableau.java:634: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                ^, SimplexTableau.java:634: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                                 		                                    ^, SimplexTableau.java:638: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                ^, SimplexTableau.java:638: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                                  		                                 ^, SimplexTableau.java:646: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                ^, SimplexTableau.java:646: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                      ^, SimplexTableau.java:646: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                     ^, SimplexTableau.java:646: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                                   		                                     ^, SimplexTableau.java:655: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                ^, SimplexTableau.java:655: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                    ^, SimplexTableau.java:655: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                   ^, SimplexTableau.java:655: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                     ^, SimplexTableau.java:655: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                     		                                     ^, SimplexTableau.java:659: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:659: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                               		                                                         ^, SimplexTableau.java:663: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                ^, SimplexTableau.java:663: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                                    		                                                                               ^, SimplexTableau.java:667: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                ^, SimplexTableau.java:667: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                     		                      ^, SimplexTableau.java:672: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                ^, SimplexTableau.java:672: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                          		                                                                      ^, SimplexTableau.java:682: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:682: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                                		                            ^, SimplexTableau.java:687: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                ^, SimplexTableau.java:687: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                        		                                                                               ^, SimplexTableau.java:691: error: class, interface, or enum expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(369): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math.linear.RealVector objectiveCoefficients =  (maximize) ? f.getCoefficients().[...] ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (737(f=1.0), 738(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (737(f=1.0), )
----------Running generation: 370, population size: 1

***** Generation 370 : 0
**Parent Variant: [Variant id: 739, #gens: 186, #ops: 0, parent:-]

--Child created id: 740
--Creating new operations for variant [Variant id: 740, #gens: 186, #ops: 0, parent:739]
---analyzing modificationPoint position: 125
Templates availables25
Attempts Base Ingredients  1 total 25
vars from patch [this.tableau, matrix]
--> var from patch: this.tableau spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: matrix spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java137
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[zIndex][zIndex] = (maximize) ? 1 : -1 ` -topatch--> `this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 137, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[zIndex][zIndex] = (maximize) ? 1 : -1 ` -topatch--> `this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 740, #gens: 186, #ops: 1, parent:739] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 740, errors: [SimplexTableau.java:325: error: illegal start of type
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		^, SimplexTableau.java:325: error: ';' expected
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		      ^, SimplexTableau.java:329: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	       ^, SimplexTableau.java:329: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	                               		                                          ^, SimplexTableau.java:333: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	       ^, SimplexTableau.java:333: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		^, SimplexTableau.java:333: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                      ^, SimplexTableau.java:333: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                        		                  ^, SimplexTableau.java:339: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                     ^, SimplexTableau.java:339: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                         ^, SimplexTableau.java:339: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                           		                                                                                                                                                           ^, SimplexTableau.java:343: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                ^, SimplexTableau.java:343: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                                                 		                                               ^, SimplexTableau.java:349: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                          ^, SimplexTableau.java:349: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		^, SimplexTableau.java:349: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		           ^, SimplexTableau.java:349: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				        ^, SimplexTableau.java:349: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				           		             ^, SimplexTableau.java:352: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                            ^, SimplexTableau.java:352: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                    ^, SimplexTableau.java:352: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			^, SimplexTableau.java:352: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			                         ^, SimplexTableau.java:358: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                         ^, SimplexTableau.java:358: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		^, SimplexTableau.java:358: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                   ^, SimplexTableau.java:358: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                     		           ^, SimplexTableau.java:364: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                            ^, SimplexTableau.java:364: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                                       		                              ^, SimplexTableau.java:370: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                       ^, SimplexTableau.java:370: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                                  		                               ^, SimplexTableau.java:376: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                            ^, SimplexTableau.java:376: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		^, SimplexTableau.java:376: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		^, SimplexTableau.java:376: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                    ^, SimplexTableau.java:376: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                     ^, SimplexTableau.java:376: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				        ^, SimplexTableau.java:376: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				            ^, SimplexTableau.java:376: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				               		           ^, SimplexTableau.java:378: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			       ^, SimplexTableau.java:378: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		^, SimplexTableau.java:378: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		^, SimplexTableau.java:378: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		^, SimplexTableau.java:378: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                ^, SimplexTableau.java:378: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                            ^, SimplexTableau.java:378: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                ^, SimplexTableau.java:378: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                 ^, SimplexTableau.java:378: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                      ^, SimplexTableau.java:378: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                       ^, SimplexTableau.java:378: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		^, SimplexTableau.java:378: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		                                ^, SimplexTableau.java:387: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                             ^, SimplexTableau.java:387: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                 ^, SimplexTableau.java:387: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                      ^, SimplexTableau.java:387: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:391: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		^, SimplexTableau.java:391: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		^, SimplexTableau.java:391: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		^, SimplexTableau.java:391: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		^, SimplexTableau.java:391: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                ^, SimplexTableau.java:391: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                         ^, SimplexTableau.java:391: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                                			                                                                                     			^, SimplexTableau.java:398: error: class, interface, or enum expected
	 * @param dividendRow
	          ^, SimplexTableau.java:400: error: class, interface, or enum expected
	 * @param divisor
	          ^, SimplexTableau.java:402: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                               ^, SimplexTableau.java:402: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                      ^, SimplexTableau.java:402: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                ^, SimplexTableau.java:402: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                ^, SimplexTableau.java:402: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                       			                                                                             ^, SimplexTableau.java:415: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                 ^, SimplexTableau.java:415: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                       ^, SimplexTableau.java:415: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                ^, SimplexTableau.java:415: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                ^, SimplexTableau.java:415: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                ^, SimplexTableau.java:415: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                       			                                                                                                                   ^, SimplexTableau.java:419: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                ^, SimplexTableau.java:419: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                                 		                                    ^, SimplexTableau.java:423: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                ^, SimplexTableau.java:423: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                                  		                                 ^, SimplexTableau.java:431: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                ^, SimplexTableau.java:431: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                      ^, SimplexTableau.java:431: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                     ^, SimplexTableau.java:431: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                                   		                                     ^, SimplexTableau.java:440: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                ^, SimplexTableau.java:440: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                    ^, SimplexTableau.java:440: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                   ^, SimplexTableau.java:440: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                     ^, SimplexTableau.java:440: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                     		                                     ^, SimplexTableau.java:444: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:444: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                               		                                                         ^, SimplexTableau.java:448: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                ^, SimplexTableau.java:448: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                                    		                                                                               ^, SimplexTableau.java:452: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;}
	    	                ^, SimplexTableau.java:452: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;}
	    	                                     		                      ^, SimplexTableau.java:458: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() {
	    	                ^, SimplexTableau.java:460: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:472: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() {
	    	                ^, SimplexTableau.java:474: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:481: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() {
	    	                ^, SimplexTableau.java:483: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:489: error: class, interface, or enum expected
	 */ 	protected final int getNumSlackVariables() {
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(370): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[zIndex][zIndex] = (maximize) ? 1 : -1 ` -topatch--> `this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (739(f=1.0), 740(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (739(f=1.0), )
----------Running generation: 371, population size: 1

***** Generation 371 : 0
**Parent Variant: [Variant id: 741, #gens: 186, #ops: 0, parent:-]

--Child created id: 742
--Creating new operations for variant [Variant id: 742, #gens: 186, #ops: 0, parent:741]
---analyzing modificationPoint position: 104
Templates availables18
Attempts Base Ingredients  1 total 18
vars from patch [coefficients]
--> var from patch: coefficients spoon.support.reflect.code.CtFieldReadImpl
SameName: org.apache.commons.math.linear.RealVector coefficients
SameName: org.apache.commons.math.linear.RealVector coefficients
Transforming shadowed variable in return coefficients
location: LinearObjectiveFunction.java67
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constantTerm = constantTerm ` -topatch--> `return coefficients` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearObjectiveFunction line: 67, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constantTerm = constantTerm ` -topatch--> `return coefficients` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 742, #gens: 187, #ops: 1, parent:741] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 742, errors: [LinearObjectiveFunction.java:76: error: incompatible types: unexpected return value
		return coefficients; 		this.constantTerm = constantTerm;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(371): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constantTerm = constantTerm ` -topatch--> `return coefficients` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (741(f=1.0), 742(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (741(f=1.0), )
----------Running generation: 372, population size: 1

***** Generation 372 : 0
**Parent Variant: [Variant id: 743, #gens: 186, #ops: 0, parent:-]

--Child created id: 744
--Creating new operations for variant [Variant id: 744, #gens: 186, #ops: 0, parent:743]
---analyzing modificationPoint position: 35
Templates availables10
Attempts Base Ingredients  1 total 10
---modifPoint 0 not mutation generated in  if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)[...]
---analyzing modificationPoint position: 86
location: LinearConstraint.java81
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), relationship, value) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 744, #gens: 185, #ops: 1, parent:743] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 744, errors: [LinearConstraint.java:83: error: variable coefficients might not have been initialized
	 */ 	public LinearConstraint(final double[] coefficients, final org.apache.commons.math.optimization.linear.Relationship relationship, final double value) {}
	    	                                                                                                                                                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(372): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), relationship, value) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (743(f=1.0), 744(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (743(f=1.0), )
----------Running generation: 373, population size: 1

***** Generation 373 : 0
**Parent Variant: [Variant id: 745, #gens: 186, #ops: 0, parent:-]

--Child created id: 746
--Creating new operations for variant [Variant id: 746, #gens: 186, #ops: 0, parent:745]
---analyzing modificationPoint position: 88
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [this.numArtificialVariables]
--> var from patch: this.numArtificialVariables spoon.support.reflect.code.CtFieldWriteImpl
location: SimplexTableau.java292
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0 ` -topatch--> `this.numArtificialVariables = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 292, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0 ` -topatch--> `this.numArtificialVariables = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 746, #gens: 187, #ops: 1, parent:745] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 746
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-746/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 11, was successful: false, cases executed: 14] ,[]
-Valid?: |false|11|14|[]|, fitness 11.0
Ingredient counter is Zero
---Undoing: gnrtn(373): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0 ` -topatch--> `this.numArtificialVariables = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (745(f=1.0), 746(f=11.0), )
Selected to next generation: IDs2--> (745(f=1.0), )
----------Running generation: 374, population size: 1

***** Generation 374 : 0
**Parent Variant: [Variant id: 747, #gens: 186, #ops: 0, parent:-]

--Child created id: 748
--Creating new operations for variant [Variant id: 748, #gens: 186, #ops: 0, parent:747]
---analyzing modificationPoint position: 113
location: SimplexTableau.java108
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.epsilon = epsilon ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 748, #gens: 185, #ops: 1, parent:747] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 748, errors: [SimplexTableau.java:117: error: variable epsilon might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(374): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.epsilon = epsilon ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (747(f=1.0), 748(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (747(f=1.0), )
----------Running generation: 375, population size: 1

***** Generation 375 : 0
**Parent Variant: [Variant id: 749, #gens: 186, #ops: 0, parent:-]

--Child created id: 750
--Creating new operations for variant [Variant id: 750, #gens: 186, #ops: 0, parent:749]
---analyzing modificationPoint position: 75
Templates availables71
Attempts Base Ingredients  1 total 71
---modifPoint 0 not mutation generated in  if (x < y) { 	return -1; }
---analyzing modificationPoint position: 74
location: MathUtils.java368
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return 0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 750, #gens: 185, #ops: 1, parent:749] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 750
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-750/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(375): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return 0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (749(f=1.0), 750(f=1.0), )
Selected to next generation: IDs2--> (749(f=1.0), )
----------Running generation: 376, population size: 1

***** Generation 376 : 0
**Parent Variant: [Variant id: 751, #gens: 186, #ops: 0, parent:-]

--Child created id: 752
--Creating new operations for variant [Variant id: 752, #gens: 186, #ops: 0, parent:751]
---analyzing modificationPoint position: 129
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  if (!restrictToNonNegative) { 	matrix[zIndex][getSlackVariableOffset() - 1] =  	org.apache.commons.m[...]
---analyzing modificationPoint position: 28
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 1 not mutation generated in  while (!isOptimal(tableau)) { 	doIteration(tableau); } 
---analyzing modificationPoint position: 81
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 2 not mutation generated in  checkVectorDimensions(v.length)
---analyzing modificationPoint position: 5
---modifPoint 3 not mutation generated in  return coefficients.dotProduct(point) + constantTerm
---analyzing modificationPoint position: 113
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 4 not mutation generated in  this.epsilon = epsilon
---analyzing modificationPoint position: 55
location: AbstractLinearOptimizer.java101
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 752, #gens: 185, #ops: 1, parent:751] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child compiles: id 752
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-752/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 14] ,[]
-Valid?: |false|4|14|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(376): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (751(f=1.0), 752(f=4.0), )
Selected to next generation: IDs2--> (751(f=1.0), )
----------Running generation: 377, population size: 1

***** Generation 377 : 0
**Parent Variant: [Variant id: 753, #gens: 186, #ops: 0, parent:-]

--Child created id: 754
--Creating new operations for variant [Variant id: 754, #gens: 186, #ops: 0, parent:753]
---analyzing modificationPoint position: 18
location: SimplexTableau.java352
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `coefficients[i] =  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -  (restrictToNonNega[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 754, #gens: 185, #ops: 1, parent:753] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 754
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-754/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 11, was successful: false, cases executed: 14] ,[]
-Valid?: |false|11|14|[]|, fitness 11.0
Ingredient counter is Zero
---Undoing: gnrtn(377): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `coefficients[i] =  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -  (restrictToNonNega[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (753(f=1.0), 754(f=11.0), )
Selected to next generation: IDs2--> (753(f=1.0), )
----------Running generation: 378, population size: 1

***** Generation 378 : 0
**Parent Variant: [Variant id: 755, #gens: 186, #ops: 0, parent:-]

--Child created id: 756
--Creating new operations for variant [Variant id: 756, #gens: 186, #ops: 0, parent:755]
---analyzing modificationPoint position: 98
location: SimplexTableau.java388
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -  (multiple * tableau.getEntry(subt[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 756, #gens: 185, #ops: 1, parent:755] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 756
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-756/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(378): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -  (multiple * tableau.getEntry(subt[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (755(f=1.0), 756(f=14.0), )
Selected to next generation: IDs2--> (755(f=1.0), )
----------Running generation: 379, population size: 1

***** Generation 379 : 0
**Parent Variant: [Variant id: 757, #gens: 186, #ops: 0, parent:-]

--Child created id: 758
--Creating new operations for variant [Variant id: 758, #gens: 186, #ops: 0, parent:757]
---analyzing modificationPoint position: 25
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 0 not mutation generated in  matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack 
---analyzing modificationPoint position: 6
---modifPoint 1 not mutation generated in  // solve the problem return doOptimize()
---analyzing modificationPoint position: 143
Templates availables8
Attempts Base Ingredients  1 total 8
---modifPoint 2 not mutation generated in  return value
---analyzing modificationPoint position: 164
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 3 not mutation generated in  if (data.length != n) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentExc[...]
---analyzing modificationPoint position: 174
Templates availables120
Attempts Base Ingredients  1 total 120
---modifPoint 4 not mutation generated in  final int nRows = subMatrix.length
---analyzing modificationPoint position: 47
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 5 not mutation generated in  if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; }
---analyzing modificationPoint position: 115
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 6 not mutation generated in  this.numSlackVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relatio[...]
---analyzing modificationPoint position: 22
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 7 not mutation generated in  if (tableau.getNumArtificialVariables() > 0) { 	return false; }
---analyzing modificationPoint position: 39
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 8 not mutation generated in  return minPos
---analyzing modificationPoint position: 71
location: SimplexTableau.java371
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 758, #gens: 185, #ops: 1, parent:757] gen mutated: 1 , gen not mut: 9, gen not applied  0
-The child compiles: id 758
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-758/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 14] ,[]
-Valid?: |false|4|14|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(379): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (757(f=1.0), 758(f=4.0), )
Selected to next generation: IDs2--> (757(f=1.0), )
----------Running generation: 380, population size: 1

***** Generation 380 : 0
**Parent Variant: [Variant id: 759, #gens: 186, #ops: 0, parent:-]

--Child created id: 760
--Creating new operations for variant [Variant id: 760, #gens: 186, #ops: 0, parent:759]
---analyzing modificationPoint position: 6
---modifPoint 0 not mutation generated in  // solve the problem return doOptimize()
---analyzing modificationPoint position: 147
location: SimplexTableau.java200
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `normalized.add(normalize(constraint)) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 760, #gens: 185, #ops: 1, parent:759] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 760
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-760/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(380): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `normalized.add(normalize(constraint)) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (759(f=1.0), 760(f=14.0), )
Selected to next generation: IDs2--> (759(f=1.0), )
----------Running generation: 381, population size: 1

***** Generation 381 : 0
**Parent Variant: [Variant id: 761, #gens: 186, #ops: 0, parent:-]

--Child created id: 762
--Creating new operations for variant [Variant id: 762, #gens: 186, #ops: 0, parent:761]
---analyzing modificationPoint position: 107
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 0 not mutation generated in  this.coefficients = coefficients
---analyzing modificationPoint position: 80
Templates availables31
Attempts Base Ingredients  1 total 31
---modifPoint 1 not mutation generated in  return getNumObjectiveFunctions() + numDecisionVariables
---analyzing modificationPoint position: 149
Templates availables14
Attempts Base Ingredients  1 total 14
vars from patch [constraint]
--> var from patch: constraint spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java211
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (constraint.getValue() < 0) { 	return new org.apache.commons.math.optimization.linear.LinearConst[...] ` -topatch--> `if (constraint.getValue() < 0) { 	return new org.apache.commons.math.optimization.linear.LinearConst[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 211, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (constraint.getValue() < 0) { 	return new org.apache.commons.math.optimization.linear.LinearConst[...] ` -topatch--> `if (constraint.getValue() < 0) { 	return new org.apache.commons.math.optimization.linear.LinearConst[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 762, #gens: 186, #ops: 1, parent:761] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 762
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-762/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(381): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (constraint.getValue() < 0) { 	return new org.apache.commons.math.optimization.linear.LinearConst[...] ` -topatch--> `if (constraint.getValue() < 0) { 	return new org.apache.commons.math.optimization.linear.LinearConst[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (761(f=1.0), 762(f=1.0), )
Selected to next generation: IDs2--> (761(f=1.0), )
----------Running generation: 382, population size: 1

***** Generation 382 : 0
**Parent Variant: [Variant id: 763, #gens: 186, #ops: 0, parent:-]

--Child created id: 764
--Creating new operations for variant [Variant id: 764, #gens: 186, #ops: 0, parent:763]
---analyzing modificationPoint position: 24
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { 	ret[...]
---analyzing modificationPoint position: 171
Templates availables11
Attempts Base Ingredients  1 total 11
---modifPoint 1 not mutation generated in  if (data == null) { 	if (row > 0) { 		throw org.apache.commons.math.MathRuntimeException.createIlleg[...]
---analyzing modificationPoint position: 45
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 2 not mutation generated in  if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 	final double ratio [...]
---analyzing modificationPoint position: 41
---modifPoint 3 not mutation generated in  java.lang.Integer minRatioPos = null
---analyzing modificationPoint position: 12
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch []
location: SimplexTableau.java342
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset[...] ` -topatch--> `// initialize the constraint rows int slackVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 342, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset[...] ` -topatch--> `// initialize the constraint rows int slackVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 764, #gens: 186, #ops: 1, parent:763] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 764, errors: [SimplexTableau.java:355: error: cannot find symbol
				(restrictToNonNegative ? 0 : mostNegative);
				                             ^
  symbol:   variable mostNegative
  location: class org.apache.commons.math.optimization.linear.SimplexTableau]
Ingredient counter is Zero
---Undoing: gnrtn(382): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset[...] ` -topatch--> `// initialize the constraint rows int slackVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (763(f=1.0), 764(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (763(f=1.0), )
----------Running generation: 383, population size: 1

***** Generation 383 : 0
**Parent Variant: [Variant id: 765, #gens: 186, #ops: 0, parent:-]

--Child created id: 766
--Creating new operations for variant [Variant id: 766, #gens: 186, #ops: 0, parent:765]
---analyzing modificationPoint position: 31
---modifPoint 0 not mutation generated in  double minValue = 0
---analyzing modificationPoint position: 116
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [numDecisionVariables]
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java112
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...] ` -topatch--> `return numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 112, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...] ` -topatch--> `return numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 766, #gens: 187, #ops: 1, parent:765] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 766, errors: [SimplexTableau.java:485: error: illegal start of type
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		^, SimplexTableau.java:485: error: ';' expected
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		      ^, SimplexTableau.java:489: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	       ^, SimplexTableau.java:489: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	                               		                                          ^, SimplexTableau.java:493: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	       ^, SimplexTableau.java:493: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		^, SimplexTableau.java:493: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                      ^, SimplexTableau.java:493: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                        		                  ^, SimplexTableau.java:499: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                     ^, SimplexTableau.java:499: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                         ^, SimplexTableau.java:499: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                           		                                                                                                                                                           ^, SimplexTableau.java:503: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                ^, SimplexTableau.java:503: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                                                 		                                               ^, SimplexTableau.java:509: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                          ^, SimplexTableau.java:509: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		^, SimplexTableau.java:509: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		           ^, SimplexTableau.java:509: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				        ^, SimplexTableau.java:509: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				           		             ^, SimplexTableau.java:512: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                            ^, SimplexTableau.java:512: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                    ^, SimplexTableau.java:512: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			^, SimplexTableau.java:512: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			                         ^, SimplexTableau.java:518: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                         ^, SimplexTableau.java:518: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		^, SimplexTableau.java:518: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                   ^, SimplexTableau.java:518: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                     		           ^, SimplexTableau.java:524: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                            ^, SimplexTableau.java:524: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                                       		                              ^, SimplexTableau.java:530: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                       ^, SimplexTableau.java:530: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                                  		                               ^, SimplexTableau.java:536: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                            ^, SimplexTableau.java:536: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		^, SimplexTableau.java:536: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		^, SimplexTableau.java:536: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                    ^, SimplexTableau.java:536: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                     ^, SimplexTableau.java:536: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				        ^, SimplexTableau.java:536: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				            ^, SimplexTableau.java:536: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				               		           ^, SimplexTableau.java:538: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			       ^, SimplexTableau.java:538: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		^, SimplexTableau.java:538: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		^, SimplexTableau.java:538: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		^, SimplexTableau.java:538: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                ^, SimplexTableau.java:538: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                            ^, SimplexTableau.java:538: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                ^, SimplexTableau.java:538: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                 ^, SimplexTableau.java:538: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                      ^, SimplexTableau.java:538: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                       ^, SimplexTableau.java:538: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		^, SimplexTableau.java:538: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		                                ^, SimplexTableau.java:547: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                             ^, SimplexTableau.java:547: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                 ^, SimplexTableau.java:547: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                      ^, SimplexTableau.java:547: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:551: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		^, SimplexTableau.java:551: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		^, SimplexTableau.java:551: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		^, SimplexTableau.java:551: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		^, SimplexTableau.java:551: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                ^, SimplexTableau.java:551: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                         ^, SimplexTableau.java:551: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                                			                                                                                     			^, SimplexTableau.java:558: error: class, interface, or enum expected
	 * @param dividendRow
	          ^, SimplexTableau.java:560: error: class, interface, or enum expected
	 * @param divisor
	          ^, SimplexTableau.java:562: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                               ^, SimplexTableau.java:562: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                      ^, SimplexTableau.java:562: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                ^, SimplexTableau.java:562: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                ^, SimplexTableau.java:562: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                       			                                                                             ^, SimplexTableau.java:575: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                 ^, SimplexTableau.java:575: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                       ^, SimplexTableau.java:575: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                ^, SimplexTableau.java:575: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                ^, SimplexTableau.java:575: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                ^, SimplexTableau.java:575: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                       			                                                                                                                   ^, SimplexTableau.java:579: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                ^, SimplexTableau.java:579: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                                 		                                    ^, SimplexTableau.java:583: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                ^, SimplexTableau.java:583: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                                  		                                 ^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                ^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                      ^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                     ^, SimplexTableau.java:591: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                                   		                                     ^, SimplexTableau.java:600: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                ^, SimplexTableau.java:600: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                    ^, SimplexTableau.java:600: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                   ^, SimplexTableau.java:600: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                     ^, SimplexTableau.java:600: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                     		                                     ^, SimplexTableau.java:604: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:604: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                               		                                                         ^, SimplexTableau.java:608: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                ^, SimplexTableau.java:608: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                                    		                                                                               ^, SimplexTableau.java:612: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                ^, SimplexTableau.java:612: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                     		                      ^, SimplexTableau.java:617: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                ^, SimplexTableau.java:617: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                          		                                                                      ^, SimplexTableau.java:627: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:627: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                                		                            ^, SimplexTableau.java:632: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                ^, SimplexTableau.java:632: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                        		                                                                               ^, SimplexTableau.java:636: error: class, interface, or enum expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(383): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...] ` -topatch--> `return numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (765(f=1.0), 766(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (765(f=1.0), )
----------Running generation: 384, population size: 1

***** Generation 384 : 0
**Parent Variant: [Variant id: 767, #gens: 186, #ops: 0, parent:-]

--Child created id: 768
--Creating new operations for variant [Variant id: 768, #gens: 186, #ops: 0, parent:767]
---analyzing modificationPoint position: 26
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  solvePhase1(tableau)
---analyzing modificationPoint position: 64
location: SimplexSolver.java117
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (i != pivotRow) { 	double multiplier = tableau.getEntry(i, pivotCol); 	tableau.subtractRow(i, piv[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 768, #gens: 185, #ops: 1, parent:767] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 768
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-768/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(384): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (i != pivotRow) { 	double multiplier = tableau.getEntry(i, pivotCol); 	tableau.subtractRow(i, piv[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (767(f=1.0), 768(f=14.0), )
Selected to next generation: IDs2--> (767(f=1.0), )
----------Running generation: 385, population size: 1

***** Generation 385 : 0
**Parent Variant: [Variant id: 769, #gens: 186, #ops: 0, parent:-]

--Child created id: 770
--Creating new operations for variant [Variant id: 770, #gens: 186, #ops: 0, parent:769]
---analyzing modificationPoint position: 126
---modifPoint 0 not mutation generated in  org.apache.commons.math.linear.RealVector objectiveCoefficients =  (maximize) ? f.getCoefficients().[...]
---analyzing modificationPoint position: 25
Templates availables25
Attempts Base Ingredients  1 total 25
vars from patch [matrix, row, constraint]
--> var from patch: matrix spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: row spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: constraint spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java170
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack  ` -topatch--> `matrix[row][getSlackVariableOffset() - 1] =  org.apache.commons.math.optimization.linear.SimplexTabl[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 170, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack  ` -topatch--> `matrix[row][getSlackVariableOffset() - 1] =  org.apache.commons.math.optimization.linear.SimplexTabl[...]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 770, #gens: 186, #ops: 1, parent:769] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 770
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-770/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 14] ,[]
-Valid?: |false|2|14|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(385): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack  ` -topatch--> `matrix[row][getSlackVariableOffset() - 1] =  org.apache.commons.math.optimization.linear.SimplexTabl[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (769(f=1.0), 770(f=2.0), )
Selected to next generation: IDs2--> (769(f=1.0), )
----------Running generation: 386, population size: 1

***** Generation 386 : 0
**Parent Variant: [Variant id: 771, #gens: 186, #ops: 0, parent:-]

--Child created id: 772
--Creating new operations for variant [Variant id: 772, #gens: 186, #ops: 0, parent:771]
---analyzing modificationPoint position: 127
location: SimplexTableau.java140
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions()) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 772, #gens: 185, #ops: 1, parent:771] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 772
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-772/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 14] ,[]
-Valid?: |false|7|14|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(386): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions()) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (771(f=1.0), 772(f=7.0), )
Selected to next generation: IDs2--> (771(f=1.0), )
----------Running generation: 387, population size: 1

***** Generation 387 : 0
**Parent Variant: [Variant id: 773, #gens: 186, #ops: 0, parent:-]

--Child created id: 774
--Creating new operations for variant [Variant id: 774, #gens: 186, #ops: 0, parent:773]
---analyzing modificationPoint position: 86
Templates availables5
Attempts Base Ingredients  1 total 5
---modifPoint 0 not mutation generated in  this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), relationship, value)
---analyzing modificationPoint position: 93
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 1 not mutation generated in  double[] out = new double[data.length]
---analyzing modificationPoint position: 52
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [iterations, maxIterations]
--> var from patch: iterations spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: maxIterations spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLinearOptimizer.java98
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 98, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 774, #gens: 187, #ops: 1, parent:773] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 774
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-774/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(387): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (773(f=1.0), 774(f=1.0), )
Selected to next generation: IDs2--> (773(f=1.0), )
----------Running generation: 388, population size: 1

***** Generation 388 : 0
**Parent Variant: [Variant id: 775, #gens: 186, #ops: 0, parent:-]

--Child created id: 776
--Creating new operations for variant [Variant id: 776, #gens: 186, #ops: 0, parent:775]
---analyzing modificationPoint position: 9
Templates availables31
Attempts Base Ingredients  1 total 31
vars from patch [numDecisionVariables, numSlackVariables]
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numSlackVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java282
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return getBasicRow(col, false) ` -topatch--> `return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 282, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return getBasicRow(col, false) ` -topatch--> `return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 776, #gens: 186, #ops: 1, parent:775] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 776, errors: [SimplexTableau.java:464: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:464: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:464: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:464: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:464: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:464: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:466: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:466: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:466: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:466: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:466: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:466: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:466: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:468: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:468: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:469: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:470: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:470: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:471: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:471: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:472: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:473: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:473: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:473: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:474: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:474: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:474: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:474: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:474: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:474: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:487: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:487: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:487: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:487: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:487: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:487: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:491: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:491: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:495: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:495: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:503: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:503: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:503: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:503: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:512: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:512: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:512: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:512: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:512: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:516: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:516: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:520: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:520: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:524: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:524: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:529: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:529: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:539: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:539: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:544: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:544: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:548: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:548: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:552: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:552: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:556: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:556: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:558: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:558: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:561: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:568: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:568: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:568: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:568: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:568: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:568: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:577: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:577: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:577: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:577: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:577: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:577: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:577: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:577: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:577: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(388): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return getBasicRow(col, false) ` -topatch--> `return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (775(f=1.0), 776(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (775(f=1.0), )
----------Running generation: 389, population size: 1

***** Generation 389 : 0
**Parent Variant: [Variant id: 777, #gens: 186, #ops: 0, parent:-]

--Child created id: 778
--Creating new operations for variant [Variant id: 778, #gens: 186, #ops: 0, parent:777]
---analyzing modificationPoint position: 49
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [iterations, maxIterations]
--> var from patch: iterations spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: maxIterations spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLinearOptimizer.java86
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...] ` -topatch--> `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 86, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...] ` -topatch--> `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 778, #gens: 187, #ops: 1, parent:777] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 778
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-778/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 14] ,[]
-Valid?: |false|2|14|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(389): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...] ` -topatch--> `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (777(f=1.0), 778(f=2.0), )
Selected to next generation: IDs2--> (777(f=1.0), )
----------Running generation: 390, population size: 1

***** Generation 390 : 0
**Parent Variant: [Variant id: 779, #gens: 186, #ops: 0, parent:-]

--Child created id: 780
--Creating new operations for variant [Variant id: 780, #gens: 186, #ops: 0, parent:779]
---analyzing modificationPoint position: 3
location: SimplexSolver.java152
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return false ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 780, #gens: 185, #ops: 1, parent:779] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 780
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-780/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 14] ,[]
-Valid?: |false|8|14|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(390): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return false ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (779(f=1.0), 780(f=8.0), )
Selected to next generation: IDs2--> (779(f=1.0), )
----------Running generation: 391, population size: 1

***** Generation 391 : 0
**Parent Variant: [Variant id: 781, #gens: 186, #ops: 0, parent:-]

--Child created id: 782
--Creating new operations for variant [Variant id: 782, #gens: 186, #ops: 0, parent:781]
---analyzing modificationPoint position: 100
Templates availables31
Attempts Base Ingredients  1 total 31
---modifPoint 0 not mutation generated in  return tableau.getRowDimension()
---analyzing modificationPoint position: 64
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [java.lang.Double.MAX_VALUE]
--> var from patch: java.lang.Double.MAX_VALUE spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java117
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (i != pivotRow) { 	double multiplier = tableau.getEntry(i, pivotCol); 	tableau.subtractRow(i, piv[...] ` -topatch--> `double minRatio = java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 117, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (i != pivotRow) { 	double multiplier = tableau.getEntry(i, pivotCol); 	tableau.subtractRow(i, piv[...] ` -topatch--> `double minRatio = java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 782, #gens: 187, #ops: 1, parent:781] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 782
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-782/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(391): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (i != pivotRow) { 	double multiplier = tableau.getEntry(i, pivotCol); 	tableau.subtractRow(i, piv[...] ` -topatch--> `double minRatio = java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (781(f=1.0), 782(f=1.0), )
Selected to next generation: IDs2--> (781(f=1.0), )
----------Running generation: 392, population size: 1

***** Generation 392 : 0
**Parent Variant: [Variant id: 783, #gens: 186, #ops: 0, parent:-]

--Child created id: 784
--Creating new operations for variant [Variant id: 784, #gens: 186, #ops: 0, parent:783]
---analyzing modificationPoint position: 156
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  return count
---analyzing modificationPoint position: 73
location: MathUtils.java367
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.equals(x, y, eps)) { 	return 0; } else if (x < y) { 	retu[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 784, #gens: 185, #ops: 1, parent:783] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 784
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-784/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 14] ,[]
-Valid?: |false|12|14|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(392): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.equals(x, y, eps)) { 	return 0; } else if (x < y) { 	retu[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (783(f=1.0), 784(f=12.0), )
Selected to next generation: IDs2--> (783(f=1.0), )
----------Running generation: 393, population size: 1

***** Generation 393 : 0
**Parent Variant: [Variant id: 785, #gens: 186, #ops: 0, parent:-]

--Child created id: 786
--Creating new operations for variant [Variant id: 786, #gens: 186, #ops: 0, parent:785]
---analyzing modificationPoint position: 122
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [f]
--> var from patch: f spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java130
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[][] matrix = new double[height][width] ` -topatch--> `return f.getCoefficients().getDimension()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 130, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[][] matrix = new double[height][width] ` -topatch--> `return f.getCoefficients().getDimension()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 786, #gens: 187, #ops: 1, parent:785] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 786, errors: [SimplexTableau.java:197: error: illegal start of type
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		^, SimplexTableau.java:197: error: ';' expected
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		      ^, SimplexTableau.java:201: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	       ^, SimplexTableau.java:201: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	                               		                                          ^, SimplexTableau.java:205: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;}
	    	       ^, SimplexTableau.java:205: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;}
	    	                                                                                                                 		                                                                                                                                                                                   		^, SimplexTableau.java:205: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;}
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                      ^, SimplexTableau.java:205: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;}
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                        		                  ^, SimplexTableau.java:212: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) {
	    	                                                                                     ^, SimplexTableau.java:216: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:219: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:225: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() {
	    	                ^, SimplexTableau.java:227: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:235: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0;
	    	                                          ^, SimplexTableau.java:236: error: class, interface, or enum expected
		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) {
		^, SimplexTableau.java:236: error: class, interface, or enum expected
		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) {
		           ^, SimplexTableau.java:239: error: class, interface, or enum expected
			}
			^, SimplexTableau.java:242: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:249: error: class, interface, or enum expected
		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) {
		                            ^, SimplexTableau.java:249: error: class, interface, or enum expected
		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) {
		                                                                    ^, SimplexTableau.java:251: error: class, interface, or enum expected
			subtractRow(0, row, 1.0);
			^, SimplexTableau.java:252: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:261: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0;
	    	                                                         ^, SimplexTableau.java:262: error: class, interface, or enum expected
		for (double coefficient : coefficients.getData()) {
		^, SimplexTableau.java:264: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:266: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:274: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);
	    	                                            ^, SimplexTableau.java:275: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:283: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);
	    	                                                       ^, SimplexTableau.java:284: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:292: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null;
	    	                                            ^, SimplexTableau.java:293: error: class, interface, or enum expected
		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0;
		^, SimplexTableau.java:294: error: class, interface, or enum expected
		for (int i = start; i < getHeight(); i++) {
		^, SimplexTableau.java:294: error: class, interface, or enum expected
		for (int i = start; i < getHeight(); i++) {
		                    ^, SimplexTableau.java:294: error: class, interface, or enum expected
		for (int i = start; i < getHeight(); i++) {
		                                     ^, SimplexTableau.java:297: error: class, interface, or enum expected
			} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
			^, SimplexTableau.java:299: error: class, interface, or enum expected
			}
			^, SimplexTableau.java:302: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:310: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:312: error: class, interface, or enum expected
		int height = getHeight() - 1;
		^, SimplexTableau.java:313: error: class, interface, or enum expected
		double[][] matrix = new double[height][width];
		^, SimplexTableau.java:314: error: class, interface, or enum expected
		for (int i = 0; i < height; i++) {
		^, SimplexTableau.java:314: error: class, interface, or enum expected
		for (int i = 0; i < height; i++) {
		                ^, SimplexTableau.java:314: error: class, interface, or enum expected
		for (int i = 0; i < height; i++) {
		                            ^, SimplexTableau.java:315: error: class, interface, or enum expected
			for (int j = 0; j < (width - 1); j++) {
			                ^, SimplexTableau.java:315: error: class, interface, or enum expected
			for (int j = 0; j < (width - 1); j++) {
			                                 ^, SimplexTableau.java:317: error: class, interface, or enum expected
			}
			^, SimplexTableau.java:319: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:321: error: class, interface, or enum expected
		this.numArtificialVariables = 0;
		^, SimplexTableau.java:322: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:334: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);}
	    	                             ^, SimplexTableau.java:334: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);}
	    	                                                 ^, SimplexTableau.java:334: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);}
	    	                                                                      ^, SimplexTableau.java:334: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);}
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:342: error: class, interface, or enum expected
		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());
		^, SimplexTableau.java:343: error: class, interface, or enum expected
		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
		^, SimplexTableau.java:344: error: class, interface, or enum expected
		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>();
		^, SimplexTableau.java:345: error: class, interface, or enum expected
		for (int i = 0; i < coefficients.length; i++) {
		^, SimplexTableau.java:345: error: class, interface, or enum expected
		for (int i = 0; i < coefficients.length; i++) {
		                ^, SimplexTableau.java:345: error: class, interface, or enum expected
		for (int i = 0; i < coefficients.length; i++) {
		                                         ^, SimplexTableau.java:347: error: class, interface, or enum expected
			if (basicRows.contains(basicRow)) {
			^, SimplexTableau.java:351: error: class, interface, or enum expected
			} else {
			^, SimplexTableau.java:353: error: class, interface, or enum expected
				coefficients[i] = 
				^, SimplexTableau.java:356: error: class, interface, or enum expected
			}
			^, SimplexTableau.java:359: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                               ^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                                                      ^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                                                                        		                ^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                                                                        		                                ^, SimplexTableau.java:373: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                 ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                       ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                                                ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                                                                   		                ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                                                                   		                                ^, SimplexTableau.java:391: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:398: error: class, interface, or enum expected
	 */ 	protected final int getWidth() {
	    	                ^, SimplexTableau.java:400: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:406: error: class, interface, or enum expected
	 */ 	protected final int getHeight() {
	    	                ^, SimplexTableau.java:408: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                ^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                      ^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                                     ^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                                                   		                                     ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                    ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                   ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                                     ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                                                     		                                     ^, SimplexTableau.java:433: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() {
	    	                ^, SimplexTableau.java:435: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:441: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() {
	    	                ^, SimplexTableau.java:443: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:449: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() {
	    	                ^, SimplexTableau.java:451: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:458: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() {
	    	                ^, SimplexTableau.java:460: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:472: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() {
	    	                ^, SimplexTableau.java:474: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:481: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() {
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(393): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[][] matrix = new double[height][width] ` -topatch--> `return f.getCoefficients().getDimension()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (785(f=1.0), 786(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (785(f=1.0), )
----------Running generation: 394, population size: 1

***** Generation 394 : 0
**Parent Variant: [Variant id: 787, #gens: 186, #ops: 0, parent:-]

--Child created id: 788
--Creating new operations for variant [Variant id: 788, #gens: 186, #ops: 0, parent:787]
---analyzing modificationPoint position: 66
location: SimplexSolver.java119
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.subtractRow(i, pivotRow, multiplier) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 788, #gens: 185, #ops: 1, parent:787] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 788, errors: [SimplexSolver.java:119: error: variable declaration not allowed here
				double multiplier = tableau.getEntry(i, pivotCol);
				       ^]
Ingredient counter is Zero
---Undoing: gnrtn(394): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.subtractRow(i, pivotRow, multiplier) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (787(f=1.0), 788(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (787(f=1.0), )
----------Running generation: 395, population size: 1

***** Generation 395 : 0
**Parent Variant: [Variant id: 789, #gens: 186, #ops: 0, parent:-]

--Child created id: 790
--Creating new operations for variant [Variant id: 790, #gens: 186, #ops: 0, parent:789]
---analyzing modificationPoint position: 3
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java152
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return false ` -topatch--> `return tableau.getSolution()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 152, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return false ` -topatch--> `return tableau.getSolution()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 790, #gens: 186, #ops: 1, parent:789] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 790, errors: [SimplexSolver.java:194: error: incompatible types: org.apache.commons.math.optimization.RealPointValuePair cannot be converted to boolean
				return tableau.getSolution();}} 		return true;} 	/**
				                          ^]
Ingredient counter is Zero
---Undoing: gnrtn(395): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return false ` -topatch--> `return tableau.getSolution()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (789(f=1.0), 790(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (789(f=1.0), )
----------Running generation: 396, population size: 1

***** Generation 396 : 0
**Parent Variant: [Variant id: 791, #gens: 186, #ops: 0, parent:-]

--Child created id: 792
--Creating new operations for variant [Variant id: 792, #gens: 186, #ops: 0, parent:791]
---analyzing modificationPoint position: 46
---modifPoint 0 not mutation generated in  final double ratio = rhs / entry
---analyzing modificationPoint position: 116
Templates availables121
Attempts Base Ingredients  1 total 121
Attempts Base Ingredients  2 total 121
---modifPoint 1 not mutation generated in  this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...]
---analyzing modificationPoint position: 138
Templates availables8
Attempts Base Ingredients  1 total 8
vars from patch []
location: LinearConstraint.java168
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearConstraint line: 168, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 792, #gens: 186, #ops: 1, parent:791] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 792, errors: [LinearConstraint.java:197: error: incompatible types: boolean cannot be converted to org.apache.commons.math.linear.RealVector
		return false;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(396): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (791(f=1.0), 792(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (791(f=1.0), )
----------Running generation: 397, population size: 1

***** Generation 397 : 0
**Parent Variant: [Variant id: 793, #gens: 186, #ops: 0, parent:-]

--Child created id: 794
--Creating new operations for variant [Variant id: 794, #gens: 186, #ops: 0, parent:793]
---analyzing modificationPoint position: 177
location: Array2DRowRealMatrix.java331
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (nCols == 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 794, #gens: 185, #ops: 1, parent:793] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 794
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-794/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(397): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (nCols == 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (793(f=1.0), 794(f=1.0), )
Selected to next generation: IDs2--> (793(f=1.0), )
----------Running generation: 398, population size: 1

***** Generation 398 : 0
**Parent Variant: [Variant id: 795, #gens: 186, #ops: 0, parent:-]

--Child created id: 796
--Creating new operations for variant [Variant id: 796, #gens: 186, #ops: 0, parent:795]
---analyzing modificationPoint position: 140
---modifPoint 0 not mutation generated in  return relationship
---analyzing modificationPoint position: 52
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [this.constraints]
--> var from patch: this.constraints spoon.support.reflect.code.CtFieldWriteImpl
SameName: final 



























































































java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint> constraints
SameName: final 



























































































java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint> constraints
Transforming shadowed variable in constraints = constraints
location: AbstractLinearOptimizer.java98
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 98, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 796, #gens: 187, #ops: 1, parent:795] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 796, errors: [AbstractLinearOptimizer.java:100: error: final parameter constraints may not be assigned
		constraints = constraints; 		this.constraints = constraints;
		^]
Ingredient counter is Zero
---Undoing: gnrtn(398): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (795(f=1.0), 796(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (795(f=1.0), )
----------Running generation: 399, population size: 1

***** Generation 399 : 0
**Parent Variant: [Variant id: 797, #gens: 186, #ops: 0, parent:-]

--Child created id: 798
--Creating new operations for variant [Variant id: 798, #gens: 186, #ops: 0, parent:797]
---analyzing modificationPoint position: 123
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  // initialize the objective function rows if (getNumObjectiveFunctions() == 2) { 	matrix[0][0] = -1;[...]
---analyzing modificationPoint position: 27
location: SimplexSolver.java189
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 798, #gens: 185, #ops: 1, parent:797] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 798
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-798/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 11, was successful: false, cases executed: 14] ,[]
-Valid?: |false|11|14|[]|, fitness 11.0
Ingredient counter is Zero
---Undoing: gnrtn(399): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (797(f=1.0), 798(f=11.0), )
Selected to next generation: IDs2--> (797(f=1.0), )
----------Running generation: 400, population size: 1

***** Generation 400 : 0
**Parent Variant: [Variant id: 799, #gens: 186, #ops: 0, parent:-]

--Child created id: 800
--Creating new operations for variant [Variant id: 800, #gens: 186, #ops: 0, parent:799]
---analyzing modificationPoint position: 150
---modifPoint 0 not mutation generated in  return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients()[...]
---analyzing modificationPoint position: 156
Templates availables31
Attempts Base Ingredients  1 total 31
---modifPoint 1 not mutation generated in  return count
---analyzing modificationPoint position: 139
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [constraint, org.apache.commons.math.optimization.linear.Relationship.LEQ, matrix, row, slackVar, org.apache.commons.math.optimization.linear.Relationship.GEQ]
--> var from patch: constraint spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: org.apache.commons.math.optimization.linear.Relationship.LEQ spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: matrix spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: row spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: slackVar spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: org.apache.commons.math.optimization.linear.Relationship.GEQ spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java169
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `// slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...] ` -topatch--> `// slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 169, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `// slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...] ` -topatch--> `// slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 800, #gens: 187, #ops: 1, parent:799] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 800
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-800/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 11, was successful: false, cases executed: 14] ,[]
-Valid?: |false|11|14|[]|, fitness 11.0
Ingredient counter is Zero
---Undoing: gnrtn(400): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `// slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...] ` -topatch--> `// slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (799(f=1.0), 800(f=11.0), )
Selected to next generation: IDs2--> (799(f=1.0), )
----------Running generation: 401, population size: 1

***** Generation 401 : 0
**Parent Variant: [Variant id: 801, #gens: 186, #ops: 0, parent:-]

--Child created id: 802
--Creating new operations for variant [Variant id: 802, #gens: 186, #ops: 0, parent:801]
---analyzing modificationPoint position: 30
location: SimplexSolver.java50
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.epsilon = epsilon ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 802, #gens: 185, #ops: 1, parent:801] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 802, errors: [SimplexSolver.java:52: error: variable epsilon might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(401): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.epsilon = epsilon ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (801(f=1.0), 802(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (801(f=1.0), )
----------Running generation: 402, population size: 1

***** Generation 402 : 0
**Parent Variant: [Variant id: 803, #gens: 186, #ops: 0, parent:-]

--Child created id: 804
--Creating new operations for variant [Variant id: 804, #gens: 186, #ops: 0, parent:803]
---analyzing modificationPoint position: 124
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1
---analyzing modificationPoint position: 97
location: SimplexTableau.java387
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow,[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 804, #gens: 185, #ops: 1, parent:803] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 804
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-804/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(402): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow,[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (803(f=1.0), 804(f=14.0), )
Selected to next generation: IDs2--> (803(f=1.0), )
----------Running generation: 403, population size: 1

***** Generation 403 : 0
**Parent Variant: [Variant id: 805, #gens: 186, #ops: 0, parent:-]

--Child created id: 806
--Creating new operations for variant [Variant id: 806, #gens: 186, #ops: 0, parent:805]
---analyzing modificationPoint position: 8
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java193
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getSolution() ` -topatch--> `throw new org.apache.commons.math.optimization.linear.NoFeasibleSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 193, pointed element: CtThrowImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getSolution() ` -topatch--> `throw new org.apache.commons.math.optimization.linear.NoFeasibleSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 

--Summary Creation: for variant [Variant id: 806, #gens: 187, #ops: 1, parent:805] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 806, errors: [SimplexSolver.java:194: error: unreachable statement
		return tableau.getSolution();
		^]
Ingredient counter is Zero
---Undoing: gnrtn(403): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getSolution() ` -topatch--> `throw new org.apache.commons.math.optimization.linear.NoFeasibleSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (805(f=1.0), 806(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (805(f=1.0), )
----------Running generation: 404, population size: 1

***** Generation 404 : 0
**Parent Variant: [Variant id: 807, #gens: 186, #ops: 0, parent:-]

--Child created id: 808
--Creating new operations for variant [Variant id: 808, #gens: 186, #ops: 0, parent:807]
---analyzing modificationPoint position: 141
location: SimplexTableau.java176
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// artificial variables if ((constraint.getRelationship() == org.apache.commons.math.optimization.li[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 808, #gens: 185, #ops: 1, parent:807] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 808
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-808/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 14] ,[]
-Valid?: |false|12|14|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(404): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// artificial variables if ((constraint.getRelationship() == org.apache.commons.math.optimization.li[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (807(f=1.0), 808(f=12.0), )
Selected to next generation: IDs2--> (807(f=1.0), )
----------Running generation: 405, population size: 1

***** Generation 405 : 0
**Parent Variant: [Variant id: 809, #gens: 186, #ops: 0, parent:-]

--Child created id: 810
--Creating new operations for variant [Variant id: 810, #gens: 186, #ops: 0, parent:809]
---analyzing modificationPoint position: 14
Templates availables8
Attempts Base Ingredients  1 total 8
---modifPoint 0 not mutation generated in  for (int i = 0; i < coefficients.length; i++) { 	java.lang.Integer basicRow = getBasicRowForSolution[...]
---analyzing modificationPoint position: 42
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java79
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 	final double rhs =[...] ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 79, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 	final double rhs =[...] ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 810, #gens: 187, #ops: 1, parent:809] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 810, errors: [SimplexSolver.java:104: error: unreported exception org.apache.commons.math.optimization.OptimizationException; must be caught or declared to be thrown
		incrementIterationsCounter(); 		return minRatioPos;} 	/**
		                          ^]
Ingredient counter is Zero
---Undoing: gnrtn(405): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 	final double rhs =[...] ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (809(f=1.0), 810(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (809(f=1.0), )
----------Running generation: 406, population size: 1

***** Generation 406 : 0
**Parent Variant: [Variant id: 811, #gens: 186, #ops: 0, parent:-]

--Child created id: 812
--Creating new operations for variant [Variant id: 812, #gens: 186, #ops: 0, parent:811]
---analyzing modificationPoint position: 25
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [maximize, f]
--> var from patch: maximize spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: f spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java170
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack  ` -topatch--> `org.apache.commons.math.linear.RealVector objectiveCoefficients =  (maximize) ? f.getCoefficients().[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 170, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack  ` -topatch--> `org.apache.commons.math.linear.RealVector objectiveCoefficients =  (maximize) ? f.getCoefficients().[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 812, #gens: 187, #ops: 1, parent:811] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 812
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-812/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(406): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack  ` -topatch--> `org.apache.commons.math.linear.RealVector objectiveCoefficients =  (maximize) ? f.getCoefficients().[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (811(f=1.0), 812(f=1.0), )
Selected to next generation: IDs2--> (811(f=1.0), )
----------Running generation: 407, population size: 1

***** Generation 407 : 0
**Parent Variant: [Variant id: 813, #gens: 186, #ops: 0, parent:-]

--Child created id: 814
--Creating new operations for variant [Variant id: 814, #gens: 186, #ops: 0, parent:813]
---analyzing modificationPoint position: 145
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...]
---analyzing modificationPoint position: 8
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch []
location: SimplexSolver.java193
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getSolution() ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 193, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getSolution() ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 814, #gens: 186, #ops: 1, parent:813] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 814, errors: [SimplexSolver.java:193: error: incompatible types: missing return value
		} 		return;
		  		^]
Ingredient counter is Zero
---Undoing: gnrtn(407): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getSolution() ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (813(f=1.0), 814(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (813(f=1.0), )
----------Running generation: 408, population size: 1

***** Generation 408 : 0
**Parent Variant: [Variant id: 815, #gens: 186, #ops: 0, parent:-]

--Child created id: 816
--Creating new operations for variant [Variant id: 816, #gens: 186, #ops: 0, parent:815]
---analyzing modificationPoint position: 161
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch [point]
--> var from patch: point spoon.support.reflect.code.CtVariableReadImpl
location: RealPointValuePair.java49
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = point.clone() ` -topatch--> `point = point.clone()` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.RealPointValuePair line: 49, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = point.clone() ` -topatch--> `point = point.clone()` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 816, #gens: 187, #ops: 1, parent:815] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 816, errors: [RealPointValuePair.java:52: error: final parameter point may not be assigned
	 */ 	public RealPointValuePair(final double[] point, final double value) { 		this.point = point.clone(); 		point = point.clone(); 		this.value = value;}
	    	                                                                      		                            		^]
Ingredient counter is Zero
---Undoing: gnrtn(408): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = point.clone() ` -topatch--> `point = point.clone()` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (815(f=1.0), 816(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (815(f=1.0), )
----------Running generation: 409, population size: 1

***** Generation 409 : 0
**Parent Variant: [Variant id: 817, #gens: 186, #ops: 0, parent:-]

--Child created id: 818
--Creating new operations for variant [Variant id: 818, #gens: 186, #ops: 0, parent:817]
---analyzing modificationPoint position: 141
Templates availables121
Attempts Base Ingredients  1 total 121
Name Conflict [constraints, matrix, restrictToNonNegative, width, org.apache.commons.math.optimization.linear.Relationship.LEQ, slackVar, org.apache.commons.math.optimization.linear.Relationship.GEQ, org.apache.commons.math.optimization.linear.Relationship.EQ, artificialVar]
---modifPoint 0 not mutation generated in  // artificial variables if ((constraint.getRelationship() == org.apache.commons.math.optimization.li[...]
---analyzing modificationPoint position: 146
location: SimplexTableau.java199
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 	norma[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 818, #gens: 185, #ops: 1, parent:817] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 818
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-818/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(409): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 	norma[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (817(f=1.0), 818(f=14.0), )
Selected to next generation: IDs2--> (817(f=1.0), )
----------Running generation: 410, population size: 1

***** Generation 410 : 0
**Parent Variant: [Variant id: 819, #gens: 186, #ops: 0, parent:-]

--Child created id: 820
--Creating new operations for variant [Variant id: 820, #gens: 186, #ops: 0, parent:819]
---analyzing modificationPoint position: 133
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch []
location: SimplexTableau.java153
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i) ` -topatch--> `double sum = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 153, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i) ` -topatch--> `double sum = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 820, #gens: 186, #ops: 1, parent:819] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 820, errors: [SimplexTableau.java:262: error: cannot find symbol
			if (!restrictToNonNegative) { 				matrix[row][getSlackVariableOffset() - 1] = org.apache.commons.math.optimization.linear.SimplexTableau.getInvertedCoeffiecientSum(constraint.getCoefficients());} 			// RHS 			matrix[row][width - 1] = constraint.getValue(); 			// slack variables
			                              				                                                                                                                                  ^
  symbol:   variable constraint
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:263: error: cannot find symbol
			if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.LEQ) { 				matrix[row][getSlackVariableOffset() + (slackVar++)] = 1;// slack
			    ^
  symbol:   variable constraint
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:264: error: cannot find symbol
			} else if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ) { 				matrix[row][getSlackVariableOffset() + (slackVar++)] = -1;// excess
			           ^
  symbol:   variable constraint
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:266: error: cannot find symbol
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			     ^
  symbol:   variable constraint
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:266: error: cannot find symbol
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                      ^
  symbol:   variable constraint
  location: class org.apache.commons.math.optimization.linear.SimplexTableau]
Ingredient counter is Zero
---Undoing: gnrtn(410): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i) ` -topatch--> `double sum = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (819(f=1.0), 820(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (819(f=1.0), )
----------Running generation: 411, population size: 1

***** Generation 411 : 0
**Parent Variant: [Variant id: 821, #gens: 186, #ops: 0, parent:-]

--Child created id: 822
--Creating new operations for variant [Variant id: 822, #gens: 186, #ops: 0, parent:821]
---analyzing modificationPoint position: 86
Templates availables5
Attempts Base Ingredients  1 total 5
Attempts Base Ingredients  2 total 5
---modifPoint 0 not mutation generated in  this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), relationship, value)
---analyzing modificationPoint position: 41
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 1 not mutation generated in  java.lang.Integer minRatioPos = null
---analyzing modificationPoint position: 59
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java106
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer pivotRow = getPivotRow(pivotCol, tableau) ` -topatch--> `while (!isPhase1Solved(tableau)) { 	doIteration(tableau); } ` (spoon.support.reflect.code.CtWhileImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 106, pointed element: CtWhileImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer pivotRow = getPivotRow(pivotCol, tableau) ` -topatch--> `while (!isPhase1Solved(tableau)) { 	doIteration(tableau); } ` (spoon.support.reflect.code.CtWhileImpl) 

--Summary Creation: for variant [Variant id: 822, #gens: 187, #ops: 1, parent:821] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 822
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-822/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 14] ,[]
-Valid?: |false|12|14|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(411): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer pivotRow = getPivotRow(pivotCol, tableau) ` -topatch--> `while (!isPhase1Solved(tableau)) { 	doIteration(tableau); } ` (spoon.support.reflect.code.CtWhileImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (821(f=1.0), 822(f=12.0), )
Selected to next generation: IDs2--> (821(f=1.0), )
----------Running generation: 412, population size: 1

***** Generation 412 : 0
**Parent Variant: [Variant id: 823, #gens: 186, #ops: 0, parent:-]

--Child created id: 824
--Creating new operations for variant [Variant id: 824, #gens: 186, #ops: 0, parent:823]
---analyzing modificationPoint position: 14
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  for (int i = 0; i < coefficients.length; i++) { 	java.lang.Integer basicRow = getBasicRowForSolution[...]
---analyzing modificationPoint position: 29
Templates availables7
Attempts Base Ingredients  1 total 7
Attempts Base Ingredients  2 total 7
vars from patch []
location: SimplexSolver.java42
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON) ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 42, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON) ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 824, #gens: 186, #ops: 1, parent:823] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 824, errors: [SimplexSolver.java:104: error: variable epsilon might not have been initialized
		incrementIterationsCounter();} 	/**
		                             ^, SimplexSolver.java:104: error: unreported exception org.apache.commons.math.optimization.OptimizationException; must be caught or declared to be thrown
		incrementIterationsCounter();} 	/**
		                          ^]
Ingredient counter is Zero
---Undoing: gnrtn(412): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON) ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (823(f=1.0), 824(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (823(f=1.0), )
----------Running generation: 413, population size: 1

***** Generation 413 : 0
**Parent Variant: [Variant id: 825, #gens: 186, #ops: 0, parent:-]

--Child created id: 826
--Creating new operations for variant [Variant id: 826, #gens: 186, #ops: 0, parent:825]
---analyzing modificationPoint position: 142
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [f]
--> var from patch: f spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java183
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return matrix ` -topatch--> `return f.getCoefficients().getDimension()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 183, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return matrix ` -topatch--> `return f.getCoefficients().getDimension()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 826, #gens: 187, #ops: 1, parent:825] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 826, errors: [SimplexTableau.java:191: error: incompatible types: int cannot be converted to double[][]
		return f.getCoefficients().getDimension(); 		return matrix;} 	/**
		                                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(413): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return matrix ` -topatch--> `return f.getCoefficients().getDimension()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (825(f=1.0), 826(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (825(f=1.0), )
----------Running generation: 414, population size: 1

***** Generation 414 : 0
**Parent Variant: [Variant id: 827, #gens: 186, #ops: 0, parent:-]

--Child created id: 828
--Creating new operations for variant [Variant id: 828, #gens: 186, #ops: 0, parent:827]
---analyzing modificationPoint position: 128
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 0 not mutation generated in  matrix[zIndex][width - 1] =  (maximize) ? f.getConstantTerm() : (-1) * f.getConstantTerm()
---analyzing modificationPoint position: 30
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java50
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.epsilon = epsilon ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 50, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.epsilon = epsilon ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 828, #gens: 187, #ops: 1, parent:827] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 828, errors: [SimplexSolver.java:132: error: incompatible types: unexpected return value
		return true; 		this.epsilon = epsilon;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(414): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.epsilon = epsilon ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (827(f=1.0), 828(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (827(f=1.0), )
----------Running generation: 415, population size: 1

***** Generation 415 : 0
**Parent Variant: [Variant id: 829, #gens: 186, #ops: 0, parent:-]

--Child created id: 830
--Creating new operations for variant [Variant id: 830, #gens: 186, #ops: 0, parent:829]
---analyzing modificationPoint position: 49
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [goalType]
--> var from patch: goalType spoon.support.reflect.code.CtVariableReadImpl
location: AbstractLinearOptimizer.java86
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...] ` -topatch--> `goalType = goalType` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 86, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...] ` -topatch--> `goalType = goalType` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 830, #gens: 187, #ops: 1, parent:829] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 830
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-830/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(415): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...] ` -topatch--> `goalType = goalType` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (829(f=1.0), 830(f=14.0), )
Selected to next generation: IDs2--> (829(f=1.0), )
----------Running generation: 416, population size: 1

***** Generation 416 : 0
**Parent Variant: [Variant id: 831, #gens: 186, #ops: 0, parent:-]

--Child created id: 832
--Creating new operations for variant [Variant id: 832, #gens: 186, #ops: 0, parent:831]
---analyzing modificationPoint position: 99
---modifPoint 0 not mutation generated in  return tableau.getColumnDimension()
---analyzing modificationPoint position: 10
---modifPoint 1 not mutation generated in  double[] coefficients = new double[getOriginalNumDecisionVariables()]
---analyzing modificationPoint position: 83
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 2 not mutation generated in  for (int i = 0; i < data.length; i++) { 	dot += data[i] * v[i]; }
---analyzing modificationPoint position: 147
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [numDecisionVariables, numSlackVariables]
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numSlackVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java200
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `normalized.add(normalize(constraint)) ` -topatch--> `return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 200, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `normalized.add(normalize(constraint)) ` -topatch--> `return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 832, #gens: 187, #ops: 1, parent:831] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 832, errors: [SimplexTableau.java:501: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:501: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:501: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:501: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:501: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:501: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:503: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:503: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:503: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:503: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:503: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:503: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:503: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:505: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:505: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:506: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:507: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:507: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:508: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:508: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:509: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:510: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:510: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:510: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:511: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:511: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:511: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:511: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:511: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:511: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:524: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:524: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:524: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:524: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:524: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:524: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:528: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:528: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:532: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:532: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:540: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:540: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:540: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:540: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:549: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:549: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:549: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:549: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:549: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:553: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:553: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:557: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:557: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:561: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:561: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:566: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:566: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:576: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:576: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:581: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:581: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:585: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:585: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:589: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:589: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:593: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:593: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:595: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:595: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:598: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:605: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:605: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:605: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:605: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:605: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:605: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:614: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:614: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:614: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:614: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:614: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:614: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:614: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:614: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:614: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(416): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `normalized.add(normalize(constraint)) ` -topatch--> `return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (831(f=1.0), 832(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (831(f=1.0), )
----------Running generation: 417, population size: 1

***** Generation 417 : 0
**Parent Variant: [Variant id: 833, #gens: 186, #ops: 0, parent:-]

--Child created id: 834
--Creating new operations for variant [Variant id: 834, #gens: 186, #ops: 0, parent:833]
---analyzing modificationPoint position: 102
location: LinearObjectiveFunction.java58
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), constantTerm) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 834, #gens: 185, #ops: 1, parent:833] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 834, errors: [LinearObjectiveFunction.java:61: error: variable coefficients might not have been initialized
	 */ 	public LinearObjectiveFunction(double[] coefficients, double constantTerm) {}
	    	                                                                            ^]
Ingredient counter is Zero
---Undoing: gnrtn(417): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), constantTerm) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (833(f=1.0), 834(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (833(f=1.0), )
----------Running generation: 418, population size: 1

***** Generation 418 : 0
**Parent Variant: [Variant id: 835, #gens: 186, #ops: 0, parent:-]

--Child created id: 836
--Creating new operations for variant [Variant id: 836, #gens: 186, #ops: 0, parent:835]
---analyzing modificationPoint position: 48
Templates availables5
Attempts Base Ingredients  1 total 5
---modifPoint 0 not mutation generated in  minRatio = ratio
---analyzing modificationPoint position: 9
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [this.numArtificialVariables]
--> var from patch: this.numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java282
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return getBasicRow(col, false) ` -topatch--> `return this.numArtificialVariables > 0 ? 2 : 1` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 282, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return getBasicRow(col, false) ` -topatch--> `return this.numArtificialVariables > 0 ? 2 : 1` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 836, #gens: 187, #ops: 1, parent:835] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 836, errors: [SimplexTableau.java:283: error: unreachable statement
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return this.numArtificialVariables > 0 ? 2 : 1; 		return getBasicRow(col, false);
	    	                                                                  		                                                		^]
Ingredient counter is Zero
---Undoing: gnrtn(418): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return getBasicRow(col, false) ` -topatch--> `return this.numArtificialVariables > 0 ? 2 : 1` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (835(f=1.0), 836(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (835(f=1.0), )
----------Running generation: 419, population size: 1

***** Generation 419 : 0
**Parent Variant: [Variant id: 837, #gens: 186, #ops: 0, parent:-]

--Child created id: 838
--Creating new operations for variant [Variant id: 838, #gens: 186, #ops: 0, parent:837]
---analyzing modificationPoint position: 57
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [java.lang.Double.MAX_VALUE]
--> var from patch: java.lang.Double.MAX_VALUE spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java103
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `incrementIterationsCounter() ` -topatch--> `double minRatio = java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 103, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `incrementIterationsCounter() ` -topatch--> `double minRatio = java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 838, #gens: 187, #ops: 1, parent:837] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 838
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-838/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(419): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `incrementIterationsCounter() ` -topatch--> `double minRatio = java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (837(f=1.0), 838(f=1.0), )
Selected to next generation: IDs2--> (837(f=1.0), )
----------Running generation: 420, population size: 1

***** Generation 420 : 0
**Parent Variant: [Variant id: 839, #gens: 186, #ops: 0, parent:-]

--Child created id: 840
--Creating new operations for variant [Variant id: 840, #gens: 186, #ops: 0, parent:839]
---analyzing modificationPoint position: 127
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions())
---analyzing modificationPoint position: 177
Templates availables11
Attempts Base Ingredients  1 total 11
---modifPoint 1 not mutation generated in  if (nCols == 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException[...]
---analyzing modificationPoint position: 84
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 2 not mutation generated in  dot += data[i] * v[i]
---analyzing modificationPoint position: 49
Templates availables1
Attempts Base Ingredients  1 total 1
vars from patch [iterations, maxIterations]
--> var from patch: iterations spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: maxIterations spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLinearOptimizer.java86
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...] ` -topatch--> `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 86, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...] ` -topatch--> `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 840, #gens: 186, #ops: 1, parent:839] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 840
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-840/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(420): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...] ` -topatch--> `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (839(f=1.0), 840(f=1.0), )
Selected to next generation: IDs2--> (839(f=1.0), )
----------Running generation: 421, population size: 1

***** Generation 421 : 0
**Parent Variant: [Variant id: 841, #gens: 186, #ops: 0, parent:-]

--Child created id: 842
--Creating new operations for variant [Variant id: 842, #gens: 186, #ops: 0, parent:841]
---analyzing modificationPoint position: 155
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  ++count
---analyzing modificationPoint position: 72
Templates availables31
Attempts Base Ingredients  1 total 31
---modifPoint 1 not mutation generated in  return numArtificialVariables
---analyzing modificationPoint position: 16
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 2 not mutation generated in  if (basicRows.contains(basicRow)) { 	// if multiple variables can take a given value 	// then we cho[...]
---analyzing modificationPoint position: 94
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 3 not mutation generated in  for (int i = 0; i < data.length; i++) { 	out[i] = data[i] * d; }
---analyzing modificationPoint position: 170
location: Array2DRowRealMatrix.java95
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `copyIn(d) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 842, #gens: 185, #ops: 1, parent:841] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 842
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-842/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(421): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `copyIn(d) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (841(f=1.0), 842(f=14.0), )
Selected to next generation: IDs2--> (841(f=1.0), )
----------Running generation: 422, population size: 1

***** Generation 422 : 0
**Parent Variant: [Variant id: 843, #gens: 186, #ops: 0, parent:-]

--Child created id: 844
--Creating new operations for variant [Variant id: 844, #gens: 186, #ops: 0, parent:843]
---analyzing modificationPoint position: 89
location: SimplexTableau.java293
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = start; i < getHeight(); i++) { 	if (org.apache.commons.math.util.MathUtils.equals(getEn[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 844, #gens: 185, #ops: 1, parent:843] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 844
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-844/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(422): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = start; i < getHeight(); i++) { 	if (org.apache.commons.math.util.MathUtils.equals(getEn[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (843(f=1.0), 844(f=14.0), )
Selected to next generation: IDs2--> (843(f=1.0), )
----------Running generation: 423, population size: 1

***** Generation 423 : 0
**Parent Variant: [Variant id: 845, #gens: 186, #ops: 0, parent:-]

--Child created id: 846
--Creating new operations for variant [Variant id: 846, #gens: 186, #ops: 0, parent:845]
---analyzing modificationPoint position: 15
---modifPoint 0 not mutation generated in  java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i)
---analyzing modificationPoint position: 135
Templates availables121
Attempts Base Ingredients  1 total 121
Name Conflict [constraints, normalized]
---modifPoint 1 not mutation generated in  // decision variable coefficients copyArray(constraint.getCoefficients().getData(), matrix[row], 1)
---analyzing modificationPoint position: 47
Templates availables10
Attempts Base Ingredients  1 total 10
Attempts Base Ingredients  2 total 10
---modifPoint 2 not mutation generated in  if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; }
---analyzing modificationPoint position: 78
---modifPoint 3 not mutation generated in  return getWidth() - 1
---analyzing modificationPoint position: 79
Templates availables121
Attempts Base Ingredients  1 total 121
Name Conflict [constraints, matrix, restrictToNonNegative, width, org.apache.commons.math.optimization.linear.Relationship.LEQ, slackVar, org.apache.commons.math.optimization.linear.Relationship.GEQ, org.apache.commons.math.optimization.linear.Relationship.EQ, artificialVar]
---modifPoint 4 not mutation generated in  if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 	return null; [...]
---analyzing modificationPoint position: 145
---modifPoint 5 not mutation generated in  java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...]
---analyzing modificationPoint position: 45
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON]
--> var from patch: org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java82
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 	final double ratio [...] ` -topatch--> `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 82, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 	final double ratio [...] ` -topatch--> `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 846, #gens: 187, #ops: 1, parent:845] gen mutated: 1 , gen not mut: 6, gen not applied  0
-The child does NOT compile: 846, errors: [SimplexSolver.java:82: error: call to this must be first statement in constructor
			final double entry = tableau.getEntry(i, col); 			this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON);
			                                               			    ^]
Ingredient counter is Zero
---Undoing: gnrtn(423): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 	final double ratio [...] ` -topatch--> `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (845(f=1.0), 846(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (845(f=1.0), )
----------Running generation: 424, population size: 1

***** Generation 424 : 0
**Parent Variant: [Variant id: 847, #gens: 186, #ops: 0, parent:-]

--Child created id: 848
--Creating new operations for variant [Variant id: 848, #gens: 186, #ops: 0, parent:847]
---analyzing modificationPoint position: 81
location: ArrayRealVector.java884
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `checkVectorDimensions(v.length) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 848, #gens: 185, #ops: 1, parent:847] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 848
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-848/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(424): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `checkVectorDimensions(v.length) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (847(f=1.0), 848(f=1.0), )
Selected to next generation: IDs2--> (847(f=1.0), )
----------Running generation: 425, population size: 1

***** Generation 425 : 0
**Parent Variant: [Variant id: 849, #gens: 186, #ops: 0, parent:-]

--Child created id: 850
--Creating new operations for variant [Variant id: 850, #gens: 186, #ops: 0, parent:849]
---analyzing modificationPoint position: 79
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 	return null; [...]
---analyzing modificationPoint position: 167
Templates availables83
Attempts Base Ingredients  1 total 83
---modifPoint 1 not mutation generated in  data = d.clone()
---analyzing modificationPoint position: 42
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [minRatioPos]
--> var from patch: minRatioPos spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java79
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 	final double rhs =[...] ` -topatch--> `return minRatioPos` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 79, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 	final double rhs =[...] ` -topatch--> `return minRatioPos` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 850, #gens: 187, #ops: 1, parent:849] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 850, errors: [SimplexSolver.java:91: error: unreachable statement
		return minRatioPos; 		for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 			final double rhs = tableau.getEntry(i, tableau.getWidth() - 1); 			final double entry = tableau.getEntry(i, col); 			if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 				final double ratio = rhs / entry; 				if (ratio < minRatio) { 					minRatio = ratio; 					minRatioPos = i;}}} 		return minRatioPos;
		                    		^]
Ingredient counter is Zero
---Undoing: gnrtn(425): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 	final double rhs =[...] ` -topatch--> `return minRatioPos` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (849(f=1.0), 850(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (849(f=1.0), )
----------Running generation: 426, population size: 1

***** Generation 426 : 0
**Parent Variant: [Variant id: 851, #gens: 186, #ops: 0, parent:-]

--Child created id: 852
--Creating new operations for variant [Variant id: 852, #gens: 186, #ops: 0, parent:851]
---analyzing modificationPoint position: 180
Templates availables11
Attempts Base Ingredients  1 total 11
vars from patch [row]
--> var from patch: row spoon.support.reflect.code.CtVariableReadImpl
location: Array2DRowRealMatrix.java336
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (subMatrix[i].length != nCols) { 	throw org.apache.commons.math.MathRuntimeException.createIllega[...] ` -topatch--> `if (row > 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalStateException( 	"fi[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.linear.Array2DRowRealMatrix line: 336, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (subMatrix[i].length != nCols) { 	throw org.apache.commons.math.MathRuntimeException.createIllega[...] ` -topatch--> `if (row > 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalStateException( 	"fi[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 852, #gens: 186, #ops: 1, parent:851] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 852
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-852/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(426): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (subMatrix[i].length != nCols) { 	throw org.apache.commons.math.MathRuntimeException.createIllega[...] ` -topatch--> `if (row > 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalStateException( 	"fi[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (851(f=1.0), 852(f=1.0), )
Selected to next generation: IDs2--> (851(f=1.0), )
----------Running generation: 427, population size: 1

***** Generation 427 : 0
**Parent Variant: [Variant id: 853, #gens: 186, #ops: 0, parent:-]

--Child created id: 854
--Creating new operations for variant [Variant id: 854, #gens: 186, #ops: 0, parent:853]
---analyzing modificationPoint position: 132
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  for (int i = 0; i < constraints.size(); i++) { 	org.apache.commons.math.optimization.linear.LinearCo[...]
---analyzing modificationPoint position: 2
location: SimplexSolver.java191
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `doIteration(tableau) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 854, #gens: 185, #ops: 1, parent:853] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 854
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-854/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
-Killed id: pid->47608
The Process that runs JUnit test cases did not terminate within waitTime of 10 seconds
Killed the Process that runs JUnit test cases 47608
**The validation 1 have not finished well**
-Valid?: null, fitness 1.7976931348623157E308
Ingredient counter is Zero
---Undoing: gnrtn(427): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `doIteration(tableau) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (853(f=1.0), 854(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (853(f=1.0), )
----------Running generation: 428, population size: 1

***** Generation 428 : 0
**Parent Variant: [Variant id: 855, #gens: 186, #ops: 0, parent:-]

--Child created id: 856
--Creating new operations for variant [Variant id: 856, #gens: 186, #ops: 0, parent:855]
---analyzing modificationPoint position: 129
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  if (!restrictToNonNegative) { 	matrix[zIndex][getSlackVariableOffset() - 1] =  	org.apache.commons.m[...]
---analyzing modificationPoint position: 155
Templates availables121
Attempts Base Ingredients  1 total 121
Attempts Base Ingredients  2 total 121
vars from patch [numArtificialVariables]
--> var from patch: numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java237
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `++count ` -topatch--> `int width = (getWidth() - numArtificialVariables) - 1` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 237, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `++count ` -topatch--> `int width = (getWidth() - numArtificialVariables) - 1` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 856, #gens: 187, #ops: 1, parent:855] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 856, errors: [SimplexTableau.java:354: error: not a statement
				(basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - 
				                                                            ^]
Ingredient counter is Zero
---Undoing: gnrtn(428): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `++count ` -topatch--> `int width = (getWidth() - numArtificialVariables) - 1` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (855(f=1.0), 856(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (855(f=1.0), )
----------Running generation: 429, population size: 1

***** Generation 429 : 0
**Parent Variant: [Variant id: 857, #gens: 186, #ops: 0, parent:-]

--Child created id: 858
--Creating new operations for variant [Variant id: 858, #gens: 186, #ops: 0, parent:857]
---analyzing modificationPoint position: 144
---modifPoint 0 not mutation generated in  return f.getCoefficients().getDimension()
---analyzing modificationPoint position: 99
Templates availables31
Attempts Base Ingredients  1 total 31
---modifPoint 1 not mutation generated in  return tableau.getColumnDimension()
---analyzing modificationPoint position: 72
Templates availables31
Attempts Base Ingredients  1 total 31
vars from patch []
location: SimplexTableau.java497
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return numArtificialVariables ` -topatch--> `return getWidth() - 1` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 497, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return numArtificialVariables ` -topatch--> `return getWidth() - 1` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 858, #gens: 186, #ops: 1, parent:857] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 858
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-858/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 14] ,[]
-Valid?: |false|12|14|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(429): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return numArtificialVariables ` -topatch--> `return getWidth() - 1` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (857(f=1.0), 858(f=12.0), )
Selected to next generation: IDs2--> (857(f=1.0), )
----------Running generation: 430, population size: 1

***** Generation 430 : 0
**Parent Variant: [Variant id: 859, #gens: 186, #ops: 0, parent:-]

--Child created id: 860
--Creating new operations for variant [Variant id: 860, #gens: 186, #ops: 0, parent:859]
---analyzing modificationPoint position: 10
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [f]
--> var from patch: f spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java340
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] coefficients = new double[getOriginalNumDecisionVariables()] ` -topatch--> `return f.getCoefficients().getDimension()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 340, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] coefficients = new double[getOriginalNumDecisionVariables()] ` -topatch--> `return f.getCoefficients().getDimension()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 860, #gens: 187, #ops: 1, parent:859] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 860, errors: [SimplexTableau.java:340: error: incompatible types: int cannot be converted to org.apache.commons.math.optimization.RealPointValuePair
	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		return f.getCoefficients().getDimension();
	                                                                                  		                                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(430): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] coefficients = new double[getOriginalNumDecisionVariables()] ` -topatch--> `return f.getCoefficients().getDimension()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (859(f=1.0), 860(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (859(f=1.0), )
----------Running generation: 431, population size: 1

***** Generation 431 : 0
**Parent Variant: [Variant id: 861, #gens: 186, #ops: 0, parent:-]

--Child created id: 862
--Creating new operations for variant [Variant id: 862, #gens: 186, #ops: 0, parent:861]
---analyzing modificationPoint position: 123
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java133
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `// initialize the objective function rows if (getNumObjectiveFunctions() == 2) { 	matrix[0][0] = -1;[...] ` -topatch--> `return getNumObjectiveFunctions() + getOriginalNumDecisionVariables()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 133, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `// initialize the objective function rows if (getNumObjectiveFunctions() == 2) { 	matrix[0][0] = -1;[...] ` -topatch--> `return getNumObjectiveFunctions() + getOriginalNumDecisionVariables()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 862, #gens: 187, #ops: 1, parent:861] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 862, errors: [SimplexTableau.java:465: error: illegal start of type
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		^, SimplexTableau.java:465: error: ';' expected
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		      ^, SimplexTableau.java:469: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	       ^, SimplexTableau.java:469: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	                               		                                          ^, SimplexTableau.java:473: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	       ^, SimplexTableau.java:473: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		^, SimplexTableau.java:473: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                      ^, SimplexTableau.java:473: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                        		                  ^, SimplexTableau.java:479: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                     ^, SimplexTableau.java:479: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                         ^, SimplexTableau.java:479: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                           		                                                                                                                                                           ^, SimplexTableau.java:483: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                ^, SimplexTableau.java:483: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                                                 		                                               ^, SimplexTableau.java:489: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                          ^, SimplexTableau.java:489: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		^, SimplexTableau.java:489: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		           ^, SimplexTableau.java:489: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				        ^, SimplexTableau.java:489: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				           		             ^, SimplexTableau.java:492: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                            ^, SimplexTableau.java:492: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                    ^, SimplexTableau.java:492: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			^, SimplexTableau.java:492: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			                         ^, SimplexTableau.java:498: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                         ^, SimplexTableau.java:498: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		^, SimplexTableau.java:498: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                   ^, SimplexTableau.java:498: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                     		           ^, SimplexTableau.java:504: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                            ^, SimplexTableau.java:504: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                                       		                              ^, SimplexTableau.java:510: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                       ^, SimplexTableau.java:510: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                                  		                               ^, SimplexTableau.java:516: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                            ^, SimplexTableau.java:516: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		^, SimplexTableau.java:516: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		^, SimplexTableau.java:516: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                    ^, SimplexTableau.java:516: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                     ^, SimplexTableau.java:516: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				        ^, SimplexTableau.java:516: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				            ^, SimplexTableau.java:516: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				               		           ^, SimplexTableau.java:518: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			       ^, SimplexTableau.java:518: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		^, SimplexTableau.java:518: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		^, SimplexTableau.java:518: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		^, SimplexTableau.java:518: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                ^, SimplexTableau.java:518: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                            ^, SimplexTableau.java:518: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                ^, SimplexTableau.java:518: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                 ^, SimplexTableau.java:518: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                      ^, SimplexTableau.java:518: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                       ^, SimplexTableau.java:518: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		^, SimplexTableau.java:518: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		                                ^, SimplexTableau.java:527: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                             ^, SimplexTableau.java:527: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                 ^, SimplexTableau.java:527: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                      ^, SimplexTableau.java:527: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:531: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		^, SimplexTableau.java:531: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		^, SimplexTableau.java:531: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		^, SimplexTableau.java:531: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		^, SimplexTableau.java:531: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                ^, SimplexTableau.java:531: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                         ^, SimplexTableau.java:531: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                                			                                                                                     			^, SimplexTableau.java:538: error: class, interface, or enum expected
	 * @param dividendRow
	          ^, SimplexTableau.java:540: error: class, interface, or enum expected
	 * @param divisor
	          ^, SimplexTableau.java:542: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                               ^, SimplexTableau.java:542: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                      ^, SimplexTableau.java:542: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                ^, SimplexTableau.java:542: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                ^, SimplexTableau.java:542: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                       			                                                                             ^, SimplexTableau.java:555: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                 ^, SimplexTableau.java:555: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                       ^, SimplexTableau.java:555: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                ^, SimplexTableau.java:555: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                ^, SimplexTableau.java:555: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                ^, SimplexTableau.java:555: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                       			                                                                                                                   ^, SimplexTableau.java:559: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                ^, SimplexTableau.java:559: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                                 		                                    ^, SimplexTableau.java:563: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                ^, SimplexTableau.java:563: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                                  		                                 ^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                ^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                      ^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                     ^, SimplexTableau.java:571: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                                   		                                     ^, SimplexTableau.java:580: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                ^, SimplexTableau.java:580: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                    ^, SimplexTableau.java:580: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                   ^, SimplexTableau.java:580: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                     ^, SimplexTableau.java:580: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                     		                                     ^, SimplexTableau.java:584: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:584: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                               		                                                         ^, SimplexTableau.java:588: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                ^, SimplexTableau.java:588: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                                    		                                                                               ^, SimplexTableau.java:592: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                ^, SimplexTableau.java:592: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                     		                      ^, SimplexTableau.java:597: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                ^, SimplexTableau.java:597: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                          		                                                                      ^, SimplexTableau.java:607: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:607: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                                		                            ^, SimplexTableau.java:612: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                ^, SimplexTableau.java:612: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                        		                                                                               ^, SimplexTableau.java:616: error: class, interface, or enum expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(431): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `// initialize the objective function rows if (getNumObjectiveFunctions() == 2) { 	matrix[0][0] = -1;[...] ` -topatch--> `return getNumObjectiveFunctions() + getOriginalNumDecisionVariables()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (861(f=1.0), 862(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (861(f=1.0), )
----------Running generation: 432, population size: 1

***** Generation 432 : 0
**Parent Variant: [Variant id: 863, #gens: 186, #ops: 0, parent:-]

--Child created id: 864
--Creating new operations for variant [Variant id: 864, #gens: 186, #ops: 0, parent:863]
---analyzing modificationPoint position: 1
Templates availables31
Attempts Base Ingredients  1 total 31
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java308
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `return tableau.getData()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 308, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `return tableau.getData()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 864, #gens: 186, #ops: 1, parent:863] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 864, errors: [SimplexTableau.java:520: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:520: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:520: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:520: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:520: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:520: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:522: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:522: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:522: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:522: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:522: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:522: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:522: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:524: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:524: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:525: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:526: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:526: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:527: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:527: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:528: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:529: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:529: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:529: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:530: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:530: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:530: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:530: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:530: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:530: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:543: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:543: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:543: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:543: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:543: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:543: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:547: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:547: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:551: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:551: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:559: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:559: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:559: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:559: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:568: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:568: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:568: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:568: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:568: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:572: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:576: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:576: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:580: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:580: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:585: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:585: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:595: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:595: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:600: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:600: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:604: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:604: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:608: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:608: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:612: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:612: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:614: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:614: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:617: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:624: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:624: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:624: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:624: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:624: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:624: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:633: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:633: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:633: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:633: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:633: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:633: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:633: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:633: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:633: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(432): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `return tableau.getData()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (863(f=1.0), 864(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (863(f=1.0), )
----------Running generation: 433, population size: 1

***** Generation 433 : 0
**Parent Variant: [Variant id: 865, #gens: 186, #ops: 0, parent:-]

--Child created id: 866
--Creating new operations for variant [Variant id: 866, #gens: 186, #ops: 0, parent:865]
---analyzing modificationPoint position: 100
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java406
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getRowDimension() ` -topatch--> `// initialize the constraint rows int slackVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 406, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getRowDimension() ` -topatch--> `// initialize the constraint rows int slackVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 866, #gens: 187, #ops: 1, parent:865] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 866
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-866/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(433): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getRowDimension() ` -topatch--> `// initialize the constraint rows int slackVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (865(f=1.0), 866(f=1.0), )
Selected to next generation: IDs2--> (865(f=1.0), )
----------Running generation: 434, population size: 1

***** Generation 434 : 0
**Parent Variant: [Variant id: 867, #gens: 186, #ops: 0, parent:-]

--Child created id: 868
--Creating new operations for variant [Variant id: 868, #gens: 186, #ops: 0, parent:867]
---analyzing modificationPoint position: 105
Templates availables18
Attempts Base Ingredients  1 total 18
vars from patch []
location: LinearObjectiveFunction.java75
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearObjectiveFunction line: 75, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 868, #gens: 187, #ops: 1, parent:867] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 868, errors: [LinearObjectiveFunction.java:124: error: incompatible types: boolean cannot be converted to org.apache.commons.math.linear.RealVector
		return false; 		return coefficients;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(434): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (867(f=1.0), 868(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (867(f=1.0), )
----------Running generation: 435, population size: 1

***** Generation 435 : 0
**Parent Variant: [Variant id: 869, #gens: 186, #ops: 0, parent:-]

--Child created id: 870
--Creating new operations for variant [Variant id: 870, #gens: 186, #ops: 0, parent:869]
---analyzing modificationPoint position: 52
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.DEFAULT_MAX_ITERATIONS]
--> var from patch: org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.DEFAULT_MAX_ITERATIONS spoon.support.reflect.code.CtFieldReadImpl
location: AbstractLinearOptimizer.java98
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `setMaxIterations(org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.DEFAULT_MAX_ITE[...]` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 98, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `setMaxIterations(org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.DEFAULT_MAX_ITE[...]` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 870, #gens: 187, #ops: 1, parent:869] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 870
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-870/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(435): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `setMaxIterations(org.apache.commons.math.optimization.linear.AbstractLinearOptimizer.DEFAULT_MAX_ITE[...]` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (869(f=1.0), 870(f=1.0), )
Selected to next generation: IDs2--> (869(f=1.0), )
----------Running generation: 436, population size: 1

***** Generation 436 : 0
**Parent Variant: [Variant id: 871, #gens: 186, #ops: 0, parent:-]

--Child created id: 872
--Creating new operations for variant [Variant id: 872, #gens: 186, #ops: 0, parent:871]
---analyzing modificationPoint position: 119
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  // create a matrix of the correct size java.util.List<org.apache.commons.math.optimization.linear.Li[...]
---analyzing modificationPoint position: 40
Templates availables12
Attempts Base Ingredients  1 total 12
---modifPoint 1 not mutation generated in  double minRatio = java.lang.Double.MAX_VALUE
---analyzing modificationPoint position: 140
Templates availables8
Attempts Base Ingredients  1 total 8
vars from patch [relationship, value, coefficients]
--> var from patch: relationship spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: value spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: coefficients spoon.support.reflect.code.CtFieldReadImpl
location: LinearConstraint.java176
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return relationship ` -topatch--> `return (relationship.hashCode() ^  java.lang.Double.valueOf(value).hashCode()) ^  coefficients.hashC[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearConstraint line: 176, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return relationship ` -topatch--> `return (relationship.hashCode() ^  java.lang.Double.valueOf(value).hashCode()) ^  coefficients.hashC[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 872, #gens: 186, #ops: 1, parent:871] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 872, errors: [LinearConstraint.java:218: error: incompatible types: int cannot be converted to org.apache.commons.math.optimization.linear.Relationship
		java.lang.Double.valueOf(value).hashCode()) ^ 
		                                            ^]
Ingredient counter is Zero
---Undoing: gnrtn(436): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return relationship ` -topatch--> `return (relationship.hashCode() ^  java.lang.Double.valueOf(value).hashCode()) ^  coefficients.hashC[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (871(f=1.0), 872(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (871(f=1.0), )
----------Running generation: 437, population size: 1

***** Generation 437 : 0
**Parent Variant: [Variant id: 873, #gens: 186, #ops: 0, parent:-]

--Child created id: 874
--Creating new operations for variant [Variant id: 874, #gens: 186, #ops: 0, parent:873]
---analyzing modificationPoint position: 147
location: SimplexTableau.java200
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `normalized.add(normalize(constraint)) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 874, #gens: 185, #ops: 1, parent:873] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 874
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-874/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(437): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `normalized.add(normalize(constraint)) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (873(f=1.0), 874(f=14.0), )
Selected to next generation: IDs2--> (873(f=1.0), )
----------Running generation: 438, population size: 1

***** Generation 438 : 0
**Parent Variant: [Variant id: 875, #gens: 186, #ops: 0, parent:-]

--Child created id: 876
--Creating new operations for variant [Variant id: 876, #gens: 186, #ops: 0, parent:875]
---analyzing modificationPoint position: 135
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [constraints]
--> var from patch: constraints spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java157
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `// decision variable coefficients copyArray(constraint.getCoefficients().getData(), matrix[row], 1) ` -topatch--> `constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 157, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `// decision variable coefficients copyArray(constraint.getCoefficients().getData(), matrix[row], 1) ` -topatch--> `constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 876, #gens: 187, #ops: 1, parent:875] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 876
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-876/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(438): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `// decision variable coefficients copyArray(constraint.getCoefficients().getData(), matrix[row], 1) ` -topatch--> `constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (875(f=1.0), 876(f=1.0), )
Selected to next generation: IDs2--> (875(f=1.0), )
----------Running generation: 439, population size: 1

***** Generation 439 : 0
**Parent Variant: [Variant id: 877, #gens: 186, #ops: 0, parent:-]

--Child created id: 878
--Creating new operations for variant [Variant id: 878, #gens: 186, #ops: 0, parent:877]
---analyzing modificationPoint position: 27
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  tableau.discardArtificialVariables()
---analyzing modificationPoint position: 148
---modifPoint 1 not mutation generated in  return normalized
---analyzing modificationPoint position: 138
---modifPoint 2 not mutation generated in  return coefficients
---analyzing modificationPoint position: 32
---modifPoint 3 not mutation generated in  java.lang.Integer minPos = null
---analyzing modificationPoint position: 91
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 4 not mutation generated in  row = i
---analyzing modificationPoint position: 70
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 5 not mutation generated in  for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRo[...]
---analyzing modificationPoint position: 130
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch []
location: SimplexTableau.java150
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// initialize the constraint rows int slackVar = 0 ` -topatch--> `int count = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 150, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// initialize the constraint rows int slackVar = 0 ` -topatch--> `int count = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 878, #gens: 186, #ops: 1, parent:877] gen mutated: 1 , gen not mut: 6, gen not applied  0
-The child does NOT compile: 878, errors: [SimplexTableau.java:237: error: cannot find symbol
			if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.LEQ) { 				matrix[row][getSlackVariableOffset() + (slackVar++)] = 1;// slack
			                                                                                                    				                                        ^
  symbol:   variable slackVar
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:238: error: cannot find symbol
			} else if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ) { 				matrix[row][getSlackVariableOffset() + (slackVar++)] = -1;// excess
			                                                                                                           				                                        ^
  symbol:   variable slackVar
  location: class org.apache.commons.math.optimization.linear.SimplexTableau]
Ingredient counter is Zero
---Undoing: gnrtn(439): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// initialize the constraint rows int slackVar = 0 ` -topatch--> `int count = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (877(f=1.0), 878(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (877(f=1.0), )
----------Running generation: 440, population size: 1

***** Generation 440 : 0
**Parent Variant: [Variant id: 879, #gens: 186, #ops: 0, parent:-]

--Child created id: 880
--Creating new operations for variant [Variant id: 880, #gens: 186, #ops: 0, parent:879]
---analyzing modificationPoint position: 51
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch []
location: SimplexSolver.java90
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return minRatioPos ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 90, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return minRatioPos ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 880, #gens: 186, #ops: 1, parent:879] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 880, errors: [SimplexSolver.java:136: error: incompatible types: boolean cannot be converted to java.lang.Integer
		return false;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(440): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return minRatioPos ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (879(f=1.0), 880(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (879(f=1.0), )
----------Running generation: 441, population size: 1

***** Generation 441 : 0
**Parent Variant: [Variant id: 881, #gens: 186, #ops: 0, parent:-]

--Child created id: 882
--Creating new operations for variant [Variant id: 882, #gens: 186, #ops: 0, parent:881]
---analyzing modificationPoint position: 72
---modifPoint 0 not mutation generated in  return numArtificialVariables
---analyzing modificationPoint position: 83
location: ArrayRealVector.java886
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < data.length; i++) { 	dot += data[i] * v[i]; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 882, #gens: 185, #ops: 1, parent:881] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 882
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-882/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 11, was successful: false, cases executed: 14] ,[]
-Valid?: |false|11|14|[]|, fitness 11.0
Ingredient counter is Zero
---Undoing: gnrtn(441): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < data.length; i++) { 	dot += data[i] * v[i]; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (881(f=1.0), 882(f=11.0), )
Selected to next generation: IDs2--> (881(f=1.0), )
----------Running generation: 442, population size: 1

***** Generation 442 : 0
**Parent Variant: [Variant id: 883, #gens: 186, #ops: 0, parent:-]

--Child created id: 884
--Creating new operations for variant [Variant id: 884, #gens: 186, #ops: 0, parent:883]
---analyzing modificationPoint position: 144
---modifPoint 0 not mutation generated in  return f.getCoefficients().getDimension()
---analyzing modificationPoint position: 79
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 	return null; [...]
---analyzing modificationPoint position: 45
Templates availables10
Attempts Base Ingredients  1 total 10
---modifPoint 2 not mutation generated in  if (org.apache.commons.math.util.MathUtils.compareTo(entry, 0, epsilon) >= 0) { 	final double ratio [...]
---analyzing modificationPoint position: 70
Templates availables8
Attempts Base Ingredients  1 total 8
vars from patch [j, tableau, dividendRow, divisor]
--> var from patch: j spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: tableau spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: dividendRow spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: divisor spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java370
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRo[...] ` -topatch--> `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRo[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 370, pointed element: CtForImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRo[...] ` -topatch--> `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRo[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 884, #gens: 186, #ops: 1, parent:883] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 884
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-884/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(442): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRo[...] ` -topatch--> `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRo[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (883(f=1.0), 884(f=1.0), )
Selected to next generation: IDs2--> (883(f=1.0), )
----------Running generation: 443, population size: 1

***** Generation 443 : 0
**Parent Variant: [Variant id: 885, #gens: 186, #ops: 0, parent:-]

--Child created id: 886
--Creating new operations for variant [Variant id: 886, #gens: 186, #ops: 0, parent:885]
---analyzing modificationPoint position: 148
---modifPoint 0 not mutation generated in  return normalized
---analyzing modificationPoint position: 27
Templates availables7
Attempts Base Ingredients  1 total 7
---modifPoint 1 not mutation generated in  tableau.discardArtificialVariables()
---analyzing modificationPoint position: 15
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [this.numDecisionVariables, restrictToNonNegative]
--> var from patch: this.numDecisionVariables spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java345
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i) ` -topatch--> `this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 345, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i) ` -topatch--> `this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 886, #gens: 187, #ops: 1, parent:885] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 886, errors: [SimplexTableau.java:346: error: cannot assign a value to final variable numDecisionVariables
			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1);
			                                                                                     			    ^]
Ingredient counter is Zero
---Undoing: gnrtn(443): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i) ` -topatch--> `this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (885(f=1.0), 886(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (885(f=1.0), )
----------Running generation: 444, population size: 1

***** Generation 444 : 0
**Parent Variant: [Variant id: 887, #gens: 186, #ops: 0, parent:-]

--Child created id: 888
--Creating new operations for variant [Variant id: 888, #gens: 186, #ops: 0, parent:887]
---analyzing modificationPoint position: 150
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients()[...]
---analyzing modificationPoint position: 146
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 	norma[...]
---analyzing modificationPoint position: 142
Templates availables31
Attempts Base Ingredients  1 total 31
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java183
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return matrix ` -topatch--> `return tableau.getRowDimension()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 183, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return matrix ` -topatch--> `return tableau.getRowDimension()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 888, #gens: 186, #ops: 1, parent:887] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 888, errors: [SimplexTableau.java:474: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:474: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:474: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:474: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:474: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:474: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:476: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:476: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:476: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:476: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:476: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:476: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:476: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:478: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:478: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:479: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:480: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:480: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:481: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:481: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:482: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:483: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:483: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:483: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:484: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:484: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:484: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:484: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:484: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:484: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:497: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:497: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:497: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:497: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:497: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:497: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:501: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:501: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:505: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:505: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:513: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:513: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:513: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:513: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:522: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:522: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:522: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:522: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:522: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:526: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:526: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:530: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:530: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:534: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:534: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:539: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:539: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:549: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:549: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:554: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:554: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:558: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:558: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:562: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:562: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:566: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:566: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:568: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:568: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:571: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:578: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:578: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:578: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:578: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:578: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:578: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:587: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:587: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:587: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:587: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:587: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:587: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:587: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:587: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:587: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(444): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return matrix ` -topatch--> `return tableau.getRowDimension()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (887(f=1.0), 888(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (887(f=1.0), )
----------Running generation: 445, population size: 1

***** Generation 445 : 0
**Parent Variant: [Variant id: 889, #gens: 186, #ops: 0, parent:-]

--Child created id: 890
--Creating new operations for variant [Variant id: 890, #gens: 186, #ops: 0, parent:889]
---analyzing modificationPoint position: 149
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  if (constraint.getValue() < 0) { 	return new org.apache.commons.math.optimization.linear.LinearConst[...]
---analyzing modificationPoint position: 152
---modifPoint 1 not mutation generated in  int count = 0
---analyzing modificationPoint position: 35
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 2 not mutation generated in  if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)[...]
---analyzing modificationPoint position: 36
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java63
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `minValue = tableau.getEntry(0, i) ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 63, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `minValue = tableau.getEntry(0, i) ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 890, #gens: 187, #ops: 1, parent:889] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 890, errors: [SimplexSolver.java:132: error: incompatible types: boolean cannot be converted to java.lang.Integer
				return true; 				minPos = i;}} 		return minPos;} 	/**
				       ^]
Ingredient counter is Zero
---Undoing: gnrtn(445): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `minValue = tableau.getEntry(0, i) ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (889(f=1.0), 890(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (889(f=1.0), )
----------Running generation: 446, population size: 1

***** Generation 446 : 0
**Parent Variant: [Variant id: 891, #gens: 186, #ops: 0, parent:-]

--Child created id: 892
--Creating new operations for variant [Variant id: 892, #gens: 186, #ops: 0, parent:891]
---analyzing modificationPoint position: 141
location: SimplexTableau.java176
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// artificial variables if ((constraint.getRelationship() == org.apache.commons.math.optimization.li[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 892, #gens: 185, #ops: 1, parent:891] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 892
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-892/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 14] ,[]
-Valid?: |false|12|14|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(446): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// artificial variables if ((constraint.getRelationship() == org.apache.commons.math.optimization.li[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (891(f=1.0), 892(f=12.0), )
Selected to next generation: IDs2--> (891(f=1.0), )
----------Running generation: 447, population size: 1

***** Generation 447 : 0
**Parent Variant: [Variant id: 893, #gens: 186, #ops: 0, parent:-]

--Child created id: 894
--Creating new operations for variant [Variant id: 894, #gens: 186, #ops: 0, parent:893]
---analyzing modificationPoint position: 23
location: SimplexSolver.java150
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 894, #gens: 185, #ops: 1, parent:893] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 894
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-894/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 14] ,[]
-Valid?: |false|8|14|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(447): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (893(f=1.0), 894(f=8.0), )
Selected to next generation: IDs2--> (893(f=1.0), )
----------Running generation: 448, population size: 1

***** Generation 448 : 0
**Parent Variant: [Variant id: 895, #gens: 186, #ops: 0, parent:-]

--Child created id: 896
--Creating new operations for variant [Variant id: 896, #gens: 186, #ops: 0, parent:895]
---analyzing modificationPoint position: 131
---modifPoint 0 not mutation generated in  int artificialVar = 0
---analyzing modificationPoint position: 26
location: SimplexSolver.java188
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 896, #gens: 185, #ops: 1, parent:895] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 896
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-896/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 5, was successful: false, cases executed: 14] ,[]
-Valid?: |false|5|14|[]|, fitness 5.0
Ingredient counter is Zero
---Undoing: gnrtn(448): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (895(f=1.0), 896(f=5.0), )
Selected to next generation: IDs2--> (895(f=1.0), )
----------Running generation: 449, population size: 1

***** Generation 449 : 0
**Parent Variant: [Variant id: 897, #gens: 186, #ops: 0, parent:-]

--Child created id: 898
--Creating new operations for variant [Variant id: 898, #gens: 186, #ops: 0, parent:897]
---analyzing modificationPoint position: 4
Templates availables31
Attempts Base Ingredients  1 total 31
---modifPoint 0 not mutation generated in  return null
---analyzing modificationPoint position: 81
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 1 not mutation generated in  checkVectorDimensions(v.length)
---analyzing modificationPoint position: 36
Templates availables5
Attempts Base Ingredients  1 total 5
---modifPoint 2 not mutation generated in  minValue = tableau.getEntry(0, i)
---analyzing modificationPoint position: 95
Templates availables83
Attempts Base Ingredients  1 total 83
---modifPoint 3 not mutation generated in  out[i] = data[i] * d
---analyzing modificationPoint position: 16
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 4 not mutation generated in  if (basicRows.contains(basicRow)) { 	// if multiple variables can take a given value 	// then we cho[...]
---analyzing modificationPoint position: 82
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 5 not mutation generated in  double dot = 0
---analyzing modificationPoint position: 115
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [this.numArtificialVariables]
--> var from patch: this.numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java110
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numSlackVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relatio[...] ` -topatch--> `return this.numArtificialVariables > 0 ? 2 : 1` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 110, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numSlackVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relatio[...] ` -topatch--> `return this.numArtificialVariables > 0 ? 2 : 1` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 898, #gens: 187, #ops: 1, parent:897] gen mutated: 1 , gen not mut: 6, gen not applied  0
-The child does NOT compile: 898, errors: [SimplexTableau.java:238: error: illegal start of type
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		^, SimplexTableau.java:238: error: ';' expected
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		      ^, SimplexTableau.java:242: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	       ^, SimplexTableau.java:242: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	                               		                                          ^, SimplexTableau.java:246: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	       ^, SimplexTableau.java:246: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		^, SimplexTableau.java:246: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                      ^, SimplexTableau.java:246: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                        		                  ^, SimplexTableau.java:252: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                     ^, SimplexTableau.java:252: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                         ^, SimplexTableau.java:252: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                           		                                                                                                                                                           ^, SimplexTableau.java:256: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                ^, SimplexTableau.java:256: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                                                 		                                               ^, SimplexTableau.java:262: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                          ^, SimplexTableau.java:262: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		^, SimplexTableau.java:262: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		           ^, SimplexTableau.java:262: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				        ^, SimplexTableau.java:262: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				           		             ^, SimplexTableau.java:265: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                            ^, SimplexTableau.java:265: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                    ^, SimplexTableau.java:265: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			^, SimplexTableau.java:265: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			                         ^, SimplexTableau.java:271: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                         ^, SimplexTableau.java:271: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		^, SimplexTableau.java:271: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                   ^, SimplexTableau.java:271: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                     		           ^, SimplexTableau.java:277: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                            ^, SimplexTableau.java:277: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                                       		                              ^, SimplexTableau.java:283: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);
	    	                                                       ^, SimplexTableau.java:284: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:292: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null;
	    	                                            ^, SimplexTableau.java:293: error: class, interface, or enum expected
		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0;
		^, SimplexTableau.java:294: error: class, interface, or enum expected
		for (int i = start; i < getHeight(); i++) {
		^, SimplexTableau.java:294: error: class, interface, or enum expected
		for (int i = start; i < getHeight(); i++) {
		                    ^, SimplexTableau.java:294: error: class, interface, or enum expected
		for (int i = start; i < getHeight(); i++) {
		                                     ^, SimplexTableau.java:297: error: class, interface, or enum expected
			} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {
			^, SimplexTableau.java:299: error: class, interface, or enum expected
			}
			^, SimplexTableau.java:302: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:310: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:312: error: class, interface, or enum expected
		int height = getHeight() - 1;
		^, SimplexTableau.java:313: error: class, interface, or enum expected
		double[][] matrix = new double[height][width];
		^, SimplexTableau.java:314: error: class, interface, or enum expected
		for (int i = 0; i < height; i++) {
		^, SimplexTableau.java:314: error: class, interface, or enum expected
		for (int i = 0; i < height; i++) {
		                ^, SimplexTableau.java:314: error: class, interface, or enum expected
		for (int i = 0; i < height; i++) {
		                            ^, SimplexTableau.java:315: error: class, interface, or enum expected
			for (int j = 0; j < (width - 1); j++) {
			                ^, SimplexTableau.java:315: error: class, interface, or enum expected
			for (int j = 0; j < (width - 1); j++) {
			                                 ^, SimplexTableau.java:317: error: class, interface, or enum expected
			}
			^, SimplexTableau.java:319: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:321: error: class, interface, or enum expected
		this.numArtificialVariables = 0;
		^, SimplexTableau.java:322: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:334: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);}
	    	                             ^, SimplexTableau.java:334: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);}
	    	                                                 ^, SimplexTableau.java:334: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);}
	    	                                                                      ^, SimplexTableau.java:334: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);}
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:342: error: class, interface, or enum expected
		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset());
		^, SimplexTableau.java:343: error: class, interface, or enum expected
		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
		^, SimplexTableau.java:344: error: class, interface, or enum expected
		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>();
		^, SimplexTableau.java:345: error: class, interface, or enum expected
		for (int i = 0; i < coefficients.length; i++) {
		^, SimplexTableau.java:345: error: class, interface, or enum expected
		for (int i = 0; i < coefficients.length; i++) {
		                ^, SimplexTableau.java:345: error: class, interface, or enum expected
		for (int i = 0; i < coefficients.length; i++) {
		                                         ^, SimplexTableau.java:347: error: class, interface, or enum expected
			if (basicRows.contains(basicRow)) {
			^, SimplexTableau.java:351: error: class, interface, or enum expected
			} else {
			^, SimplexTableau.java:353: error: class, interface, or enum expected
				coefficients[i] = 
				^, SimplexTableau.java:356: error: class, interface, or enum expected
			}
			^, SimplexTableau.java:359: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                               ^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                                                      ^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                                                                        		                ^, SimplexTableau.java:372: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);
	    	                                                                        		                                ^, SimplexTableau.java:373: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                 ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                       ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                                                ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                                                                   		                ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - 
	    	                                                                                                   		                                ^, SimplexTableau.java:391: error: class, interface, or enum expected
		}
		^, SimplexTableau.java:398: error: class, interface, or enum expected
	 */ 	protected final int getWidth() {
	    	                ^, SimplexTableau.java:400: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:406: error: class, interface, or enum expected
	 */ 	protected final int getHeight() {
	    	                ^, SimplexTableau.java:408: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                ^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                      ^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                                     ^, SimplexTableau.java:418: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);}
	    	                                                                   		                                     ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                    ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                   ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                                     ^, SimplexTableau.java:428: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);}
	    	                                                                                     		                                     ^, SimplexTableau.java:433: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() {
	    	                ^, SimplexTableau.java:435: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:441: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() {
	    	                ^, SimplexTableau.java:443: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:449: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() {
	    	                ^, SimplexTableau.java:451: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:458: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() {
	    	                ^, SimplexTableau.java:460: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:472: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() {
	    	                ^, SimplexTableau.java:474: error: class, interface, or enum expected
	}
	^, SimplexTableau.java:481: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() {
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(449): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numSlackVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relatio[...] ` -topatch--> `return this.numArtificialVariables > 0 ? 2 : 1` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (897(f=1.0), 898(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (897(f=1.0), )
----------Running generation: 450, population size: 1

***** Generation 450 : 0
**Parent Variant: [Variant id: 899, #gens: 186, #ops: 0, parent:-]

--Child created id: 900
--Creating new operations for variant [Variant id: 900, #gens: 186, #ops: 0, parent:899]
---analyzing modificationPoint position: 128
Templates availables25
Attempts Base Ingredients  1 total 25
vars from patch [restrictToNonNegative]
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java141
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[zIndex][width - 1] =  (maximize) ? f.getConstantTerm() : (-1) * f.getConstantTerm() ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 141, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[zIndex][width - 1] =  (maximize) ? f.getConstantTerm() : (-1) * f.getConstantTerm() ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 900, #gens: 186, #ops: 1, parent:899] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 900, errors: [SimplexTableau.java:141: error: cannot assign a value to final variable restrictToNonNegative
		copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions()); 		restrictToNonNegative = restrictToNonNegative;
		                                                                                        		^]
Ingredient counter is Zero
---Undoing: gnrtn(450): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[zIndex][width - 1] =  (maximize) ? f.getConstantTerm() : (-1) * f.getConstantTerm() ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (899(f=1.0), 900(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (899(f=1.0), )
----------Running generation: 451, population size: 1

***** Generation 451 : 0
**Parent Variant: [Variant id: 901, #gens: 186, #ops: 0, parent:-]

--Child created id: 902
--Creating new operations for variant [Variant id: 902, #gens: 186, #ops: 0, parent:901]
---analyzing modificationPoint position: 4
Templates availables31
Attempts Base Ingredients  1 total 31
---modifPoint 0 not mutation generated in  return null
---analyzing modificationPoint position: 80
Templates availables31
Attempts Base Ingredients  1 total 31
---modifPoint 1 not mutation generated in  return getNumObjectiveFunctions() + numDecisionVariables
---analyzing modificationPoint position: 53
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch [this.maxIterations]
--> var from patch: this.maxIterations spoon.support.reflect.code.CtFieldWriteImpl
location: AbstractLinearOptimizer.java99
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 99, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 902, #gens: 186, #ops: 1, parent:901] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 902
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-902/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(451): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (901(f=1.0), 902(f=14.0), )
Selected to next generation: IDs2--> (901(f=1.0), )
----------Running generation: 452, population size: 1

***** Generation 452 : 0
**Parent Variant: [Variant id: 903, #gens: 186, #ops: 0, parent:-]

--Child created id: 904
--Creating new operations for variant [Variant id: 904, #gens: 186, #ops: 0, parent:903]
---analyzing modificationPoint position: 139
location: SimplexTableau.java169
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 904, #gens: 185, #ops: 1, parent:903] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 904
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-904/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 14] ,[]
-Valid?: |false|3|14|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(452): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (903(f=1.0), 904(f=3.0), )
Selected to next generation: IDs2--> (903(f=1.0), )
----------Running generation: 453, population size: 1

***** Generation 453 : 0
**Parent Variant: [Variant id: 905, #gens: 186, #ops: 0, parent:-]

--Child created id: 906
--Creating new operations for variant [Variant id: 906, #gens: 186, #ops: 0, parent:905]
---analyzing modificationPoint position: 145
Templates availables24
Attempts Base Ingredients  1 total 24
---modifPoint 0 not mutation generated in  java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...]
---analyzing modificationPoint position: 158
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 1 not mutation generated in  java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length)
---analyzing modificationPoint position: 58
---modifPoint 2 not mutation generated in  java.lang.Integer pivotCol = getPivotColumn(tableau)
---analyzing modificationPoint position: 23
Templates availables4
Attempts Base Ingredients  1 total 4
Attempts Base Ingredients  2 total 4
---modifPoint 3 not mutation generated in  for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...]
---analyzing modificationPoint position: 87
---modifPoint 4 not mutation generated in  java.lang.Integer row = null
---analyzing modificationPoint position: 10
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [restrictToNonNegative]
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java340
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] coefficients = new double[getOriginalNumDecisionVariables()] ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 340, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] coefficients = new double[getOriginalNumDecisionVariables()] ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 906, #gens: 187, #ops: 1, parent:905] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child does NOT compile: 906, errors: [SimplexTableau.java:340: error: cannot assign a value to final variable restrictToNonNegative
	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		restrictToNonNegative = restrictToNonNegative;
	                                                                                  		^]
Ingredient counter is Zero
---Undoing: gnrtn(453): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] coefficients = new double[getOriginalNumDecisionVariables()] ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (905(f=1.0), 906(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (905(f=1.0), )
----------Running generation: 454, population size: 1

***** Generation 454 : 0
**Parent Variant: [Variant id: 907, #gens: 186, #ops: 0, parent:-]

--Child created id: 908
--Creating new operations for variant [Variant id: 908, #gens: 186, #ops: 0, parent:907]
---analyzing modificationPoint position: 76
Templates availables259
Attempts Base Ingredients  1 total 259
---modifPoint 0 not mutation generated in  return -1
---analyzing modificationPoint position: 2
Templates availables7
Attempts Base Ingredients  1 total 7
---modifPoint 1 not mutation generated in  doIteration(tableau)
---analyzing modificationPoint position: 48
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON]
--> var from patch: org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java85
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatio = ratio ` -topatch--> `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 85, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatio = ratio ` -topatch--> `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 908, #gens: 187, #ops: 1, parent:907] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 908, errors: [SimplexSolver.java:86: error: call to this must be first statement in constructor
					minRatio = ratio; 					this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON);
					                  					    ^]
Ingredient counter is Zero
---Undoing: gnrtn(454): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatio = ratio ` -topatch--> `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (907(f=1.0), 908(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (907(f=1.0), )
----------Running generation: 455, population size: 1

***** Generation 455 : 0
**Parent Variant: [Variant id: 909, #gens: 186, #ops: 0, parent:-]

--Child created id: 910
--Creating new operations for variant [Variant id: 910, #gens: 186, #ops: 0, parent:909]
---analyzing modificationPoint position: 137
location: SimplexTableau.java166
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// RHS matrix[row][width - 1] = constraint.getValue() ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 910, #gens: 185, #ops: 1, parent:909] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 910
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-910/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 14] ,[]
-Valid?: |false|12|14|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(455): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// RHS matrix[row][width - 1] = constraint.getValue() ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (909(f=1.0), 910(f=12.0), )
Selected to next generation: IDs2--> (909(f=1.0), )
----------Running generation: 456, population size: 1

***** Generation 456 : 0
**Parent Variant: [Variant id: 911, #gens: 186, #ops: 0, parent:-]

--Child created id: 912
--Creating new operations for variant [Variant id: 912, #gens: 186, #ops: 0, parent:911]
---analyzing modificationPoint position: 15
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i)
---analyzing modificationPoint position: 47
location: SimplexSolver.java84
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 912, #gens: 185, #ops: 1, parent:911] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 912, errors: [SimplexSolver.java:84: error: variable declaration not allowed here
				final double ratio = rhs / entry;
				             ^]
Ingredient counter is Zero
---Undoing: gnrtn(456): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (911(f=1.0), 912(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (911(f=1.0), )
----------Running generation: 457, population size: 1

***** Generation 457 : 0
**Parent Variant: [Variant id: 913, #gens: 186, #ops: 0, parent:-]

--Child created id: 914
--Creating new operations for variant [Variant id: 914, #gens: 186, #ops: 0, parent:913]
---analyzing modificationPoint position: 49
Templates availables1
Attempts Base Ingredients  1 total 1
--- no mutation left to apply in element spoon.support.reflect.code.CtIfImpl@1, search space size: 1
---modifPoint 0 not mutation generated in  if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...]
---analyzing modificationPoint position: 144
---modifPoint 1 not mutation generated in  return f.getCoefficients().getDimension()
---analyzing modificationPoint position: 24
location: SimplexSolver.java151
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { 	ret[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 914, #gens: 185, #ops: 1, parent:913] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 914
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-914/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 14] ,[]
-Valid?: |false|8|14|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(457): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { 	ret[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (913(f=1.0), 914(f=8.0), )
Selected to next generation: IDs2--> (913(f=1.0), )
----------Running generation: 458, population size: 1

***** Generation 458 : 0
**Parent Variant: [Variant id: 915, #gens: 186, #ops: 0, parent:-]

--Child created id: 916
--Creating new operations for variant [Variant id: 916, #gens: 186, #ops: 0, parent:915]
---analyzing modificationPoint position: 49
Templates availables12
Attempts Base Ingredients  1 total 12
Attempts Base Ingredients  2 total 12
vars from patch [constraints]
--> var from patch: constraints spoon.support.reflect.code.CtVariableReadImpl
location: AbstractLinearOptimizer.java86
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...] ` -topatch--> `constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 86, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...] ` -topatch--> `constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 916, #gens: 187, #ops: 1, parent:915] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 916
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-916/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(458): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((++iterations) > maxIterations) { 	throw new org.apache.commons.math.optimization.OptimizationEx[...] ` -topatch--> `constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (915(f=1.0), 916(f=14.0), )
Selected to next generation: IDs2--> (915(f=1.0), )
----------Running generation: 459, population size: 1

***** Generation 459 : 0
**Parent Variant: [Variant id: 917, #gens: 186, #ops: 0, parent:-]

--Child created id: 918
--Creating new operations for variant [Variant id: 918, #gens: 186, #ops: 0, parent:917]
---analyzing modificationPoint position: 155
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [this.numSlackVariables, org.apache.commons.math.optimization.linear.Relationship.LEQ, org.apache.commons.math.optimization.linear.Relationship.GEQ]
--> var from patch: this.numSlackVariables spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: org.apache.commons.math.optimization.linear.Relationship.LEQ spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math.optimization.linear.Relationship.GEQ spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java237
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `++count ` -topatch--> `this.numSlackVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relatio[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 237, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `++count ` -topatch--> `this.numSlackVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relatio[...]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 918, #gens: 187, #ops: 1, parent:917] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 918, errors: [SimplexTableau.java:237: error: cannot assign a value to final variable numSlackVariables
			if (constraint.getRelationship() == relationship) { 				this.numSlackVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relationship.LEQ) + getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relationship.GEQ);
			                                                    				    ^]
Ingredient counter is Zero
---Undoing: gnrtn(459): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `++count ` -topatch--> `this.numSlackVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relatio[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (917(f=1.0), 918(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (917(f=1.0), )
----------Running generation: 460, population size: 1

***** Generation 460 : 0
**Parent Variant: [Variant id: 919, #gens: 186, #ops: 0, parent:-]

--Child created id: 920
--Creating new operations for variant [Variant id: 920, #gens: 186, #ops: 0, parent:919]
---analyzing modificationPoint position: 144
---modifPoint 0 not mutation generated in  return f.getCoefficients().getDimension()
---analyzing modificationPoint position: 77
---modifPoint 1 not mutation generated in  return 1
---analyzing modificationPoint position: 163
Templates availables3
Attempts Base Ingredients  1 total 3
vars from patch [point]
--> var from patch: point spoon.support.reflect.code.CtVariableReadImpl
location: RealPointValuePair.java86
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return value ` -topatch--> `return point` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.RealPointValuePair line: 86, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return value ` -topatch--> `return point` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 920, #gens: 186, #ops: 1, parent:919] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 920, errors: [RealPointValuePair.java:87: error: incompatible types: double[] cannot be converted to double
	 */ 	public double getValue() { 		return point;
	    	                           		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(460): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return value ` -topatch--> `return point` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (919(f=1.0), 920(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (919(f=1.0), )
----------Running generation: 461, population size: 1

***** Generation 461 : 0
**Parent Variant: [Variant id: 921, #gens: 186, #ops: 0, parent:-]

--Child created id: 922
--Creating new operations for variant [Variant id: 922, #gens: 186, #ops: 0, parent:921]
---analyzing modificationPoint position: 74
location: MathUtils.java368
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return 0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 922, #gens: 185, #ops: 1, parent:921] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 922
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-922/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(461): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return 0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (921(f=1.0), 922(f=1.0), )
Selected to next generation: IDs2--> (921(f=1.0), )
----------Running generation: 462, population size: 1

***** Generation 462 : 0
**Parent Variant: [Variant id: 923, #gens: 186, #ops: 0, parent:-]

--Child created id: 924
--Creating new operations for variant [Variant id: 924, #gens: 186, #ops: 0, parent:923]
---analyzing modificationPoint position: 0
location: SimplexSolver.java169
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 924, #gens: 185, #ops: 1, parent:923] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 924
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-924/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(462): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (923(f=1.0), 924(f=1.0), )
Selected to next generation: IDs2--> (923(f=1.0), )
----------Running generation: 463, population size: 1

***** Generation 463 : 0
**Parent Variant: [Variant id: 925, #gens: 186, #ops: 0, parent:-]

--Child created id: 926
--Creating new operations for variant [Variant id: 926, #gens: 186, #ops: 0, parent:925]
---analyzing modificationPoint position: 67
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  // make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }
---analyzing modificationPoint position: 54
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [constraints]
--> var from patch: constraints spoon.support.reflect.code.CtVariableReadImpl
location: AbstractLinearOptimizer.java100
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.goalType = goalType ` -topatch--> `constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 100, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.goalType = goalType ` -topatch--> `constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 926, #gens: 187, #ops: 1, parent:925] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 926, errors: [AbstractLinearOptimizer.java:101: error: final parameter constraints may not be assigned
		this.goalType = goalType; 		constraints = constraints;
		                          		^]
Ingredient counter is Zero
---Undoing: gnrtn(463): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.goalType = goalType ` -topatch--> `constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (925(f=1.0), 926(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (925(f=1.0), )
----------Running generation: 464, population size: 1

***** Generation 464 : 0
**Parent Variant: [Variant id: 927, #gens: 186, #ops: 0, parent:-]

--Child created id: 928
--Creating new operations for variant [Variant id: 928, #gens: 186, #ops: 0, parent:927]
---analyzing modificationPoint position: 124
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch []
location: SimplexTableau.java136
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1 ` -topatch--> `// create a matrix of the correct size java.util.List<org.apache.commons.math.optimization.linear.Li[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 136, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1 ` -topatch--> `// create a matrix of the correct size java.util.List<org.apache.commons.math.optimization.linear.Li[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 928, #gens: 186, #ops: 1, parent:927] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 928, errors: [SimplexTableau.java:138: error: cannot find symbol
		matrix[zIndex][zIndex] = (maximize) ? 1 : -1;
		       ^
  symbol:   variable zIndex
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:138: error: cannot find symbol
		matrix[zIndex][zIndex] = (maximize) ? 1 : -1;
		               ^
  symbol:   variable zIndex
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:141: error: cannot find symbol
		copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());
		                                                  ^
  symbol:   variable zIndex
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:142: error: cannot find symbol
		matrix[zIndex][width - 1] = 
		       ^
  symbol:   variable zIndex
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:146: error: cannot find symbol
			matrix[zIndex][getSlackVariableOffset() - 1] = 
			       ^
  symbol:   variable zIndex
  location: class org.apache.commons.math.optimization.linear.SimplexTableau]
Ingredient counter is Zero
---Undoing: gnrtn(464): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1 ` -topatch--> `// create a matrix of the correct size java.util.List<org.apache.commons.math.optimization.linear.Li[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (927(f=1.0), 928(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (927(f=1.0), )
----------Running generation: 465, population size: 1

***** Generation 465 : 0
**Parent Variant: [Variant id: 929, #gens: 186, #ops: 0, parent:-]

--Child created id: 930
--Creating new operations for variant [Variant id: 930, #gens: 186, #ops: 0, parent:929]
---analyzing modificationPoint position: 25
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack 
---analyzing modificationPoint position: 162
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch [value]
--> var from patch: value spoon.support.reflect.code.CtVariableReadImpl
location: RealPointValuePair.java50
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.value = value ` -topatch--> `value = value` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.RealPointValuePair line: 50, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.value = value ` -topatch--> `value = value` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 930, #gens: 187, #ops: 1, parent:929] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 930, errors: [RealPointValuePair.java:52: error: final parameter value may not be assigned
	 */ 	public RealPointValuePair(final double[] point, final double value) { 		this.point = point.clone(); 		this.value = value; 		value = value;}
	    	                                                                      		                            		                    		^]
Ingredient counter is Zero
---Undoing: gnrtn(465): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.value = value ` -topatch--> `value = value` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (929(f=1.0), 930(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (929(f=1.0), )
----------Running generation: 466, population size: 1

***** Generation 466 : 0
**Parent Variant: [Variant id: 931, #gens: 186, #ops: 0, parent:-]

--Child created id: 932
--Creating new operations for variant [Variant id: 932, #gens: 186, #ops: 0, parent:931]
---analyzing modificationPoint position: 110
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java105
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.f = f ` -topatch--> `return getNumObjectiveFunctions() + getOriginalNumDecisionVariables()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 105, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.f = f ` -topatch--> `return getNumObjectiveFunctions() + getOriginalNumDecisionVariables()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 932, #gens: 187, #ops: 1, parent:931] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 932, errors: [SimplexTableau.java:471: error: illegal start of type
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		^, SimplexTableau.java:471: error: ';' expected
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		      ^, SimplexTableau.java:475: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	       ^, SimplexTableau.java:475: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	                               		                                          ^, SimplexTableau.java:479: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	       ^, SimplexTableau.java:479: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		^, SimplexTableau.java:479: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                      ^, SimplexTableau.java:479: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                        		                  ^, SimplexTableau.java:485: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                     ^, SimplexTableau.java:485: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                         ^, SimplexTableau.java:485: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                           		                                                                                                                                                           ^, SimplexTableau.java:489: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                ^, SimplexTableau.java:489: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                                                 		                                               ^, SimplexTableau.java:495: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                          ^, SimplexTableau.java:495: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		^, SimplexTableau.java:495: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		           ^, SimplexTableau.java:495: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				        ^, SimplexTableau.java:495: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				           		             ^, SimplexTableau.java:498: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                            ^, SimplexTableau.java:498: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                    ^, SimplexTableau.java:498: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			^, SimplexTableau.java:498: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			                         ^, SimplexTableau.java:504: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                         ^, SimplexTableau.java:504: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		^, SimplexTableau.java:504: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                   ^, SimplexTableau.java:504: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                     		           ^, SimplexTableau.java:510: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                            ^, SimplexTableau.java:510: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                                       		                              ^, SimplexTableau.java:516: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                       ^, SimplexTableau.java:516: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                                  		                               ^, SimplexTableau.java:522: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                            ^, SimplexTableau.java:522: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		^, SimplexTableau.java:522: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		^, SimplexTableau.java:522: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                    ^, SimplexTableau.java:522: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                     ^, SimplexTableau.java:522: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				        ^, SimplexTableau.java:522: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				            ^, SimplexTableau.java:522: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				               		           ^, SimplexTableau.java:524: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			       ^, SimplexTableau.java:524: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		^, SimplexTableau.java:524: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		^, SimplexTableau.java:524: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		^, SimplexTableau.java:524: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                ^, SimplexTableau.java:524: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                            ^, SimplexTableau.java:524: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                ^, SimplexTableau.java:524: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                 ^, SimplexTableau.java:524: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                      ^, SimplexTableau.java:524: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                       ^, SimplexTableau.java:524: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		^, SimplexTableau.java:524: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		                                ^, SimplexTableau.java:533: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                             ^, SimplexTableau.java:533: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                 ^, SimplexTableau.java:533: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                      ^, SimplexTableau.java:533: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:537: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		^, SimplexTableau.java:537: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		^, SimplexTableau.java:537: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		^, SimplexTableau.java:537: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		^, SimplexTableau.java:537: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                ^, SimplexTableau.java:537: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                         ^, SimplexTableau.java:537: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                                			                                                                                     			^, SimplexTableau.java:544: error: class, interface, or enum expected
	 * @param dividendRow
	          ^, SimplexTableau.java:546: error: class, interface, or enum expected
	 * @param divisor
	          ^, SimplexTableau.java:548: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                               ^, SimplexTableau.java:548: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                      ^, SimplexTableau.java:548: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                ^, SimplexTableau.java:548: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                ^, SimplexTableau.java:548: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                       			                                                                             ^, SimplexTableau.java:561: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                 ^, SimplexTableau.java:561: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                       ^, SimplexTableau.java:561: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                ^, SimplexTableau.java:561: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                ^, SimplexTableau.java:561: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                ^, SimplexTableau.java:561: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                       			                                                                                                                   ^, SimplexTableau.java:565: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                ^, SimplexTableau.java:565: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                                 		                                    ^, SimplexTableau.java:569: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                ^, SimplexTableau.java:569: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                                  		                                 ^, SimplexTableau.java:577: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                ^, SimplexTableau.java:577: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                      ^, SimplexTableau.java:577: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                     ^, SimplexTableau.java:577: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                                   		                                     ^, SimplexTableau.java:586: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                ^, SimplexTableau.java:586: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                    ^, SimplexTableau.java:586: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                   ^, SimplexTableau.java:586: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                     ^, SimplexTableau.java:586: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                     		                                     ^, SimplexTableau.java:590: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:590: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                               		                                                         ^, SimplexTableau.java:594: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                ^, SimplexTableau.java:594: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                                    		                                                                               ^, SimplexTableau.java:598: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                ^, SimplexTableau.java:598: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                     		                      ^, SimplexTableau.java:603: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                ^, SimplexTableau.java:603: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                          		                                                                      ^, SimplexTableau.java:613: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:613: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                                		                            ^, SimplexTableau.java:618: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                ^, SimplexTableau.java:618: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                        		                                                                               ^, SimplexTableau.java:622: error: class, interface, or enum expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(466): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.f = f ` -topatch--> `return getNumObjectiveFunctions() + getOriginalNumDecisionVariables()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (931(f=1.0), 932(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (931(f=1.0), )
----------Running generation: 467, population size: 1

***** Generation 467 : 0
**Parent Variant: [Variant id: 933, #gens: 186, #ops: 0, parent:-]

--Child created id: 934
--Creating new operations for variant [Variant id: 934, #gens: 186, #ops: 0, parent:933]
---analyzing modificationPoint position: 7
---modifPoint 0 not mutation generated in  return true
---analyzing modificationPoint position: 108
Templates availables25
Attempts Base Ingredients  1 total 25
Attempts Base Ingredients  2 total 25
---modifPoint 1 not mutation generated in  this.relationship = relationship
---analyzing modificationPoint position: 122
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch []
location: SimplexTableau.java130
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[][] matrix = new double[height][width] ` -topatch--> `java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>()` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 130, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[][] matrix = new double[height][width] ` -topatch--> `java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>()` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 934, #gens: 186, #ops: 1, parent:933] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 934, errors: [SimplexTableau.java:350: error: illegal start of type
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		^, SimplexTableau.java:350: error: ';' expected
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		      ^, SimplexTableau.java:354: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	       ^, SimplexTableau.java:354: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	                               		                                          ^, SimplexTableau.java:358: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	       ^, SimplexTableau.java:358: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		^, SimplexTableau.java:358: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                      ^, SimplexTableau.java:358: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                        		                  ^, SimplexTableau.java:364: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                     ^, SimplexTableau.java:364: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                         ^, SimplexTableau.java:364: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                           		                                                                                                                                                           ^, SimplexTableau.java:368: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                ^, SimplexTableau.java:368: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                                                 		                                               ^, SimplexTableau.java:374: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                          ^, SimplexTableau.java:374: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		^, SimplexTableau.java:374: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		           ^, SimplexTableau.java:374: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				        ^, SimplexTableau.java:374: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				           		             ^, SimplexTableau.java:377: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                            ^, SimplexTableau.java:377: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                    ^, SimplexTableau.java:377: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			^, SimplexTableau.java:377: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			                         ^, SimplexTableau.java:383: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                         ^, SimplexTableau.java:383: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		^, SimplexTableau.java:383: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                   ^, SimplexTableau.java:383: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                     		           ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                            ^, SimplexTableau.java:389: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                                       		                              ^, SimplexTableau.java:395: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                       ^, SimplexTableau.java:395: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                                  		                               ^, SimplexTableau.java:401: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                            ^, SimplexTableau.java:401: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		^, SimplexTableau.java:401: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		^, SimplexTableau.java:401: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                    ^, SimplexTableau.java:401: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                     ^, SimplexTableau.java:401: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				        ^, SimplexTableau.java:401: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				            ^, SimplexTableau.java:401: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				               		           ^, SimplexTableau.java:403: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			       ^, SimplexTableau.java:403: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		^, SimplexTableau.java:403: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		^, SimplexTableau.java:403: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		^, SimplexTableau.java:403: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                ^, SimplexTableau.java:403: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                            ^, SimplexTableau.java:403: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                ^, SimplexTableau.java:403: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                 ^, SimplexTableau.java:403: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                      ^, SimplexTableau.java:403: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                       ^, SimplexTableau.java:403: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		^, SimplexTableau.java:403: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		                                ^, SimplexTableau.java:412: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                             ^, SimplexTableau.java:412: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                 ^, SimplexTableau.java:412: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                      ^, SimplexTableau.java:412: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:416: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		^, SimplexTableau.java:416: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		^, SimplexTableau.java:416: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		^, SimplexTableau.java:416: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		^, SimplexTableau.java:416: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                ^, SimplexTableau.java:416: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                         ^, SimplexTableau.java:416: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                                			                                                                                     			^, SimplexTableau.java:423: error: class, interface, or enum expected
	 * @param dividendRow
	          ^, SimplexTableau.java:425: error: class, interface, or enum expected
	 * @param divisor
	          ^, SimplexTableau.java:427: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                               ^, SimplexTableau.java:427: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                      ^, SimplexTableau.java:427: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                ^, SimplexTableau.java:427: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                ^, SimplexTableau.java:427: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                       			                                                                             ^, SimplexTableau.java:440: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                 ^, SimplexTableau.java:440: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                       ^, SimplexTableau.java:440: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                ^, SimplexTableau.java:440: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                ^, SimplexTableau.java:440: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                ^, SimplexTableau.java:440: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                       			                                                                                                                   ^, SimplexTableau.java:444: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                ^, SimplexTableau.java:444: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                                 		                                    ^, SimplexTableau.java:448: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                ^, SimplexTableau.java:448: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                                  		                                 ^, SimplexTableau.java:456: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                ^, SimplexTableau.java:456: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                      ^, SimplexTableau.java:456: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                     ^, SimplexTableau.java:456: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                                   		                                     ^, SimplexTableau.java:465: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                ^, SimplexTableau.java:465: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                    ^, SimplexTableau.java:465: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                   ^, SimplexTableau.java:465: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                     ^, SimplexTableau.java:465: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                     		                                     ^, SimplexTableau.java:469: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:469: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                               		                                                         ^, SimplexTableau.java:473: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                ^, SimplexTableau.java:473: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                                    		                                                                               ^, SimplexTableau.java:477: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                ^, SimplexTableau.java:477: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                     		                      ^, SimplexTableau.java:482: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                ^, SimplexTableau.java:482: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                          		                                                                      ^, SimplexTableau.java:492: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:492: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                                		                            ^, SimplexTableau.java:497: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                ^, SimplexTableau.java:497: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                        		                                                                               ^, SimplexTableau.java:501: error: class, interface, or enum expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(467): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[][] matrix = new double[height][width] ` -topatch--> `java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>()` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (933(f=1.0), 934(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (933(f=1.0), )
----------Running generation: 468, population size: 1

***** Generation 468 : 0
**Parent Variant: [Variant id: 935, #gens: 186, #ops: 0, parent:-]

--Child created id: 936
--Creating new operations for variant [Variant id: 936, #gens: 186, #ops: 0, parent:935]
---analyzing modificationPoint position: 3
---modifPoint 0 not mutation generated in  return false
---analyzing modificationPoint position: 92
---modifPoint 1 not mutation generated in  return row
---analyzing modificationPoint position: 96
Templates availables45
Attempts Base Ingredients  1 total 45
vars from patch []
location: ArrayRealVector.java342
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return new org.apache.commons.math.linear.ArrayRealVector(out) ` -topatch--> `return 9` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.linear.ArrayRealVector line: 342, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return new org.apache.commons.math.linear.ArrayRealVector(out) ` -topatch--> `return 9` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 936, #gens: 186, #ops: 1, parent:935] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 936, errors: [ArrayRealVector.java:1393: error: incompatible types: int cannot be converted to org.apache.commons.math.linear.RealVector
		return 9;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(468): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return new org.apache.commons.math.linear.ArrayRealVector(out) ` -topatch--> `return 9` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (935(f=1.0), 936(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (935(f=1.0), )
----------Running generation: 469, population size: 1

***** Generation 469 : 0
**Parent Variant: [Variant id: 937, #gens: 186, #ops: 0, parent:-]

--Child created id: 938
--Creating new operations for variant [Variant id: 938, #gens: 186, #ops: 0, parent:937]
---analyzing modificationPoint position: 97
Templates availables8
Attempts Base Ingredients  1 total 8
---modifPoint 0 not mutation generated in  for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow,[...]
---analyzing modificationPoint position: 92
Templates availables31
Attempts Base Ingredients  1 total 31
---modifPoint 1 not mutation generated in  return row
---analyzing modificationPoint position: 156
---modifPoint 2 not mutation generated in  return count
---analyzing modificationPoint position: 122
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 3 not mutation generated in  double[][] matrix = new double[height][width]
---analyzing modificationPoint position: 24
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 4 not mutation generated in  if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { 	ret[...]
---analyzing modificationPoint position: 110
Templates availables25
Attempts Base Ingredients  1 total 25
vars from patch [restrictToNonNegative]
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java105
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.f = f ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 105, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.f = f ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 938, #gens: 186, #ops: 1, parent:937] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child does NOT compile: 938, errors: [SimplexTableau.java:108: error: final parameter restrictToNonNegative may not be assigned
		restrictToNonNegative = restrictToNonNegative; 		this.constraints = constraints; 		this.restrictToNonNegative = restrictToNonNegative;
		^, SimplexTableau.java:117: error: variable f might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(469): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.f = f ` -topatch--> `restrictToNonNegative = restrictToNonNegative` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (937(f=1.0), 938(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (937(f=1.0), )
----------Running generation: 470, population size: 1

***** Generation 470 : 0
**Parent Variant: [Variant id: 939, #gens: 186, #ops: 0, parent:-]

--Child created id: 940
--Creating new operations for variant [Variant id: 940, #gens: 186, #ops: 0, parent:939]
---analyzing modificationPoint position: 33
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...]
---analyzing modificationPoint position: 84
location: ArrayRealVector.java887
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `dot += data[i] * v[i] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 940, #gens: 185, #ops: 1, parent:939] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 940
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-940/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 11, was successful: false, cases executed: 14] ,[]
-Valid?: |false|11|14|[]|, fitness 11.0
Ingredient counter is Zero
---Undoing: gnrtn(470): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtOperatorAssignmentImpl) `dot += data[i] * v[i] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (939(f=1.0), 940(f=11.0), )
Selected to next generation: IDs2--> (939(f=1.0), )
----------Running generation: 471, population size: 1

***** Generation 471 : 0
**Parent Variant: [Variant id: 941, #gens: 186, #ops: 0, parent:-]

--Child created id: 942
--Creating new operations for variant [Variant id: 942, #gens: 186, #ops: 0, parent:941]
---analyzing modificationPoint position: 180
location: Array2DRowRealMatrix.java336
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (subMatrix[i].length != nCols) { 	throw org.apache.commons.math.MathRuntimeException.createIllega[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 942, #gens: 185, #ops: 1, parent:941] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 942
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-942/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(471): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (subMatrix[i].length != nCols) { 	throw org.apache.commons.math.MathRuntimeException.createIllega[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (941(f=1.0), 942(f=1.0), )
Selected to next generation: IDs2--> (941(f=1.0), )
----------Running generation: 472, population size: 1

***** Generation 472 : 0
**Parent Variant: [Variant id: 943, #gens: 186, #ops: 0, parent:-]

--Child created id: 944
--Creating new operations for variant [Variant id: 944, #gens: 186, #ops: 0, parent:943]
---analyzing modificationPoint position: 80
---modifPoint 0 not mutation generated in  return getNumObjectiveFunctions() + numDecisionVariables
---analyzing modificationPoint position: 161
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch [point]
--> var from patch: point spoon.support.reflect.code.CtVariableReadImpl
location: RealPointValuePair.java49
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = point.clone() ` -topatch--> `return point` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.RealPointValuePair line: 49, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = point.clone() ` -topatch--> `return point` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 944, #gens: 187, #ops: 1, parent:943] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 944, errors: [RealPointValuePair.java:80: error: incompatible types: unexpected return value
		return point; 		this.value = value;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(472): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = point.clone() ` -topatch--> `return point` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (943(f=1.0), 944(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (943(f=1.0), )
----------Running generation: 473, population size: 1

***** Generation 473 : 0
**Parent Variant: [Variant id: 945, #gens: 186, #ops: 0, parent:-]

--Child created id: 946
--Creating new operations for variant [Variant id: 946, #gens: 186, #ops: 0, parent:945]
---analyzing modificationPoint position: 128
location: SimplexTableau.java141
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[zIndex][width - 1] =  (maximize) ? f.getConstantTerm() : (-1) * f.getConstantTerm() ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 946, #gens: 185, #ops: 1, parent:945] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 946
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-946/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(473): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[zIndex][width - 1] =  (maximize) ? f.getConstantTerm() : (-1) * f.getConstantTerm() ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (945(f=1.0), 946(f=1.0), )
Selected to next generation: IDs2--> (945(f=1.0), )
----------Running generation: 474, population size: 1

***** Generation 474 : 0
**Parent Variant: [Variant id: 947, #gens: 186, #ops: 0, parent:-]

--Child created id: 948
--Creating new operations for variant [Variant id: 948, #gens: 186, #ops: 0, parent:947]
---analyzing modificationPoint position: 16
location: SimplexTableau.java346
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (basicRows.contains(basicRow)) { 	// if multiple variables can take a given value 	// then we cho[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 948, #gens: 185, #ops: 1, parent:947] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 948, errors: [SimplexTableau.java:346: error: variable declaration not allowed here
			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);
			                  ^]
Ingredient counter is Zero
---Undoing: gnrtn(474): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (basicRows.contains(basicRow)) { 	// if multiple variables can take a given value 	// then we cho[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (947(f=1.0), 948(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (947(f=1.0), )
----------Running generation: 475, population size: 1

***** Generation 475 : 0
**Parent Variant: [Variant id: 949, #gens: 186, #ops: 0, parent:-]

--Child created id: 950
--Creating new operations for variant [Variant id: 950, #gens: 186, #ops: 0, parent:949]
---analyzing modificationPoint position: 0
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  return
---analyzing modificationPoint position: 96
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 1 not mutation generated in  return new org.apache.commons.math.linear.ArrayRealVector(out)
---analyzing modificationPoint position: 66
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 2 not mutation generated in  tableau.subtractRow(i, pivotRow, multiplier)
---analyzing modificationPoint position: 162
Templates availables3
Attempts Base Ingredients  1 total 3
---modifPoint 3 not mutation generated in  this.value = value
---analyzing modificationPoint position: 5
Templates availables18
Attempts Base Ingredients  1 total 18
---modifPoint 4 not mutation generated in  return coefficients.dotProduct(point) + constantTerm
---analyzing modificationPoint position: 177
Templates availables120
Attempts Base Ingredients  1 total 120
---modifPoint 5 not mutation generated in  if (nCols == 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException[...]
---analyzing modificationPoint position: 47
Templates availables10
Attempts Base Ingredients  1 total 10
---modifPoint 6 not mutation generated in  if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; }
---analyzing modificationPoint position: 63
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 7 not mutation generated in  // set the rest of the pivot column to 0 for (int i = 0; i < tableau.getHeight(); i++) { 	if (i != p[...]
---analyzing modificationPoint position: 113
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [this.numSlackVariables, org.apache.commons.math.optimization.linear.Relationship.LEQ, org.apache.commons.math.optimization.linear.Relationship.GEQ]
--> var from patch: this.numSlackVariables spoon.support.reflect.code.CtFieldWriteImpl
--> var from patch: org.apache.commons.math.optimization.linear.Relationship.LEQ spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math.optimization.linear.Relationship.GEQ spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java108
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.epsilon = epsilon ` -topatch--> `this.numSlackVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relatio[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 108, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.epsilon = epsilon ` -topatch--> `this.numSlackVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relatio[...]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 950, #gens: 187, #ops: 1, parent:949] gen mutated: 1 , gen not mut: 8, gen not applied  0
-The child does NOT compile: 950, errors: [SimplexTableau.java:112: error: variable numSlackVariables might already have been assigned
		getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relationship.GEQ); 		this.epsilon = epsilon; 		this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1); 		this.numSlackVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relationship.LEQ) + getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relationship.GEQ);
		                                                                                       		                        		                                                                                 		    ^]
Ingredient counter is Zero
---Undoing: gnrtn(475): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.epsilon = epsilon ` -topatch--> `this.numSlackVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relatio[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (949(f=1.0), 950(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (949(f=1.0), )
----------Running generation: 476, population size: 1

***** Generation 476 : 0
**Parent Variant: [Variant id: 951, #gens: 186, #ops: 0, parent:-]

--Child created id: 952
--Creating new operations for variant [Variant id: 952, #gens: 186, #ops: 0, parent:951]
---analyzing modificationPoint position: 53
Templates availables6
Attempts Base Ingredients  1 total 6
Attempts Base Ingredients  2 total 6
Attempts Base Ingredients  3 total 6
Attempts Base Ingredients  4 total 6
vars from patch [goalType]
--> var from patch: goalType spoon.support.reflect.code.CtVariableReadImpl
location: AbstractLinearOptimizer.java99
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `goalType = goalType` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 99, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `goalType = goalType` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 952, #gens: 186, #ops: 1, parent:951] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 952, errors: [AbstractLinearOptimizer.java:101: error: final parameter goalType may not be assigned
		goalType = goalType; 		this.goalType = goalType;
		^]
Ingredient counter is Zero
---Undoing: gnrtn(476): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `goalType = goalType` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (951(f=1.0), 952(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (951(f=1.0), )
----------Running generation: 477, population size: 1

***** Generation 477 : 0
**Parent Variant: [Variant id: 953, #gens: 186, #ops: 0, parent:-]

--Child created id: 954
--Creating new operations for variant [Variant id: 954, #gens: 186, #ops: 0, parent:953]
---analyzing modificationPoint position: 81
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 0 not mutation generated in  checkVectorDimensions(v.length)
---analyzing modificationPoint position: 120
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  int width = (((numDecisionVariables + numSlackVariables) +  numArtificialVariables) + getNumObjectiv[...]
---analyzing modificationPoint position: 171
Templates availables11
Attempts Base Ingredients  1 total 11
---modifPoint 2 not mutation generated in  if (data == null) { 	if (row > 0) { 		throw org.apache.commons.math.MathRuntimeException.createIlleg[...]
---analyzing modificationPoint position: 101
---modifPoint 3 not mutation generated in  return tableau.getEntry(row, column)
---analyzing modificationPoint position: 68
Templates availables12
Attempts Base Ingredients  1 total 12
---modifPoint 4 not mutation generated in  final org.apache.commons.math.optimization.linear.SimplexTableau tableau =  new org.apache.commons.m[...]
---analyzing modificationPoint position: 116
Templates availables121
Attempts Base Ingredients  1 total 121
Attempts Base Ingredients  2 total 121
---modifPoint 5 not mutation generated in  this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...]
---analyzing modificationPoint position: 0
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java169
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `solvePhase1(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 169, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `solvePhase1(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 954, #gens: 187, #ops: 1, parent:953] gen mutated: 1 , gen not mut: 6, gen not applied  0
-The child compiles: id 954
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-954/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 14] ,[]
-Valid?: |false|3|14|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(477): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `solvePhase1(tableau)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (953(f=1.0), 954(f=3.0), )
Selected to next generation: IDs2--> (953(f=1.0), )
----------Running generation: 478, population size: 1

***** Generation 478 : 0
**Parent Variant: [Variant id: 955, #gens: 186, #ops: 0, parent:-]

--Child created id: 956
--Creating new operations for variant [Variant id: 956, #gens: 186, #ops: 0, parent:955]
---analyzing modificationPoint position: 185
Templates availables216
Attempts Base Ingredients  1 total 216
---modifPoint 0 not mutation generated in  lu = null
---analyzing modificationPoint position: 27
location: SimplexSolver.java189
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 956, #gens: 185, #ops: 1, parent:955] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 956
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-956/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 11, was successful: false, cases executed: 14] ,[]
-Valid?: |false|11|14|[]|, fitness 11.0
Ingredient counter is Zero
---Undoing: gnrtn(478): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (955(f=1.0), 956(f=11.0), )
Selected to next generation: IDs2--> (955(f=1.0), )
----------Running generation: 479, population size: 1

***** Generation 479 : 0
**Parent Variant: [Variant id: 957, #gens: 186, #ops: 0, parent:-]

--Child created id: 958
--Creating new operations for variant [Variant id: 958, #gens: 186, #ops: 0, parent:957]
---analyzing modificationPoint position: 112
location: SimplexTableau.java107
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 958, #gens: 185, #ops: 1, parent:957] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 958, errors: [SimplexTableau.java:117: error: variable restrictToNonNegative might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(479): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (957(f=1.0), 958(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (957(f=1.0), )
----------Running generation: 480, population size: 1

***** Generation 480 : 0
**Parent Variant: [Variant id: 959, #gens: 186, #ops: 0, parent:-]

--Child created id: 960
--Creating new operations for variant [Variant id: 960, #gens: 186, #ops: 0, parent:959]
---analyzing modificationPoint position: 56
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [this.maxIterations]
--> var from patch: this.maxIterations spoon.support.reflect.code.CtFieldWriteImpl
location: AbstractLinearOptimizer.java103
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `iterations = 0 ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 103, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `iterations = 0 ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 960, #gens: 187, #ops: 1, parent:959] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 960
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-960/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(480): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `iterations = 0 ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (959(f=1.0), 960(f=1.0), )
Selected to next generation: IDs2--> (959(f=1.0), )
----------Running generation: 481, population size: 1

***** Generation 481 : 0
**Parent Variant: [Variant id: 961, #gens: 186, #ops: 0, parent:-]

--Child created id: 962
--Creating new operations for variant [Variant id: 962, #gens: 186, #ops: 0, parent:961]
---analyzing modificationPoint position: 40
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau, epsilon]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java77
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double minRatio = java.lang.Double.MAX_VALUE ` -topatch--> `// if W is not zero then we have no feasible solution if (!org.apache.commons.math.util.MathUtils.eq[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 77, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double minRatio = java.lang.Double.MAX_VALUE ` -topatch--> `// if W is not zero then we have no feasible solution if (!org.apache.commons.math.util.MathUtils.eq[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 962, #gens: 187, #ops: 1, parent:961] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 962, errors: [SimplexSolver.java:179: error: unreported exception org.apache.commons.math.optimization.linear.NoFeasibleSolutionException; must be caught or declared to be thrown
			throw new org.apache.commons.math.optimization.linear.NoFeasibleSolutionException();
			^]
Ingredient counter is Zero
---Undoing: gnrtn(481): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double minRatio = java.lang.Double.MAX_VALUE ` -topatch--> `// if W is not zero then we have no feasible solution if (!org.apache.commons.math.util.MathUtils.eq[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (961(f=1.0), 962(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (961(f=1.0), )
----------Running generation: 482, population size: 1

***** Generation 482 : 0
**Parent Variant: [Variant id: 963, #gens: 186, #ops: 0, parent:-]

--Child created id: 964
--Creating new operations for variant [Variant id: 964, #gens: 186, #ops: 0, parent:963]
---analyzing modificationPoint position: 147
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  normalized.add(normalize(constraint))
---analyzing modificationPoint position: 123
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  // initialize the objective function rows if (getNumObjectiveFunctions() == 2) { 	matrix[0][0] = -1;[...]
---analyzing modificationPoint position: 125
location: SimplexTableau.java137
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[zIndex][zIndex] = (maximize) ? 1 : -1 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 964, #gens: 185, #ops: 1, parent:963] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 964
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-964/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(482): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[zIndex][zIndex] = (maximize) ? 1 : -1 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (963(f=1.0), 964(f=1.0), )
Selected to next generation: IDs2--> (963(f=1.0), )
----------Running generation: 483, population size: 1

***** Generation 483 : 0
**Parent Variant: [Variant id: 965, #gens: 186, #ops: 0, parent:-]

--Child created id: 966
--Creating new operations for variant [Variant id: 966, #gens: 186, #ops: 0, parent:965]
---analyzing modificationPoint position: 90
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 0 not mutation generated in  if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) [...]
---analyzing modificationPoint position: 102
Templates availables18
Attempts Base Ingredients  1 total 18
vars from patch [constantTerm]
--> var from patch: constantTerm spoon.support.reflect.code.CtFieldReadImpl
SameName: double constantTerm
SameName: double constantTerm
Transforming shadowed variable in return constantTerm
location: LinearObjectiveFunction.java58
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), constantTerm) ` -topatch--> `return constantTerm` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearObjectiveFunction line: 58, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), constantTerm) ` -topatch--> `return constantTerm` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 966, #gens: 187, #ops: 1, parent:965] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 966, errors: [LinearObjectiveFunction.java:84: error: incompatible types: unexpected return value
		return constantTerm;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(483): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), constantTerm) ` -topatch--> `return constantTerm` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (965(f=1.0), 966(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (965(f=1.0), )
----------Running generation: 484, population size: 1

***** Generation 484 : 0
**Parent Variant: [Variant id: 967, #gens: 186, #ops: 0, parent:-]

--Child created id: 968
--Creating new operations for variant [Variant id: 968, #gens: 186, #ops: 0, parent:967]
---analyzing modificationPoint position: 48
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java85
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatio = ratio ` -topatch--> `throw new org.apache.commons.math.optimization.linear.UnboundedSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 85, pointed element: CtThrowImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatio = ratio ` -topatch--> `throw new org.apache.commons.math.optimization.linear.UnboundedSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 

--Summary Creation: for variant [Variant id: 968, #gens: 187, #ops: 1, parent:967] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 968, errors: [SimplexSolver.java:109: error: unreachable statement
					throw new org.apache.commons.math.optimization.linear.UnboundedSolutionException(); 					minRatio = ratio; 					minRatioPos = i;}}} 		return minRatioPos;} 	/**
					                                                                                    					^, SimplexSolver.java:109: error: unreported exception org.apache.commons.math.optimization.linear.UnboundedSolutionException; must be caught or declared to be thrown
					throw new org.apache.commons.math.optimization.linear.UnboundedSolutionException(); 					minRatio = ratio; 					minRatioPos = i;}}} 		return minRatioPos;} 	/**
					^]
Ingredient counter is Zero
---Undoing: gnrtn(484): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatio = ratio ` -topatch--> `throw new org.apache.commons.math.optimization.linear.UnboundedSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (967(f=1.0), 968(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (967(f=1.0), )
----------Running generation: 485, population size: 1

***** Generation 485 : 0
**Parent Variant: [Variant id: 969, #gens: 186, #ops: 0, parent:-]

--Child created id: 970
--Creating new operations for variant [Variant id: 970, #gens: 186, #ops: 0, parent:969]
---analyzing modificationPoint position: 73
Templates availables71
Attempts Base Ingredients  1 total 71
---modifPoint 0 not mutation generated in  if (org.apache.commons.math.util.MathUtils.equals(x, y, eps)) { 	return 0; } else if (x < y) { 	retu[...]
---analyzing modificationPoint position: 130
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java150
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// initialize the constraint rows int slackVar = 0 ` -topatch--> `return tableau.getColumnDimension()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 150, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// initialize the constraint rows int slackVar = 0 ` -topatch--> `return tableau.getColumnDimension()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 970, #gens: 187, #ops: 1, parent:969] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 970, errors: [SimplexTableau.java:471: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:471: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:471: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:471: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:471: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:471: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:473: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:473: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:473: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:473: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:473: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:473: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:473: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:475: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:475: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:476: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:477: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:477: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:478: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:478: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:479: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:480: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:480: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:480: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:481: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:481: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:481: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:481: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:481: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:481: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:494: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:494: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:494: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:494: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:494: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:494: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:498: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:498: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:502: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:502: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:510: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:510: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:510: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:510: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:519: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:519: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:519: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:519: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:519: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:523: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:523: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:527: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:527: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:531: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:531: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:536: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:536: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:546: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:546: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:551: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:551: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:555: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:555: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:559: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:559: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:563: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:563: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:565: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:565: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:568: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:575: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:575: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:575: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:575: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:575: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:575: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:584: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:584: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:584: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:584: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:584: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:584: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:584: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:584: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:584: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(485): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// initialize the constraint rows int slackVar = 0 ` -topatch--> `return tableau.getColumnDimension()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (969(f=1.0), 970(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (969(f=1.0), )
----------Running generation: 486, population size: 1

***** Generation 486 : 0
**Parent Variant: [Variant id: 971, #gens: 186, #ops: 0, parent:-]

--Child created id: 972
--Creating new operations for variant [Variant id: 972, #gens: 186, #ops: 0, parent:971]
---analyzing modificationPoint position: 100
---modifPoint 0 not mutation generated in  return tableau.getRowDimension()
---analyzing modificationPoint position: 46
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch []
location: SimplexSolver.java83
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double ratio = rhs / entry ` -topatch--> `java.lang.Integer minPos = null` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 83, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double ratio = rhs / entry ` -topatch--> `java.lang.Integer minPos = null` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 972, #gens: 186, #ops: 1, parent:971] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 972, errors: [SimplexSolver.java:85: error: cannot find symbol
				if (ratio < minRatio) {
				    ^
  symbol:   variable ratio
  location: class org.apache.commons.math.optimization.linear.SimplexSolver, SimplexSolver.java:86: error: cannot find symbol
					minRatio = ratio;
					           ^
  symbol:   variable ratio
  location: class org.apache.commons.math.optimization.linear.SimplexSolver]
Ingredient counter is Zero
---Undoing: gnrtn(486): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double ratio = rhs / entry ` -topatch--> `java.lang.Integer minPos = null` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (971(f=1.0), 972(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (971(f=1.0), )
----------Running generation: 487, population size: 1

***** Generation 487 : 0
**Parent Variant: [Variant id: 973, #gens: 186, #ops: 0, parent:-]

--Child created id: 974
--Creating new operations for variant [Variant id: 974, #gens: 186, #ops: 0, parent:973]
---analyzing modificationPoint position: 98
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java388
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -  (multiple * tableau.getEntry(subt[...] ` -topatch--> `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 388, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -  (multiple * tableau.getEntry(subt[...] ` -topatch--> `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 974, #gens: 187, #ops: 1, parent:973] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 974
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-974/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(487): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) -  (multiple * tableau.getEntry(subt[...] ` -topatch--> `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (973(f=1.0), 974(f=1.0), )
Selected to next generation: IDs2--> (973(f=1.0), )
----------Running generation: 488, population size: 1

***** Generation 488 : 0
**Parent Variant: [Variant id: 975, #gens: 186, #ops: 0, parent:-]

--Child created id: 976
--Creating new operations for variant [Variant id: 976, #gens: 186, #ops: 0, parent:975]
---analyzing modificationPoint position: 36
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [this.epsilon]
--> var from patch: this.epsilon spoon.support.reflect.code.CtFieldWriteImpl
location: SimplexSolver.java63
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `minValue = tableau.getEntry(0, i) ` -topatch--> `this.epsilon = epsilon` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 63, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `minValue = tableau.getEntry(0, i) ` -topatch--> `this.epsilon = epsilon` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 976, #gens: 187, #ops: 1, parent:975] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 976, errors: [SimplexSolver.java:63: error: cannot assign a value to final variable epsilon
			if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) { 				this.epsilon = epsilon;
			                                                                                                       				    ^]
Ingredient counter is Zero
---Undoing: gnrtn(488): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `minValue = tableau.getEntry(0, i) ` -topatch--> `this.epsilon = epsilon` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (975(f=1.0), 976(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (975(f=1.0), )
----------Running generation: 489, population size: 1

***** Generation 489 : 0
**Parent Variant: [Variant id: 977, #gens: 186, #ops: 0, parent:-]

--Child created id: 978
--Creating new operations for variant [Variant id: 978, #gens: 186, #ops: 0, parent:977]
---analyzing modificationPoint position: 116
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [numDecisionVariables, numSlackVariables]
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numSlackVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java112
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...] ` -topatch--> `return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 112, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...] ` -topatch--> `return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 978, #gens: 187, #ops: 1, parent:977] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 978, errors: [SimplexTableau.java:454: error: illegal start of type
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		^, SimplexTableau.java:454: error: ';' expected
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		      ^, SimplexTableau.java:458: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	       ^, SimplexTableau.java:458: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	                               		                                          ^, SimplexTableau.java:462: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	       ^, SimplexTableau.java:462: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		^, SimplexTableau.java:462: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                      ^, SimplexTableau.java:462: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                        		                  ^, SimplexTableau.java:468: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                     ^, SimplexTableau.java:468: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                         ^, SimplexTableau.java:468: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                           		                                                                                                                                                           ^, SimplexTableau.java:472: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                ^, SimplexTableau.java:472: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                                                 		                                               ^, SimplexTableau.java:478: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                          ^, SimplexTableau.java:478: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		^, SimplexTableau.java:478: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		           ^, SimplexTableau.java:478: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				        ^, SimplexTableau.java:478: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				           		             ^, SimplexTableau.java:481: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                            ^, SimplexTableau.java:481: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                    ^, SimplexTableau.java:481: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			^, SimplexTableau.java:481: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			                         ^, SimplexTableau.java:487: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                         ^, SimplexTableau.java:487: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		^, SimplexTableau.java:487: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                   ^, SimplexTableau.java:487: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                     		           ^, SimplexTableau.java:493: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                            ^, SimplexTableau.java:493: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                                       		                              ^, SimplexTableau.java:499: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                       ^, SimplexTableau.java:499: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                                  		                               ^, SimplexTableau.java:505: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                            ^, SimplexTableau.java:505: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		^, SimplexTableau.java:505: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		^, SimplexTableau.java:505: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                    ^, SimplexTableau.java:505: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                     ^, SimplexTableau.java:505: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				        ^, SimplexTableau.java:505: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				            ^, SimplexTableau.java:505: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				               		           ^, SimplexTableau.java:507: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			       ^, SimplexTableau.java:507: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		^, SimplexTableau.java:507: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		^, SimplexTableau.java:507: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		^, SimplexTableau.java:507: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                ^, SimplexTableau.java:507: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                            ^, SimplexTableau.java:507: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                ^, SimplexTableau.java:507: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                 ^, SimplexTableau.java:507: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                      ^, SimplexTableau.java:507: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                       ^, SimplexTableau.java:507: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		^, SimplexTableau.java:507: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		                                ^, SimplexTableau.java:516: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                             ^, SimplexTableau.java:516: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                 ^, SimplexTableau.java:516: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                      ^, SimplexTableau.java:516: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:520: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		^, SimplexTableau.java:520: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		^, SimplexTableau.java:520: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		^, SimplexTableau.java:520: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		^, SimplexTableau.java:520: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                ^, SimplexTableau.java:520: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                         ^, SimplexTableau.java:520: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                                			                                                                                     			^, SimplexTableau.java:527: error: class, interface, or enum expected
	 * @param dividendRow
	          ^, SimplexTableau.java:529: error: class, interface, or enum expected
	 * @param divisor
	          ^, SimplexTableau.java:531: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                               ^, SimplexTableau.java:531: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                      ^, SimplexTableau.java:531: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                ^, SimplexTableau.java:531: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                ^, SimplexTableau.java:531: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                       			                                                                             ^, SimplexTableau.java:544: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                 ^, SimplexTableau.java:544: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                       ^, SimplexTableau.java:544: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                ^, SimplexTableau.java:544: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                ^, SimplexTableau.java:544: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                ^, SimplexTableau.java:544: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                       			                                                                                                                   ^, SimplexTableau.java:548: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                ^, SimplexTableau.java:548: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                                 		                                    ^, SimplexTableau.java:552: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                ^, SimplexTableau.java:552: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                                  		                                 ^, SimplexTableau.java:560: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                ^, SimplexTableau.java:560: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                      ^, SimplexTableau.java:560: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                     ^, SimplexTableau.java:560: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                                   		                                     ^, SimplexTableau.java:569: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                ^, SimplexTableau.java:569: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                    ^, SimplexTableau.java:569: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                   ^, SimplexTableau.java:569: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                     ^, SimplexTableau.java:569: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                     		                                     ^, SimplexTableau.java:573: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:573: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                               		                                                         ^, SimplexTableau.java:577: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                ^, SimplexTableau.java:577: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                                    		                                                                               ^, SimplexTableau.java:581: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                ^, SimplexTableau.java:581: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                     		                      ^, SimplexTableau.java:586: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                ^, SimplexTableau.java:586: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                          		                                                                      ^, SimplexTableau.java:596: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:596: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                                		                            ^, SimplexTableau.java:601: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                ^, SimplexTableau.java:601: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                        		                                                                               ^, SimplexTableau.java:605: error: class, interface, or enum expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(489): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numArtificialVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Re[...] ` -topatch--> `return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (977(f=1.0), 978(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (977(f=1.0), )
----------Running generation: 490, population size: 1

***** Generation 490 : 0
**Parent Variant: [Variant id: 979, #gens: 186, #ops: 0, parent:-]

--Child created id: 980
--Creating new operations for variant [Variant id: 980, #gens: 186, #ops: 0, parent:979]
---analyzing modificationPoint position: 1
Templates availables31
Attempts Base Ingredients  1 total 31
vars from patch [restrictToNonNegative, numDecisionVariables]
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java308
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 308, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 980, #gens: 186, #ops: 1, parent:979] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 980, errors: [SimplexTableau.java:496: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:496: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:496: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:496: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:496: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:496: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:498: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:498: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:498: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:498: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:498: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:498: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:498: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:500: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:500: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:501: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:502: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:502: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:503: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:503: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:504: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:505: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:505: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:505: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:506: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:506: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:506: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:506: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:506: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:506: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:519: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:519: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:519: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:519: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:519: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:519: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:523: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:523: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:527: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:527: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:535: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:535: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:535: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:535: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:544: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:544: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:544: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:544: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:544: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:548: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:548: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:552: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:552: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:556: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:556: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:561: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:561: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:571: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:571: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:576: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:576: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:580: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:580: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:584: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:584: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:588: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:588: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:590: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:590: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:593: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:600: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:600: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:600: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:600: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:600: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:600: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:609: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:609: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:609: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:609: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:609: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:609: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:609: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:609: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:609: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(490): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (979(f=1.0), 980(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (979(f=1.0), )
----------Running generation: 491, population size: 1

***** Generation 491 : 0
**Parent Variant: [Variant id: 981, #gens: 186, #ops: 0, parent:-]

--Child created id: 982
--Creating new operations for variant [Variant id: 982, #gens: 186, #ops: 0, parent:981]
---analyzing modificationPoint position: 182
Templates availables120
Attempts Base Ingredients  1 total 120
vars from patch [data]
--> var from patch: data spoon.support.reflect.code.CtFieldReadImpl
location: Array2DRowRealMatrix.java622
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `setSubMatrix(in, 0, 0) ` -topatch--> `return data` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.linear.Array2DRowRealMatrix line: 622, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `setSubMatrix(in, 0, 0) ` -topatch--> `return data` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 982, #gens: 187, #ops: 1, parent:981] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 982, errors: [Array2DRowRealMatrix.java:624: error: incompatible types: unexpected return value
	 */ 	private void copyIn(final double[][] in) { 		return data; 		setSubMatrix(in, 0, 0);}
	    	                                           		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(491): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `setSubMatrix(in, 0, 0) ` -topatch--> `return data` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (981(f=1.0), 982(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (981(f=1.0), )
----------Running generation: 492, population size: 1

***** Generation 492 : 0
**Parent Variant: [Variant id: 983, #gens: 186, #ops: 0, parent:-]

--Child created id: 984
--Creating new operations for variant [Variant id: 984, #gens: 186, #ops: 0, parent:983]
---analyzing modificationPoint position: 159
---modifPoint 0 not mutation generated in  return org.apache.commons.math.util.MathUtils.equals(x, y) || (java.lang.Math.abs(y - x) <= eps)
---analyzing modificationPoint position: 71
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor)
---analyzing modificationPoint position: 14
location: SimplexTableau.java344
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < coefficients.length; i++) { 	java.lang.Integer basicRow = getBasicRowForSolution[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 984, #gens: 185, #ops: 1, parent:983] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 984
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-984/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 11, was successful: false, cases executed: 14] ,[]
-Valid?: |false|11|14|[]|, fitness 11.0
Ingredient counter is Zero
---Undoing: gnrtn(492): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < coefficients.length; i++) { 	java.lang.Integer basicRow = getBasicRowForSolution[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (983(f=1.0), 984(f=11.0), )
Selected to next generation: IDs2--> (983(f=1.0), )
----------Running generation: 493, population size: 1

***** Generation 493 : 0
**Parent Variant: [Variant id: 985, #gens: 186, #ops: 0, parent:-]

--Child created id: 986
--Creating new operations for variant [Variant id: 986, #gens: 186, #ops: 0, parent:985]
---analyzing modificationPoint position: 72
Templates availables31
Attempts Base Ingredients  1 total 31
---modifPoint 0 not mutation generated in  return numArtificialVariables
---analyzing modificationPoint position: 17
location: SimplexTableau.java351
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `basicRows.add(basicRow) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 986, #gens: 185, #ops: 1, parent:985] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 986
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-986/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 14] ,[]
-Valid?: |false|2|14|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(493): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `basicRows.add(basicRow) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (985(f=1.0), 986(f=2.0), )
Selected to next generation: IDs2--> (985(f=1.0), )
----------Running generation: 494, population size: 1

***** Generation 494 : 0
**Parent Variant: [Variant id: 987, #gens: 186, #ops: 0, parent:-]

--Child created id: 988
--Creating new operations for variant [Variant id: 988, #gens: 186, #ops: 0, parent:987]
---analyzing modificationPoint position: 155
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  ++count
---analyzing modificationPoint position: 80
Templates availables31
Attempts Base Ingredients  1 total 31
vars from patch [restrictToNonNegative, numDecisionVariables, numSlackVariables, numArtificialVariables, epsilon, f, constraints, tableau]
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numSlackVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: f spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: constraints spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: tableau spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java433
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return getNumObjectiveFunctions() + numDecisionVariables ` -topatch--> `return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^  numDecisionVariables) ^ [...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 433, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return getNumObjectiveFunctions() + numDecisionVariables ` -topatch--> `return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^  numDecisionVariables) ^ [...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 988, #gens: 186, #ops: 1, parent:987] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 988
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-988/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 14] ,[]
-Valid?: |false|12|14|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(494): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return getNumObjectiveFunctions() + numDecisionVariables ` -topatch--> `return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^  numDecisionVariables) ^ [...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (987(f=1.0), 988(f=12.0), )
Selected to next generation: IDs2--> (987(f=1.0), )
----------Running generation: 495, population size: 1

***** Generation 495 : 0
**Parent Variant: [Variant id: 989, #gens: 186, #ops: 0, parent:-]

--Child created id: 990
--Creating new operations for variant [Variant id: 990, #gens: 186, #ops: 0, parent:989]
---analyzing modificationPoint position: 123
Templates availables121
Attempts Base Ingredients  1 total 121
Attempts Base Ingredients  2 total 121
---modifPoint 0 not mutation generated in  // initialize the objective function rows if (getNumObjectiveFunctions() == 2) { 	matrix[0][0] = -1;[...]
---analyzing modificationPoint position: 58
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 1 not mutation generated in  java.lang.Integer pivotCol = getPivotColumn(tableau)
---analyzing modificationPoint position: 169
Templates availables120
Attempts Base Ingredients  1 total 120
vars from patch []
location: Array2DRowRealMatrix.java367
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `data[row][column] = value ` -topatch--> `final int nRows = this.getRowDimension()` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.linear.Array2DRowRealMatrix line: 367, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `data[row][column] = value ` -topatch--> `final int nRows = this.getRowDimension()` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 990, #gens: 187, #ops: 1, parent:989] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 990
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-990/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(495): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `data[row][column] = value ` -topatch--> `final int nRows = this.getRowDimension()` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (989(f=1.0), 990(f=1.0), )
Selected to next generation: IDs2--> (989(f=1.0), )
----------Running generation: 496, population size: 1

***** Generation 496 : 0
**Parent Variant: [Variant id: 991, #gens: 186, #ops: 0, parent:-]

--Child created id: 992
--Creating new operations for variant [Variant id: 992, #gens: 186, #ops: 0, parent:991]
---analyzing modificationPoint position: 67
location: SimplexSolver.java168
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 992, #gens: 185, #ops: 1, parent:991] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 992
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-992/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(496): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (991(f=1.0), 992(f=1.0), )
Selected to next generation: IDs2--> (991(f=1.0), )
----------Running generation: 497, population size: 1

***** Generation 497 : 0
**Parent Variant: [Variant id: 993, #gens: 186, #ops: 0, parent:-]

--Child created id: 994
--Creating new operations for variant [Variant id: 994, #gens: 186, #ops: 0, parent:993]
---analyzing modificationPoint position: 90
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [col]
--> var from patch: col spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java294
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) [...] ` -topatch--> `return getBasicRow(col, false)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 294, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) [...] ` -topatch--> `return getBasicRow(col, false)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 994, #gens: 187, #ops: 1, parent:993] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 994
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-994/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(497): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) [...] ` -topatch--> `return getBasicRow(col, false)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (993(f=1.0), 994(f=14.0), )
Selected to next generation: IDs2--> (993(f=1.0), )
----------Running generation: 498, population size: 1

***** Generation 498 : 0
**Parent Variant: [Variant id: 995, #gens: 186, #ops: 0, parent:-]

--Child created id: 996
--Creating new operations for variant [Variant id: 996, #gens: 186, #ops: 0, parent:995]
---analyzing modificationPoint position: 151
---modifPoint 0 not mutation generated in  return this.numArtificialVariables > 0 ? 2 : 1
---analyzing modificationPoint position: 9
---modifPoint 1 not mutation generated in  return getBasicRow(col, false)
---analyzing modificationPoint position: 110
Templates availables25
Attempts Base Ingredients  1 total 25
vars from patch [constraints]
--> var from patch: constraints spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java105
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.f = f ` -topatch--> `constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 105, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.f = f ` -topatch--> `constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 996, #gens: 186, #ops: 1, parent:995] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 996, errors: [SimplexTableau.java:107: error: final parameter constraints may not be assigned
	 */ 	SimplexTableau(final org.apache.commons.math.optimization.linear.LinearObjectiveFunction f, final java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint> constraints, final org.apache.commons.math.optimization.GoalType goalType, final boolean restrictToNonNegative, final double epsilon) { 		constraints = constraints; 		this.constraints = constraints;
	    	                                                                                                                                                                                                                                                                                                                             		^, SimplexTableau.java:117: error: variable f might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(498): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.f = f ` -topatch--> `constraints = constraints` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (995(f=1.0), 996(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (995(f=1.0), )
----------Running generation: 499, population size: 1

***** Generation 499 : 0
**Parent Variant: [Variant id: 997, #gens: 186, #ops: 0, parent:-]

--Child created id: 998
--Creating new operations for variant [Variant id: 998, #gens: 186, #ops: 0, parent:997]
---analyzing modificationPoint position: 97
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [numDecisionVariables, numSlackVariables, numArtificialVariables]
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numSlackVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java387
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow,[...] ` -topatch--> `int width = (((numDecisionVariables + numSlackVariables) +  numArtificialVariables) + getNumObjectiv[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 387, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow,[...] ` -topatch--> `int width = (((numDecisionVariables + numSlackVariables) +  numArtificialVariables) + getNumObjectiv[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 998, #gens: 187, #ops: 1, parent:997] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 998
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-998/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(499): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow,[...] ` -topatch--> `int width = (((numDecisionVariables + numSlackVariables) +  numArtificialVariables) + getNumObjectiv[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (997(f=1.0), 998(f=1.0), )
Selected to next generation: IDs2--> (997(f=1.0), )
----------Running generation: 500, population size: 1

***** Generation 500 : 0
**Parent Variant: [Variant id: 999, #gens: 186, #ops: 0, parent:-]

--Child created id: 1000
--Creating new operations for variant [Variant id: 1000, #gens: 186, #ops: 0, parent:999]
---analyzing modificationPoint position: 28
location: SimplexSolver.java190
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (!isOptimal(tableau)) { 	doIteration(tableau); }  ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1000, #gens: 185, #ops: 1, parent:999] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1000
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1000/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 14] ,[]
-Valid?: |false|8|14|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(500): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtWhileImpl) `while (!isOptimal(tableau)) { 	doIteration(tableau); }  ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (999(f=1.0), 1000(f=8.0), )
Selected to next generation: IDs2--> (999(f=1.0), )
----------Running generation: 501, population size: 1

***** Generation 501 : 0
**Parent Variant: [Variant id: 1001, #gens: 186, #ops: 0, parent:-]

--Child created id: 1002
--Creating new operations for variant [Variant id: 1002, #gens: 186, #ops: 0, parent:1001]
---analyzing modificationPoint position: 55
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [goalType]
--> var from patch: goalType spoon.support.reflect.code.CtVariableReadImpl
location: AbstractLinearOptimizer.java101
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `goalType = goalType` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 101, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `goalType = goalType` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1002, #gens: 187, #ops: 1, parent:1001] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1002, errors: [AbstractLinearOptimizer.java:101: error: final parameter goalType may not be assigned
		this.goalType = goalType; 		goalType = goalType;
		                          		^]
Ingredient counter is Zero
---Undoing: gnrtn(501): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.restrictToNonNegative = restrictToNonNegative ` -topatch--> `goalType = goalType` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1001(f=1.0), 1002(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1001(f=1.0), )
----------Running generation: 502, population size: 1

***** Generation 502 : 0
**Parent Variant: [Variant id: 1003, #gens: 186, #ops: 0, parent:-]

--Child created id: 1004
--Creating new operations for variant [Variant id: 1004, #gens: 186, #ops: 0, parent:1003]
---analyzing modificationPoint position: 36
Templates availables5
Attempts Base Ingredients  1 total 5
Attempts Base Ingredients  2 total 5
---modifPoint 0 not mutation generated in  minValue = tableau.getEntry(0, i)
---analyzing modificationPoint position: 56
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch [this.maxIterations]
--> var from patch: this.maxIterations spoon.support.reflect.code.CtFieldWriteImpl
location: AbstractLinearOptimizer.java103
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `iterations = 0 ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 103, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `iterations = 0 ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1004, #gens: 186, #ops: 1, parent:1003] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1004
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1004/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(502): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `iterations = 0 ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1003(f=1.0), 1004(f=1.0), )
Selected to next generation: IDs2--> (1003(f=1.0), )
----------Running generation: 503, population size: 1

***** Generation 503 : 0
**Parent Variant: [Variant id: 1005, #gens: 186, #ops: 0, parent:-]

--Child created id: 1006
--Creating new operations for variant [Variant id: 1006, #gens: 186, #ops: 0, parent:1005]
---analyzing modificationPoint position: 92
---modifPoint 0 not mutation generated in  return row
---analyzing modificationPoint position: 26
location: SimplexSolver.java188
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1006, #gens: 185, #ops: 1, parent:1005] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1006
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1006/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 5, was successful: false, cases executed: 14] ,[]
-Valid?: |false|5|14|[]|, fitness 5.0
Ingredient counter is Zero
---Undoing: gnrtn(503): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1005(f=1.0), 1006(f=5.0), )
Selected to next generation: IDs2--> (1005(f=1.0), )
----------Running generation: 504, population size: 1

***** Generation 504 : 0
**Parent Variant: [Variant id: 1007, #gens: 186, #ops: 0, parent:-]

--Child created id: 1008
--Creating new operations for variant [Variant id: 1008, #gens: 186, #ops: 0, parent:1007]
---analyzing modificationPoint position: 17
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [this.numArtificialVariables]
--> var from patch: this.numArtificialVariables spoon.support.reflect.code.CtFieldWriteImpl
location: SimplexTableau.java351
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `basicRows.add(basicRow) ` -topatch--> `this.numArtificialVariables = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 351, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `basicRows.add(basicRow) ` -topatch--> `this.numArtificialVariables = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1008, #gens: 187, #ops: 1, parent:1007] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1008
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1008/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(504): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `basicRows.add(basicRow) ` -topatch--> `this.numArtificialVariables = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1007(f=1.0), 1008(f=1.0), )
Selected to next generation: IDs2--> (1007(f=1.0), )
----------Running generation: 505, population size: 1

***** Generation 505 : 0
**Parent Variant: [Variant id: 1009, #gens: 186, #ops: 0, parent:-]

--Child created id: 1010
--Creating new operations for variant [Variant id: 1010, #gens: 186, #ops: 0, parent:1009]
---analyzing modificationPoint position: 6
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [iterations]
--> var from patch: iterations spoon.support.reflect.code.CtFieldWriteImpl
location: AbstractLinearOptimizer.java106
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `// solve the problem return doOptimize() ` -topatch--> `iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 106, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `// solve the problem return doOptimize() ` -topatch--> `iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1010, #gens: 187, #ops: 1, parent:1009] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1010
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1010/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(505): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `// solve the problem return doOptimize() ` -topatch--> `iterations = 0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1009(f=1.0), 1010(f=1.0), )
Selected to next generation: IDs2--> (1009(f=1.0), )
----------Running generation: 506, population size: 1

***** Generation 506 : 0
**Parent Variant: [Variant id: 1011, #gens: 186, #ops: 0, parent:-]

--Child created id: 1012
--Creating new operations for variant [Variant id: 1012, #gens: 186, #ops: 0, parent:1011]
---analyzing modificationPoint position: 165
Templates availables68
Attempts Base Ingredients  1 total 68
---modifPoint 0 not mutation generated in  return (java.lang.Double.isNaN(x) && java.lang.Double.isNaN(y)) || (x == y)
---analyzing modificationPoint position: 146
location: SimplexTableau.java199
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 	norma[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1012, #gens: 185, #ops: 1, parent:1011] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1012
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1012/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(506): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 	norma[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1011(f=1.0), 1012(f=14.0), )
Selected to next generation: IDs2--> (1011(f=1.0), )
----------Running generation: 507, population size: 1

***** Generation 507 : 0
**Parent Variant: [Variant id: 1013, #gens: 186, #ops: 0, parent:-]

--Child created id: 1014
--Creating new operations for variant [Variant id: 1014, #gens: 186, #ops: 0, parent:1013]
---analyzing modificationPoint position: 134
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch []
location: SimplexTableau.java154
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int row = getNumObjectiveFunctions() + i ` -topatch--> `java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset())` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 154, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int row = getNumObjectiveFunctions() + i ` -topatch--> `java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset())` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1014, #gens: 186, #ops: 1, parent:1013] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1014, errors: [SimplexTableau.java:414: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:414: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:414: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:414: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:414: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:414: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:416: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:416: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:416: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:416: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:416: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:416: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:416: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:418: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:418: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:419: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:420: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:420: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:421: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:421: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:422: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:423: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:423: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:423: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:424: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:424: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:424: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:424: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:424: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:424: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:437: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:437: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:437: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:437: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:437: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:437: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:441: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:441: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:445: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:445: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:453: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:453: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:453: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:453: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:462: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:462: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:462: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:462: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:462: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:466: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:466: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:470: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:470: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:474: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:474: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:479: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:479: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:489: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:489: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:494: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:494: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:498: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:498: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:502: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:502: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:506: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();
	    	^, SimplexTableau.java:506: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();
	    	                                  ^, SimplexTableau.java:511: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) {
	    	                    	                     ^, SimplexTableau.java:511: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) {
	    	                    	                                            ^, SimplexTableau.java:542: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() {
	    	                    	                   ^, SimplexTableau.java:560: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	^, SimplexTableau.java:560: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	        ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                        ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                       ^, SimplexTableau.java:560: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                                       ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                                                   ^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	        ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                     ^, SimplexTableau.java:572: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                              ^, SimplexTableau.java:572: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                                                   ^, SimplexTableau.java:573: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(507): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int row = getNumObjectiveFunctions() + i ` -topatch--> `java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset())` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1013(f=1.0), 1014(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1013(f=1.0), )
----------Running generation: 508, population size: 1

***** Generation 508 : 0
**Parent Variant: [Variant id: 1015, #gens: 186, #ops: 0, parent:-]

--Child created id: 1016
--Creating new operations for variant [Variant id: 1016, #gens: 186, #ops: 0, parent:1015]
---analyzing modificationPoint position: 25
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java170
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack  ` -topatch--> `// initialize the constraint rows int slackVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 170, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack  ` -topatch--> `// initialize the constraint rows int slackVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1016, #gens: 187, #ops: 1, parent:1015] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1016
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1016/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(508): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack  ` -topatch--> `// initialize the constraint rows int slackVar = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1015(f=1.0), 1016(f=1.0), )
Selected to next generation: IDs2--> (1015(f=1.0), )
----------Running generation: 509, population size: 1

***** Generation 509 : 0
**Parent Variant: [Variant id: 1017, #gens: 186, #ops: 0, parent:-]

--Child created id: 1018
--Creating new operations for variant [Variant id: 1018, #gens: 186, #ops: 0, parent:1017]
---analyzing modificationPoint position: 164
location: ArrayRealVector.java1287
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (data.length != n) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentExc[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1018, #gens: 185, #ops: 1, parent:1017] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1018
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1018/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(509): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (data.length != n) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentExc[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1017(f=1.0), 1018(f=1.0), )
Selected to next generation: IDs2--> (1017(f=1.0), )
----------Running generation: 510, population size: 1

***** Generation 510 : 0
**Parent Variant: [Variant id: 1019, #gens: 186, #ops: 0, parent:-]

--Child created id: 1020
--Creating new operations for variant [Variant id: 1020, #gens: 186, #ops: 0, parent:1019]
---analyzing modificationPoint position: 61
---modifPoint 0 not mutation generated in  // set the pivot element to 1 double pivotVal = tableau.getEntry(pivotRow, pivotCol)
---analyzing modificationPoint position: 71
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor)
---analyzing modificationPoint position: 146
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 2 not mutation generated in  for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 	norma[...]
---analyzing modificationPoint position: 8
Templates availables6
Attempts Base Ingredients  1 total 6
Attempts Base Ingredients  2 total 6
Attempts Base Ingredients  3 total 6
Attempts Base Ingredients  4 total 6
Attempts Base Ingredients  5 total 6
---modifPoint 3 not mutation generated in  return tableau.getSolution()
---analyzing modificationPoint position: 115
location: SimplexTableau.java110
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numSlackVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relatio[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1020, #gens: 185, #ops: 1, parent:1019] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 1020, errors: [SimplexTableau.java:117: error: variable numSlackVariables might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(510): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.numSlackVariables = getConstraintTypeCounts(org.apache.commons.math.optimization.linear.Relatio[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1019(f=1.0), 1020(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1019(f=1.0), )
----------Running generation: 511, population size: 1

***** Generation 511 : 0
**Parent Variant: [Variant id: 1021, #gens: 186, #ops: 0, parent:-]

--Child created id: 1022
--Creating new operations for variant [Variant id: 1022, #gens: 186, #ops: 0, parent:1021]
---analyzing modificationPoint position: 51
---modifPoint 0 not mutation generated in  return minRatioPos
---analyzing modificationPoint position: 82
Templates availables281
Attempts Base Ingredients  1 total 281
---modifPoint 1 not mutation generated in  double dot = 0
---analyzing modificationPoint position: 103
location: LinearObjectiveFunction.java66
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.coefficients = coefficients ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1022, #gens: 185, #ops: 1, parent:1021] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 1022, errors: [LinearObjectiveFunction.java:69: error: variable coefficients might not have been initialized
	 */ 	public LinearObjectiveFunction(org.apache.commons.math.linear.RealVector coefficients, double constantTerm) { 		this.constantTerm = constantTerm;}
	    	                                                                                                              		                                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(511): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.coefficients = coefficients ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1021(f=1.0), 1022(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1021(f=1.0), )
----------Running generation: 512, population size: 1

***** Generation 512 : 0
**Parent Variant: [Variant id: 1023, #gens: 186, #ops: 0, parent:-]

--Child created id: 1024
--Creating new operations for variant [Variant id: 1024, #gens: 186, #ops: 0, parent:1023]
---analyzing modificationPoint position: 141
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  // artificial variables if ((constraint.getRelationship() == org.apache.commons.math.optimization.li[...]
---analyzing modificationPoint position: 100
Templates availables31
Attempts Base Ingredients  1 total 31
---modifPoint 1 not mutation generated in  return tableau.getRowDimension()
---analyzing modificationPoint position: 183
Templates availables120
Attempts Base Ingredients  1 total 120
---modifPoint 2 not mutation generated in  return (data == null) || (data[0] == null) ? 0 : data[0].length
---analyzing modificationPoint position: 29
location: SimplexSolver.java42
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1024, #gens: 185, #ops: 1, parent:1023] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 1024, errors: [SimplexSolver.java:44: error: variable epsilon might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(512): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1023(f=1.0), 1024(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1023(f=1.0), )
----------Running generation: 513, population size: 1

***** Generation 513 : 0
**Parent Variant: [Variant id: 1025, #gens: 186, #ops: 0, parent:-]

--Child created id: 1026
--Creating new operations for variant [Variant id: 1026, #gens: 186, #ops: 0, parent:1025]
---analyzing modificationPoint position: 129
location: SimplexTableau.java144
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (!restrictToNonNegative) { 	matrix[zIndex][getSlackVariableOffset() - 1] =  	org.apache.commons.m[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1026, #gens: 185, #ops: 1, parent:1025] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1026
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1026/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 6, was successful: false, cases executed: 14] ,[]
-Valid?: |false|6|14|[]|, fitness 6.0
Ingredient counter is Zero
---Undoing: gnrtn(513): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (!restrictToNonNegative) { 	matrix[zIndex][getSlackVariableOffset() - 1] =  	org.apache.commons.m[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1025(f=1.0), 1026(f=6.0), )
Selected to next generation: IDs2--> (1025(f=1.0), )
----------Running generation: 514, population size: 1

***** Generation 514 : 0
**Parent Variant: [Variant id: 1027, #gens: 186, #ops: 0, parent:-]

--Child created id: 1028
--Creating new operations for variant [Variant id: 1028, #gens: 186, #ops: 0, parent:1027]
---analyzing modificationPoint position: 146
Templates availables3
Attempts Base Ingredients  1 total 3
---modifPoint 0 not mutation generated in  for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 	norma[...]
---analyzing modificationPoint position: 6
---modifPoint 1 not mutation generated in  // solve the problem return doOptimize()
---analyzing modificationPoint position: 44
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 2 not mutation generated in  final double entry = tableau.getEntry(i, col)
---analyzing modificationPoint position: 59
Templates availables12
Attempts Base Ingredients  1 total 12
---modifPoint 3 not mutation generated in  java.lang.Integer pivotRow = getPivotRow(pivotCol, tableau)
---analyzing modificationPoint position: 52
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch [this.maxIterations]
--> var from patch: this.maxIterations spoon.support.reflect.code.CtFieldWriteImpl
location: AbstractLinearOptimizer.java98
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 98, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1028, #gens: 186, #ops: 1, parent:1027] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 1028
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1028/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(514): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// store linear problem characteristics this.f = f ` -topatch--> `this.maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1027(f=1.0), 1028(f=14.0), )
Selected to next generation: IDs2--> (1027(f=1.0), )
----------Running generation: 515, population size: 1

***** Generation 515 : 0
**Parent Variant: [Variant id: 1029, #gens: 186, #ops: 0, parent:-]

--Child created id: 1030
--Creating new operations for variant [Variant id: 1030, #gens: 186, #ops: 0, parent:1029]
---analyzing modificationPoint position: 43
---modifPoint 0 not mutation generated in  final double rhs = tableau.getEntry(i, tableau.getWidth() - 1)
---analyzing modificationPoint position: 59
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java106
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer pivotRow = getPivotRow(pivotCol, tableau) ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 106, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer pivotRow = getPivotRow(pivotCol, tableau) ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1030, #gens: 187, #ops: 1, parent:1029] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 1030, errors: [SimplexSolver.java:136: error: incompatible types: unexpected return value
		return false; 		if (pivotRow == null) { 			throw new org.apache.commons.math.optimization.linear.UnboundedSolutionException();} 		// set the pivot element to 1 		double pivotVal = tableau.getEntry(pivotRow, pivotCol); 		tableau.divideRow(pivotRow, pivotVal); 		// set the rest of the pivot column to 0
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(515): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.lang.Integer pivotRow = getPivotRow(pivotCol, tableau) ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1029(f=1.0), 1030(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1029(f=1.0), )
----------Running generation: 516, population size: 1

***** Generation 516 : 0
**Parent Variant: [Variant id: 1031, #gens: 186, #ops: 0, parent:-]

--Child created id: 1032
--Creating new operations for variant [Variant id: 1032, #gens: 186, #ops: 0, parent:1031]
---analyzing modificationPoint position: 6
---modifPoint 0 not mutation generated in  // solve the problem return doOptimize()
---analyzing modificationPoint position: 154
location: SimplexTableau.java236
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (constraint.getRelationship() == relationship) { 	++count; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1032, #gens: 185, #ops: 1, parent:1031] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1032
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1032/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 14] ,[]
-Valid?: |false|13|14|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(516): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (constraint.getRelationship() == relationship) { 	++count; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1031(f=1.0), 1032(f=13.0), )
Selected to next generation: IDs2--> (1031(f=1.0), )
----------Running generation: 517, population size: 1

***** Generation 517 : 0
**Parent Variant: [Variant id: 1033, #gens: 186, #ops: 0, parent:-]

--Child created id: 1034
--Creating new operations for variant [Variant id: 1034, #gens: 186, #ops: 0, parent:1033]
---analyzing modificationPoint position: 18
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 0 not mutation generated in  coefficients[i] =  (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) -  (restrictToNonNega[...]
---analyzing modificationPoint position: 40
---modifPoint 1 not mutation generated in  double minRatio = java.lang.Double.MAX_VALUE
---analyzing modificationPoint position: 157
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [this.numArtificialVariables]
--> var from patch: this.numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java248
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `return this.numArtificialVariables > 0 ? 2 : 1` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 248, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `return this.numArtificialVariables > 0 ? 2 : 1` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1034, #gens: 187, #ops: 1, parent:1033] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 1034, errors: [SimplexTableau.java:252: error: incompatible types: unexpected return value
		} 		return this.numArtificialVariables > 0 ? 2 : 1;
		  		                                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(517): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtForImpl) `for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 	int row = ge[...] ` -topatch--> `return this.numArtificialVariables > 0 ? 2 : 1` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1033(f=1.0), 1034(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1033(f=1.0), )
----------Running generation: 518, population size: 1

***** Generation 518 : 0
**Parent Variant: [Variant id: 1035, #gens: 186, #ops: 0, parent:-]

--Child created id: 1036
--Creating new operations for variant [Variant id: 1036, #gens: 186, #ops: 0, parent:1035]
---analyzing modificationPoint position: 76
location: MathUtils.java370
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return -1 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1036, #gens: 185, #ops: 1, parent:1035] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1036
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1036/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 14] ,[]
-Valid?: |false|12|14|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(518): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtReturnImpl) `return -1 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1035(f=1.0), 1036(f=12.0), )
Selected to next generation: IDs2--> (1035(f=1.0), )
----------Running generation: 519, population size: 1

***** Generation 519 : 0
**Parent Variant: [Variant id: 1037, #gens: 186, #ops: 0, parent:-]

--Child created id: 1038
--Creating new operations for variant [Variant id: 1038, #gens: 186, #ops: 0, parent:1037]
---analyzing modificationPoint position: 27
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java189
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `throw new org.apache.commons.math.optimization.linear.UnboundedSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 189, pointed element: CtThrowImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `throw new org.apache.commons.math.optimization.linear.UnboundedSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 

--Summary Creation: for variant [Variant id: 1038, #gens: 187, #ops: 1, parent:1037] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1038, errors: [SimplexSolver.java:191: error: unreachable statement
		while (!isOptimal(tableau)) {
		^]
Ingredient counter is Zero
---Undoing: gnrtn(519): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `throw new org.apache.commons.math.optimization.linear.UnboundedSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1037(f=1.0), 1038(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1037(f=1.0), )
----------Running generation: 520, population size: 1

***** Generation 520 : 0
**Parent Variant: [Variant id: 1039, #gens: 186, #ops: 0, parent:-]

--Child created id: 1040
--Creating new operations for variant [Variant id: 1040, #gens: 186, #ops: 0, parent:1039]
---analyzing modificationPoint position: 16
location: SimplexTableau.java346
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (basicRows.contains(basicRow)) { 	// if multiple variables can take a given value 	// then we cho[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1040, #gens: 185, #ops: 1, parent:1039] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1040, errors: [SimplexTableau.java:346: error: variable declaration not allowed here
			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i);
			                  ^]
Ingredient counter is Zero
---Undoing: gnrtn(520): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (basicRows.contains(basicRow)) { 	// if multiple variables can take a given value 	// then we cho[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1039(f=1.0), 1040(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1039(f=1.0), )
----------Running generation: 521, population size: 1

***** Generation 521 : 0
**Parent Variant: [Variant id: 1041, #gens: 186, #ops: 0, parent:-]

--Child created id: 1042
--Creating new operations for variant [Variant id: 1042, #gens: 186, #ops: 0, parent:1041]
---analyzing modificationPoint position: 155
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  ++count
---analyzing modificationPoint position: 134
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java154
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int row = getNumObjectiveFunctions() + i ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 154, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int row = getNumObjectiveFunctions() + i ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1042, #gens: 187, #ops: 1, parent:1041] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 1042, errors: [SimplexTableau.java:381: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:381: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:381: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:381: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:381: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:381: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:383: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:383: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:383: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:383: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:383: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:383: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:383: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:385: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:385: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:386: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:387: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:387: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:388: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:388: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:389: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:390: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:390: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:390: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:391: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:391: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:391: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:391: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:391: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:391: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:404: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:404: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:404: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:404: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:404: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:404: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:408: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:408: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:412: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:412: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:420: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:420: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:420: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:420: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:429: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:429: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:429: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:429: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:429: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:433: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() {
	    	^, SimplexTableau.java:433: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() {
	    	                                          ^, SimplexTableau.java:441: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() {
	    	^, SimplexTableau.java:441: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() {
	    	                                               ^, SimplexTableau.java:449: error: illegal start of expression
	 */ 	protected final int getRhsOffset() {
	    	^, SimplexTableau.java:449: error: ';' expected
	 */ 	protected final int getRhsOffset() {
	    	                                ^, SimplexTableau.java:458: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() {
	    	^, SimplexTableau.java:458: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() {
	    	                                                     ^, SimplexTableau.java:472: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() {
	    	^, SimplexTableau.java:472: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() {
	    	                                           ^, SimplexTableau.java:481: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() {
	    	^, SimplexTableau.java:481: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() {
	    	                                                   ^, SimplexTableau.java:489: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() {
	    	^, SimplexTableau.java:489: error: ';' expected
	 */ 	protected final int getNumSlackVariables() {
	    	                                        ^, SimplexTableau.java:497: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() {
	    	^, SimplexTableau.java:497: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() {
	    	                                             ^, SimplexTableau.java:505: error: illegal start of expression
	 */ 	protected final double[][] getData() {
	    	^, SimplexTableau.java:505: error: ';' expected
	 */ 	protected final double[][] getData() {
	    	                                  ^, SimplexTableau.java:511: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) {
	    	                    	                     ^, SimplexTableau.java:511: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) {
	    	                    	                                            ^, SimplexTableau.java:542: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() {
	    	                    	                   ^, SimplexTableau.java:560: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	^, SimplexTableau.java:560: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	        ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                        ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                       ^, SimplexTableau.java:560: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                                       ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                                                   ^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	        ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                     ^, SimplexTableau.java:572: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                              ^, SimplexTableau.java:572: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                                                   ^, SimplexTableau.java:573: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(521): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int row = getNumObjectiveFunctions() + i ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1041(f=1.0), 1042(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1041(f=1.0), )
----------Running generation: 522, population size: 1

***** Generation 522 : 0
**Parent Variant: [Variant id: 1043, #gens: 186, #ops: 0, parent:-]

--Child created id: 1044
--Creating new operations for variant [Variant id: 1044, #gens: 186, #ops: 0, parent:1043]
---analyzing modificationPoint position: 109
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 0 not mutation generated in  this.value = value
---analyzing modificationPoint position: 133
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i)
---analyzing modificationPoint position: 21
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 2 not mutation generated in  return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1
---analyzing modificationPoint position: 38
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch []
location: AbstractLinearOptimizer.java67
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `// solve the problem return doOptimize()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 67, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `// solve the problem return doOptimize()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1044, #gens: 187, #ops: 1, parent:1043] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 1044, errors: [AbstractLinearOptimizer.java:107: error: incompatible types: unexpected return value
		return doOptimize(); 		this.maxIterations = maxIterations;} 	/**
		                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(522): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `// solve the problem return doOptimize()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1043(f=1.0), 1044(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1043(f=1.0), )
----------Running generation: 523, population size: 1

***** Generation 523 : 0
**Parent Variant: [Variant id: 1045, #gens: 186, #ops: 0, parent:-]

--Child created id: 1046
--Creating new operations for variant [Variant id: 1046, #gens: 186, #ops: 0, parent:1045]
---analyzing modificationPoint position: 36
Templates availables48
Attempts Base Ingredients  1 total 48
Attempts Base Ingredients  2 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java63
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `minValue = tableau.getEntry(0, i) ` -topatch--> `while (!isOptimal(tableau)) { 	doIteration(tableau); } ` (spoon.support.reflect.code.CtWhileImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 63, pointed element: CtWhileImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `minValue = tableau.getEntry(0, i) ` -topatch--> `while (!isOptimal(tableau)) { 	doIteration(tableau); } ` (spoon.support.reflect.code.CtWhileImpl) 

--Summary Creation: for variant [Variant id: 1046, #gens: 187, #ops: 1, parent:1045] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1046, errors: [SimplexSolver.java:192: error: unreported exception org.apache.commons.math.optimization.OptimizationException; must be caught or declared to be thrown
					doIteration(tableau);
					           ^]
Ingredient counter is Zero
---Undoing: gnrtn(523): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `minValue = tableau.getEntry(0, i) ` -topatch--> `while (!isOptimal(tableau)) { 	doIteration(tableau); } ` (spoon.support.reflect.code.CtWhileImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1045(f=1.0), 1046(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1045(f=1.0), )
----------Running generation: 524, population size: 1

***** Generation 524 : 0
**Parent Variant: [Variant id: 1047, #gens: 186, #ops: 0, parent:-]

--Child created id: 1048
--Creating new operations for variant [Variant id: 1048, #gens: 186, #ops: 0, parent:1047]
---analyzing modificationPoint position: 113
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  this.epsilon = epsilon
---analyzing modificationPoint position: 16
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  if (basicRows.contains(basicRow)) { 	// if multiple variables can take a given value 	// then we cho[...]
---analyzing modificationPoint position: 65
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch []
location: SimplexSolver.java118
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double multiplier = tableau.getEntry(i, pivotCol) ` -topatch--> `throw new org.apache.commons.math.optimization.linear.NoFeasibleSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 118, pointed element: CtThrowImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double multiplier = tableau.getEntry(i, pivotCol) ` -topatch--> `throw new org.apache.commons.math.optimization.linear.NoFeasibleSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 

--Summary Creation: for variant [Variant id: 1048, #gens: 187, #ops: 1, parent:1047] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 1048, errors: [SimplexSolver.java:179: error: unreachable statement
				throw new org.apache.commons.math.optimization.linear.NoFeasibleSolutionException(); 				tableau.subtractRow(i, pivotRow, multiplier);}}} 	/**
				                                                                                     				^]
Ingredient counter is Zero
---Undoing: gnrtn(524): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double multiplier = tableau.getEntry(i, pivotCol) ` -topatch--> `throw new org.apache.commons.math.optimization.linear.NoFeasibleSolutionException()` (spoon.support.reflect.code.CtThrowImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1047(f=1.0), 1048(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1047(f=1.0), )
----------Running generation: 525, population size: 1

***** Generation 525 : 0
**Parent Variant: [Variant id: 1049, #gens: 186, #ops: 0, parent:-]

--Child created id: 1050
--Creating new operations for variant [Variant id: 1050, #gens: 186, #ops: 0, parent:1049]
---analyzing modificationPoint position: 40
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  double minRatio = java.lang.Double.MAX_VALUE
---analyzing modificationPoint position: 66
Templates availables7
Attempts Base Ingredients  1 total 7
vars from patch []
location: SimplexSolver.java119
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.subtractRow(i, pivotRow, multiplier) ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 119, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.subtractRow(i, pivotRow, multiplier) ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 1050, #gens: 186, #ops: 1, parent:1049] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1050
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1050/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(525): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.subtractRow(i, pivotRow, multiplier) ` -topatch--> `incrementIterationsCounter()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1049(f=1.0), 1050(f=14.0), )
Selected to next generation: IDs2--> (1049(f=1.0), )
----------Running generation: 526, population size: 1

***** Generation 526 : 0
**Parent Variant: [Variant id: 1051, #gens: 186, #ops: 0, parent:-]

--Child created id: 1052
--Creating new operations for variant [Variant id: 1052, #gens: 186, #ops: 0, parent:1051]
---analyzing modificationPoint position: 105
---modifPoint 0 not mutation generated in  return coefficients
---analyzing modificationPoint position: 110
location: SimplexTableau.java105
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.f = f ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1052, #gens: 185, #ops: 1, parent:1051] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 1052, errors: [SimplexTableau.java:117: error: variable f might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(526): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.f = f ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1051(f=1.0), 1052(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1051(f=1.0), )
----------Running generation: 527, population size: 1

***** Generation 527 : 0
**Parent Variant: [Variant id: 1053, #gens: 186, #ops: 0, parent:-]

--Child created id: 1054
--Creating new operations for variant [Variant id: 1054, #gens: 186, #ops: 0, parent:1053]
---analyzing modificationPoint position: 145
---modifPoint 0 not mutation generated in  java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...]
---analyzing modificationPoint position: 110
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  this.f = f
---analyzing modificationPoint position: 80
---modifPoint 2 not mutation generated in  return getNumObjectiveFunctions() + numDecisionVariables
---analyzing modificationPoint position: 121
---modifPoint 3 not mutation generated in  int height = constraints.size() + getNumObjectiveFunctions()
---analyzing modificationPoint position: 137
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [constraint]
--> var from patch: constraint spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java166
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// RHS matrix[row][width - 1] = constraint.getValue() ` -topatch--> `return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients()[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 166, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// RHS matrix[row][width - 1] = constraint.getValue() ` -topatch--> `return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients()[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1054, #gens: 187, #ops: 1, parent:1053] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 1054, errors: [SimplexTableau.java:213: error: incompatible types: org.apache.commons.math.optimization.linear.LinearConstraint cannot be converted to double[][]
			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), 
			       ^]
Ingredient counter is Zero
---Undoing: gnrtn(527): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// RHS matrix[row][width - 1] = constraint.getValue() ` -topatch--> `return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients()[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1053(f=1.0), 1054(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1053(f=1.0), )
----------Running generation: 528, population size: 1

***** Generation 528 : 0
**Parent Variant: [Variant id: 1055, #gens: 186, #ops: 0, parent:-]

--Child created id: 1056
--Creating new operations for variant [Variant id: 1056, #gens: 186, #ops: 0, parent:1055]
---analyzing modificationPoint position: 87
---modifPoint 0 not mutation generated in  java.lang.Integer row = null
---analyzing modificationPoint position: 64
Templates availables10
Attempts Base Ingredients  1 total 10
Attempts Base Ingredients  2 total 10
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java117
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (i != pivotRow) { 	double multiplier = tableau.getEntry(i, pivotCol); 	tableau.subtractRow(i, piv[...] ` -topatch--> `if (tableau.getNumArtificialVariables() > 0) { 	return false; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 117, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (i != pivotRow) { 	double multiplier = tableau.getEntry(i, pivotCol); 	tableau.subtractRow(i, piv[...] ` -topatch--> `if (tableau.getNumArtificialVariables() > 0) { 	return false; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 1056, #gens: 186, #ops: 1, parent:1055] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 1056, errors: [SimplexSolver.java:149: error: incompatible types: unexpected return value
				return false;
				       ^]
Ingredient counter is Zero
---Undoing: gnrtn(528): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (i != pivotRow) { 	double multiplier = tableau.getEntry(i, pivotCol); 	tableau.subtractRow(i, piv[...] ` -topatch--> `if (tableau.getNumArtificialVariables() > 0) { 	return false; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1055(f=1.0), 1056(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1055(f=1.0), )
----------Running generation: 529, population size: 1

***** Generation 529 : 0
**Parent Variant: [Variant id: 1057, #gens: 186, #ops: 0, parent:-]

--Child created id: 1058
--Creating new operations for variant [Variant id: 1058, #gens: 186, #ops: 0, parent:1057]
---analyzing modificationPoint position: 120
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  int width = (((numDecisionVariables + numSlackVariables) +  numArtificialVariables) + getNumObjectiv[...]
---analyzing modificationPoint position: 138
---modifPoint 1 not mutation generated in  return coefficients
---analyzing modificationPoint position: 117
location: SimplexTableau.java114
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(createTableau(goalType == org[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1058, #gens: 185, #ops: 1, parent:1057] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 1058
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1058/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(529): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(createTableau(goalType == org[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1057(f=1.0), 1058(f=14.0), )
Selected to next generation: IDs2--> (1057(f=1.0), )
----------Running generation: 530, population size: 1

***** Generation 530 : 0
**Parent Variant: [Variant id: 1059, #gens: 186, #ops: 0, parent:-]

--Child created id: 1060
--Creating new operations for variant [Variant id: 1060, #gens: 186, #ops: 0, parent:1059]
---analyzing modificationPoint position: 107
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 0 not mutation generated in  this.coefficients = coefficients
---analyzing modificationPoint position: 154
location: SimplexTableau.java236
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (constraint.getRelationship() == relationship) { 	++count; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1060, #gens: 185, #ops: 1, parent:1059] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1060
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1060/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 13, was successful: false, cases executed: 14] ,[]
-Valid?: |false|13|14|[]|, fitness 13.0
Ingredient counter is Zero
---Undoing: gnrtn(530): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (constraint.getRelationship() == relationship) { 	++count; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1059(f=1.0), 1060(f=13.0), )
Selected to next generation: IDs2--> (1059(f=1.0), )
----------Running generation: 531, population size: 1

***** Generation 531 : 0
**Parent Variant: [Variant id: 1061, #gens: 186, #ops: 0, parent:-]

--Child created id: 1062
--Creating new operations for variant [Variant id: 1062, #gens: 186, #ops: 0, parent:1061]
---analyzing modificationPoint position: 1
Templates availables31
Attempts Base Ingredients  1 total 31
---modifPoint 0 not mutation generated in  return
---analyzing modificationPoint position: 38
location: AbstractLinearOptimizer.java67
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1062, #gens: 185, #ops: 1, parent:1061] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1062
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1062/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(531): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1061(f=1.0), 1062(f=14.0), )
Selected to next generation: IDs2--> (1061(f=1.0), )
----------Running generation: 532, population size: 1

***** Generation 532 : 0
**Parent Variant: [Variant id: 1063, #gens: 186, #ops: 0, parent:-]

--Child created id: 1064
--Creating new operations for variant [Variant id: 1064, #gens: 186, #ops: 0, parent:1063]
---analyzing modificationPoint position: 68
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  final org.apache.commons.math.optimization.linear.SimplexTableau tableau =  new org.apache.commons.m[...]
---analyzing modificationPoint position: 137
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [matrix, row, slackVar]
--> var from patch: matrix spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: row spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: slackVar spoon.support.reflect.code.CtVariableWriteImpl
location: SimplexTableau.java166
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// RHS matrix[row][width - 1] = constraint.getValue() ` -topatch--> `matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack ` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 166, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// RHS matrix[row][width - 1] = constraint.getValue() ` -topatch--> `matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack ` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1064, #gens: 187, #ops: 1, parent:1063] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1064
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1064/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 11, was successful: false, cases executed: 14] ,[]
-Valid?: |false|11|14|[]|, fitness 11.0
Ingredient counter is Zero
---Undoing: gnrtn(532): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// RHS matrix[row][width - 1] = constraint.getValue() ` -topatch--> `matrix[row][getSlackVariableOffset() + (slackVar++)] = 1// slack ` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1063(f=1.0), 1064(f=11.0), )
Selected to next generation: IDs2--> (1063(f=1.0), )
----------Running generation: 533, population size: 1

***** Generation 533 : 0
**Parent Variant: [Variant id: 1065, #gens: 186, #ops: 0, parent:-]

--Child created id: 1066
--Creating new operations for variant [Variant id: 1066, #gens: 186, #ops: 0, parent:1065]
---analyzing modificationPoint position: 87
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  java.lang.Integer row = null
---analyzing modificationPoint position: 118
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  initialize()
---analyzing modificationPoint position: 71
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 2 not mutation generated in  tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor)
---analyzing modificationPoint position: 69
location: SimplexTableau.java307
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (numArtificialVariables == 0) { 	return; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1066, #gens: 185, #ops: 1, parent:1065] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 1066
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1066/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 14] ,[]
-Valid?: |false|3|14|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(533): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (numArtificialVariables == 0) { 	return; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1065(f=1.0), 1066(f=3.0), )
Selected to next generation: IDs2--> (1065(f=1.0), )
----------Running generation: 534, population size: 1

***** Generation 534 : 0
**Parent Variant: [Variant id: 1067, #gens: 186, #ops: 0, parent:-]

--Child created id: 1068
--Creating new operations for variant [Variant id: 1068, #gens: 186, #ops: 0, parent:1067]
---analyzing modificationPoint position: 48
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java85
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatio = ratio ` -topatch--> `if (tableau.getNumArtificialVariables() > 0) { 	return false; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 85, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatio = ratio ` -topatch--> `if (tableau.getNumArtificialVariables() > 0) { 	return false; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 1068, #gens: 187, #ops: 1, parent:1067] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1068, errors: [SimplexSolver.java:149: error: incompatible types: boolean cannot be converted to java.lang.Integer
						return false;
						       ^]
Ingredient counter is Zero
---Undoing: gnrtn(534): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatio = ratio ` -topatch--> `if (tableau.getNumArtificialVariables() > 0) { 	return false; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1067(f=1.0), 1068(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1067(f=1.0), )
----------Running generation: 535, population size: 1

***** Generation 535 : 0
**Parent Variant: [Variant id: 1069, #gens: 186, #ops: 0, parent:-]

--Child created id: 1070
--Creating new operations for variant [Variant id: 1070, #gens: 186, #ops: 0, parent:1069]
---analyzing modificationPoint position: 1
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  return
---analyzing modificationPoint position: 94
location: ArrayRealVector.java339
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < data.length; i++) { 	out[i] = data[i] * d; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1070, #gens: 185, #ops: 1, parent:1069] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1070
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1070/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 6, was successful: false, cases executed: 14] ,[]
-Valid?: |false|6|14|[]|, fitness 6.0
Ingredient counter is Zero
---Undoing: gnrtn(535): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < data.length; i++) { 	out[i] = data[i] * d; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1069(f=1.0), 1070(f=6.0), )
Selected to next generation: IDs2--> (1069(f=1.0), )
----------Running generation: 536, population size: 1

***** Generation 536 : 0
**Parent Variant: [Variant id: 1071, #gens: 186, #ops: 0, parent:-]

--Child created id: 1072
--Creating new operations for variant [Variant id: 1072, #gens: 186, #ops: 0, parent:1071]
---analyzing modificationPoint position: 7
---modifPoint 0 not mutation generated in  return true
---analyzing modificationPoint position: 141
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  // artificial variables if ((constraint.getRelationship() == org.apache.commons.math.optimization.li[...]
---analyzing modificationPoint position: 44
---modifPoint 2 not mutation generated in  final double entry = tableau.getEntry(i, col)
---analyzing modificationPoint position: 184
---modifPoint 3 not mutation generated in  return data == null ? 0 : data.length
---analyzing modificationPoint position: 132
location: SimplexTableau.java152
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < constraints.size(); i++) { 	org.apache.commons.math.optimization.linear.LinearCo[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1072, #gens: 185, #ops: 1, parent:1071] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child compiles: id 1072
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1072/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(536): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int i = 0; i < constraints.size(); i++) { 	org.apache.commons.math.optimization.linear.LinearCo[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1071(f=1.0), 1072(f=14.0), )
Selected to next generation: IDs2--> (1071(f=1.0), )
----------Running generation: 537, population size: 1

***** Generation 537 : 0
**Parent Variant: [Variant id: 1073, #gens: 186, #ops: 0, parent:-]

--Child created id: 1074
--Creating new operations for variant [Variant id: 1074, #gens: 186, #ops: 0, parent:1073]
---analyzing modificationPoint position: 90
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) [...]
---analyzing modificationPoint position: 156
---modifPoint 1 not mutation generated in  return count
---analyzing modificationPoint position: 143
---modifPoint 2 not mutation generated in  return value
---analyzing modificationPoint position: 88
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java292
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0 ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 292, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0 ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1074, #gens: 187, #ops: 1, parent:1073] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 1074, errors: [SimplexTableau.java:551: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:551: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:551: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:551: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:551: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:551: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:553: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:553: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:553: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:553: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:553: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:553: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:553: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:555: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:555: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:556: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:557: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:557: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:558: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:558: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:559: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:560: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:560: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:560: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:561: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:561: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:561: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:561: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:561: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:561: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:574: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:574: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:574: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:574: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:574: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:574: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:578: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:578: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:582: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:582: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:590: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:590: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:590: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:590: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:599: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:599: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:599: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:599: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:599: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:603: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:603: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:607: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:607: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:611: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:611: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:616: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:616: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:626: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:626: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:631: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:631: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:635: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:635: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:639: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:639: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:643: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:643: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:645: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:645: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:648: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:655: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:655: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:655: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:655: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:655: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:655: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:664: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:664: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:664: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:664: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:664: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:664: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:664: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:664: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:664: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(537): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0 ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1073(f=1.0), 1074(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1073(f=1.0), )
----------Running generation: 538, population size: 1

***** Generation 538 : 0
**Parent Variant: [Variant id: 1075, #gens: 186, #ops: 0, parent:-]

--Child created id: 1076
--Creating new operations for variant [Variant id: 1076, #gens: 186, #ops: 0, parent:1075]
---analyzing modificationPoint position: 14
Templates availables8
Attempts Base Ingredients  1 total 8
---modifPoint 0 not mutation generated in  for (int i = 0; i < coefficients.length; i++) { 	java.lang.Integer basicRow = getBasicRowForSolution[...]
---analyzing modificationPoint position: 100
---modifPoint 1 not mutation generated in  return tableau.getRowDimension()
---analyzing modificationPoint position: 10
---modifPoint 2 not mutation generated in  double[] coefficients = new double[getOriginalNumDecisionVariables()]
---analyzing modificationPoint position: 172
Templates availables120
Attempts Base Ingredients  1 total 120
---modifPoint 3 not mutation generated in  if (row > 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalStateException( 	"fi[...]
---analyzing modificationPoint position: 30
Templates availables5
Attempts Base Ingredients  1 total 5
---modifPoint 4 not mutation generated in  this.epsilon = epsilon
---analyzing modificationPoint position: 146
Templates availables3
Attempts Base Ingredients  1 total 3
vars from patch [constraints, normalized, constraint]
--> var from patch: constraints spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: normalized spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: constraint spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java199
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 	norma[...] ` -topatch--> `for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 	norma[...]` (spoon.support.reflect.code.CtForEachImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 199, pointed element: CtForEachImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 	norma[...] ` -topatch--> `for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 	norma[...]` (spoon.support.reflect.code.CtForEachImpl) 

--Summary Creation: for variant [Variant id: 1076, #gens: 186, #ops: 1, parent:1075] gen mutated: 1 , gen not mut: 5, gen not applied  0
-The child compiles: id 1076
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1076/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(538): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtForEachImpl) `for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 	norma[...] ` -topatch--> `for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 	norma[...]` (spoon.support.reflect.code.CtForEachImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1075(f=1.0), 1076(f=1.0), )
Selected to next generation: IDs2--> (1075(f=1.0), )
----------Running generation: 539, population size: 1

***** Generation 539 : 0
**Parent Variant: [Variant id: 1077, #gens: 186, #ops: 0, parent:-]

--Child created id: 1078
--Creating new operations for variant [Variant id: 1078, #gens: 186, #ops: 0, parent:1077]
---analyzing modificationPoint position: 5
Templates availables18
Attempts Base Ingredients  1 total 18
---modifPoint 0 not mutation generated in  return coefficients.dotProduct(point) + constantTerm
---analyzing modificationPoint position: 6
---modifPoint 1 not mutation generated in  // solve the problem return doOptimize()
---analyzing modificationPoint position: 29
Templates availables7
Attempts Base Ingredients  1 total 7
---modifPoint 2 not mutation generated in  this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)
---analyzing modificationPoint position: 67
Templates availables10
Attempts Base Ingredients  1 total 10
---modifPoint 3 not mutation generated in  // make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }
---analyzing modificationPoint position: 24
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 4 not mutation generated in  if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) { 	ret[...]
---analyzing modificationPoint position: 32
---modifPoint 5 not mutation generated in  java.lang.Integer minPos = null
---analyzing modificationPoint position: 175
location: Array2DRowRealMatrix.java326
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (nRows == 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1078, #gens: 185, #ops: 1, parent:1077] gen mutated: 1 , gen not mut: 6, gen not applied  0
-The child compiles: id 1078
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1078/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(539): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (nRows == 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1077(f=1.0), 1078(f=1.0), )
Selected to next generation: IDs2--> (1077(f=1.0), )
----------Running generation: 540, population size: 1

***** Generation 540 : 0
**Parent Variant: [Variant id: 1079, #gens: 186, #ops: 0, parent:-]

--Child created id: 1080
--Creating new operations for variant [Variant id: 1080, #gens: 186, #ops: 0, parent:1079]
---analyzing modificationPoint position: 177
Templates availables11
Attempts Base Ingredients  1 total 11
---modifPoint 0 not mutation generated in  if (nCols == 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException[...]
---analyzing modificationPoint position: 19
---modifPoint 1 not mutation generated in  return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coeffici[...]
---analyzing modificationPoint position: 86
location: LinearConstraint.java81
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), relationship, value) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1080, #gens: 185, #ops: 1, parent:1079] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 1080, errors: [LinearConstraint.java:83: error: variable coefficients might not have been initialized
	 */ 	public LinearConstraint(final double[] coefficients, final org.apache.commons.math.optimization.linear.Relationship relationship, final double value) {}
	    	                                                                                                                                                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(540): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), relationship, value) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1079(f=1.0), 1080(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1079(f=1.0), )
----------Running generation: 541, population size: 1

***** Generation 541 : 0
**Parent Variant: [Variant id: 1081, #gens: 186, #ops: 0, parent:-]

--Child created id: 1082
--Creating new operations for variant [Variant id: 1082, #gens: 186, #ops: 0, parent:1081]
---analyzing modificationPoint position: 36
Templates availables5
Attempts Base Ingredients  1 total 5
---modifPoint 0 not mutation generated in  minValue = tableau.getEntry(0, i)
---analyzing modificationPoint position: 75
Templates availables259
Attempts Base Ingredients  1 total 259
---modifPoint 1 not mutation generated in  if (x < y) { 	return -1; }
---analyzing modificationPoint position: 3
---modifPoint 2 not mutation generated in  return false
---analyzing modificationPoint position: 19
---modifPoint 3 not mutation generated in  return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coeffici[...]
---analyzing modificationPoint position: 139
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 4 not mutation generated in  // slack variables if (constraint.getRelationship() == org.apache.commons.math.optimization.linear.R[...]
---analyzing modificationPoint position: 67
Templates availables10
Attempts Base Ingredients  1 total 10
---modifPoint 5 not mutation generated in  // make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }
---analyzing modificationPoint position: 147
location: SimplexTableau.java200
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `normalized.add(normalize(constraint)) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1082, #gens: 185, #ops: 1, parent:1081] gen mutated: 1 , gen not mut: 6, gen not applied  0
-The child compiles: id 1082
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1082/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(541): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `normalized.add(normalize(constraint)) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1081(f=1.0), 1082(f=14.0), )
Selected to next generation: IDs2--> (1081(f=1.0), )
----------Running generation: 542, population size: 1

***** Generation 542 : 0
**Parent Variant: [Variant id: 1083, #gens: 186, #ops: 0, parent:-]

--Child created id: 1084
--Creating new operations for variant [Variant id: 1084, #gens: 186, #ops: 0, parent:1083]
---analyzing modificationPoint position: 38
location: AbstractLinearOptimizer.java67
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1084, #gens: 185, #ops: 1, parent:1083] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1084
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1084/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(542): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1083(f=1.0), 1084(f=14.0), )
Selected to next generation: IDs2--> (1083(f=1.0), )
----------Running generation: 543, population size: 1

***** Generation 543 : 0
**Parent Variant: [Variant id: 1085, #gens: 186, #ops: 0, parent:-]

--Child created id: 1086
--Creating new operations for variant [Variant id: 1086, #gens: 186, #ops: 0, parent:1085]
---analyzing modificationPoint position: 107
location: LinearConstraint.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.coefficients = coefficients ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1086, #gens: 185, #ops: 1, parent:1085] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1086, errors: [LinearConstraint.java:104: error: variable coefficients might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(543): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.coefficients = coefficients ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1085(f=1.0), 1086(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1085(f=1.0), )
----------Running generation: 544, population size: 1

***** Generation 544 : 0
**Parent Variant: [Variant id: 1087, #gens: 186, #ops: 0, parent:-]

--Child created id: 1088
--Creating new operations for variant [Variant id: 1088, #gens: 186, #ops: 0, parent:1087]
---analyzing modificationPoint position: 146
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 	norma[...]
---analyzing modificationPoint position: 70
location: SimplexTableau.java370
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRo[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1088, #gens: 185, #ops: 1, parent:1087] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1088
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1088/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 14] ,[]
-Valid?: |false|4|14|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(544): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtForImpl) `for (int j = 0; j < getWidth(); j++) { 	tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRo[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1087(f=1.0), 1088(f=4.0), )
Selected to next generation: IDs2--> (1087(f=1.0), )
----------Running generation: 545, population size: 1

***** Generation 545 : 0
**Parent Variant: [Variant id: 1089, #gens: 186, #ops: 0, parent:-]

--Child created id: 1090
--Creating new operations for variant [Variant id: 1090, #gens: 186, #ops: 0, parent:1089]
---analyzing modificationPoint position: 12
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch []
location: SimplexTableau.java342
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset[...] ` -topatch--> `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 342, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset[...] ` -topatch--> `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1090, #gens: 186, #ops: 1, parent:1089] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1090, errors: [SimplexTableau.java:355: error: cannot find symbol
				(restrictToNonNegative ? 0 : mostNegative);
				                             ^
  symbol:   variable mostNegative
  location: class org.apache.commons.math.optimization.linear.SimplexTableau]
Ingredient counter is Zero
---Undoing: gnrtn(545): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset[...] ` -topatch--> `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1089(f=1.0), 1090(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1089(f=1.0), )
----------Running generation: 546, population size: 1

***** Generation 546 : 0
**Parent Variant: [Variant id: 1091, #gens: 186, #ops: 0, parent:-]

--Child created id: 1092
--Creating new operations for variant [Variant id: 1092, #gens: 186, #ops: 0, parent:1091]
---analyzing modificationPoint position: 1
Templates availables31
Attempts Base Ingredients  1 total 31
---modifPoint 0 not mutation generated in  return
---analyzing modificationPoint position: 148
---modifPoint 1 not mutation generated in  return normalized
---analyzing modificationPoint position: 140
Templates availables8
Attempts Base Ingredients  1 total 8
vars from patch []
location: LinearConstraint.java176
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return relationship ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearConstraint line: 176, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return relationship ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1092, #gens: 186, #ops: 1, parent:1091] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 1092, errors: [LinearConstraint.java:193: error: incompatible types: boolean cannot be converted to org.apache.commons.math.optimization.linear.Relationship
		return true;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(546): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return relationship ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1091(f=1.0), 1092(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1091(f=1.0), )
----------Running generation: 547, population size: 1

***** Generation 547 : 0
**Parent Variant: [Variant id: 1093, #gens: 186, #ops: 0, parent:-]

--Child created id: 1094
--Creating new operations for variant [Variant id: 1094, #gens: 186, #ops: 0, parent:1093]
---analyzing modificationPoint position: 47
Templates availables10
Attempts Base Ingredients  1 total 10
Attempts Base Ingredients  2 total 10
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java84
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; } ` -topatch--> `if (tableau.getNumArtificialVariables() > 0) { 	return false; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 84, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; } ` -topatch--> `if (tableau.getNumArtificialVariables() > 0) { 	return false; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 1094, #gens: 186, #ops: 1, parent:1093] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1094, errors: [SimplexSolver.java:149: error: incompatible types: boolean cannot be converted to java.lang.Integer
					return false;
					       ^]
Ingredient counter is Zero
---Undoing: gnrtn(547): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (ratio < minRatio) { 	minRatio = ratio; 	minRatioPos = i; } ` -topatch--> `if (tableau.getNumArtificialVariables() > 0) { 	return false; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1093(f=1.0), 1094(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1093(f=1.0), )
----------Running generation: 548, population size: 1

***** Generation 548 : 0
**Parent Variant: [Variant id: 1095, #gens: 186, #ops: 0, parent:-]

--Child created id: 1096
--Creating new operations for variant [Variant id: 1096, #gens: 186, #ops: 0, parent:1095]
---analyzing modificationPoint position: 127
location: SimplexTableau.java140
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions()) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1096, #gens: 185, #ops: 1, parent:1095] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1096
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1096/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 14] ,[]
-Valid?: |false|7|14|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(548): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions()) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1095(f=1.0), 1096(f=7.0), )
Selected to next generation: IDs2--> (1095(f=1.0), )
----------Running generation: 549, population size: 1

***** Generation 549 : 0
**Parent Variant: [Variant id: 1097, #gens: 186, #ops: 0, parent:-]

--Child created id: 1098
--Creating new operations for variant [Variant id: 1098, #gens: 186, #ops: 0, parent:1097]
---analyzing modificationPoint position: 87
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  java.lang.Integer row = null
---analyzing modificationPoint position: 103
Templates availables18
Attempts Base Ingredients  1 total 18
vars from patch []
location: LinearObjectiveFunction.java66
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.coefficients = coefficients ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearObjectiveFunction line: 66, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.coefficients = coefficients ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1098, #gens: 187, #ops: 1, parent:1097] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 1098, errors: [LinearObjectiveFunction.java:124: error: incompatible types: unexpected return value
		return false; 		this.constantTerm = constantTerm;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(549): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.coefficients = coefficients ` -topatch--> `// ignore exception return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1097(f=1.0), 1098(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1097(f=1.0), )
----------Running generation: 550, population size: 1

***** Generation 550 : 0
**Parent Variant: [Variant id: 1099, #gens: 186, #ops: 0, parent:-]

--Child created id: 1100
--Creating new operations for variant [Variant id: 1100, #gens: 186, #ops: 0, parent:1099]
---analyzing modificationPoint position: 137
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 0 not mutation generated in  // RHS matrix[row][width - 1] = constraint.getValue()
---analyzing modificationPoint position: 124
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1
---analyzing modificationPoint position: 72
Templates availables31
Attempts Base Ingredients  1 total 31
vars from patch [numDecisionVariables]
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java497
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return numArtificialVariables ` -topatch--> `return numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 497, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return numArtificialVariables ` -topatch--> `return numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1100, #gens: 186, #ops: 1, parent:1099] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 1100
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1100/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 14] ,[]
-Valid?: |false|12|14|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(550): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return numArtificialVariables ` -topatch--> `return numDecisionVariables` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1099(f=1.0), 1100(f=12.0), )
Selected to next generation: IDs2--> (1099(f=1.0), )
----------Running generation: 551, population size: 1

***** Generation 551 : 0
**Parent Variant: [Variant id: 1101, #gens: 186, #ops: 0, parent:-]

--Child created id: 1102
--Creating new operations for variant [Variant id: 1102, #gens: 186, #ops: 0, parent:1101]
---analyzing modificationPoint position: 86
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 0 not mutation generated in  this(new org.apache.commons.math.linear.ArrayRealVector(coefficients), relationship, value)
---analyzing modificationPoint position: 39
---modifPoint 1 not mutation generated in  return minPos
---analyzing modificationPoint position: 126
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 2 not mutation generated in  org.apache.commons.math.linear.RealVector objectiveCoefficients =  (maximize) ? f.getCoefficients().[...]
---analyzing modificationPoint position: 54
location: AbstractLinearOptimizer.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.goalType = goalType ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1102, #gens: 185, #ops: 1, parent:1101] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 1102
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1102/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 14] ,[]
-Valid?: |false|8|14|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(551): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.goalType = goalType ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1101(f=1.0), 1102(f=8.0), )
Selected to next generation: IDs2--> (1101(f=1.0), )
----------Running generation: 552, population size: 1

***** Generation 552 : 0
**Parent Variant: [Variant id: 1103, #gens: 186, #ops: 0, parent:-]

--Child created id: 1104
--Creating new operations for variant [Variant id: 1104, #gens: 186, #ops: 0, parent:1103]
---analyzing modificationPoint position: 43
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [java.lang.Double.MAX_VALUE]
--> var from patch: java.lang.Double.MAX_VALUE spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java80
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double rhs = tableau.getEntry(i, tableau.getWidth() - 1) ` -topatch--> `double minRatio = java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 80, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double rhs = tableau.getEntry(i, tableau.getWidth() - 1) ` -topatch--> `double minRatio = java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1104, #gens: 186, #ops: 1, parent:1103] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1104, errors: [SimplexSolver.java:80: error: variable minRatio is already defined in method getPivotRow(int,org.apache.commons.math.optimization.linear.SimplexTableau)
		for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) { 			double minRatio = java.lang.Double.MAX_VALUE;
		                                                                                 			       ^, SimplexSolver.java:84: error: cannot find symbol
				final double ratio = rhs / entry;
				                     ^
  symbol:   variable rhs
  location: class org.apache.commons.math.optimization.linear.SimplexSolver]
Ingredient counter is Zero
---Undoing: gnrtn(552): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `final double rhs = tableau.getEntry(i, tableau.getWidth() - 1) ` -topatch--> `double minRatio = java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1103(f=1.0), 1104(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1103(f=1.0), )
----------Running generation: 553, population size: 1

***** Generation 553 : 0
**Parent Variant: [Variant id: 1105, #gens: 186, #ops: 0, parent:-]

--Child created id: 1106
--Creating new operations for variant [Variant id: 1106, #gens: 186, #ops: 0, parent:1105]
---analyzing modificationPoint position: 144
---modifPoint 0 not mutation generated in  return f.getCoefficients().getDimension()
---analyzing modificationPoint position: 8
---modifPoint 1 not mutation generated in  return tableau.getSolution()
---analyzing modificationPoint position: 170
Templates availables120
Attempts Base Ingredients  1 total 120
---modifPoint 2 not mutation generated in  copyIn(d)
---analyzing modificationPoint position: 10
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch []
location: SimplexTableau.java340
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] coefficients = new double[getOriginalNumDecisionVariables()] ` -topatch--> `java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>()` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 340, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] coefficients = new double[getOriginalNumDecisionVariables()] ` -topatch--> `java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>()` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1106, #gens: 186, #ops: 1, parent:1105] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 1106, errors: [SimplexTableau.java:344: error: variable basicRows is already defined in method getSolution()
		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>();
		                                                                                         		                                                                                                     		                                                                                                         		                                 ^, SimplexTableau.java:345: error: cannot find symbol
		for (int i = 0; i < coefficients.length; i++) {
		                    ^
  symbol:   variable coefficients
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:350: error: cannot find symbol
				coefficients[i] = 0;
				^
  symbol:   variable coefficients
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:353: error: cannot find symbol
				coefficients[i] = 
				^
  symbol:   variable coefficients
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:358: error: cannot find symbol
		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));
		                                                                   ^
  symbol:   variable coefficients
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:358: error: cannot find symbol
		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));
		                                                                                            ^
  symbol:   variable coefficients
  location: class org.apache.commons.math.optimization.linear.SimplexTableau]
Ingredient counter is Zero
---Undoing: gnrtn(553): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] coefficients = new double[getOriginalNumDecisionVariables()] ` -topatch--> `java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>()` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1105(f=1.0), 1106(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1105(f=1.0), )
----------Running generation: 554, population size: 1

***** Generation 554 : 0
**Parent Variant: [Variant id: 1107, #gens: 186, #ops: 0, parent:-]

--Child created id: 1108
--Creating new operations for variant [Variant id: 1108, #gens: 186, #ops: 0, parent:1107]
---analyzing modificationPoint position: 134
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch []
location: SimplexTableau.java154
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int row = getNumObjectiveFunctions() + i ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 154, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int row = getNumObjectiveFunctions() + i ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1108, #gens: 187, #ops: 1, parent:1107] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1108, errors: [SimplexTableau.java:381: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:381: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:381: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:381: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:381: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:381: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:383: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:383: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:383: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:383: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:383: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:383: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:383: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:385: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:385: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:386: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:387: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:387: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:388: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:388: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:389: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:390: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:390: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:390: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:391: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:391: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:391: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:391: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:391: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:391: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:404: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:404: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:404: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:404: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:404: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:404: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:408: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:408: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:412: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:412: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:420: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:420: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:420: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:420: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:429: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:429: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:429: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:429: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:429: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:433: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() {
	    	^, SimplexTableau.java:433: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() {
	    	                                          ^, SimplexTableau.java:441: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() {
	    	^, SimplexTableau.java:441: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() {
	    	                                               ^, SimplexTableau.java:449: error: illegal start of expression
	 */ 	protected final int getRhsOffset() {
	    	^, SimplexTableau.java:449: error: ';' expected
	 */ 	protected final int getRhsOffset() {
	    	                                ^, SimplexTableau.java:458: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() {
	    	^, SimplexTableau.java:458: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() {
	    	                                                     ^, SimplexTableau.java:472: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() {
	    	^, SimplexTableau.java:472: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() {
	    	                                           ^, SimplexTableau.java:481: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() {
	    	^, SimplexTableau.java:481: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() {
	    	                                                   ^, SimplexTableau.java:489: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() {
	    	^, SimplexTableau.java:489: error: ';' expected
	 */ 	protected final int getNumSlackVariables() {
	    	                                        ^, SimplexTableau.java:497: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() {
	    	^, SimplexTableau.java:497: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() {
	    	                                             ^, SimplexTableau.java:505: error: illegal start of expression
	 */ 	protected final double[][] getData() {
	    	^, SimplexTableau.java:505: error: ';' expected
	 */ 	protected final double[][] getData() {
	    	                                  ^, SimplexTableau.java:511: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) {
	    	                    	                     ^, SimplexTableau.java:511: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) {
	    	                    	                                            ^, SimplexTableau.java:542: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() {
	    	                    	                   ^, SimplexTableau.java:560: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	^, SimplexTableau.java:560: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	        ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                        ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                       ^, SimplexTableau.java:560: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                                       ^, SimplexTableau.java:560: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);
	    	                                                                                   ^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	^, SimplexTableau.java:572: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	        ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                     ^, SimplexTableau.java:572: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                              ^, SimplexTableau.java:572: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                                       ^, SimplexTableau.java:572: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}
	    	                                                                                                                   ^, SimplexTableau.java:573: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(554): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int row = getNumObjectiveFunctions() + i ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1107(f=1.0), 1108(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1107(f=1.0), )
----------Running generation: 555, population size: 1

***** Generation 555 : 0
**Parent Variant: [Variant id: 1109, #gens: 186, #ops: 0, parent:-]

--Child created id: 1110
--Creating new operations for variant [Variant id: 1110, #gens: 186, #ops: 0, parent:1109]
---analyzing modificationPoint position: 48
location: SimplexSolver.java85
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatio = ratio ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1110, #gens: 185, #ops: 1, parent:1109] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1110
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1110/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 14] ,[]
-Valid?: |false|4|14|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(555): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatio = ratio ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1109(f=1.0), 1110(f=4.0), )
Selected to next generation: IDs2--> (1109(f=1.0), )
----------Running generation: 556, population size: 1

***** Generation 556 : 0
**Parent Variant: [Variant id: 1111, #gens: 186, #ops: 0, parent:-]

--Child created id: 1112
--Creating new operations for variant [Variant id: 1112, #gens: 186, #ops: 0, parent:1111]
---analyzing modificationPoint position: 31
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON]
--> var from patch: org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java59
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double minValue = 0 ` -topatch--> `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 59, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double minValue = 0 ` -topatch--> `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 1112, #gens: 187, #ops: 1, parent:1111] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1112, errors: [SimplexSolver.java:60: error: call to this must be first statement in constructor
	 */ 	private java.lang.Integer getPivotColumn(org.apache.commons.math.optimization.linear.SimplexTableau tableau) { 		this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON); 		double minValue = 0;
	    	                                                                                                               		    ^]
Ingredient counter is Zero
---Undoing: gnrtn(556): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double minValue = 0 ` -topatch--> `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1111(f=1.0), 1112(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1111(f=1.0), )
----------Running generation: 557, population size: 1

***** Generation 557 : 0
**Parent Variant: [Variant id: 1113, #gens: 186, #ops: 0, parent:-]

--Child created id: 1114
--Creating new operations for variant [Variant id: 1114, #gens: 186, #ops: 0, parent:1113]
---analyzing modificationPoint position: 110
Templates availables25
Attempts Base Ingredients  1 total 25
Attempts Base Ingredients  2 total 25
vars from patch [this.epsilon]
--> var from patch: this.epsilon spoon.support.reflect.code.CtFieldWriteImpl
SameName: final 






































































































double epsilon
SameName: final 






































































































double epsilon
Transforming shadowed variable in epsilon = epsilon
location: SimplexTableau.java105
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.f = f ` -topatch--> `epsilon = epsilon` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 105, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.f = f ` -topatch--> `epsilon = epsilon` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1114, #gens: 186, #ops: 1, parent:1113] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1114, errors: [SimplexTableau.java:109: error: final parameter epsilon may not be assigned
		epsilon = epsilon; 		this.constraints = constraints; 		this.restrictToNonNegative = restrictToNonNegative; 		this.epsilon = epsilon;
		^, SimplexTableau.java:117: error: variable f might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(557): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.f = f ` -topatch--> `epsilon = epsilon` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1113(f=1.0), 1114(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1113(f=1.0), )
----------Running generation: 558, population size: 1

***** Generation 558 : 0
**Parent Variant: [Variant id: 1115, #gens: 186, #ops: 0, parent:-]

--Child created id: 1116
--Creating new operations for variant [Variant id: 1116, #gens: 186, #ops: 0, parent:1115]
---analyzing modificationPoint position: 103
Templates availables18
Attempts Base Ingredients  1 total 18
vars from patch []
location: LinearObjectiveFunction.java66
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.coefficients = coefficients ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearObjectiveFunction line: 66, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.coefficients = coefficients ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1116, #gens: 187, #ops: 1, parent:1115] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1116, errors: [LinearObjectiveFunction.java:110: error: incompatible types: unexpected return value
		return true; 		this.coefficients = coefficients; 		this.constantTerm = constantTerm;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(558): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.coefficients = coefficients ` -topatch--> `return true` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1115(f=1.0), 1116(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1115(f=1.0), )
----------Running generation: 559, population size: 1

***** Generation 559 : 0
**Parent Variant: [Variant id: 1117, #gens: 186, #ops: 0, parent:-]

--Child created id: 1118
--Creating new operations for variant [Variant id: 1118, #gens: 186, #ops: 0, parent:1117]
---analyzing modificationPoint position: 109
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 0 not mutation generated in  this.value = value
---analyzing modificationPoint position: 65
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau, i, epsilon]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: i spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java118
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double multiplier = tableau.getEntry(i, pivotCol) ` -topatch--> `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...]` (spoon.support.reflect.code.CtForImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 118, pointed element: CtForImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double multiplier = tableau.getEntry(i, pivotCol) ` -topatch--> `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...]` (spoon.support.reflect.code.CtForImpl) 

--Summary Creation: for variant [Variant id: 1118, #gens: 187, #ops: 1, parent:1117] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 1118, errors: [SimplexSolver.java:134: error: variable i is already defined in method doIteration(org.apache.commons.math.optimization.linear.SimplexTableau)
				for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) {
				         ^, SimplexSolver.java:136: error: incompatible types: unexpected return value
						return false;
						       ^]
Ingredient counter is Zero
---Undoing: gnrtn(559): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double multiplier = tableau.getEntry(i, pivotCol) ` -topatch--> `for (int i = tableau.getNumObjectiveFunctions(); i < (tableau.getWidth() - 1); i++) { 	if (org.apach[...]` (spoon.support.reflect.code.CtForImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1117(f=1.0), 1118(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1117(f=1.0), )
----------Running generation: 560, population size: 1

***** Generation 560 : 0
**Parent Variant: [Variant id: 1119, #gens: 186, #ops: 0, parent:-]

--Child created id: 1120
--Creating new operations for variant [Variant id: 1120, #gens: 186, #ops: 0, parent:1119]
---analyzing modificationPoint position: 10
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  double[] coefficients = new double[getOriginalNumDecisionVariables()]
---analyzing modificationPoint position: 113
location: SimplexTableau.java108
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.epsilon = epsilon ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1120, #gens: 185, #ops: 1, parent:1119] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 1120, errors: [SimplexTableau.java:117: error: variable epsilon might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(560): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.epsilon = epsilon ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1119(f=1.0), 1120(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1119(f=1.0), )
----------Running generation: 561, population size: 1

***** Generation 561 : 0
**Parent Variant: [Variant id: 1121, #gens: 186, #ops: 0, parent:-]

--Child created id: 1122
--Creating new operations for variant [Variant id: 1122, #gens: 186, #ops: 0, parent:1121]
---analyzing modificationPoint position: 151
---modifPoint 0 not mutation generated in  return this.numArtificialVariables > 0 ? 2 : 1
---analyzing modificationPoint position: 19
Templates availables31
Attempts Base Ingredients  1 total 31
Attempts Base Ingredients  2 total 31
vars from patch []
location: SimplexTableau.java357
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coeffici[...] ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 357, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coeffici[...] ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1122, #gens: 186, #ops: 1, parent:1121] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 1122, errors: [SimplexTableau.java:357: error: incompatible types: missing return value
		} 		return;
		  		^]
Ingredient counter is Zero
---Undoing: gnrtn(561): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coeffici[...] ` -topatch--> `return` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1121(f=1.0), 1122(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1121(f=1.0), )
----------Running generation: 562, population size: 1

***** Generation 562 : 0
**Parent Variant: [Variant id: 1123, #gens: 186, #ops: 0, parent:-]

--Child created id: 1124
--Creating new operations for variant [Variant id: 1124, #gens: 186, #ops: 0, parent:1123]
---analyzing modificationPoint position: 140
Templates availables8
Attempts Base Ingredients  1 total 8
vars from patch []
location: LinearConstraint.java176
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return relationship ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearConstraint line: 176, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return relationship ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1124, #gens: 186, #ops: 1, parent:1123] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1124, errors: [LinearConstraint.java:197: error: incompatible types: boolean cannot be converted to org.apache.commons.math.optimization.linear.Relationship
		return false;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(562): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return relationship ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1123(f=1.0), 1124(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1123(f=1.0), )
----------Running generation: 563, population size: 1

***** Generation 563 : 0
**Parent Variant: [Variant id: 1125, #gens: 186, #ops: 0, parent:-]

--Child created id: 1126
--Creating new operations for variant [Variant id: 1126, #gens: 186, #ops: 0, parent:1125]
---analyzing modificationPoint position: 62
Templates availables7
Attempts Base Ingredients  1 total 7
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java113
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.divideRow(pivotRow, pivotVal) ` -topatch--> `tableau.discardArtificialVariables()` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 113, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.divideRow(pivotRow, pivotVal) ` -topatch--> `tableau.discardArtificialVariables()` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 1126, #gens: 186, #ops: 1, parent:1125] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1126
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1126/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 11, was successful: false, cases executed: 14] ,[]
-Valid?: |false|11|14|[]|, fitness 11.0
Ingredient counter is Zero
---Undoing: gnrtn(563): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.divideRow(pivotRow, pivotVal) ` -topatch--> `tableau.discardArtificialVariables()` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1125(f=1.0), 1126(f=11.0), )
Selected to next generation: IDs2--> (1125(f=1.0), )
----------Running generation: 564, population size: 1

***** Generation 564 : 0
**Parent Variant: [Variant id: 1127, #gens: 186, #ops: 0, parent:-]

--Child created id: 1128
--Creating new operations for variant [Variant id: 1128, #gens: 186, #ops: 0, parent:1127]
---analyzing modificationPoint position: 122
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java130
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[][] matrix = new double[height][width] ` -topatch--> `return tableau.getColumnDimension()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 130, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[][] matrix = new double[height][width] ` -topatch--> `return tableau.getColumnDimension()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1128, #gens: 187, #ops: 1, parent:1127] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1128, errors: [SimplexTableau.java:405: error: illegal start of type
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		^, SimplexTableau.java:405: error: ';' expected
			if ((constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.EQ) || (constraint.getRelationship() == org.apache.commons.math.optimization.linear.Relationship.GEQ)) { 				matrix[0][getArtificialVariableOffset() + artificialVar] = 1; 				matrix[row][getArtificialVariableOffset() + (artificialVar++)] = 1;}} 		return matrix;} 	/**
			                                                                                                                                                                                                       				                                                              				                                                                      		      ^, SimplexTableau.java:409: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	       ^, SimplexTableau.java:409: error: class, interface, or enum expected
	 */ 	public int getNumVariables() { 		return f.getCoefficients().getDimension();} 	/**
	    	                               		                                          ^, SimplexTableau.java:413: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	       ^, SimplexTableau.java:413: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		^, SimplexTableau.java:413: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                      ^, SimplexTableau.java:413: error: class, interface, or enum expected
	 */ 	public java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> getNormalizedConstraints() { 		java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.util.ArrayList<org.apache.commons.math.optimization.linear.LinearConstraint>(); 		for (org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			normalized.add(normalize(constraint));} 		return normalized;} 	/**
	    	                                                                                                                 		                                                                                                                                                                                   		                                                                                              			                                        		                  ^, SimplexTableau.java:419: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                     ^, SimplexTableau.java:419: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                         ^, SimplexTableau.java:419: error: class, interface, or enum expected
	 */ 	private org.apache.commons.math.optimization.linear.LinearConstraint normalize(final org.apache.commons.math.optimization.linear.LinearConstraint constraint) { 		if (constraint.getValue() < 0) { 			return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients().mapMultiply(-1), constraint.getRelationship().oppositeRelationship(), (-1) * constraint.getValue());} 		return new org.apache.commons.math.optimization.linear.LinearConstraint(constraint.getCoefficients(), constraint.getRelationship(), constraint.getValue());} 	/**
	    	                                                                                                                                                                		                                 			                                                                                                                                                                                                           		                                                                                                                                                           ^, SimplexTableau.java:423: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                ^, SimplexTableau.java:423: error: class, interface, or enum expected
	 */ 	protected final int getNumObjectiveFunctions() { 		return this.numArtificialVariables > 0 ? 2 : 1;} 	/**
	    	                                                 		                                               ^, SimplexTableau.java:429: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                          ^, SimplexTableau.java:429: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		^, SimplexTableau.java:429: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		           ^, SimplexTableau.java:429: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				        ^, SimplexTableau.java:429: error: class, interface, or enum expected
	 */ 	private int getConstraintTypeCounts(final org.apache.commons.math.optimization.linear.Relationship relationship) { 		int count = 0; 		for (final org.apache.commons.math.optimization.linear.LinearConstraint constraint : constraints) { 			if (constraint.getRelationship() == relationship) { 				++count;}} 		return count;} 	/**
	    	                                                                                                                   		               		                                                                                                    			                                                    				           		             ^, SimplexTableau.java:432: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                            ^, SimplexTableau.java:432: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                    ^, SimplexTableau.java:432: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			^, SimplexTableau.java:432: error: class, interface, or enum expected
	 */ 	private void initialize() { 		for (int artificialVar = 0; artificialVar < numArtificialVariables; artificialVar++) { 			int row = getBasicRow(getArtificialVariableOffset() + artificialVar); 			subtractRow(0, row, 1.0);}} 	/**
	    	                            		                                                                                       			                                                                      			                         ^, SimplexTableau.java:438: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                         ^, SimplexTableau.java:438: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		^, SimplexTableau.java:438: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                   ^, SimplexTableau.java:438: error: class, interface, or enum expected
	 */ 	protected static double getInvertedCoeffiecientSum(final org.apache.commons.math.linear.RealVector coefficients) { 		double sum = 0; 		for (double coefficient : coefficients.getData()) { 			sum -= coefficient;} 		return sum;} 	/**
	    	                                                                                                                   		                		                                                    			                     		           ^, SimplexTableau.java:444: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                            ^, SimplexTableau.java:444: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col) { 		return getBasicRow(col, true);} 	/**
	    	                                                       		                              ^, SimplexTableau.java:450: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                       ^, SimplexTableau.java:450: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRowForSolution(final int col) { 		return getBasicRow(col, false);} 	/**
	    	                                                                  		                               ^, SimplexTableau.java:456: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                            ^, SimplexTableau.java:456: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		^, SimplexTableau.java:456: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		^, SimplexTableau.java:456: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                    ^, SimplexTableau.java:456: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                     ^, SimplexTableau.java:456: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				        ^, SimplexTableau.java:456: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				            ^, SimplexTableau.java:456: error: class, interface, or enum expected
	 */ 	private java.lang.Integer getBasicRow(final int col, boolean ignoreObjectiveRows) { 		java.lang.Integer row = null; 		int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0; 		for (int i = start; i < getHeight(); i++) { 			if (org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 1.0, epsilon) && (row == null)) { 				row = i;} else if (!org.apache.commons.math.util.MathUtils.equals(getEntry(i, col), 0.0, epsilon)) { 				return null;}} 		return row;} 	/**
	    	                                                                                    		                              		                                                                    		                                            			                                                                                                      				                                                                                                     				               		           ^, SimplexTableau.java:458: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			       ^, SimplexTableau.java:458: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		^, SimplexTableau.java:458: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		^, SimplexTableau.java:458: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		^, SimplexTableau.java:458: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                ^, SimplexTableau.java:458: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                            ^, SimplexTableau.java:458: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                ^, SimplexTableau.java:458: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                 ^, SimplexTableau.java:458: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                      ^, SimplexTableau.java:458: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                       ^, SimplexTableau.java:458: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		^, SimplexTableau.java:458: error: class, interface, or enum expected
	 */ 	protected void discardArtificialVariables() { 		if (numArtificialVariables == 0) { 			return;} 		int width = (getWidth() - numArtificialVariables) - 1; 		int height = getHeight() - 1; 		double[][] matrix = new double[height][width]; 		for (int i = 0; i < height; i++) { 			for (int j = 0; j < (width - 1); j++) { 				matrix[i][j] = getEntry(i + 1, j + 1);} 			matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());} 		this.tableau = new org.apache.commons.math.linear.Array2DRowRealMatrix(matrix); 		this.numArtificialVariables = 0;} 	/**
	    	                                              		                                   			         		                                                       		                              		                                               		                                   			                                        				                                        			                                                         		                                                                                		                                ^, SimplexTableau.java:467: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                             ^, SimplexTableau.java:467: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                 ^, SimplexTableau.java:467: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                      ^, SimplexTableau.java:467: error: class, interface, or enum expected
	 */ 	private void copyArray(final double[] src, final double[] dest, final int destPos) { 		java.lang.System.arraycopy(src, 0, dest, getNumObjectiveFunctions(), src.length);} 	/**
	    	                                                                                     		                                                                                 ^, SimplexTableau.java:471: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		^, SimplexTableau.java:471: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		^, SimplexTableau.java:471: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		^, SimplexTableau.java:471: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		^, SimplexTableau.java:471: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                ^, SimplexTableau.java:471: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                         ^, SimplexTableau.java:471: error: class, interface, or enum expected
	 */ 	protected org.apache.commons.math.optimization.RealPointValuePair getSolution() { 		double[] coefficients = new double[getOriginalNumDecisionVariables()]; 		java.lang.Integer negativeVarBasicRow = getBasicRowForSolution(getNegativeDecisionVariableOffset()); 		double mostNegative = (negativeVarBasicRow == null) ? 0 : getEntry(negativeVarBasicRow, getRhsOffset()); 		java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>(); 		for (int i = 0; i < coefficients.length; i++) { 			java.lang.Integer basicRow = getBasicRowForSolution(getNumObjectiveFunctions() + i); 			if (basicRows.contains(basicRow)) { 				// if multiple variables can take a given value 				// then we choose the first and set the rest equal to 0 				coefficients[i] = 0;} else { 				basicRows.add(basicRow); 				coefficients[i] = (basicRow == null ? 0 : getEntry(basicRow, getRhsOffset())) - (restrictToNonNegative ? 0 : mostNegative);}} 		return new org.apache.commons.math.optimization.RealPointValuePair(coefficients, f.getValue(coefficients));} 	/**
	    	                                                                                  		                                                                       		                                                                                                     		                                                                                                         		                                                                                         		                                                			                                                                                     			^, SimplexTableau.java:478: error: class, interface, or enum expected
	 * @param dividendRow
	          ^, SimplexTableau.java:480: error: class, interface, or enum expected
	 * @param divisor
	          ^, SimplexTableau.java:482: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                               ^, SimplexTableau.java:482: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                      ^, SimplexTableau.java:482: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                ^, SimplexTableau.java:482: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                ^, SimplexTableau.java:482: error: class, interface, or enum expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                        		                                       			                                                                             ^, SimplexTableau.java:495: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                 ^, SimplexTableau.java:495: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                       ^, SimplexTableau.java:495: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                ^, SimplexTableau.java:495: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                ^, SimplexTableau.java:495: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                ^, SimplexTableau.java:495: error: class, interface, or enum expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                                   		                                       			                                                                                                                   ^, SimplexTableau.java:499: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                ^, SimplexTableau.java:499: error: class, interface, or enum expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                                 		                                    ^, SimplexTableau.java:503: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                ^, SimplexTableau.java:503: error: class, interface, or enum expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                                  		                                 ^, SimplexTableau.java:511: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                ^, SimplexTableau.java:511: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                      ^, SimplexTableau.java:511: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                     ^, SimplexTableau.java:511: error: class, interface, or enum expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                                   		                                     ^, SimplexTableau.java:520: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                ^, SimplexTableau.java:520: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                    ^, SimplexTableau.java:520: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                   ^, SimplexTableau.java:520: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                     ^, SimplexTableau.java:520: error: class, interface, or enum expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                     		                                     ^, SimplexTableau.java:524: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:524: error: class, interface, or enum expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                               		                                                         ^, SimplexTableau.java:528: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                ^, SimplexTableau.java:528: error: class, interface, or enum expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                                    		                                                                               ^, SimplexTableau.java:532: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                ^, SimplexTableau.java:532: error: class, interface, or enum expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                     		                      ^, SimplexTableau.java:537: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                ^, SimplexTableau.java:537: error: class, interface, or enum expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                          		                                                                      ^, SimplexTableau.java:547: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                ^, SimplexTableau.java:547: error: class, interface, or enum expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                                		                            ^, SimplexTableau.java:552: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                ^, SimplexTableau.java:552: error: class, interface, or enum expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                        		                                                                               ^, SimplexTableau.java:556: error: class, interface, or enum expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                ^]
Ingredient counter is Zero
---Undoing: gnrtn(564): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[][] matrix = new double[height][width] ` -topatch--> `return tableau.getColumnDimension()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1127(f=1.0), 1128(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1127(f=1.0), )
----------Running generation: 565, population size: 1

***** Generation 565 : 0
**Parent Variant: [Variant id: 1129, #gens: 186, #ops: 0, parent:-]

--Child created id: 1130
--Creating new operations for variant [Variant id: 1130, #gens: 186, #ops: 0, parent:1129]
---analyzing modificationPoint position: 9
---modifPoint 0 not mutation generated in  return getBasicRow(col, false)
---analyzing modificationPoint position: 27
Templates availables7
Attempts Base Ingredients  1 total 7
vars from patch [org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON]
--> var from patch: org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java189
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 189, pointed element: CtInvocationImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 1130, #gens: 186, #ops: 1, parent:1129] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 1130, errors: [SimplexSolver.java:189: error: call to this must be first statement in constructor
		solvePhase1(tableau); 		this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON);
		                      		    ^]
Ingredient counter is Zero
---Undoing: gnrtn(565): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtInvocationImpl) `tableau.discardArtificialVariables() ` -topatch--> `this(org.apache.commons.math.optimization.linear.SimplexSolver.DEFAULT_EPSILON)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1129(f=1.0), 1130(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1129(f=1.0), )
----------Running generation: 566, population size: 1

***** Generation 566 : 0
**Parent Variant: [Variant id: 1131, #gens: 186, #ops: 0, parent:-]

--Child created id: 1132
--Creating new operations for variant [Variant id: 1132, #gens: 186, #ops: 0, parent:1131]
---analyzing modificationPoint position: 111
location: SimplexTableau.java106
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1132, #gens: 185, #ops: 1, parent:1131] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1132, errors: [SimplexTableau.java:117: error: variable constraints might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(566): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.constraints = constraints ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1131(f=1.0), 1132(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1131(f=1.0), )
----------Running generation: 567, population size: 1

***** Generation 567 : 0
**Parent Variant: [Variant id: 1133, #gens: 186, #ops: 0, parent:-]

--Child created id: 1134
--Creating new operations for variant [Variant id: 1134, #gens: 186, #ops: 0, parent:1133]
---analyzing modificationPoint position: 133
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [maximize, f]
--> var from patch: maximize spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: f spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java153
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i) ` -topatch--> `org.apache.commons.math.linear.RealVector objectiveCoefficients =  (maximize) ? f.getCoefficients().[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 153, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i) ` -topatch--> `org.apache.commons.math.linear.RealVector objectiveCoefficients =  (maximize) ? f.getCoefficients().[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1134, #gens: 187, #ops: 1, parent:1133] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1134, errors: [SimplexTableau.java:153: error: variable objectiveCoefficients is already defined in method createTableau(boolean)
		for (int i = 0; i < constraints.size(); i++) { 			org.apache.commons.math.linear.RealVector objectiveCoefficients = (maximize) ? f.getCoefficients().mapMultiply(-1) : f.getCoefficients();
		                                               			                                          ^]
Ingredient counter is Zero
---Undoing: gnrtn(567): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i) ` -topatch--> `org.apache.commons.math.linear.RealVector objectiveCoefficients =  (maximize) ? f.getCoefficients().[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1133(f=1.0), 1134(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1133(f=1.0), )
----------Running generation: 568, population size: 1

***** Generation 568 : 0
**Parent Variant: [Variant id: 1135, #gens: 186, #ops: 0, parent:-]

--Child created id: 1136
--Creating new operations for variant [Variant id: 1136, #gens: 186, #ops: 0, parent:1135]
---analyzing modificationPoint position: 20
Templates availables31
Attempts Base Ingredients  1 total 31
vars from patch [restrictToNonNegative, numDecisionVariables, numSlackVariables, numArtificialVariables, epsilon, f, constraints, tableau]
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numSlackVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: f spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: constraints spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: tableau spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java458
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return getNumObjectiveFunctions() + getOriginalNumDecisionVariables() ` -topatch--> `return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^  numDecisionVariables) ^ [...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 458, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return getNumObjectiveFunctions() + getOriginalNumDecisionVariables() ` -topatch--> `return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^  numDecisionVariables) ^ [...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1136, #gens: 186, #ops: 1, parent:1135] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1136
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1136/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 14] ,[]
-Valid?: |false|12|14|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(568): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return getNumObjectiveFunctions() + getOriginalNumDecisionVariables() ` -topatch--> `return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^  numDecisionVariables) ^ [...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1135(f=1.0), 1136(f=12.0), )
Selected to next generation: IDs2--> (1135(f=1.0), )
----------Running generation: 569, population size: 1

***** Generation 569 : 0
**Parent Variant: [Variant id: 1137, #gens: 186, #ops: 0, parent:-]

--Child created id: 1138
--Creating new operations for variant [Variant id: 1138, #gens: 186, #ops: 0, parent:1137]
---analyzing modificationPoint position: 108
Templates availables25
Attempts Base Ingredients  1 total 25
---modifPoint 0 not mutation generated in  this.relationship = relationship
---analyzing modificationPoint position: 91
location: SimplexTableau.java295
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `row = i ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1138, #gens: 185, #ops: 1, parent:1137] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1138
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1138/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 14, was successful: false, cases executed: 14] ,[]
-Valid?: |false|14|14|[]|, fitness 14.0
Ingredient counter is Zero
---Undoing: gnrtn(569): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `row = i ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1137(f=1.0), 1138(f=14.0), )
Selected to next generation: IDs2--> (1137(f=1.0), )
----------Running generation: 570, population size: 1

***** Generation 570 : 0
**Parent Variant: [Variant id: 1139, #gens: 186, #ops: 0, parent:-]

--Child created id: 1140
--Creating new operations for variant [Variant id: 1140, #gens: 186, #ops: 0, parent:1139]
---analyzing modificationPoint position: 161
Templates availables6
Attempts Base Ingredients  1 total 6
Attempts Base Ingredients  2 total 6
vars from patch [value]
--> var from patch: value spoon.support.reflect.code.CtVariableReadImpl
location: RealPointValuePair.java49
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = point.clone() ` -topatch--> `value = value` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.RealPointValuePair line: 49, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = point.clone() ` -topatch--> `value = value` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1140, #gens: 187, #ops: 1, parent:1139] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1140, errors: [RealPointValuePair.java:52: error: final parameter value may not be assigned
	 */ 	public RealPointValuePair(final double[] point, final double value) { 		this.point = point.clone(); 		value = value; 		this.value = value;}
	    	                                                                      		                            		^]
Ingredient counter is Zero
---Undoing: gnrtn(570): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.point = point.clone() ` -topatch--> `value = value` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1139(f=1.0), 1140(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1139(f=1.0), )
----------Running generation: 571, population size: 1

***** Generation 571 : 0
**Parent Variant: [Variant id: 1141, #gens: 186, #ops: 0, parent:-]

--Child created id: 1142
--Creating new operations for variant [Variant id: 1142, #gens: 186, #ops: 0, parent:1141]
---analyzing modificationPoint position: 21
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1
---analyzing modificationPoint position: 88
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch [ignoreObjectiveRows]
--> var from patch: ignoreObjectiveRows spoon.support.reflect.code.CtVariableReadImpl
location: SimplexTableau.java292
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0 ` -topatch--> `int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 292, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0 ` -topatch--> `int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1142, #gens: 186, #ops: 1, parent:1141] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1142
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1142/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(571): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0 ` -topatch--> `int start = (ignoreObjectiveRows) ? getNumObjectiveFunctions() : 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1141(f=1.0), 1142(f=1.0), )
Selected to next generation: IDs2--> (1141(f=1.0), )
----------Running generation: 572, population size: 1

***** Generation 572 : 0
**Parent Variant: [Variant id: 1143, #gens: 186, #ops: 0, parent:-]

--Child created id: 1144
--Creating new operations for variant [Variant id: 1144, #gens: 186, #ops: 0, parent:1143]
---analyzing modificationPoint position: 0
Templates availables48
Attempts Base Ingredients  1 total 48
Attempts Base Ingredients  2 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java169
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `if (tableau.getNumArtificialVariables() == 0) { 	return true; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 169, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `if (tableau.getNumArtificialVariables() == 0) { 	return true; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 1144, #gens: 187, #ops: 1, parent:1143] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1144, errors: [SimplexSolver.java:169: error: incompatible types: unexpected return value
		if (tableau.getNumArtificialVariables() == 0) { 			if (tableau.getNumArtificialVariables() == 0) { 				return true;}
		                                                			                                                				       ^]
Ingredient counter is Zero
---Undoing: gnrtn(572): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ` -topatch--> `if (tableau.getNumArtificialVariables() == 0) { 	return true; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1143(f=1.0), 1144(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1143(f=1.0), )
----------Running generation: 573, population size: 1

***** Generation 573 : 0
**Parent Variant: [Variant id: 1145, #gens: 186, #ops: 0, parent:-]

--Child created id: 1146
--Creating new operations for variant [Variant id: 1146, #gens: 186, #ops: 0, parent:1145]
---analyzing modificationPoint position: 155
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  ++count
---analyzing modificationPoint position: 28
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [java.lang.Double.MAX_VALUE]
--> var from patch: java.lang.Double.MAX_VALUE spoon.support.reflect.code.CtFieldReadImpl
location: SimplexSolver.java190
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtWhileImpl) `while (!isOptimal(tableau)) { 	doIteration(tableau); }  ` -topatch--> `double minRatio = java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 190, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtWhileImpl) `while (!isOptimal(tableau)) { 	doIteration(tableau); }  ` -topatch--> `double minRatio = java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1146, #gens: 187, #ops: 1, parent:1145] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 1146
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1146/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(573): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtWhileImpl) `while (!isOptimal(tableau)) { 	doIteration(tableau); }  ` -topatch--> `double minRatio = java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1145(f=1.0), 1146(f=1.0), )
Selected to next generation: IDs2--> (1145(f=1.0), )
----------Running generation: 574, population size: 1

***** Generation 574 : 0
**Parent Variant: [Variant id: 1147, #gens: 186, #ops: 0, parent:-]

--Child created id: 1148
--Creating new operations for variant [Variant id: 1148, #gens: 186, #ops: 0, parent:1147]
---analyzing modificationPoint position: 31
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java59
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double minValue = 0 ` -topatch--> `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 59, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double minValue = 0 ` -topatch--> `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 1148, #gens: 187, #ops: 1, parent:1147] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1148, errors: [SimplexSolver.java:170: error: incompatible types: missing return value
			return;
			^]
Ingredient counter is Zero
---Undoing: gnrtn(574): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double minValue = 0 ` -topatch--> `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1147(f=1.0), 1148(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1147(f=1.0), )
----------Running generation: 575, population size: 1

***** Generation 575 : 0
**Parent Variant: [Variant id: 1149, #gens: 186, #ops: 0, parent:-]

--Child created id: 1150
--Creating new operations for variant [Variant id: 1150, #gens: 186, #ops: 0, parent:1149]
---analyzing modificationPoint position: 37
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java64
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `minPos = i ` -topatch--> `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 64, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `minPos = i ` -topatch--> `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 1150, #gens: 187, #ops: 1, parent:1149] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 1150, errors: [SimplexSolver.java:170: error: incompatible types: missing return value
					return;
					^]
Ingredient counter is Zero
---Undoing: gnrtn(575): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `minPos = i ` -topatch--> `// make sure we're in Phase 1 if (tableau.getNumArtificialVariables() == 0) { 	return; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1149(f=1.0), 1150(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1149(f=1.0), )
----------Running generation: 576, population size: 1

***** Generation 576 : 0
**Parent Variant: [Variant id: 1151, #gens: 186, #ops: 0, parent:-]

--Child created id: 1152
--Creating new operations for variant [Variant id: 1152, #gens: 186, #ops: 0, parent:1151]
---analyzing modificationPoint position: 151
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  return this.numArtificialVariables > 0 ? 2 : 1
---analyzing modificationPoint position: 8
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 1 not mutation generated in  return tableau.getSolution()
---analyzing modificationPoint position: 121
---modifPoint 2 not mutation generated in  int height = constraints.size() + getNumObjectiveFunctions()
---analyzing modificationPoint position: 9
---modifPoint 3 not mutation generated in  return getBasicRow(col, false)
---analyzing modificationPoint position: 56
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch [goalType]
--> var from patch: goalType spoon.support.reflect.code.CtVariableReadImpl
location: AbstractLinearOptimizer.java103
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `iterations = 0 ` -topatch--> `goalType = goalType` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.AbstractLinearOptimizer line: 103, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `iterations = 0 ` -topatch--> `goalType = goalType` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1152, #gens: 186, #ops: 1, parent:1151] gen mutated: 1 , gen not mut: 4, gen not applied  0
-The child does NOT compile: 1152, errors: [AbstractLinearOptimizer.java:102: error: final parameter goalType may not be assigned
		this.restrictToNonNegative = restrictToNonNegative; 		goalType = goalType;
		                                                    		^]
Ingredient counter is Zero
---Undoing: gnrtn(576): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `iterations = 0 ` -topatch--> `goalType = goalType` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1151(f=1.0), 1152(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1151(f=1.0), )
----------Running generation: 577, population size: 1

***** Generation 577 : 0
**Parent Variant: [Variant id: 1153, #gens: 186, #ops: 0, parent:-]

--Child created id: 1154
--Creating new operations for variant [Variant id: 1154, #gens: 186, #ops: 0, parent:1153]
---analyzing modificationPoint position: 75
location: MathUtils.java369
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (x < y) { 	return -1; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1154, #gens: 185, #ops: 1, parent:1153] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1154
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1154/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 12, was successful: false, cases executed: 14] ,[]
-Valid?: |false|12|14|[]|, fitness 12.0
Ingredient counter is Zero
---Undoing: gnrtn(577): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (x < y) { 	return -1; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1153(f=1.0), 1154(f=12.0), )
Selected to next generation: IDs2--> (1153(f=1.0), )
----------Running generation: 578, population size: 1

***** Generation 578 : 0
**Parent Variant: [Variant id: 1155, #gens: 186, #ops: 0, parent:-]

--Child created id: 1156
--Creating new operations for variant [Variant id: 1156, #gens: 186, #ops: 0, parent:1155]
---analyzing modificationPoint position: 169
Templates availables120
Attempts Base Ingredients  1 total 120
---modifPoint 0 not mutation generated in  data[row][column] = value
---analyzing modificationPoint position: 137
Templates availables121
Attempts Base Ingredients  1 total 121
vars from patch [restrictToNonNegative, numDecisionVariables, numSlackVariables, numArtificialVariables, epsilon, f, constraints, tableau]
--> var from patch: restrictToNonNegative spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: numDecisionVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numSlackVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: numArtificialVariables spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: f spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: constraints spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: tableau spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java166
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// RHS matrix[row][width - 1] = constraint.getValue() ` -topatch--> `return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^  numDecisionVariables) ^ [...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 166, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// RHS matrix[row][width - 1] = constraint.getValue() ` -topatch--> `return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^  numDecisionVariables) ^ [...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1156, #gens: 187, #ops: 1, parent:1155] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 1156, errors: [SimplexTableau.java:621: error: illegal start of expression
	 * Subtracts a multiple of one row from another.
	 ^, SimplexTableau.java:621: error: ';' expected
	 * Subtracts a multiple of one row from another.
	            ^, SimplexTableau.java:621: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                       ^, SimplexTableau.java:621: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                              ^, SimplexTableau.java:621: error: ';' expected
	 * Subtracts a multiple of one row from another.
	                                       ^, SimplexTableau.java:621: error: <identifier> expected
	 * Subtracts a multiple of one row from another.
	                                                ^, SimplexTableau.java:623: error: illegal start of expression
	 * After application of this operation, the following will hold:
	 ^, SimplexTableau.java:623: error: ';' expected
	 * After application of this operation, the following will hold:
	        ^, SimplexTableau.java:623: error: ';' expected
	 * After application of this operation, the following will hold:
	                       ^, SimplexTableau.java:623: error: not a statement
	 * After application of this operation, the following will hold:
	                             ^, SimplexTableau.java:623: error: ';' expected
	 * After application of this operation, the following will hold:
	                                      ^, SimplexTableau.java:623: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                     ^, SimplexTableau.java:623: error: ';' expected
	 * After application of this operation, the following will hold:
	                                                               ^, SimplexTableau.java:625: error: illegal start of type
	 * </p>
	    ^, SimplexTableau.java:625: error: illegal start of expression
	 * </p>
	     ^, SimplexTableau.java:626: error: illegal start of expression
	 *
	 ^, SimplexTableau.java:627: error: illegal start of expression
	 * @param dividendRow
	 ^, SimplexTableau.java:627: error: illegal start of expression
	 * @param dividendRow
	   ^, SimplexTableau.java:628: error: ';' expected
	 * 		index of the row
	   		     ^, SimplexTableau.java:628: error: ';' expected
	 * 		index of the row
	   		            ^, SimplexTableau.java:629: error: illegal start of expression
	 * @param divisor
	   ^, SimplexTableau.java:630: error: not a statement
	 * 		value of the divisor
	 ^, SimplexTableau.java:630: error: ';' expected
	 * 		value of the divisor
	   		     ^, SimplexTableau.java:630: error: ';' expected
	 * 		value of the divisor
	   		            ^, SimplexTableau.java:631: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	  ^, SimplexTableau.java:631: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	^, SimplexTableau.java:631: error: illegal start of expression
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	          ^, SimplexTableau.java:631: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                        ^, SimplexTableau.java:631: error: <identifier> expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                               ^, SimplexTableau.java:631: error: ';' expected
	 */ 	protected void divideRow(final int dividendRow, final double divisor) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(dividendRow, j, tableau.getEntry(dividendRow, j) / divisor);}} 	/**
	    	                                                                    ^, SimplexTableau.java:644: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	^, SimplexTableau.java:644: error: illegal start of expression
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	          ^, SimplexTableau.java:644: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                          ^, SimplexTableau.java:644: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                ^, SimplexTableau.java:644: error: <identifier> expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                         ^, SimplexTableau.java:644: error: ';' expected
	 */ 	protected void subtractRow(final int minuendRow, final int subtrahendRow, final double multiple) { 		for (int j = 0; j < getWidth(); j++) { 			tableau.setEntry(minuendRow, j, tableau.getEntry(minuendRow, j) - (multiple * tableau.getEntry(subtrahendRow, j)));}} 	/**
	    	                                                                                               ^, SimplexTableau.java:648: error: illegal start of expression
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	^, SimplexTableau.java:648: error: ';' expected
	 */ 	protected final int getWidth() { 		return tableau.getColumnDimension();} 	/**
	    	                            ^, SimplexTableau.java:652: error: illegal start of expression
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	^, SimplexTableau.java:652: error: ';' expected
	 */ 	protected final int getHeight() { 		return tableau.getRowDimension();} 	/**
	    	                             ^, SimplexTableau.java:660: error: illegal start of expression
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	^, SimplexTableau.java:660: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                               ^, SimplexTableau.java:660: error: <identifier> expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                              ^, SimplexTableau.java:660: error: ';' expected
	 */ 	protected final double getEntry(final int row, final int column) { 		return tableau.getEntry(row, column);} 	/**
	    	                                                               ^, SimplexTableau.java:669: error: illegal start of expression
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	^, SimplexTableau.java:669: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                             ^, SimplexTableau.java:669: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                            ^, SimplexTableau.java:669: error: <identifier> expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                              ^, SimplexTableau.java:669: error: ';' expected
	 */ 	protected final void setEntry(final int row, final int column, final double value) { 		tableau.setEntry(row, column, value);} 	/**
	    	                                                                                 ^, SimplexTableau.java:673: error: illegal start of expression
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:673: error: ';' expected
	 */ 	protected final int getSlackVariableOffset() { 		return getNumObjectiveFunctions() + numDecisionVariables;} 	/**
	    	                                          ^, SimplexTableau.java:677: error: illegal start of expression
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	^, SimplexTableau.java:677: error: ';' expected
	 */ 	protected final int getArtificialVariableOffset() { 		return (getNumObjectiveFunctions() + numDecisionVariables) + numSlackVariables;} 	/**
	    	                                               ^, SimplexTableau.java:681: error: illegal start of expression
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	^, SimplexTableau.java:681: error: ';' expected
	 */ 	protected final int getRhsOffset() { 		return getWidth() - 1;} 	/**
	    	                                ^, SimplexTableau.java:686: error: illegal start of expression
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	^, SimplexTableau.java:686: error: ';' expected
	 */ 	protected final int getNegativeDecisionVariableOffset() { 		return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();} 	/**
	    	                                                     ^, SimplexTableau.java:696: error: illegal start of expression
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	^, SimplexTableau.java:696: error: ';' expected
	 */ 	protected final int getNumDecisionVariables() { 		return numDecisionVariables;} 	/**
	    	                                           ^, SimplexTableau.java:701: error: illegal start of expression
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	^, SimplexTableau.java:701: error: ';' expected
	 */ 	protected final int getOriginalNumDecisionVariables() { 		return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;} 	/**
	    	                                                   ^, SimplexTableau.java:705: error: illegal start of expression
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	^, SimplexTableau.java:705: error: ';' expected
	 */ 	protected final int getNumSlackVariables() { 		return numSlackVariables;} 	/**
	    	                                        ^, SimplexTableau.java:709: error: illegal start of expression
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	^, SimplexTableau.java:709: error: ';' expected
	 */ 	protected final int getNumArtificialVariables() { 		return numArtificialVariables;} 	/**
	    	                                             ^, SimplexTableau.java:713: error: illegal start of expression
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	^, SimplexTableau.java:713: error: ';' expected
	 */ 	protected final double[][] getData() { 		return tableau.getData();} 	/**
	    	                                  ^, SimplexTableau.java:715: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                     ^, SimplexTableau.java:715: error: ';' expected
	 */ 	@java.lang.Override 	public boolean equals(java.lang.Object other) { 		if (this == other) { 			return true;} 		if (other == null) { 			return false;} 		try { 			org.apache.commons.math.optimization.linear.SimplexTableau rhs = ((org.apache.commons.math.optimization.linear.SimplexTableau) (other)); 			return (((((((restrictToNonNegative == rhs.restrictToNonNegative) && (numDecisionVariables == rhs.numDecisionVariables)) && (numSlackVariables == rhs.numSlackVariables)) && (numArtificialVariables == rhs.numArtificialVariables)) && (epsilon == rhs.epsilon)) && f.equals(rhs.f)) && constraints.equals(rhs.constraints)) && tableau.equals(rhs.tableau);} catch (java.lang.ClassCastException ex) { 			// ignore exception
	    	                    	                                            ^, SimplexTableau.java:718: error: ';' expected
	 */ 	@java.lang.Override 	public int hashCode() { 		return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^ numDecisionVariables) ^ numSlackVariables) ^ numArtificialVariables) ^ java.lang.Double.valueOf(epsilon).hashCode()) ^ f.hashCode()) ^ constraints.hashCode()) ^ tableau.hashCode();} 	/**
	    	                    	                   ^, SimplexTableau.java:725: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	^, SimplexTableau.java:725: error: illegal start of expression
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	        ^, SimplexTableau.java:725: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                        ^, SimplexTableau.java:725: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                       ^, SimplexTableau.java:725: error: not a statement
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                       ^, SimplexTableau.java:725: error: ';' expected
	 */ 	private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException { 		oos.defaultWriteObject(); 		org.apache.commons.math.linear.MatrixUtils.serializeRealMatrix(tableau, oos);} 	/**
	    	                                                                                   ^, SimplexTableau.java:734: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	^, SimplexTableau.java:734: error: illegal start of expression
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	        ^, SimplexTableau.java:734: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                       ^, SimplexTableau.java:734: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                     ^, SimplexTableau.java:734: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                       ^, SimplexTableau.java:734: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                              ^, SimplexTableau.java:734: error: not a statement
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                       ^, SimplexTableau.java:734: error: ';' expected
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                   ^, SimplexTableau.java:734: error: reached end of file while parsing
	 */ 	private void readObject(java.io.ObjectInputStream ois) throws java.lang.ClassNotFoundException, java.io.IOException { 		ois.defaultReadObject(); 		org.apache.commons.math.linear.MatrixUtils.deserializeRealMatrix(this, "tableau", ois);}}
	    	                                                                                                                      		                         		                                                                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(578): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `// RHS matrix[row][width - 1] = constraint.getValue() ` -topatch--> `return ((((((java.lang.Boolean.valueOf(restrictToNonNegative).hashCode() ^  numDecisionVariables) ^ [...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1155(f=1.0), 1156(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1155(f=1.0), )
----------Running generation: 579, population size: 1

***** Generation 579 : 0
**Parent Variant: [Variant id: 1157, #gens: 186, #ops: 0, parent:-]

--Child created id: 1158
--Creating new operations for variant [Variant id: 1158, #gens: 186, #ops: 0, parent:1157]
---analyzing modificationPoint position: 13
---modifPoint 0 not mutation generated in  java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>()
---analyzing modificationPoint position: 26
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 1 not mutation generated in  solvePhase1(tableau)
---analyzing modificationPoint position: 5
Templates availables18
Attempts Base Ingredients  1 total 18
vars from patch []
location: LinearObjectiveFunction.java92
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients.dotProduct(point) + constantTerm ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.LinearObjectiveFunction line: 92, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients.dotProduct(point) + constantTerm ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1158, #gens: 187, #ops: 1, parent:1157] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 1158, errors: [LinearObjectiveFunction.java:114: error: incompatible types: boolean cannot be converted to double
		return false; 		return coefficients.dotProduct(point) + constantTerm;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(579): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return coefficients.dotProduct(point) + constantTerm ` -topatch--> `return false` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1157(f=1.0), 1158(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1157(f=1.0), )
----------Running generation: 580, population size: 1

***** Generation 580 : 0
**Parent Variant: [Variant id: 1159, #gens: 186, #ops: 0, parent:-]

--Child created id: 1160
--Creating new operations for variant [Variant id: 1160, #gens: 186, #ops: 0, parent:1159]
---analyzing modificationPoint position: 48
Templates availables5
Attempts Base Ingredients  1 total 5
vars from patch [minRatio, ratio]
--> var from patch: minRatio spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: ratio spoon.support.reflect.code.CtVariableReadImpl
location: SimplexSolver.java85
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatio = ratio ` -topatch--> `minRatio = ratio` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexSolver line: 85, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatio = ratio ` -topatch--> `minRatio = ratio` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 1160, #gens: 186, #ops: 1, parent:1159] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1160
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1160/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 14] ,[]
-Valid?: |false|1|14|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(580): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `minRatio = ratio ` -topatch--> `minRatio = ratio` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1159(f=1.0), 1160(f=1.0), )
Selected to next generation: IDs2--> (1159(f=1.0), )
----------Running generation: 581, population size: 1

***** Generation 581 : 0
**Parent Variant: [Variant id: 1161, #gens: 186, #ops: 0, parent:-]

--Child created id: 1162
--Creating new operations for variant [Variant id: 1162, #gens: 186, #ops: 0, parent:1161]
---analyzing modificationPoint position: 20
Templates availables31
Attempts Base Ingredients  1 total 31
---modifPoint 0 not mutation generated in  return getNumObjectiveFunctions() + getOriginalNumDecisionVariables()
---analyzing modificationPoint position: 113
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 1 not mutation generated in  this.epsilon = epsilon
---analyzing modificationPoint position: 13
Templates availables24
Attempts Base Ingredients  1 total 24
vars from patch []
location: SimplexTableau.java343
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>() ` -topatch--> `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 343, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>() ` -topatch--> `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 1162, #gens: 186, #ops: 1, parent:1161] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 1162, errors: [SimplexTableau.java:347: error: cannot find symbol
			if (basicRows.contains(basicRow)) {
			    ^
  symbol:   variable basicRows
  location: class org.apache.commons.math.optimization.linear.SimplexTableau, SimplexTableau.java:352: error: cannot find symbol
				basicRows.add(basicRow);
				^
  symbol:   variable basicRows
  location: class org.apache.commons.math.optimization.linear.SimplexTableau]
Ingredient counter is Zero
---Undoing: gnrtn(581): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.Set<java.lang.Integer> basicRows = new java.util.HashSet<java.lang.Integer>() ` -topatch--> `java.util.List<org.apache.commons.math.optimization.linear.LinearConstraint> normalized = new java.u[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1161(f=1.0), 1162(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1161(f=1.0), )
----------Running generation: 582, population size: 1

***** Generation 582 : 0
**Parent Variant: [Variant id: 1163, #gens: 186, #ops: 0, parent:-]

--Child created id: 1164
--Creating new operations for variant [Variant id: 1164, #gens: 186, #ops: 0, parent:1163]
---analyzing modificationPoint position: 26
location: SimplexSolver.java188
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1164, #gens: 185, #ops: 1, parent:1163] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1164
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1164/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: false, failTest= 5, was successful: false, cases executed: 14] ,[]
-Valid?: |false|5|14|[]|, fitness 5.0
Ingredient counter is Zero
---Undoing: gnrtn(582): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `solvePhase1(tableau) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1163(f=1.0), 1164(f=5.0), )
Selected to next generation: IDs2--> (1163(f=1.0), )
----------Running generation: 583, population size: 1

***** Generation 583 : 0
**Parent Variant: [Variant id: 1165, #gens: 186, #ops: 0, parent:-]

--Child created id: 1166
--Creating new operations for variant [Variant id: 1166, #gens: 186, #ops: 0, parent:1165]
---analyzing modificationPoint position: 72
Templates availables121
Attempts Base Ingredients  1 total 121
---modifPoint 0 not mutation generated in  return numArtificialVariables
---analyzing modificationPoint position: 101
Templates availables31
Attempts Base Ingredients  1 total 31
vars from patch [tableau]
--> var from patch: tableau spoon.support.reflect.code.CtFieldReadImpl
location: SimplexTableau.java415
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getEntry(row, column) ` -topatch--> `return tableau.getData()` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.optimization.linear.SimplexTableau line: 415, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getEntry(row, column) ` -topatch--> `return tableau.getData()` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 1166, #gens: 186, #ops: 1, parent:1165] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 1166, errors: [SimplexTableau.java:506: error: incompatible types: double[][] cannot be converted to double
		return tableau.getData();} 	/**
		                      ^]
Ingredient counter is Zero
---Undoing: gnrtn(583): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return tableau.getEntry(row, column) ` -topatch--> `return tableau.getData()` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1165(f=1.0), 1166(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1165(f=1.0), )
----------Running generation: 584, population size: 1

***** Generation 584 : 0
**Parent Variant: [Variant id: 1167, #gens: 186, #ops: 0, parent:-]

--Child created id: 1168
--Creating new operations for variant [Variant id: 1168, #gens: 186, #ops: 0, parent:1167]
---analyzing modificationPoint position: 76
Templates availables259
Attempts Base Ingredients  1 total 259
---modifPoint 0 not mutation generated in  return -1
---analyzing modificationPoint position: 119
location: SimplexTableau.java126
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// create a matrix of the correct size java.util.List<org.apache.commons.math.optimization.linear.Li[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1168, #gens: 185, #ops: 1, parent:1167] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 1168, errors: [SimplexTableau.java:154: error: cannot find symbol
			org.apache.commons.math.optimization.linear.LinearConstraint constraint = constraints.get(i);
			                                                                                     ^
  symbol:   method get(int)
  location: variable constraints of type java.util.Collection<org.apache.commons.math.optimization.linear.LinearConstraint>]
Ingredient counter is Zero
---Undoing: gnrtn(584): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtLocalVariableImpl) `// create a matrix of the correct size java.util.List<org.apache.commons.math.optimization.linear.Li[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1167(f=1.0), 1168(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1167(f=1.0), )
----------Running generation: 585, population size: 1

***** Generation 585 : 0
**Parent Variant: [Variant id: 1169, #gens: 186, #ops: 0, parent:-]

--Child created id: 1170
--Creating new operations for variant [Variant id: 1170, #gens: 186, #ops: 0, parent:1169]
---analyzing modificationPoint position: 36
location: SimplexSolver.java63
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `minValue = tableau.getEntry(0, i) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 1170, #gens: 185, #ops: 1, parent:1169] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 1170
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1170/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.optimization.linear.SimplexSolverTest
Analyzing output from process
TR: Success: true, failTest= 0, was successful: true, cases executed: 14] ,[]
-Test Failing is passing, Executing regression
Executing process: (timeout524secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/variant-1170/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-82/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.stat.data.LotteryTest  org.apache.commons.math.linear.FieldMatrixImplTest  org.apache.commons.math.ode.sampling.StepNormalizerTest  org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest  org.apache.commons.math.geometry.RotationOrderTest  org.apache.commons.math.analysis.solvers.NewtonSolverTest  org.apache.commons.math.estimation.EstimatedParameterTest  org.apache.commons.math.linear.CholeskyDecompositionImplTest  org.apache.commons.math.linear.Array2DRowRealMatrixTest  org.apache.commons.math.linear.SparseRealMatrixTest  org.apache.commons.math.util.OpenIntToFieldTest  org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest  org.apache.commons.math.optimization.fitting.PolynomialFitterTest  org.apache.commons.math.linear.ArrayRealVectorTest  org.apache.commons.math.distribution.HypergeometricDistributionTest  org.apache.commons.math.random.RandomAdaptorTest  org.apache.commons.math.ode.FirstOrderConverterTest  org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest  org.apache.commons.math.stat.inference.TestUtilsTest  org.apache.commons.math.stat.data.LewTest  org.apache.commons.math.distribution.GammaDistributionTest  org.apache.commons.math.stat.descriptive.rank.MedianTest  org.apache.commons.math.distribution.ZipfDistributionTest  org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest  org.apache.commons.math.stat.CertifiedDataTest  org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest  org.apache.commons.math.complex.FrenchComplexFormatTest  org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest  org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest  org.apache.commons.math.DuplicateSampleAbscissaExceptionTest  org.apache.commons.math.estimation.MinpackTest  org.apache.commons.math.genetics.FixedGenerationCountTest  org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest  org.apache.commons.math.fraction.BigFractionFormatTest  org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest  org.apache.commons.math.random.RandomDataTest  org.apache.commons.math.distribution.FDistributionTest  org.apache.commons.math.FunctionEvaluationExceptionTest  org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest  org.apache.commons.math.stat.inference.TTestFactoryTest  org.apache.commons.math.stat.descriptive.moment.SkewnessTest  org.apache.commons.math.special.GammaTest  org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest  org.apache.commons.math.analysis.integration.RombergIntegratorTest  org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest  org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest  org.apache.commons.math.stat.descriptive.SummaryStatisticsTest  org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest  org.apache.commons.math.stat.descriptive.moment.FirstMomentTest  org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest  org.apache.commons.math.complex.ComplexTest  org.apache.commons.math.distribution.BetaDistributionTest  org.apache.commons.math.special.ErfTest  org.apache.commons.math.special.BetaTest  org.apache.commons.math.ode.nonstiff.GillIntegratorTest  org.apache.commons.math.random.EmpiricalDistributionTest  org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest  org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest  org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest  org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest  org.apache.commons.math.random.AbstractRandomGeneratorTest  org.apache.commons.math.fraction.BigFractionFieldTest  org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest  org.apache.commons.math.genetics.GeneticAlgorithmTestBinary  org.apache.commons.math.linear.BiDiagonalTransformerTest  org.apache.commons.math.util.DefaultTransformerTest  org.apache.commons.math.linear.LUDecompositionImplTest  org.apache.commons.math.random.ValueServerTest  org.apache.commons.math.stat.descriptive.moment.MeanTest  org.apache.commons.math.util.BigRealFieldTest  org.apache.commons.math.linear.QRDecompositionImplTest  org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest  org.apache.commons.math.stat.descriptive.moment.VarianceTest  org.apache.commons.math.genetics.OnePointCrossoverTest  org.apache.commons.math.stat.ranking.NaturalRankingTest  org.apache.commons.math.optimization.linear.SimplexSolverTest  org.apache.commons.math.stat.descriptive.moment.FourthMomentTest  org.apache.commons.math.linear.BlockRealMatrixTest  org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest  org.apache.commons.math.random.MersenneTwisterTest  org.apache.commons.math.genetics.RandomKeyTest  org.apache.commons.math.stat.descriptive.summary.ProductTest  org.apache.commons.math.fraction.FractionTest  org.apache.commons.math.util.OpenIntToDoubleHashMapTest  org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest  org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest  org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest  org.apache.commons.math.genetics.ChromosomeTest  org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest  org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateRealOptimizerTest  org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest  org.apache.commons.math.geometry.Vector3DTest  org.apache.commons.math.stat.descriptive.rank.MinTest  org.apache.commons.math.stat.clustering.EuclideanIntegerPointTest  org.apache.commons.math.linear.FieldLUDecompositionImplTest  org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest  org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest  org.apache.commons.math.transform.FastHadamardTransformerTest  org.apache.commons.math.optimization.fitting.HarmonicFitterTest  org.apache.commons.math.stat.correlation.PearsonsCorrelationTest  org.apache.commons.math.random.GaussianRandomGeneratorTest  org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest  org.apache.commons.math.linear.FrenchRealVectorFormatTest  org.apache.commons.math.fraction.BigFractionTest  org.apache.commons.math.util.ContinuedFractionTest  org.apache.commons.math.util.TransformerMapTest  org.apache.commons.math.analysis.solvers.BisectionSolverTest  org.apache.commons.math.genetics.BinaryChromosomeTest  org.apache.commons.math.linear.BlockFieldMatrixTest  org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest  org.apache.commons.math.linear.SingularValueDecompositionImplTest  org.apache.commons.math.distribution.TDistributionTest  org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest  org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest  org.apache.commons.math.linear.InvalidMatrixExceptionTest  org.apache.commons.math.distribution.BinomialDistributionTest  org.apache.commons.math.linear.EigenSolverTest  org.apache.commons.math.stat.inference.TTestTest  org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest  org.apache.commons.math.random.UniformRandomGeneratorTest  org.apache.commons.math.stat.descriptive.rank.PercentileTest  org.apache.commons.math.analysis.solvers.RiddersSolverTest  org.apache.commons.math.linear.ArrayFieldVectorTest  org.apache.commons.math.ode.ContinuousOutputModelTest  org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest  org.apache.commons.math.optimization.linear.SimplexTableauTest  org.apache.commons.math.ConvergenceExceptionTest  org.apache.commons.math.util.ResizableDoubleArrayTest  org.apache.commons.math.complex.ComplexFormatTest  org.apache.commons.math.linear.RealMatrixImplTest  org.apache.commons.math.stat.descriptive.summary.SumTest  org.apache.commons.math.linear.SparseFieldVectorTest  org.apache.commons.math.genetics.ElitisticListPopulationTest  org.apache.commons.math.stat.descriptive.summary.SumSqTest  org.apache.commons.math.linear.SparseRealVectorTest  org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest  org.apache.commons.math.linear.EigenDecompositionImplTest  org.apache.commons.math.analysis.integration.SimpsonIntegratorTest  org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest  org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations  org.apache.commons.math.stat.descriptive.moment.KurtosisTest  org.apache.commons.math.transform.FastFourierTransformerTest  org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest  org.apache.commons.math.distribution.NormalDistributionTest  org.apache.commons.math.distribution.PoissonDistributionTest  org.apache.commons.math.geometry.Vector3DFormatTest  org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest  org.apache.commons.math.genetics.TournamentSelectionTest  org.apache.commons.math.optimization.general.MinpackTest  org.apache.commons.math.stat.descriptive.SynchronizedMultivariateSummaryStatisticsTest  org.apache.commons.math.analysis.solvers.BrentSolverTest  org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest  org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest  org.apache.commons.math.estimation.WeightedMeasurementTest  org.apache.commons.math.stat.inference.ChiSquareTestTest  org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest  org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest  org.apache.commons.math.linear.MatrixIndexExceptionTest  org.apache.commons.math.genetics.BinaryMutationTest  org.apache.commons.math.fraction.FractionFormatTest  org.apache.commons.math.distribution.PascalDistributionTest  org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest  org.apache.commons.math.util.MathUtilsTest  org.apache.commons.math.complex.ComplexUtilsTest  org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest  org.apache.commons.math.optimization.direct.MultiDirectionalTest  org.apache.commons.math.genetics.FitnessCachingTest  org.apache.commons.math.linear.BigMatrixImplTest  org.apache.commons.math.stat.inference.ChiSquareFactoryTest  org.apache.commons.math.fraction.FractionFieldTest  org.apache.commons.math.stat.descriptive.InteractionTest  org.apache.commons.math.stat.correlation.CovarianceTest  org.apache.commons.math.optimization.univariate.BrentMinimizerTest  org.apache.commons.math.linear.QRSolverTest  org.apache.commons.math.linear.RealVectorFormatTest  org.apache.commons.math.analysis.solvers.LaguerreSolverTest  org.apache.commons.math.linear.CholeskySolverTest  org.apache.commons.math.distribution.WeibullDistributionTest  org.apache.commons.math.stat.StatUtilsTest  org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest  org.apache.commons.math.analysis.solvers.MullerSolverTest  org.apache.commons.math.linear.TriDiagonalTransformerTest  org.apache.commons.math.distribution.ChiSquareDistributionTest  org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest  org.apache.commons.math.transform.FastSineTransformerTest  org.apache.commons.math.stat.inference.OneWayAnovaTest  org.apache.commons.math.transform.FastCosineTransformerTest  org.apache.commons.math.ArgumentOutsideDomainExceptionTest  org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest  org.apache.commons.math.ode.nonstiff.EulerIntegratorTest  org.apache.commons.math.stat.descriptive.rank.MaxTest  org.apache.commons.math.complex.ComplexFieldTest  org.apache.commons.math.stat.descriptive.ListUnivariateImplTest  org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest  org.apache.commons.math.MaxIterationsExceededExceptionTest  org.apache.commons.math.linear.MatrixUtilsTest  org.apache.commons.math.optimization.direct.NelderMeadTest  org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest  org.apache.commons.math.geometry.RotationTest  org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest  org.apache.commons.math.linear.SingularValueSolverTest  org.apache.commons.math.genetics.RandomKeyMutationTest  org.apache.commons.math.util.BigRealTest  org.apache.commons.math.distribution.ExponentialDistributionTest  org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest  org.apache.commons.math.geometry.FrenchVector3DFormatTest  org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest  org.apache.commons.math.stat.regression.SimpleRegressionTest  org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest  org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest  org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest  org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest  org.apache.commons.math.linear.LUSolverTest  org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest  org.apache.commons.math.MathConfigurationExceptionTest  org.apache.commons.math.estimation.GaussNewtonEstimatorTest  org.apache.commons.math.genetics.ListPopulationTest  org.apache.commons.math.MathExceptionTest  org.apache.commons.math.distribution.CauchyDistributionTest  org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest  org.apache.commons.math.linear.SparseFieldMatrixTest  org.apache.commons.math.stat.descriptive.summary.SumLogTest  org.apache.commons.math.stat.FrequencyTest  org.apache.commons.math.stat.descriptive.moment.SecondMomentTest
Analyzing output from process
TR: Success: true, failTest= 0, was successful: true, cases executed: 2059] ,[]
-Valid?: |true|0|2059|[]|, fitness 0.0
-Found Solution, child variant #1170
Ingredient counter is Zero

Attempts to find patch Id 1170: 0, successful 0, failing 0

-Saving child on disk variant #1170 at /Users/marekmazur/astor/./output_astor/AstorMain-math-82//src//variant-1170

-Saving child on disk variant #1170 at /Users/marekmazur/astor/./output_astor/AstorMain-math-82//src//variant-1170_f
---Undoing: gnrtn(585): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `minValue = tableau.getEntry(0, i) ` -topatch--> `-` (null) 
/Users/marekmazur/astor/./output_astor/AstorMain-math-82/src/default_f/org/apache/commons/math/optimization/linear/SimplexSolver.java
/Users/marekmazur/astor/./output_astor/AstorMain-math-82/src/variant-1170_f/org/apache/commons/math/optimization/linear/SimplexSolver.java
diff command : diff -w -b  --label=/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java --label=/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java /Users/marekmazur/astor/./output_astor/AstorMain-math-82/src/default_f/org/apache/commons/math/optimization/linear/SimplexSolver.java /Users/marekmazur/astor/./output_astor/AstorMain-math-82/src/variant-1170_f/org/apache/commons/math/optimization/linear/SimplexSolver.java --unified=0
/Users/marekmazur/astor/./output_astor/AstorMain-math-82/src/default/org/apache/commons/math/optimization/linear/SimplexSolver.java
/Users/marekmazur/astor/./output_astor/AstorMain-math-82/src/variant-1170/org/apache/commons/math/optimization/linear/SimplexSolver.java
diff command : diff -w -b  --label=/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java --label=/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java /Users/marekmazur/astor/./output_astor/AstorMain-math-82/src/default/org/apache/commons/math/optimization/linear/SimplexSolver.java /Users/marekmazur/astor/./output_astor/AstorMain-math-82/src/variant-1170/org/apache/commons/math/optimization/linear/SimplexSolver.java --unified=0
Generation 1
Generation 2
Generation 3
Generation 4
Generation 5
Generation 6
Generation 7
Generation 8
Generation 9
Generation 10
Generation 11
Generation 12
Generation 13
Generation 14
Generation 15
Generation 16
Generation 17
Generation 18
Generation 19
Generation 20
Generation 21
Generation 22
Generation 23
Generation 24
Generation 25
Generation 26
Generation 27
Generation 28
Generation 29
Generation 30
Generation 31
Generation 32
Generation 33
Generation 34
Generation 35
Generation 36
Generation 37
Generation 38
Generation 39
Generation 40
Generation 41
Generation 42
Generation 43
Generation 44
Generation 45
Generation 46
Generation 47
Generation 48
Generation 49
Generation 50
Generation 51
Generation 52
Generation 53
Generation 54
Generation 55
Generation 56
Generation 57
Generation 58
Generation 59
Generation 60
Generation 61
Generation 62
Generation 63
Generation 64
Generation 65
Generation 66
Generation 67
Generation 68
Generation 69
Generation 70
Generation 71
Generation 72
Generation 73
Generation 74
Generation 75
Generation 76
Generation 77
Generation 78
Generation 79
Generation 80
Generation 81
Generation 82
Generation 83
Generation 84
Generation 85
Generation 86
Generation 87
Generation 88
Generation 89
Generation 90
Generation 91
Generation 92
Generation 93
Generation 94
Generation 95
Generation 96
Generation 97
Generation 98
Generation 99
Generation 100
Generation 101
Generation 102
Generation 103
Generation 104
Generation 105
Generation 106
Generation 107
Generation 108
Generation 109
Generation 110
Generation 111
Generation 112
Generation 113
Generation 114
Generation 115
Generation 116
Generation 117
Generation 118
Generation 119
Generation 120
Generation 121
Generation 122
Generation 123
Generation 124
Generation 125
Generation 126
Generation 127
Generation 128
Generation 129
Generation 130
Generation 131
Generation 132
Generation 133
Generation 134
Generation 135
Generation 136
Generation 137
Generation 138
Generation 139
Generation 140
Generation 141
Generation 142
Generation 143
Generation 144
Generation 145
Generation 146
Generation 147
Generation 148
Generation 149
Generation 150
Generation 151
Generation 152
Generation 153
Generation 154
Generation 155
Generation 156
Generation 157
Generation 158
Generation 159
Generation 160
Generation 161
Generation 162
Generation 163
Generation 164
Generation 165
Generation 166
Generation 167
Generation 168
Generation 169
Generation 170
Generation 171
Generation 172
Generation 173
Generation 174
Generation 175
Generation 176
Generation 177
Generation 178
Generation 179
Generation 180
Generation 181
Generation 182
Generation 183
Generation 184
Generation 185
Generation 186
Generation 187
Generation 188
Generation 189
Generation 190
Generation 191
Generation 192
Generation 193
Generation 194
Generation 195
Generation 196
Generation 197
Generation 198
Generation 199
Generation 200
Generation 201
Generation 202
Generation 203
Generation 204
Generation 205
Generation 206
Generation 207
Generation 208
Generation 209
Generation 210
Generation 211
Generation 212
Generation 213
Generation 214
Generation 215
Generation 216
Generation 217
Generation 218
Generation 219
Generation 220
Generation 221
Generation 222
Generation 223
Generation 224
Generation 225
Generation 226
Generation 227
Generation 228
Generation 229
Generation 230
Generation 231
Generation 232
Generation 233
Generation 234
Generation 235
Generation 236
Generation 237
Generation 238
Generation 239
Generation 240
Generation 241
Generation 242
Generation 243
Generation 244
Generation 245
Generation 246
Generation 247
Generation 248
Generation 249
Generation 250
Generation 251
Generation 252
Generation 253
Generation 254
Generation 255
Generation 256
Generation 257
Generation 258
Generation 259
Generation 260
Generation 261
Generation 262
Generation 263
Generation 264
Generation 265
Generation 266
Generation 267
Generation 268
Generation 269
Generation 270
Generation 271
Generation 272
Generation 273
Generation 274
Generation 275
Generation 276
Generation 277
Generation 278
Generation 279
Generation 280
Generation 281
Generation 282
Generation 283
Generation 284
Generation 285
Generation 286
Generation 287
Generation 288
Generation 289
Generation 290
Generation 291
Generation 292
Generation 293
Generation 294
Generation 295
Generation 296
Generation 297
Generation 298
Generation 299
Generation 300
Generation 301
Generation 302
Generation 303
Generation 304
Generation 305
Generation 306
Generation 307
Generation 308
Generation 309
Generation 310
Generation 311
Generation 312
Generation 313
Generation 314
Generation 315
Generation 316
Generation 317
Generation 318
Generation 319
Generation 320
Generation 321
Generation 322
Generation 323
Generation 324
Generation 325
Generation 326
Generation 327
Generation 328
Generation 329
Generation 330
Generation 331
Generation 332
Generation 333
Generation 334
Generation 335
Generation 336
Generation 337
Generation 338
Generation 339
Generation 340
Generation 341
Generation 342
Generation 343
Generation 344
Generation 345
Generation 346
Generation 347
Generation 348
Generation 349
Generation 350
Generation 351
Generation 352
Generation 353
Generation 354
Generation 355
Generation 356
Generation 357
Generation 358
Generation 359
Generation 360
Generation 361
Generation 362
Generation 363
Generation 364
Generation 365
Generation 366
Generation 367
Generation 368
Generation 369
Generation 370
Generation 371
Generation 372
Generation 373
Generation 374
Generation 375
Generation 376
Generation 377
Generation 378
Generation 379
Generation 380
Generation 381
Generation 382
Generation 383
Generation 384
Generation 385
Generation 386
Generation 387
Generation 388
Generation 389
Generation 390
Generation 391
Generation 392
Generation 393
Generation 394
Generation 395
Generation 396
Generation 397
Generation 398
Generation 399
Generation 400
Generation 401
Generation 402
Generation 403
Generation 404
Generation 405
Generation 406
Generation 407
Generation 408
Generation 409
Generation 410
Generation 411
Generation 412
Generation 413
Generation 414
Generation 415
Generation 416
Generation 417
Generation 418
Generation 419
Generation 420
Generation 421
Generation 422
Generation 423
Generation 424
Generation 425
Generation 426
Generation 427
Generation 428
Generation 429
Generation 430
Generation 431
Generation 432
Generation 433
Generation 434
Generation 435
Generation 436
Generation 437
Generation 438
Generation 439
Generation 440
Generation 441
Generation 442
Generation 443
Generation 444
Generation 445
Generation 446
Generation 447
Generation 448
Generation 449
Generation 450
Generation 451
Generation 452
Generation 453
Generation 454
Generation 455
Generation 456
Generation 457
Generation 458
Generation 459
Generation 460
Generation 461
Generation 462
Generation 463
Generation 464
Generation 465
Generation 466
Generation 467
Generation 468
Generation 469
Generation 470
Generation 471
Generation 472
Generation 473
Generation 474
Generation 475
Generation 476
Generation 477
Generation 478
Generation 479
Generation 480
Generation 481
Generation 482
Generation 483
Generation 484
Generation 485
Generation 486
Generation 487
Generation 488
Generation 489
Generation 490
Generation 491
Generation 492
Generation 493
Generation 494
Generation 495
Generation 496
Generation 497
Generation 498
Generation 499
Generation 500
Generation 501
Generation 502
Generation 503
Generation 504
Generation 505
Generation 506
Generation 507
Generation 508
Generation 509
Generation 510
Generation 511
Generation 512
Generation 513
Generation 514
Generation 515
Generation 516
Generation 517
Generation 518
Generation 519
Generation 520
Generation 521
Generation 522
Generation 523
Generation 524
Generation 525
Generation 526
Generation 527
Generation 528
Generation 529
Generation 530
Generation 531
Generation 532
Generation 533
Generation 534
Generation 535
Generation 536
Generation 537
Generation 538
Generation 539
Generation 540
Generation 541
Generation 542
Generation 543
Generation 544
Generation 545
Generation 546
Generation 547
Generation 548
Generation 549
Generation 550
Generation 551
Generation 552
Generation 553
Generation 554
Generation 555
Generation 556
Generation 557
Generation 558
Generation 559
Generation 560
Generation 561
Generation 562
Generation 563
Generation 564
Generation 565
Generation 566
Generation 567
Generation 568
Generation 569
Generation 570
Generation 571
Generation 572
Generation 573
Generation 574
Generation 575
Generation 576
Generation 577
Generation 578
Generation 579
Generation 580
Generation 581
Generation 582
Generation 583
Generation 584
Generation 585
Storing ing JSON at ./diffSolutions/patchinfo_1170.json
./diffSolutions/patchinfo_1170.json:
{"VARIANT_ID":"1170","VALIDATION":"|true|0|2059|[]|","patchhunks":[{"LOCATION":"org.apache.commons.math.optimization.linear.SimplexSolver","PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/defects4j\\\/math-82\\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java","INGREDIENT_SCOPE":"-","ORIGINAL_CODE":"minValue = tableau.getEntry(0, i)","BUGGY_CODE_TYPE":"CtAssignmentImpl|CtBlockImpl","OPERATOR":"RemoveOp","MODIFIED_FILE_PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-82\\\/\\\/src\\\/\\\/variant-1170\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java","LINE":"63","SUSPICIOUNESS":"0,267","MP_RANKING":"36"}],"TIME":"213","GENERATION":"585","FOLDER_SOLUTION_CODE":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-82\\\/\\\/src\\\/\\\/variant-1170","PATCH_DIFF_ORIG":"--- \\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java\\n+++ \\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java\\n@@ -62,2 +62,2 @@\\n-\\t\\t\\tif (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {\\n-\\t\\t\\t\\tminValue = tableau.getEntry(0, i);\\n+\\t\\t\\tif (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)\\n+\\n@@ -65 +65 @@\\n-\\t\\t\\t}\\n+\\n\\n"}
Saving patch info at ./diffSolutions/patchinfo_1170.json
Storing ing JSON at /Users/marekmazur/astor/./diffSolutions/patch_213762_1170.diff
/Users/marekmazur/astor/./diffSolutions/patch_213762_1170.diff:
{"VARIANT_ID":"1170","VALIDATION":"|true|0|2059|[]|","patchhunks":[{"LOCATION":"org.apache.commons.math.optimization.linear.SimplexSolver","PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/defects4j\\\/math-82\\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java","INGREDIENT_SCOPE":"-","ORIGINAL_CODE":"minValue = tableau.getEntry(0, i)","BUGGY_CODE_TYPE":"CtAssignmentImpl|CtBlockImpl","OPERATOR":"RemoveOp","MODIFIED_FILE_PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-82\\\/\\\/src\\\/\\\/variant-1170\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java","LINE":"63","SUSPICIOUNESS":"0,267","MP_RANKING":"36"}],"TIME":"213","GENERATION":"585","FOLDER_SOLUTION_CODE":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-82\\\/\\\/src\\\/\\\/variant-1170","PATCH_DIFF_ORIG":"--- \\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java\\n+++ \\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java\\n@@ -62,2 +62,2 @@\\n-\\t\\t\\tif (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {\\n-\\t\\t\\t\\tminValue = tableau.getEntry(0, i);\\n+\\t\\t\\tif (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)\\n+\\n@@ -65 +65 @@\\n-\\t\\t\\t}\\n+\\n\\n"}
Saving patch diff at /Users/marekmazur/astor/./diffSolutions/patch_213762_1170.diff
End analysis generation - Solutions found:--> (1170(SOLUTION)(f=0.0), )
Variants to next generation from: 2-->IDs: (1170(f=0.0)[SOL], 1169(f=1.0), )
Selected to next generation: IDs2--> (1169(f=1.0), )
Max Solution found 1
Time Repair Loop (s): 213.769
generationsexecuted: 585
----SUMMARY_EXECUTION---
End Repair Search: Found solution
Solution stored at: /Users/marekmazur/astor/./output_astor/AstorMain-math-82//src/
Number solutions:1
f (sol): 0.0, [Variant id: 1170 (SOL) , #gens: 185, #ops: 1, parent:1169]
All variants:
f 1.0, [Variant id: 1171, #gens: 186, #ops: 0, parent:-]
Number suspicious:1

 --SOLUTIONS DESCRIPTION--

 ----
ProgramVariant 1170
 
time(sec)= 213
operation: RemoveOp
location= org.apache.commons.math.optimization.linear.SimplexSolver
line= 63
lineSuspiciousness= 0,267
lineSuspiciousness= 36
original statement= minValue = tableau.getEntry(0, i)
buggy kind= CtAssignmentImpl|CtBlockImpl
fixed statement= 
generation= 585
ingredientScope= -
validation=|true|0|2059|[]|
diffpatch=--- /src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
+++ /src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
@@ -47,2 +47 @@
-			if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {
-				minValue = tableau.getEntry(0, i);
+			if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)
@@ -50 +49 @@
-			}
+


diffpatchoriginal=--- /src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
+++ /src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
@@ -62,2 +62,2 @@
-			if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {
-				minValue = tableau.getEntry(0, i);
+			if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)
+
@@ -65 +65 @@
-			}
+



Astor Output:

General stats:
EXECUTION_IDENTIFIER=
TOTAL_TIME=213.769
NR_GENERATIONS=585
NR_RIGHT_COMPILATIONS=270
NR_FAILLING_COMPILATIONS=315
NR_ERRONEOUS_VARIANCES=null
NR_FAILING_VALIDATION_PROCESS=null
OUTPUT_STATUS=STOP_BY_PATCH_FOUND
FAULT_LOCALIZATION=flacoco

Patch stats:

Patch 1
VARIANT_ID=1170
TIME=213
VALIDATION=|true|0|2059|[]|
GENERATION=585
FOLDER_SOLUTION_CODE=/Users/marekmazur/astor/./output_astor/AstorMain-math-82//src//variant-1170
--Patch Hunk #1
OPERATOR=RemoveOp

LOCATION=org.apache.commons.math.optimization.linear.SimplexSolver

PATH=/Users/marekmazur/astor/defects4j/math-82/src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java

MODIFIED_FILE_PATH=/Users/marekmazur/astor/./output_astor/AstorMain-math-82//src//variant-1170/org/apache/commons/math/optimization/linear/SimplexSolver.java

LINE=63

SUSPICIOUNESS=0,267

MP_RANKING=36

ORIGINAL_CODE=minValue = tableau.getEntry(0, i)

BUGGY_CODE_TYPE=CtAssignmentImpl|CtBlockImpl

PATCH_HUNK_CODE=null

PATCH_HUNK_TYPE=null

INGREDIENT_SCOPE=-

INGREDIENT_PARENT=null

PATCH_DIFF_ORIG=--- /src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
+++ /src/main/java/org/apache/commons/math/optimization/linear/SimplexSolver.java
@@ -62,2 +62,2 @@
-			if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {
-				minValue = tableau.getEntry(0, i);
+			if (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)
+
@@ -65 +65 @@
-			}
+



Storing ing JSON at /Users/marekmazur/astor/./output_astor/AstorMain-math-82//astor_output.json
astor_output:
{"general":{"NR_RIGHT_COMPILATIONS":270,"NR_ERRONEOUS_VARIANCES":null,"EXECUTION_IDENTIFIER":"","FAULT_LOCALIZATION":"flacoco","OUTPUT_STATUS":"STOP_BY_PATCH_FOUND","NR_FAILLING_COMPILATIONS":315,"NR_GENERATIONS":585,"TOTAL_TIME":213.769,"NR_FAILING_VALIDATION_PROCESS":null},"patches":[{"VARIANT_ID":"1170","VALIDATION":"|true|0|2059|[]|","patchhunks":[{"LOCATION":"org.apache.commons.math.optimization.linear.SimplexSolver","PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/defects4j\\\/math-82\\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java","INGREDIENT_SCOPE":"-","ORIGINAL_CODE":"minValue = tableau.getEntry(0, i)","BUGGY_CODE_TYPE":"CtAssignmentImpl|CtBlockImpl","OPERATOR":"RemoveOp","MODIFIED_FILE_PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-82\\\/\\\/src\\\/\\\/variant-1170\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java","LINE":"63","SUSPICIOUNESS":"0,267","MP_RANKING":"36"}],"TIME":"213","GENERATION":"585","FOLDER_SOLUTION_CODE":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-82\\\/\\\/src\\\/\\\/variant-1170","PATCH_DIFF_ORIG":"--- \\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java\\n+++ \\\/src\\\/main\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/optimization\\\/linear\\\/SimplexSolver.java\\n@@ -62,2 +62,2 @@\\n-\\t\\t\\tif (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {\\n-\\t\\t\\t\\tminValue = tableau.getEntry(0, i);\\n+\\t\\t\\tif (org.apache.commons.math.util.MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0)\\n+\\n@@ -65 +65 @@\\n-\\t\\t\\t}\\n+\\n\\n"}]}
Time Total(s): 317.815
