[0] INFO ProjectConfiguration - Version of the JVM used: 1.8.0_202
[0] INFO main - Java version of the JDK used to run tests: 1.8.0_202
[0] INFO main - The compliance of the JVM is:  8
[2] INFO main - command line arguments: [-location  /Users/marekmazur/astor/defects4j/math-85  -mode  jgenprog  -package  org.apache.commons  -jvm4testexecution  /Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin  -failing  org.apache.commons.math.distribution.NormalDistributionTest  -srcjavafolder  /src/java/  -srctestfolder  /src/test/  -binjavafolder  /target/classes/  -bintestfolder  /target/test-classes/  -stopfirst  true  -dependencies  /Users/marekmazur/astor/examples/libs/junit-4.4.jar  -maxgen  1000000  -seed  10  -maxtime  60  -scope  local  -stopfirst  true  -flthreshold  0  -population  1  -faultlocalization  flacoco]
[4] INFO AstorMain - Running Astor on a JDK at /Users/marekmazur/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/jre
Source folders: [/Users/marekmazur/astor/defects4j/math-85/src/java]
Source Test folders: [/Users/marekmazur/astor/defects4j/math-85/src/test]
---- Creating spoon model
Creating model,  Code location from working folder: /Users/marekmazur/astor/defects4j/math-85/src/java
building model: /Users/marekmazur/astor/defects4j/math-85/src/java, compliance level: 8
Classpath (Dependencies) for building SpoonModel: [/Users/marekmazur/astor/examples/libs/junit-4.4.jar]
Spoon Model built from location: /Users/marekmazur/astor/defects4j/math-85/src/java
Number of CtTypes created: 386
Running chosen test detection strategy: CLASSLOADER
Test retrieved from classes: 214
Running Flacoco...
Running spectrum-based fault localization...
FlacocoConfig{workspace='/Users/marekmazur/astor/.', projectPath='/Users/marekmazur/astor/defects4j/math-85', srcJavaDir=[/Users/marekmazur/astor/defects4j/math-85/src/java], srcTestDir=[/Users/marekmazur/astor/defects4j/math-85/src/test], binJavaDir=[/Users/marekmazur/astor/defects4j/math-85/target/classes], binTestDir=[/Users/marekmazur/astor/defects4j/math-85/target/test-classes], classpath='/Users/marekmazur/astor/examples/libs/junit-4.4.jar', customJUnitClasspath='null', customJacocoClasspath='null', mavenHome='/Users/marekmazur/.m2/repository/', coverTests=false, testRunnerVerbose=false, testRunnerTimeoutInMs=3600000, testRunnerJVMArgs='null', threshold=0.0, includeZeros=false, complianceLevel=8, testDetectionStrategy=CLASSLOADER, ignoredTests=[], jUnit4Tests=[org.apache.commons.math.linear.SparseRealMatrixTest#testSerial, org.apache.commons.math.util.MathUtilsTest#testL2DistanceInt, org.apache.commons.math.linear.QRSolverTest#testOverdetermined, org.apache.commons.math.linear.SingularValueSolverTest#testSolveSingularityErrors, org.apache.commons.math.fraction.BigFractionTest#testPow, org.apache.commons.math.linear.BigMatrixImplTest#testSubMatrix, org.apache.commons.math.geometry.RotationTest#testCompose, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testParameters, org.apache.commons.math.linear.RealMatrixImplTest#testAdd, org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowFieldMatrix, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testDimensions, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest#derivativesConsistency, org.apache.commons.math.ode.FirstOrderConverterTest#testSmallStep, org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension4WithSplit, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNotPositiveDefinite, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNonDefaultSetting, org.apache.commons.math.stat.StatUtilsTest#testStats, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testSwissFertility, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeReal, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testCircleFitting, org.apache.commons.math.stat.regression.SimpleRegressionTest#testCorr, org.apache.commons.math.linear.BiDiagonalTransformerTest#testDimensions, org.apache.commons.math.util.MathUtilsTest#testNextAfterSpecialCases, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testPerfectFit, org.apache.commons.math.distribution.TDistributionTest#testConsistency, org.apache.commons.math.stat.inference.TTestTest#testOneSampleT, org.apache.commons.math.random.RandomAdaptorTest#testConfig, org.apache.commons.math.complex.ComplexTest#testConstructor, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testIllConditioned, org.apache.commons.math.complex.ComplexTest#testMultiplyNaN, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testConsistency, org.apache.commons.math.util.MathUtilsTest#testSubAndCheckLong, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRowMatrix, org.apache.commons.math.ConvergenceExceptionTest#testConstructorPatternArguments, org.apache.commons.math.distribution.WeibullDistributionTest#testSampling, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSanityChecks, org.apache.commons.math.linear.BlockRealMatrixTest#testCopyFunctions, org.apache.commons.math.linear.LUSolverTest#testSolveDimensionErrors, org.apache.commons.math.linear.BigMatrixImplTest#testPlusMinus, org.apache.commons.math.distribution.CauchyDistributionTest#testIllegalArguments, org.apache.commons.math.random.ValueServerTest#testReplay, org.apache.commons.math.util.MathUtilsTest#testSignInt, org.apache.commons.math.distribution.GammaDistributionTest#testCumulativeProbabilities, org.apache.commons.math.linear.BlockFieldMatrixTest#testAddFail, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnLarge, org.apache.commons.math.fraction.FractionTest#testDoubleValue, org.apache.commons.math.linear.SparseFieldVectorTest#testMapFunctions, org.apache.commons.math.distribution.HypergeometricDistributionTest#testIllegalArguments, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#checkClone, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest#testTestNegative, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testIncrementation, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewNewtonSolverValid, org.apache.commons.math.complex.ComplexTest#testGetArgumentNaN, org.apache.commons.math.geometry.Vector3DTest#testAdd, org.apache.commons.math.transform.FastSineTransformerTest#testSinFunction, org.apache.commons.math.stat.FrequencyTest#testSerial, org.apache.commons.math.linear.SparseFieldMatrixTest#testGetRowMatrix, org.apache.commons.math.linear.LUDecompositionImplTest#testDimensions, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPlusMinus, org.apache.commons.math.special.BetaTest#testLogBetaPositiveZero, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testString, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testSerial, org.apache.commons.math.linear.RealVectorFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructor, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPermutation, org.apache.commons.math.linear.EigenSolverTest#testSolve, org.apache.commons.math.complex.ComplexTest#testTan, org.apache.commons.math.distribution.PoissonDistributionTest#testDensities, org.apache.commons.math.linear.BigMatrixImplTest#testIsSingular, org.apache.commons.math.MaxIterationsExceededExceptionTest#testSimpleConstructor, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateSin, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonEqualCounts, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testMinStep, org.apache.commons.math.linear.SingularValueSolverTest#testSolveDimensionErrors, org.apache.commons.math.special.BetaTest#testLogBetaNanPositive, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testDeprecated, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testSimplistic, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testTrivial, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testEvaluation, org.apache.commons.math.util.MathUtilsTest#testPermutedArrayHash, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowLarge, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentEquations, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#derivativesConsistency, org.apache.commons.math.linear.SparseRealMatrixTest#testTranspose, org.apache.commons.math.geometry.Vector3DTest#testNorm, org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumn, org.apache.commons.math.complex.ComplexTest#testCosNaN, org.apache.commons.math.linear.BigMatrixImplTest#testPremultiplyVector, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testSinFunction, org.apache.commons.math.linear.CholeskySolverTest#testDeterminant, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataThatIsNotSquare, org.apache.commons.math.genetics.RandomKeyTest#testIsSame, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNotSymmetricMatrixException, org.apache.commons.math.optimization.linear.SimplexTableauTest#testdiscardArtificialVariables, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testEqualsAndHashCode, org.apache.commons.math.random.RandomDataTest#testNextUniform, org.apache.commons.math.fraction.FractionTest#testCompareTo, org.apache.commons.math.linear.RealMatrixImplTest#testSetRow, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testEvaluation, org.apache.commons.math.distribution.NormalDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.fraction.FractionFormatTest#testFormatImproper, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumnVector, org.apache.commons.math.linear.FieldMatrixImplTest#testSetSubMatrix, org.apache.commons.math.stat.CertifiedDataTest#testSummaryStatistics, org.apache.commons.math.stat.descriptive.rank.MinTest#testConsistency, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonUnEqualCounts, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFittingBadInit, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEventsErrors, org.apache.commons.math.linear.RealMatrixImplTest#testToString, org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearFullRank, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testEqualsAndHashCode, org.apache.commons.math.complex.ComplexTest#testDivideInfinite, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testNonInversible, org.apache.commons.math.fraction.FractionTest#testDoubleConstructor, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testCompletelyIncorrectBandwidth, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testCircleFittingBadInit, org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest#serialization, org.apache.commons.math.genetics.RandomKeyMutationTest#testMutate, org.apache.commons.math.optimization.linear.SimplexSolverTest#testEpsilon, org.apache.commons.math.linear.RealMatrixImplTest#testGetRowVector, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest#serialization, org.apache.commons.math.estimation.WeightedMeasurementTest#testTheory, org.apache.commons.math.complex.ComplexTest#testSubtractNaN, org.apache.commons.math.random.RandomAdaptorTest#testNextPoisson, org.apache.commons.math.stat.descriptive.moment.MeanTest#testIncrementation, org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquare, org.apache.commons.math.stat.descriptive.summary.SumTest#testWeightedConsistency, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testNonSquare, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testInconsistentEquations, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleNoDecimals, org.apache.commons.math.complex.ComplexTest#testSqrtRealZero, org.apache.commons.math.linear.RealMatrixImplTest#testDimensions, org.apache.commons.math.fraction.BigFractionFormatTest#testFormatImproperNegative, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testSinFunction, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveBadParameters, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testN0andN1Conditions, org.apache.commons.math.complex.ComplexFormatTest#testGetImaginaryFormat, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSetQuantile, org.apache.commons.math.complex.ComplexTest#testSqrtImaginaryNegative, org.apache.commons.math.stat.FrequencyTest#testAddNonComparable, org.apache.commons.math.linear.BlockRealMatrixTest#testPlusMinus, org.apache.commons.math.linear.BigMatrixImplTest#testConstructors, org.apache.commons.math.complex.ComplexTest#testSinhNaN, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSerial, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testSerial, org.apache.commons.math.linear.RealMatrixImplTest#testSetColumnVector, org.apache.commons.math.linear.BlockRealMatrixTest#testSetRowVector, org.apache.commons.math.stat.inference.TTestFactoryTest#testOneSampleTTest, org.apache.commons.math.fraction.BigFractionTest#testDoubleValue, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testQRColumnsPermutation, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testCopy, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersUnsorted, org.apache.commons.math.stat.descriptive.moment.MeanTest#testSerialization, org.apache.commons.math.linear.EigenDecompositionImplTest#testEigenvalues, org.apache.commons.math.distribution.PascalDistributionTest#testDegenerate1, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testGetSummary, org.apache.commons.math.linear.BlockFieldMatrixTest#testPlusMinus, org.apache.commons.math.complex.FrenchComplexFormatTest#testPositiveInfinity, org.apache.commons.math.distribution.PascalDistributionTest#testDegenerate0, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowLarge, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersSimple, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testGetFromEmpty, org.apache.commons.math.special.BetaTest#testRegularizedBetaNegativePositivePositive, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumn, org.apache.commons.math.stat.descriptive.summary.SumTest#testSerialization, org.apache.commons.math.linear.EigenDecompositionImplTest#testTridiagonal, org.apache.commons.math.linear.SparseFieldVectorTest#testBasicFunctions, org.apache.commons.math.distribution.CauchyDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.linear.SparseRealMatrixTest#testMath209, org.apache.commons.math.distribution.HypergeometricDistributionTest#testCumulativeProbabilities, org.apache.commons.math.linear.FieldMatrixImplTest#testGetVectors, org.apache.commons.math.geometry.RotationTest#testAngles, org.apache.commons.math.linear.BigMatrixImplTest#testEqualsAndHashCode, org.apache.commons.math.analysis.solvers.BrentSolverTest#testQuinticZero, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPoissonLargeMean, org.apache.commons.math.optimization.linear.SimplexSolverTest#testSolutionWithNegativeDecisionVariable, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testMultiplication, org.apache.commons.math.distribution.ChiSquareDistributionTest#testDfAccessors, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstLaguerrePolynomials, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumnMatrix, org.apache.commons.math.ode.ContinuousOutputModelTest#testRandomAccess, org.apache.commons.math.genetics.RandomKeyTest#testIdentityPermutation, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersUnsorted, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testCovarianceConsistency, org.apache.commons.math.distribution.BetaDistributionTest#testDensity, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testIncreasingTolerance, org.apache.commons.math.fraction.BigFractionFormatTest#testParseBig, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testSanityChecks, org.apache.commons.math.linear.SparseRealMatrixTest#testSetSubMatrix, org.apache.commons.math.linear.QRSolverTest#testSolveRankErrors, org.apache.commons.math.geometry.Vector3DTest#testDistanceSq, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterInjection, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumn, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testHermiteDifferentials, org.apache.commons.math.distribution.NormalDistributionTest#testGetMean, org.apache.commons.math.genetics.RandomKeyTest#testComparatorPermutation, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIntegratorControls, org.apache.commons.math.stat.regression.SimpleRegressionTest#testSSENonNegative, org.apache.commons.math.linear.RealMatrixImplTest#testGetEntry, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testSerialization, org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension1, org.apache.commons.math.optimization.linear.SimplexSolverTest#testTrivialModel, org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension2, org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest#testDerivativesConsistency, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testMatricesValues, org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeY, org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeZ, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testCircleFitting, org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension3, org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumnVector, org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeX, org.apache.commons.math.fraction.FractionFormatTest#testParseProperInvalidMinus, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenSeparator, org.apache.commons.math.estimation.MinpackTest#testMinpackOsborne2, org.apache.commons.math.genetics.GeneticAlgorithmTestBinary#test, org.apache.commons.math.complex.ComplexTest#testTanhCritical, org.apache.commons.math.estimation.MinpackTest#testMinpackOsborne1, org.apache.commons.math.geometry.Vector3DTest#testSubtract, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testIllegalArguments, org.apache.commons.math.complex.ComplexFormatTest#testNegativeImaginary, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIncreasingTolerance, org.apache.commons.math.random.RandomAdaptorTest#testNextSample, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetFunctionValueAccuracy, org.apache.commons.math.linear.SparseRealMatrixTest#testTrace, org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnBigMatrix, org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumn, org.apache.commons.math.linear.ArrayFieldVectorTest#testMapFunctions, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testTwoSets, org.apache.commons.math.stat.descriptive.rank.MaxTest#testEqualsAndHashCode, org.apache.commons.math.stat.descriptive.moment.MeanTest#testEvaluation, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testMomentSmallSamples, org.apache.commons.math.linear.BlockFieldMatrixTest#testDimensions, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testEqualsAndHashCode, org.apache.commons.math.linear.SparseRealVectorTest#testMisc, org.apache.commons.math.special.GammaTest#testLogGammaPositive, org.apache.commons.math.stat.StatUtilsTest#testProduct, org.apache.commons.math.complex.ComplexTest#testCosInf, org.apache.commons.math.optimization.general.MinpackTest#testMinpackBrownAlmostLinear, org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest#testRosenbrock, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#derivativesConsistency, org.apache.commons.math.estimation.MinpackTest#testMinpackBrownAlmostLinear, org.apache.commons.math.genetics.BinaryChromosomeTest#testInvalidConstructor, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testMomentSmallSamples, org.apache.commons.math.geometry.Vector3DTest#testNormalize, org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction2, org.apache.commons.math.genetics.RandomKeyTest#testEqualRepr, org.apache.commons.math.complex.FrenchComplexFormatTest#testStaticFormatComplex, org.apache.commons.math.stat.correlation.CovarianceTest#testConstant, org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaTest, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutOnExisting, org.apache.commons.math.complex.ComplexFormatTest#testParseZeroReal, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParsePositiveInfinity, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testExpm1Function, org.apache.commons.math.geometry.Vector3DFormatTest#testParsePositiveInfinity, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testDimensionCheck, org.apache.commons.math.linear.EigenDecompositionImplTest#testDimensions, org.apache.commons.math.geometry.Vector3DTest#testAngular, org.apache.commons.math.util.ResizableDoubleArrayTest#testWithInitialCapacity, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testSinFunction, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testIllConditioned, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorPatternArguments, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testVariableSteps, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSerial, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBracketSin, org.apache.commons.math.util.MathUtilsTest#testGcd, org.apache.commons.math.distribution.GammaDistributionTest#testValues, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeBoth, org.apache.commons.math.linear.FieldMatrixImplTest#testEqualsAndHashCode, org.apache.commons.math.linear.BigMatrixImplTest#testMultiply2, org.apache.commons.math.genetics.FitnessCachingTest#testFitnessCaching, org.apache.commons.math.random.RandomAdaptorTest#testNextUniform, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPremultiplyVector, org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeZ, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSample, org.apache.commons.math.distribution.WeibullDistributionTest#testConsistency, org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateNoSuccesses, org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeX, org.apache.commons.math.stat.FrequencyTest#testAdd, org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeY, org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeImaginary, org.apache.commons.math.distribution.BetaDistributionTest#testCumulative, org.apache.commons.math.random.RandomDataTest#testNextPoisson, org.apache.commons.math.distribution.ChiSquareDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetMatrixLarge, org.apache.commons.math.distribution.HypergeometricDistributionTest#testLargeValues, org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexInf, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#backward, org.apache.commons.math.distribution.BinomialDistributionTest#testDegenerate1, org.apache.commons.math.special.BetaTest#testLogBetaNegativePositive, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testOneSet, org.apache.commons.math.distribution.BinomialDistributionTest#testDegenerate0, org.apache.commons.math.distribution.CauchyDistributionTest#testScale, org.apache.commons.math.util.MathUtilsTest#testSubAndCheck, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testNaNContracts, org.apache.commons.math.fraction.BigFractionTest#testNegate, org.apache.commons.math.complex.ComplexTest#testExpInf, org.apache.commons.math.stat.regression.SimpleRegressionTest#testNorris, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseZeroImaginary, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseIgnoredWhitespace, org.apache.commons.math.genetics.RandomKeyTest#testDecode, org.apache.commons.math.optimization.general.MinpackTest#testMinpackChebyquad, org.apache.commons.math.linear.MatrixUtilsTest#testCreateBigMatrix, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testConstant, org.apache.commons.math.analysis.integration.RombergIntegratorTest#testSinFunction, org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareIndependence, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBadParameters, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRowVector, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testProductAndGeometricMean, org.apache.commons.math.genetics.FixedGenerationCountTest#testIsSatisfied, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGet, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveZeroPositive, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstChebyshevPolynomials, org.apache.commons.math.linear.RealMatrixImplTest#testTrace, org.apache.commons.math.optimization.direct.NelderMeadTest#testMinimizeMaximize, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testCopyConsistency, org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testInconsistentEquations, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testVariableSteps, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testConstructorSingleFormat, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testStepSize, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSpecialValues, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testIncrementation, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testNaN, org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenSuffix, org.apache.commons.math.linear.QRSolverTest#testSolve, org.apache.commons.math.util.OpenIntToFieldTest#testGetAbsent, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testExamples, org.apache.commons.math.util.TransformerMapTest#testTransformers, org.apache.commons.math.util.OpenIntToFieldTest#testIterator, org.apache.commons.math.complex.ComplexFormatTest#testNegativeInfinity, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testConstants, org.apache.commons.math.linear.SparseRealMatrixTest#testMultiply2, org.apache.commons.math.complex.ComplexTest#testNthRoot_normal_fourthRoot, org.apache.commons.math.distribution.ZipfDistributionTest#testCumulativeProbabilities, org.apache.commons.math.special.GammaTest#testDigammaSmallArgs, org.apache.commons.math.linear.BlockRealMatrixTest#testGetVectors, org.apache.commons.math.stat.regression.SimpleRegressionTest#testInference, org.apache.commons.math.stat.descriptive.rank.PercentileTest#test5, org.apache.commons.math.linear.ArrayRealVectorTest#testMisc, org.apache.commons.math.distribution.WeibullDistributionTest#testIllegalArguments, org.apache.commons.math.optimization.direct.NelderMeadTest#testRosenbrock, org.apache.commons.math.linear.SparseFieldMatrixTest#testGetEntry, org.apache.commons.math.stat.regression.SimpleRegressionTest#testClear, org.apache.commons.math.linear.SparseFieldMatrixTest#testAddFail, org.apache.commons.math.special.BetaTest#testRegularizedBetaZeroPositivePositive, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testEvaluation, org.apache.commons.math.optimization.linear.SimplexSolverTest#testInfeasibleSolution, org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testQuinticFunction, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testSetterInjection, org.apache.commons.math.complex.ComplexTest#testEqualsTrue, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testSerial, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testDecreasingSteps, org.apache.commons.math.complex.ComplexTest#testEqualsNull, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testSerialization, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMultiply2, org.apache.commons.math.linear.SparseFieldMatrixTest#testSubMatrix, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArgumentCause, org.apache.commons.math.complex.ComplexTest#testScalarMultiply, org.apache.commons.math.linear.RealMatrixImplTest#testGetRow, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testCopy, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveObsFromSingle, org.apache.commons.math.util.TransformerMapTest#testClear, org.apache.commons.math.complex.ComplexTest#testSqrtPolar, org.apache.commons.math.random.ValueServerTest#testFill, org.apache.commons.math.fraction.BigFractionFormatTest#testFormatZero, org.apache.commons.math.distribution.ChiSquareDistributionTest#testSmallDf, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNan, org.apache.commons.math.util.MathUtilsTest#testL1DistanceInt, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math.stat.descriptive.summary.ProductTest#testSpecialValues, org.apache.commons.math.distribution.NormalDistributionTest#testMath280, org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareLargeTestStatistic, org.apache.commons.math.linear.EigenDecompositionImplTest#testDistinctEigenvalues, org.apache.commons.math.fraction.FractionFormatTest#testDoubleFormat, org.apache.commons.math.linear.BlockFieldMatrixTest#testSerial, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testDimensionCheck, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumn, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testBigStep, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testMath226, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextLong, org.apache.commons.math.linear.BlockRealMatrixTest#testGetRowVector, org.apache.commons.math.linear.BlockRealMatrixTest#testGetRowMatrix, org.apache.commons.math.genetics.ElitisticListPopulationTest#testNextGeneration, org.apache.commons.math.analysis.integration.RombergIntegratorTest#testParameters, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureHex, org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexNaN, org.apache.commons.math.linear.RealVectorFormatTest#testParseZeroX, org.apache.commons.math.ConvergenceExceptionTest#testConstructor, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#checklone, org.apache.commons.math.estimation.MinpackTest#testMinpackHelicalValley, org.apache.commons.math.genetics.ListPopulationTest#testGetFittestChromosome, org.apache.commons.math.linear.RealVectorFormatTest#testForgottenSeparator, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testLongly, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testMomentSmallSamples, org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowBigMatrix, org.apache.commons.math.linear.LUDecompositionImplTest#testLLowerTriangular, org.apache.commons.math.distribution.BinomialDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.util.MathUtilsTest#testLInfDistanceInt, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRowVector, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testNoDependency, org.apache.commons.math.linear.BiDiagonalTransformerTest#testUOrthogonal, org.apache.commons.math.linear.BlockFieldMatrixTest#testPremultiply, org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowRealMatrix, org.apache.commons.math.analysis.solvers.MullerSolverTest#testDeprecated2, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseManyComponents, org.apache.commons.math.special.GammaTest#testRegularizedGammaPositivePositive, org.apache.commons.math.util.TransformerMapTest#testPutTransformer, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeAll, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testQuinticFunction, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testDimension, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testCircleFittingBadInit, org.apache.commons.math.complex.FrenchComplexFormatTest#testFormatObject, org.apache.commons.math.fraction.BigFractionFormatTest#testWholeFormat, org.apache.commons.math.fraction.FractionTest#testEqualsAndHashCode, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testStepSize, org.apache.commons.math.util.MathUtilsTest#testNormalizeAngle, org.apache.commons.math.MathExceptionTest#testConstructorCause, org.apache.commons.math.complex.ComplexTest#testAbsNaN, org.apache.commons.math.util.MathUtilsTest#testIndicatorInt, org.apache.commons.math.linear.BlockRealMatrixTest#testAdd, org.apache.commons.math.linear.RealMatrixImplTest#testScalarAdd, org.apache.commons.math.special.GammaTest#testLogGammaZero, org.apache.commons.math.stat.StatUtilsTest#testPercentile, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareLargeTestStatistic, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testCopyConsistency, org.apache.commons.math.linear.RealMatrixImplTest#testOperate, org.apache.commons.math.stat.descriptive.rank.MaxTest#testMomentSmallSamples, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenPrefix, org.apache.commons.math.stat.correlation.CovarianceTest#testLongly, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testTrivial, org.apache.commons.math.ode.ContinuousOutputModelTest#testErrorConditions, org.apache.commons.math.complex.ComplexFormatTest#testZeroImaginary, org.apache.commons.math.fraction.BigFractionFormatTest#testParseInteger, org.apache.commons.math.complex.ComplexUtilsTest#testPolar2Complex, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testPercentileSetter, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testUnstableDerivative, org.apache.commons.math.complex.ComplexTest#testMath221, org.apache.commons.math.complex.ComplexTest#testSqrt1z, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnDistortedSine, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testCopy, org.apache.commons.math.linear.FieldMatrixImplTest#testSetRowMatrix, org.apache.commons.math.geometry.RotationTest#testQuaternion, org.apache.commons.math.linear.ArrayFieldVectorTest#testDataInOut, org.apache.commons.math.random.RandomAdaptorTest#testNextPermutation, org.apache.commons.math.linear.RealMatrixImplTest#testMultiply, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testRedundantEquations, org.apache.commons.math.linear.QRDecompositionImplTest#testHTrapezoidal, org.apache.commons.math.linear.RealVectorFormatTest#testParseNan, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveNoRoot, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testDimensions, org.apache.commons.math.distribution.GammaDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.analysis.integration.RombergIntegratorTest#testQuinticFunction, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testN0andN1Conditions, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseZeroX, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterIllegalState, org.apache.commons.math.linear.QRDecompositionImplTest#testQOrthogonal, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testMismatch, org.apache.commons.math.fraction.FractionFormatTest#testFormatZero, org.apache.commons.math.distribution.GammaDistributionTest#testConsistency, org.apache.commons.math.distribution.WeibullDistributionTest#testSetBeta, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testDimensionCheck, org.apache.commons.math.linear.BiDiagonalTransformerTest#testMatricesValues, org.apache.commons.math.stat.data.LotteryTest#testCertifiedValues, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testFixedState, org.apache.commons.math.fraction.BigFractionTest#testGetReducedFraction, org.apache.commons.math.linear.RealMatrixImplTest#testAddFail, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testSmallLastStep, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#derivativesConsistency, org.apache.commons.math.util.TransformerMapTest#testContainsClass, org.apache.commons.math.linear.BlockFieldMatrixTest#testSeveralBlocks, org.apache.commons.math.random.EmpiricalDistributionTest#testGridTooFat, org.apache.commons.math.geometry.RotationTest#testMatrix, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testSerialization, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testCopy, org.apache.commons.math.stat.descriptive.summary.ProductTest#testEqualsAndHashCode, org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleWithDecimals, org.apache.commons.math.linear.SparseFieldMatrixTest#testCopyFunctions, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetAbsoluteAccuracy, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testCopyConsistency, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextHex, org.apache.commons.math.linear.BiDiagonalTransformerTest#testVOrthogonal, org.apache.commons.math.optimization.linear.SimplexSolverTest#testMinimization, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testConsistency, org.apache.commons.math.stat.inference.TTestFactoryTest#testTwoSampleTHeterscedastic, org.apache.commons.math.geometry.Vector3DFormatTest#testParseIgnoredWhitespace, org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumnMatrix, org.apache.commons.math.linear.RealVectorFormatTest#testNonDefaultSetting, org.apache.commons.math.util.MathUtilsTest#test0Choose0, org.apache.commons.math.util.DefaultTransformerTest#testTransformString, org.apache.commons.math.distribution.NormalDistributionTest#testSetMean, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testCopy, org.apache.commons.math.linear.EigenDecompositionImplTest#testRepeatedEigenvalue, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testSerial, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testSerialization, org.apache.commons.math.stat.descriptive.rank.MinTest#testIncrementation, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testIncrementation, org.apache.commons.math.genetics.ChromosomeTest#testFindSameChromosome, org.apache.commons.math.linear.BlockFieldMatrixTest#testOperatePremultiplyLarge, org.apache.commons.math.linear.RealVectorFormatTest#testSimpleWithDecimals, org.apache.commons.math.stat.descriptive.rank.MaxTest#testSpecialValues, org.apache.commons.math.linear.FieldMatrixImplTest#testPremultiply, org.apache.commons.math.geometry.Vector3DFormatTest#testNan, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleWithDecimals, org.apache.commons.math.fraction.FractionTest#testDigitLimitConstructor, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressandVariance, org.apache.commons.math.complex.ComplexTest#testConjugate, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testIncrementation, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testChebyshevDifferentials, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNan, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEventsNoConvergence, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetEntry, org.apache.commons.math.distribution.WeibullDistributionTest#testAlpha, org.apache.commons.math.linear.BigMatrixImplTest#testTranspose, org.apache.commons.math.util.MathUtilsTest#testEqualsWithAllowedUlps, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetRelativeAccuracy, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveAccuracySin, org.apache.commons.math.complex.FrenchComplexFormatTest#testNan, org.apache.commons.math.linear.ArrayRealVectorTest#testBasicFunctions, org.apache.commons.math.distribution.BinomialDistributionTest#testDensities, org.apache.commons.math.random.ValueServerTest#testEmptyDigestFile, org.apache.commons.math.fraction.BigFractionTest#testDivide, org.apache.commons.math.linear.BlockRealMatrixTest#testCopySubMatrix, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testConsistency, org.apache.commons.math.random.RandomAdaptorTest#testNextInt, org.apache.commons.math.complex.ComplexFormatTest#testParseZeroImaginary, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testNullIntervalCheck, org.apache.commons.math.special.GammaTest#testTrigamma, org.apache.commons.math.stat.inference.TTestTest#testTwoSampleTHeterscedastic, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testAdd, org.apache.commons.math.linear.BlockRealMatrixTest#testMultiply, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testParameters, org.apache.commons.math.linear.MatrixUtilsTest#testCreateIdentityMatrix, org.apache.commons.math.analysis.solvers.MullerSolverTest#testQuinticFunction, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemove2, org.apache.commons.math.linear.FieldMatrixImplTest#testCopyFunctions, org.apache.commons.math.fraction.BigFractionFormatTest#testParseInvalid, org.apache.commons.math.distribution.NormalDistributionTest#testQuantiles, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#testIncreasingTolerance, org.apache.commons.math.special.GammaTest#testDigammaLargeArgs, org.apache.commons.math.linear.ArrayRealVectorTest#testPredicates, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testVOrthogonal, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testBackward, org.apache.commons.math.distribution.NormalDistributionTest#testCumulativeProbabilities, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRandom, org.apache.commons.math.linear.ArrayFieldVectorTest#testConstructors, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testRemoval, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetMaximalIterationCount, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testWalk, org.apache.commons.math.complex.ComplexTest#testDivideNaN, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnTwoPoints, org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testNoError, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumnVector, org.apache.commons.math.fraction.FractionFormatTest#testParseProper, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testSerialization, org.apache.commons.math.geometry.Vector3DTest#testScalarProduct, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayPatternArgumentsCause, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRowMatrix, org.apache.commons.math.transform.FastCosineTransformerTest#testSinFunction, org.apache.commons.math.stat.descriptive.summary.SumTest#testEqualsAndHashCode, org.apache.commons.math.linear.RealMatrixImplTest#testTranspose, org.apache.commons.math.geometry.RotationTest#testVectorOnePair, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testIncreasingTolerance, org.apache.commons.math.linear.TriDiagonalTransformerTest#testQOrthogonal, org.apache.commons.math.special.BetaTest#testLogBetaPositiveNan, org.apache.commons.math.special.BetaTest#testLogBetaPositiveNegative, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testWrongDerivative, org.apache.commons.math.linear.SparseRealMatrixTest#testSubMatrix, org.apache.commons.math.analysis.solvers.RiddersSolverTest#testQuinticFunction, org.apache.commons.math.distribution.PoissonDistributionTest#testNormalApproximateProbability, org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMaximalTiesMinimum, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testMomentSmallSamples, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest#serialization, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#interpolationInside, org.apache.commons.math.stat.inference.TTestFactoryTest#testOneSampleT, org.apache.commons.math.complex.ComplexTest#testNegateNaN, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNonDefaultSetting, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetVectors, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testStats, org.apache.commons.math.stat.descriptive.moment.MeanTest#testCopy, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testTranspose, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetEntry, org.apache.commons.math.linear.BigMatrixImplTest#testPremultiply, org.apache.commons.math.optimization.linear.SimplexTableauTest#testSerial, org.apache.commons.math.stat.descriptive.rank.MinTest#testMomentSmallSamples, org.apache.commons.math.fraction.BigFractionFormatTest#testDenominatorFormat, org.apache.commons.math.linear.BlockRealMatrixTest#testDimensions, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#serialization, org.apache.commons.math.complex.ComplexTest#testSinNaN, org.apache.commons.math.complex.ComplexTest#testScalarMultiplyInf, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest#testEqualsAndHashCode, org.apache.commons.math.linear.LUDecompositionImplTest#testMatricesValues2, org.apache.commons.math.linear.LUDecompositionImplTest#testMatricesValues1, org.apache.commons.math.stat.descriptive.rank.MaxTest#testIncrementation, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testInconsistentSizes, org.apache.commons.math.linear.RealVectorFormatTest#testNan, org.apache.commons.math.linear.BlockRealMatrixTest#testPremultiplyVector, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testSwissFertility, org.apache.commons.math.genetics.RandomKeyTest#testConstructor2, org.apache.commons.math.genetics.RandomKeyTest#testConstructor1, org.apache.commons.math.complex.ComplexTest#testLogZero, org.apache.commons.math.util.ResizableDoubleArrayTest#testMinMax, org.apache.commons.math.linear.LUDecompositionImplTest#testUUpperTriangular, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testNonInversible, org.apache.commons.math.random.RandomDataTest#testNextLongExtremeValues, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSerialization, org.apache.commons.math.linear.TriDiagonalTransformerTest#testNonSquare, org.apache.commons.math.complex.ComplexTest#testCosh, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testCopyConsistency, org.apache.commons.math.linear.ArrayFieldVectorTest#testSerial, org.apache.commons.math.estimation.MinpackTest#testMinpackLinearFullRank, org.apache.commons.math.geometry.Vector3DFormatTest#testPositiveInfinity, org.apache.commons.math.stat.descriptive.rank.MinTest#testNaNs, org.apache.commons.math.stat.descriptive.summary.SumTest#testCopy, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testKepler, org.apache.commons.math.stat.regression.SimpleRegressionTest#testPerfect, org.apache.commons.math.linear.RealVectorFormatTest#testParseManyComponents, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuinticFunction, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testEqualsAndHashCode, org.apache.commons.math.linear.BlockFieldMatrixTest#testMultiply2, org.apache.commons.math.linear.ArrayFieldVectorTest#testBasicFunctions, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testEqualsAndHashCode, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnLarge, org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeImaginary, org.apache.commons.math.linear.BlockFieldMatrixTest#testAdd, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNonDefaultSetting, org.apache.commons.math.fraction.BigFractionTest#testSubtract, org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumnVector, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testConsistency, org.apache.commons.math.distribution.ChiSquareDistributionTest#testConsistency, org.apache.commons.math.fraction.FractionFormatTest#testParse, org.apache.commons.math.linear.FieldMatrixImplTest#testGetRow, org.apache.commons.math.linear.RealMatrixImplTest#testSetRowMatrix, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMaxIterations, org.apache.commons.math.linear.BigMatrixImplTest#testNorm, org.apache.commons.math.distribution.GammaDistributionTest#testDensity, org.apache.commons.math.fraction.BigFractionTest#testDigitLimitConstructor, org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumnMatrix, org.apache.commons.math.linear.MatrixUtilsTest#testBigFractionConverter, org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeInfinity, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testIllConditioned, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testTwoSets, org.apache.commons.math.linear.ArrayRealVectorTest#testSerial, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testCopyConsistency, org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGet, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMath199, org.apache.commons.math.linear.BlockFieldMatrixTest#testTrace, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testStats, org.apache.commons.math.complex.ComplexFormatTest#testFormatObject, org.apache.commons.math.stat.descriptive.summary.SumTest#testCopyConsistency, org.apache.commons.math.transform.FastFourierTransformerTest#testSinFunction, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#serialization, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testContainsKey, org.apache.commons.math.complex.ComplexFormatTest#testSetRealFormatNull, org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testRedundantUnsolvable, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonBadCounts, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#backward, org.apache.commons.math.analysis.solvers.NewtonSolverTest#testSinZero, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testSmallStep, org.apache.commons.math.linear.RealMatrixImplTest#testSetColumnMatrix, org.apache.commons.math.linear.FieldMatrixImplTest#testToString, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testKepler, org.apache.commons.math.linear.BlockRealMatrixTest#testWalk, org.apache.commons.math.analysis.solvers.MullerSolverTest#testDeprecated, org.apache.commons.math.linear.BlockFieldMatrixTest#testOperateLarge, org.apache.commons.math.stat.descriptive.rank.MinTest#testEvaluation, org.apache.commons.math.optimization.general.MinpackTest#testMinpackBox3Dimensional, org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeImaginary, org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearRank1, org.apache.commons.math.linear.SparseFieldMatrixTest#testGetColumnMatrix, org.apache.commons.math.ConvergenceExceptionTest#testConstructorPatternArgumentsCause, org.apache.commons.math.linear.BlockRealMatrixTest#testOperateLarge, org.apache.commons.math.geometry.Vector3DTest#testDistanceInf, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBigStep, org.apache.commons.math.linear.BlockFieldMatrixTest#testTranspose, org.apache.commons.math.linear.SparseFieldMatrixTest#testPremultiplyVector, org.apache.commons.math.fraction.BigFractionTest#testGoldenRatio, org.apache.commons.math.linear.ArrayRealVectorTest#testDataInOut, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testEvaluation, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testEvaluation, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMaxIterations, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnOnePoint, org.apache.commons.math.ode.sampling.StepNormalizerTest#testBoundaries, org.apache.commons.math.linear.SparseFieldMatrixTest#testPremultiply, org.apache.commons.math.geometry.Vector3DTest#testAngularSeparation, org.apache.commons.math.random.RandomAdaptorTest#testNextSecureInt, org.apache.commons.math.linear.BigMatrixImplTest#testInverse, org.apache.commons.math.linear.SparseRealMatrixTest#testToString, org.apache.commons.math.estimation.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testBackward, org.apache.commons.math.util.DefaultTransformerTest#testTransformDouble, org.apache.commons.math.MathExceptionTest#testSerialization, org.apache.commons.math.util.MathUtilsTest#testCosh, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSetterInjection, org.apache.commons.math.optimization.linear.SimplexTableauTest#testTableauWithNoArtificialVars, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetSubMatrix, org.apache.commons.math.util.MathUtilsTest#testScalb, org.apache.commons.math.genetics.BinaryChromosomeTest#testRandomConstructor, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeZ, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquare, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeY, org.apache.commons.math.estimation.EstimatedParameterTest#testEstimate, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeX, org.apache.commons.math.optimization.general.MinpackTest#testMinpackPowellSingular, org.apache.commons.math.util.OpenIntToFieldTest#testContainsKey, org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testDeprecated, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testUUpperTriangular, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testConsistency, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testCopy, org.apache.commons.math.complex.ComplexTest#testNthRoot_normal_thirdRoot, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNan, org.apache.commons.math.linear.BigMatrixImplTest#testToString, org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath272, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleNoDecimals, org.apache.commons.math.stat.inference.TTestTest#testOneSampleTTest, org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenSeparator, org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest#testSerialization, org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeReal, org.apache.commons.math.optimization.direct.MultiDirectionalTest#testMinimizeMaximize, org.apache.commons.math.linear.SparseRealMatrixTest#testMultiply, org.apache.commons.math.stat.descriptive.summary.ProductTest#testConsistency, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnStraightLine, org.apache.commons.math.complex.ComplexTest#testSinh, org.apache.commons.math.random.RandomAdaptorTest#testNextExponential, org.apache.commons.math.linear.LUSolverTest#testDeterminant, org.apache.commons.math.stat.StatUtilsTest#testArrayIndexConditions, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testNaN, org.apache.commons.math.estimation.WeightedMeasurementTest#testConstruction, org.apache.commons.math.linear.SparseFieldMatrixTest#testMath209, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testVariableSteps, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testGetSummary, org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleNoDecimals, org.apache.commons.math.linear.EigenDecompositionImplTest#testDiagonal, org.apache.commons.math.analysis.solvers.BrentSolverTest#testInitialGuess, org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnRealMatrix, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testDimensionCheck, org.apache.commons.math.fraction.BigFractionFormatTest#testFormat, org.apache.commons.math.util.MathUtilsTest#testSignByte, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testCircleFitting, org.apache.commons.math.ode.ContinuousOutputModelTest#testBoundaries, org.apache.commons.math.complex.ComplexFormatTest#testPaseNegativeInfinity, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNan, org.apache.commons.math.random.RandomAdaptorTest#testNextSecureLong, org.apache.commons.math.distribution.PascalDistributionTest#testCumulativeProbabilities, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSpecialValues, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testConsistency, org.apache.commons.math.stat.descriptive.summary.ProductTest#testCopy, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeInfinity, org.apache.commons.math.stat.StatUtilsTest#testN0andN1Conditions, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testCopySubMatrix, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseZeroX, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#derivativesConsistency, org.apache.commons.math.distribution.TDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.linear.FieldMatrixImplTest#testOperate, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest#testConstructor, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testOperate, org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGetWith0ExpectedSize, org.apache.commons.math.special.ErfTest#testErf3291, org.apache.commons.math.complex.ComplexTest#testHashCode, org.apache.commons.math.linear.SparseRealMatrixTest#testNorm, org.apache.commons.math.linear.ArrayRealVectorTest#testConstructors, org.apache.commons.math.linear.EigenSolverTest#testSolveDimensionErrors, org.apache.commons.math.complex.ComplexTest#testAddNaN, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testFrobeniusNorm, org.apache.commons.math.linear.SparseFieldMatrixTest#testPlusMinus, org.apache.commons.math.optimization.general.MinpackTest#testMinpackOsborne2, org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleWithDecimals, org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumnMatrix, org.apache.commons.math.linear.BlockRealMatrixTest#testTrace, org.apache.commons.math.linear.QRDecompositionImplTest#testRUpperTriangular, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRowVector, org.apache.commons.math.optimization.general.MinpackTest#testMinpackOsborne1, org.apache.commons.math.linear.BlockFieldMatrixTest#testCopySubMatrix, org.apache.commons.math.linear.BlockRealMatrixTest#testOperatePremultiplyLarge, org.apache.commons.math.complex.ComplexTest#testConjugateNaN, org.apache.commons.math.linear.FieldMatrixImplTest#testMath209, org.apache.commons.math.stat.inference.TTestTest#testSmallSamples, org.apache.commons.math.linear.RealMatrixImplTest#testSetSubMatrix, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMoreRows, org.apache.commons.math.linear.BigMatrixImplTest#testMath209, org.apache.commons.math.distribution.ChiSquareDistributionTest#testDensity, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testTwoSets, org.apache.commons.math.complex.FrenchComplexFormatTest#testConstructorSingleFormat, org.apache.commons.math.linear.BlockFieldMatrixTest#testScalarAdd, org.apache.commons.math.complex.ComplexTest#testCos, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenSuffix, org.apache.commons.math.special.BetaTest#testRegularizedBetaNanPositivePositive, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testMinStep, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testQuintic, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#checklone, org.apache.commons.math.linear.BlockFieldMatrixTest#testCopyFunctions, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextIntExtremeValues, org.apache.commons.math.random.RandomDataTest#testConfig, org.apache.commons.math.complex.ComplexTest#testAsinInf, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testNorm, org.apache.commons.math.distribution.PoissonDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testNISTExample, org.apache.commons.math.complex.ComplexTest#testAtanNaN, org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbability2, org.apache.commons.math.complex.ComplexTest#testAcosInf, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testKepler, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testInsufficientBandwidth, org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryCharacterEmpty, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuadraticFunction, org.apache.commons.math.linear.BlockFieldMatrixTest#testExamples, org.apache.commons.math.distribution.HypergeometricDistributionTest#testMoreLargeValues, org.apache.commons.math.complex.ComplexTest#testPow, org.apache.commons.math.linear.RealVectorFormatTest#testFormatObject, org.apache.commons.math.distribution.FDistributionTest#testDfAccessors, org.apache.commons.math.util.MathUtilsTest#testArrayEquals, org.apache.commons.math.stat.descriptive.moment.MeanTest#testEqualsAndHashCode, org.apache.commons.math.optimization.general.MinpackTest#testMinpackBrownDennis, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRow, org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesMaximum, org.apache.commons.math.stat.correlation.CovarianceTest#testSwissFertility, org.apache.commons.math.random.RandomDataTest#testNextSecureInt, org.apache.commons.math.geometry.Vector3DTest#testOrthogonal, org.apache.commons.math.geometry.Vector3DTest#testDistance, org.apache.commons.math.distribution.WeibullDistributionTest#testCumulativeProbabilities, org.apache.commons.math.distribution.CauchyDistributionTest#testSetScale, org.apache.commons.math.stat.FrequencyTest#testEmptyTable, org.apache.commons.math.optimization.direct.NelderMeadTest#testMaxIterations, org.apache.commons.math.linear.RealMatrixImplTest#testMultiply2, org.apache.commons.math.special.BetaTest#testLogBetaZeroPositive, org.apache.commons.math.fraction.BigFractionFormatTest#testFormatNegative, org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientLarge, org.apache.commons.math.random.RandomAdaptorTest#testNextIntExtremeValues, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesAverage, org.apache.commons.math.stat.descriptive.rank.MinTest#testCopyConsistency, org.apache.commons.math.complex.ComplexFormatTest#testConstructorSingleFormat, org.apache.commons.math.linear.LUDecompositionImplTest#testNonSquare, org.apache.commons.math.fraction.FractionFormatTest#testWholeFormat, org.apache.commons.math.distribution.PascalDistributionTest#testFloatingPointArguments, org.apache.commons.math.stat.StatUtilsTest#testVariance, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testNaNContracts, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveNegative, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testSerialization, org.apache.commons.math.geometry.Vector3DTest#testConstructors, org.apache.commons.math.util.MathUtilsTest#testIndicatorLong, org.apache.commons.math.stat.descriptive.rank.MaxTest#testNaNs, org.apache.commons.math.util.TransformerMapTest#testRemoveTransformer, org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleWithDecimals, org.apache.commons.math.linear.MatrixUtilsTest#testcreateFieldMatrix, org.apache.commons.math.linear.BlockRealMatrixTest#testSerial, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeX, org.apache.commons.math.linear.BiDiagonalTransformerTest#testUpperOrLower, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeY, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeZ, org.apache.commons.math.distribution.ExponentialDistributionTest#testIllegalArguments, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersSimple, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testStepSize, org.apache.commons.math.MaxIterationsExceededExceptionTest#testComplexConstructor, org.apache.commons.math.stat.inference.TestUtilsTest#testTwoSampleTHeterscedastic, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testUnstableDerivative, org.apache.commons.math.stat.FrequencyTest#testPcts, org.apache.commons.math.geometry.Vector3DTest#testAngle, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testMomentSmallSamples, org.apache.commons.math.analysis.solvers.MullerSolverTest#testSinFunction2, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewBrentSolverValid, org.apache.commons.math.fraction.FractionFormatTest#testLongFormat, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSerialization, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testStats, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testProductAndGeometricMean, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextGaussian, org.apache.commons.math.linear.BigMatrixImplTest#testLUDecomposition, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testSerial, org.apache.commons.math.random.ValueServerTest#testProperties, org.apache.commons.math.linear.RealMatrixImplTest#testEqualsAndHashCode, org.apache.commons.math.geometry.Vector3DTest#testNorm1, org.apache.commons.math.complex.ComplexTest#testAtanInf, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRowVector, org.apache.commons.math.special.ErfTest#testErf2807, org.apache.commons.math.random.AbstractRandomGeneratorTest#testConfig, org.apache.commons.math.linear.BigMatrixImplTest#testOperate, org.apache.commons.math.util.TransformerMapTest#testClasses, org.apache.commons.math.linear.SparseRealVectorTest#testMapFunctions, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testCovarianceConsistency, org.apache.commons.math.distribution.FDistributionTest#testCumulativeProbabilities, org.apache.commons.math.complex.ComplexTest#testSqrt1zNaN, org.apache.commons.math.stat.correlation.CovarianceTest#testConsistency, org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math.util.MathUtilsTest#testSignShort, org.apache.commons.math.stat.descriptive.summary.SumTest#testSerial, org.apache.commons.math.special.ErfTest#testErf1960, org.apache.commons.math.util.MathUtilsTest#testHash, org.apache.commons.math.linear.RealVectorFormatTest#testSimpleNoDecimals, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, org.apache.commons.math.fraction.FractionTest#testReciprocal, org.apache.commons.math.linear.BlockRealMatrixTest#testNorm, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testEvaluation, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testMomentSmallSamples, org.apache.commons.math.linear.ArrayFieldVectorTest#testMisc, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testDimensions, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testIncrementation, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testInconsistentEquations, org.apache.commons.math.fraction.BigFractionTest#testConstructor, org.apache.commons.math.complex.ComplexTest#testGetArgumentInf, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testStats, org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest#dimension2, org.apache.commons.math.stat.FrequencyTest#testIntegerValues, org.apache.commons.math.linear.SparseRealMatrixTest#testPlusMinus, org.apache.commons.math.linear.QRSolverTest#testSolveDimensionErrors, org.apache.commons.math.estimation.EstimatedParameterTest#testConstruction, org.apache.commons.math.genetics.BinaryMutationTest#testMutate, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math.linear.BigMatrixImplTest#testGetRowMatrix, org.apache.commons.math.fraction.FractionTest#testIntValue, org.apache.commons.math.util.OpenIntToFieldTest#testRemoveAbsent, org.apache.commons.math.complex.ComplexTest#testAcosNaN, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testSerial, org.apache.commons.math.complex.ComplexTest#testAddInfinite, org.apache.commons.math.stat.descriptive.rank.MinTest#testSpecialValues, org.apache.commons.math.linear.SparseRealMatrixTest#testGetVectors, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testQRColumnsPermutation, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testNonInversible, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetSubMatrix, org.apache.commons.math.distribution.FDistributionTest#testLargeDegreesOfFreedom, org.apache.commons.math.linear.FieldMatrixImplTest#testWalk, org.apache.commons.math.complex.ComplexTest#testLog, org.apache.commons.math.distribution.CauchyDistributionTest#testCumulativeProbabilities, org.apache.commons.math.complex.ComplexTest#testScalarMultiplyNaN, org.apache.commons.math.linear.SparseRealMatrixTest#testPremultiplyVector, org.apache.commons.math.linear.MatrixUtilsTest#testCreateRealMatrix, org.apache.commons.math.distribution.GammaDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.linear.BlockRealMatrixTest#testExamples, org.apache.commons.math.genetics.BinaryChromosomeTest#testIsSame, org.apache.commons.math.linear.RealVectorFormatTest#testParseNonDefaultSetting, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testEvaluation, org.apache.commons.math.linear.BlockRealMatrixTest#testAddFail, org.apache.commons.math.estimation.MinpackTest#testMinpackKowalikOsborne, org.apache.commons.math.MathExceptionTest#testConstructorPatternArgumentsCause, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureLong, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testTrivial, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testNoReset, org.apache.commons.math.fraction.BigFractionTest#testBigDecimalValue, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testRootMatrix, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testChebyshevBounds, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testCopy, org.apache.commons.math.util.MathUtilsTest#testMulAndCheckLong, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testConstant, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextUniform, org.apache.commons.math.complex.ComplexFormatTest#testParsePositiveInfinity, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseIgnoredWhitespace, org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumn, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testRedundantEquations, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareIndependence, org.apache.commons.math.util.ResizableDoubleArrayTest#testWithInitialCapacityAndExpansionFactor, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuadraticFunction, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMath209, org.apache.commons.math.linear.RealMatrixImplTest#testPremultiply, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testNullEmpty, org.apache.commons.math.complex.ComplexTest#testEqualsSame, org.apache.commons.math.random.EmpiricalDistributionTest#testNext, org.apache.commons.math.util.MathUtilsTest#testRoundDouble, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumnMatrix, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSerialization, org.apache.commons.math.DuplicateSampleAbscissaExceptionTest#testConstructor, org.apache.commons.math.complex.ComplexTest#testMultiplyNaNInf, org.apache.commons.math.linear.FieldMatrixImplTest#testPlusMinus, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveNull, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinear, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testCopy, org.apache.commons.math.stat.descriptive.rank.MaxTest#testSerial, org.apache.commons.math.complex.ComplexFormatTest#testGetRealFormat, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testNullIntervalCheck, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testPercentile, org.apache.commons.math.util.ResizableDoubleArrayTest#testGetValues, org.apache.commons.math.linear.RealMatrixImplTest#testGetColumnMatrix, org.apache.commons.math.fraction.BigFractionFormatTest#testParseNegative, org.apache.commons.math.complex.ComplexFormatTest#testParseDifferentImaginaryChar, org.apache.commons.math.linear.CholeskySolverTest#testSolve, org.apache.commons.math.fraction.FractionTest#testToString, org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullURL, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonUnEqualCounts, org.apache.commons.math.random.RandomDataTest#testNextExponential, org.apache.commons.math.linear.BlockRealMatrixTest#testFrobeniusNorm, org.apache.commons.math.fraction.BigFractionTest#testEpsilonLimitConstructor, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleWithDecimals, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnVectorLarge, org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientFail, org.apache.commons.math.util.MathUtilsTest#testRoundFloat, org.apache.commons.math.distribution.NormalDistributionTest#testSetStandardDeviation, org.apache.commons.math.stat.descriptive.summary.ProductTest#testMomentSmallSamples, org.apache.commons.math.complex.ComplexTest#testLogInf, org.apache.commons.math.util.ResizableDoubleArrayTest#testSubstitute, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testParameters, org.apache.commons.math.linear.RealMatrixImplTest#testPlusMinus, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregate, org.apache.commons.math.estimation.MinpackTest#testMinpackPowellSingular, org.apache.commons.math.complex.ComplexTest#testCoshNaN, org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testSinMin, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPoisson, org.apache.commons.math.ode.FirstOrderConverterTest#testBigStep, org.apache.commons.math.linear.SparseRealMatrixTest#testPremultiply, org.apache.commons.math.linear.LUSolverTest#testSolve, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testEqualsAndHashCode, org.apache.commons.math.linear.InvalidMatrixExceptionTest#testConstructorMessage, org.apache.commons.math.distribution.NormalDistributionTest#testIllegalArguments, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewBisectionSolverValid, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testIllConditioned, org.apache.commons.math.transform.FastCosineTransformerTest#testParameters, org.apache.commons.math.linear.QRDecompositionImplTest#testAEqualQR, org.apache.commons.math.fraction.BigFractionFormatTest#testNumeratorFormat, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testEvents, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testMath274, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnMatrixLarge, org.apache.commons.math.complex.FrenchComplexFormatTest#testSetRealFormatNull, org.apache.commons.math.special.GammaTest#testLogGammaNegative, org.apache.commons.math.transform.FastFourierTransformerTest#testAdHocData, org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeAll, org.apache.commons.math.linear.BigMatrixImplTest#testCopyFunctions, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstLegendrePolynomials, org.apache.commons.math.linear.BlockFieldMatrixTest#testPremultiplyVector, org.apache.commons.math.fraction.BigFractionTest#testReciprocal, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowVectorLarge, org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbabilityExtremes, org.apache.commons.math.random.RandomAdaptorTest#testNextSecureHex, org.apache.commons.math.random.UniformRandomGeneratorTest#testMeanAndStandardDeviation, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testMismatch, org.apache.commons.math.linear.SparseRealVectorTest#testBasicFunctions, org.apache.commons.math.distribution.PascalDistributionTest#testIllegalArguments, org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testParameters, org.apache.commons.math.linear.RealVectorFormatTest#testPositiveInfinity, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testLLowerTriangular, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testCopy, org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#serialization, org.apache.commons.math.estimation.EstimatedParameterTest#testBound, org.apache.commons.math.transform.FastHadamardTransformerTest#test8Points, org.apache.commons.math.stat.ranking.NaturalRankingTest#testDefault, org.apache.commons.math.util.ResizableDoubleArrayTest#testConstructors, org.apache.commons.math.transform.FastSineTransformerTest#testAdHocData, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleNoDecimals, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddNullYSampleData, org.apache.commons.math.linear.BigMatrixImplTest#testGetVectors, org.apache.commons.math.distribution.TDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAbsentOnExisting, org.apache.commons.math.complex.ComplexFormatTest#testPositiveInfinity, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testControlParameters, org.apache.commons.math.genetics.TournamentSelectionTest#testSelect, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testPopulation, org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregation, org.apache.commons.math.distribution.PoissonDistributionTest#testCumulativeProbabilities, org.apache.commons.math.linear.FieldMatrixImplTest#testGetRowMatrix, org.apache.commons.math.distribution.TDistributionTest#testIllegalArguments, org.apache.commons.math.complex.FrenchComplexFormatTest#testForgottenImaginaryCharacter, org.apache.commons.math.fraction.FractionFormatTest#testFormat, org.apache.commons.math.analysis.solvers.BrentSolverTest#testRootEndpoints, org.apache.commons.math.optimization.general.MinpackTest#testMinpackWatson, org.apache.commons.math.fraction.BigFractionTest#testDoubleConstructor, org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryFormatNull, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#polynomial, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testNoDependency, org.apache.commons.math.optimization.linear.SimplexSolverTest#testModelWithNoArtificialVars, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testCopyFunctions, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testSingular, org.apache.commons.math.linear.FieldMatrixImplTest#testCopySubMatrix, org.apache.commons.math.complex.ComplexTest#testEqualsImaginaryDifference, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testEqualsAndHashCode, org.apache.commons.math.optimization.general.MinpackTest#testMinpackFreudensteinRoth, org.apache.commons.math.fraction.FractionTest#testDivide, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveSingle, org.apache.commons.math.complex.ComplexTest#testAbs, org.apache.commons.math.linear.ArrayRealVectorTest#testMapFunctions, org.apache.commons.math.distribution.WeibullDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.random.RandomAdaptorTest#testAdaptor, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNonSquare, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testCircleFitting, org.apache.commons.math.distribution.ExponentialDistributionTest#testMeanAccessors, org.apache.commons.math.complex.ComplexTest#testGetArgument, org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumnMatrix, org.apache.commons.math.random.RandomDataTest#testNextInt, org.apache.commons.math.stat.inference.TestUtilsTest#testSmallSamples, org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullDoubleArray, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testDecreasingSteps, org.apache.commons.math.linear.BlockRealMatrixTest#testMath209, org.apache.commons.math.estimation.MinpackTest#testMinpackBox3Dimensional, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRowMatrix, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMultiply, org.apache.commons.math.distribution.FDistributionTest#testCumulativeProbabilityExtremes, org.apache.commons.math.complex.ComplexTest#testDivideNaNInf, org.apache.commons.math.linear.FieldMatrixImplTest#testExamples, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRow, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSmallStep, org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension4WithoutSplit, org.apache.commons.math.distribution.ZipfDistributionTest#testIllegalArguments, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetSubMatrix, org.apache.commons.math.complex.ComplexTest#testSqrtNaN, org.apache.commons.math.distribution.NormalDistributionTest#testGetStandardDeviation, org.apache.commons.math.linear.MatrixIndexExceptionTest#testConstructorMessage, org.apache.commons.math.distribution.HypergeometricDistributionTest#testDensities, org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testDecreasingSteps, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testParameters, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareIndependence, org.apache.commons.math.fraction.BigFractionTest#testConstructorDouble, org.apache.commons.math.stat.descriptive.rank.MaxTest#testConsistency, org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsRemovedTiesSequential, org.apache.commons.math.fraction.FractionFormatTest#testNumeratorFormat, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMatricesValues1, org.apache.commons.math.util.OpenIntToFieldTest#testPutAbsentOnExisting, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMatricesValues2, org.apache.commons.math.linear.BigMatrixImplTest#testDeterminant, org.apache.commons.math.complex.ComplexTest#testEqualsClass, org.apache.commons.math.fraction.BigFractionTest#testEqualsAndHashCode, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollision2, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testStepSize, org.apache.commons.math.complex.ComplexTest#testCoshInf, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMoreColumns, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultiple, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetAbsoluteAccuracy, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testSetterInjection, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSingleton, org.apache.commons.math.fraction.BigFractionFormatTest#testLongFormat, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#notEnoughData, org.apache.commons.math.distribution.TDistributionTest#testCumulativeProbabilityAgaintStackOverflow, org.apache.commons.math.stat.inference.TestUtilsTest#testOneWayAnovaUtils, org.apache.commons.math.optimization.direct.NelderMeadTest#testPowell, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testIllConditioned, org.apache.commons.math.geometry.Vector3DFormatTest#testParseZeroX, org.apache.commons.math.util.MathUtilsTest#testL2DistanceDouble, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testLongly, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testHighPercentile, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testMinStep, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveSin, org.apache.commons.math.util.MathUtilsTest#testNextAfter, org.apache.commons.math.linear.LUDecompositionImplTest#testSingular, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonEqualCounts, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemoveFromEmpty, org.apache.commons.math.geometry.Vector3DTest#testCoordinates, org.apache.commons.math.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollisions, org.apache.commons.math.complex.ComplexTest#testAsinNaN, org.apache.commons.math.util.MathUtilsTest#testIndicatorDouble, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testTwoSets, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextLongExtremeValues, org.apache.commons.math.random.RandomDataTest#testNextSecureLong, org.apache.commons.math.linear.SparseFieldMatrixTest#testScalarAdd, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateResiduals, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testOneSet, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testDecreasingSteps, org.apache.commons.math.stat.descriptive.summary.SumTest#testMomentSmallSamples, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testBackward, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testNaN, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersUnsorted, org.apache.commons.math.linear.MatrixUtilsTest#testFractionConverter, org.apache.commons.math.random.RandomAdaptorTest#testNextLong, org.apache.commons.math.stat.descriptive.rank.MinTest#testEqualsAndHashCode, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testPAEqualLU, org.apache.commons.math.distribution.PoissonDistributionTest#testMean, org.apache.commons.math.distribution.PoissonDistributionTest#testIllegalArguments, org.apache.commons.math.stat.descriptive.rank.MedianTest#testCopy, org.apache.commons.math.distribution.FDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.analysis.solvers.BrentSolverTest#testSinZero, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testNonInversible, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testProductAndGeometricMean, org.apache.commons.math.util.ResizableDoubleArrayTest#testEqualsAndHashCode, org.apache.commons.math.complex.ComplexTest#testAdd, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareLargeTestStatistic, org.apache.commons.math.special.GammaTest#testRegularizedGammaNegativePositive, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testBigStep, org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#checkClone, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuinticFunction, org.apache.commons.math.complex.ComplexTest#testSqrtInf, org.apache.commons.math.distribution.NormalDistributionTest#testConsistency, org.apache.commons.math.complex.ComplexTest#testAbsInfinite, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataWithSampleSizeMismatch, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#exceedMaxEvaluations, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testStdErrorConsistency, org.apache.commons.math.fraction.BigFractionFormatTest#testFormatImproper, org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGetWithExpectedSize, org.apache.commons.math.stat.descriptive.rank.MaxTest#testEvaluation, org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_realPartZero, org.apache.commons.math.complex.ComplexTest#testEqualsNaN, org.apache.commons.math.complex.ComplexTest#testSqrtImaginaryZero, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math.stat.descriptive.moment.MeanTest#testCopyConsistency, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testEvaluation, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextFloat, org.apache.commons.math.stat.inference.TTestTest#testPaired, org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testImpossibleSerialization, org.apache.commons.math.complex.FrenchComplexFormatTest#testZeroImaginary, org.apache.commons.math.linear.QRDecompositionImplTest#testDimensions, org.apache.commons.math.distribution.GammaDistributionTest#testParameterAccessors, org.apache.commons.math.random.ValueServerTest#testNextDigestFail, org.apache.commons.math.fraction.BigFractionFormatTest#testParseProperInvalidMinus, org.apache.commons.math.complex.ComplexFormatTest#testNegativeBoth, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testMomentSmallSamples, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testEqualsAndHashCode, org.apache.commons.math.linear.SparseRealVectorTest#testDataInOut, org.apache.commons.math.random.RandomAdaptorTest#testNextUniformExclusiveEndpoints, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testBackward, org.apache.commons.math.complex.FrenchComplexFormatTest#testParsePositiveInfinity, org.apache.commons.math.stat.StatUtilsTest#testMax, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testCopyConsistency, org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testSerialization, org.apache.commons.math.stat.correlation.CovarianceTest#testInsufficientData, org.apache.commons.math.optimization.linear.SimplexTableauTest#testInitialization, org.apache.commons.math.linear.EigenSolverTest#testNonInvertible, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveXY, org.apache.commons.math.linear.RealMatrixImplTest#testGetRowMatrix, org.apache.commons.math.ode.ContinuousOutputModelTest#testModelsMerging, org.apache.commons.math.stat.FrequencyTest#testToString, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testEqualsAndHashCode, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNonDefaultSetting, org.apache.commons.math.complex.ComplexTest#testPowInf, org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest#testValues, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#noReset, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testRedundantEquations, org.apache.commons.math.stat.descriptive.summary.ProductTest#testEvaluation, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimals, org.apache.commons.math.transform.FastCosineTransformerTest#testAdHocData, org.apache.commons.math.distribution.ChiSquareDistributionTest#testIllegalArguments, org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryCharacterNull, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testIncrementation, org.apache.commons.math.complex.ComplexTest#testTanh, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testConsistency, org.apache.commons.math.stat.descriptive.summary.ProductTest#testSerial, org.apache.commons.math.stat.descriptive.summary.ProductTest#testSerialization, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testIncrementation, org.apache.commons.math.linear.RealMatrixImplTest#testGetColumn, org.apache.commons.math.linear.RealMatrixImplTest#testMath209, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#serialization, org.apache.commons.math.util.OpenIntToFieldTest#testRemove2, org.apache.commons.math.complex.ComplexTest#testSqrtRealNegative, org.apache.commons.math.MathConfigurationExceptionTest#testConstructorPatternArguments, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testUOrthogonal, org.apache.commons.math.linear.BiDiagonalTransformerTest#testBBiDiagonal, org.apache.commons.math.linear.BigMatrixImplTest#testGetColumnMatrix, org.apache.commons.math.complex.ComplexTest#testpowNull, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testBigStep, org.apache.commons.math.stat.descriptive.summary.SumTest#testSpecialValues, org.apache.commons.math.linear.BlockRealMatrixTest#testScalarAdd, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSerialization, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testEqualsAndHashCode, org.apache.commons.math.fraction.FractionTest#testConstructor, org.apache.commons.math.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetMatrixLarge, org.apache.commons.math.linear.EigenDecompositionImplTest#testVOrthogonal, org.apache.commons.math.distribution.PoissonDistributionTest#testDegenerateInverseCumulativeProbability, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#polynomial, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSinZero, org.apache.commons.math.fraction.FractionTest#testGetReducedFraction, org.apache.commons.math.distribution.FDistributionTest#testConsistency, org.apache.commons.math.analysis.solvers.BrentSolverTest#testDeprecated, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testMatricesValues2, org.apache.commons.math.fraction.FractionFormatTest#testParseInteger, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testStaticFormatRealVectorImpl, org.apache.commons.math.estimation.MinpackTest#testMinpackMeyer, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testMatricesValues1, org.apache.commons.math.random.RandomAdaptorTest#testNextGaussian, org.apache.commons.math.linear.FieldMatrixImplTest#testSerial, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveNanPositive, org.apache.commons.math.linear.FieldMatrixImplTest#testDimensions, org.apache.commons.math.linear.RealMatrixImplTest#testGetSubMatrix, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetMaximalIterationCount, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterInjection, org.apache.commons.math.linear.TriDiagonalTransformerTest#testTTriDiagonal, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testRedundantEquations, org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveAccuracyNull, org.apache.commons.math.complex.ComplexTest#testConstructorNaN, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMoreEstimatedParametersSimple, org.apache.commons.math.stat.descriptive.summary.SumTest#testConsistency, org.apache.commons.math.linear.MatrixUtilsTest#testCreateBigIdentityMatrix, org.apache.commons.math.linear.SparseRealVectorTest#testPredicates, org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testLinearFunction, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositivePositive, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testStepSize, org.apache.commons.math.linear.SparseFieldMatrixTest#testOperate, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testCopyConsistency, org.apache.commons.math.linear.BlockRealMatrixTest#testSetRow, org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest#testMeanAndCorrelation, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testConcurrentModification, org.apache.commons.math.stat.descriptive.summary.ProductTest#testCopyConsistency, org.apache.commons.math.linear.SparseFieldMatrixTest#testTranspose, org.apache.commons.math.optimization.general.MinpackTest#testMinpackRosenbrok, org.apache.commons.math.util.MathUtilsTest#testSignFloat, org.apache.commons.math.util.MathUtilsTest#testSignDouble, org.apache.commons.math.fraction.FractionFormatTest#testParseInvalid, org.apache.commons.math.linear.FieldMatrixImplTest#testSetRowVector, org.apache.commons.math.geometry.RotationTest#testVectorTwoPairs, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetVectors, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#serialization, org.apache.commons.math.distribution.NormalDistributionTest#testExtremeValues, org.apache.commons.math.linear.LUSolverTest#testThreshold, org.apache.commons.math.geometry.RotationOrderTest#testName, org.apache.commons.math.util.MathUtilsTest#testIndicatorShort, org.apache.commons.math.distribution.PoissonDistributionTest#testLargeMeanCumulativeProbability, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testTrivial, org.apache.commons.math.util.OpenIntToFieldTest#testPutKeysWithCollisions, org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeInfinity, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#testMinStep, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testConsistency, org.apache.commons.math.complex.ComplexFormatTest#testStaticFormatComplex, org.apache.commons.math.linear.TriDiagonalTransformerTest#testAEqualQTQt, org.apache.commons.math.stat.descriptive.rank.MaxTest#testSerialization, org.apache.commons.math.util.MathUtilsTest#testSinh, org.apache.commons.math.complex.FrenchComplexFormatTest#testGetImaginaryFormat, org.apache.commons.math.distribution.GammaDistributionTest#testIllegalArguments, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testKepler, org.apache.commons.math.linear.BlockFieldMatrixTest#testEqualsAndHashCode, org.apache.commons.math.linear.SparseRealMatrixTest#testAddFail, org.apache.commons.math.linear.BlockRealMatrixTest#testSetSubMatrix, org.apache.commons.math.complex.ComplexTest#testTanNaN, org.apache.commons.math.genetics.RandomKeyTest#testInducedPermutation, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testTrace, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnVectorLarge, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenSeparator, org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaPValue, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#dimensionCheck, org.apache.commons.math.ConvergenceExceptionTest#testConstructorCause, org.apache.commons.math.linear.SparseRealMatrixTest#testGetColumnMatrix, org.apache.commons.math.estimation.MinpackTest#testMinpackRosenbrok, org.apache.commons.math.fraction.BigFractionTest#testAdd, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testNaNContracts, org.apache.commons.math.random.RandomDataTest#testNextSample, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseZeroReal, org.apache.commons.math.linear.RealVectorFormatTest#testParseIgnoredWhitespace, org.apache.commons.math.distribution.PoissonDistributionTest#testFloatingPointArguments, org.apache.commons.math.linear.CholeskySolverTest#testSolveDimensionErrors, org.apache.commons.math.linear.EigenDecompositionImplTest#testBigMatrix, org.apache.commons.math.linear.QRSolverTest#testRank, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddXSampleData, org.apache.commons.math.linear.EigenDecompositionImplTest#testAEqualVDVt, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSubMatrix, org.apache.commons.math.distribution.CauchyDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.geometry.RotationTest#testSingularities, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testSerialization, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullCovarianceData, org.apache.commons.math.fraction.BigFractionFormatTest#testDoubleFormat, org.apache.commons.math.util.MathUtilsTest#testFactorialFail, org.apache.commons.math.linear.FieldMatrixImplTest#testMultiply2, org.apache.commons.math.linear.TriDiagonalTransformerTest#testQTOrthogonal, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testSimplistic, org.apache.commons.math.fraction.BigFractionTest#testAbs, org.apache.commons.math.linear.SparseFieldMatrixTest#testAdd, org.apache.commons.math.analysis.solvers.RiddersSolverTest#testParameters, org.apache.commons.math.linear.RealMatrixImplTest#testCopySubMatrix, org.apache.commons.math.distribution.WeibullDistributionTest#testSetAlpha, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testLaguerreDifferentials, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, org.apache.commons.math.linear.RealMatrixImplTest#testSetRowVector, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest#testTrivial, org.apache.commons.math.linear.BigMatrixImplTest#testTrace, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenSuffix, org.apache.commons.math.linear.FieldMatrixImplTest#testGetEntry, org.apache.commons.math.linear.SparseRealMatrixTest#testExamples, org.apache.commons.math.distribution.NormalDistributionTest#testDensity, org.apache.commons.math.geometry.Vector3DTest#testNormInf, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSerial, org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testRedundantSolvable, org.apache.commons.math.linear.SparseRealMatrixTest#testGetRowMatrix, org.apache.commons.math.linear.BlockFieldMatrixTest#testMultiply, org.apache.commons.math.complex.ComplexTest#testLogNaN, org.apache.commons.math.distribution.ZipfDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.fraction.FractionFormatTest#testFormatImproperNegative, org.apache.commons.math.transform.FastHadamardTransformerTest#testNoIntInverse, org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryCharacterEmpty, org.apache.commons.math.random.EmpiricalDistributionTest#testBinIndexOverflow, org.apache.commons.math.fraction.FractionTest#testEpsilonLimitConstructor, org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaFValue, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testSwissFertility, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBackward, org.apache.commons.math.util.MathUtilsTest#testFactorial, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterIllegalState, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testStats, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testLegendreDifferentials, org.apache.commons.math.linear.SparseFieldVectorTest#testMisc, org.apache.commons.math.linear.BlockRealMatrixTest#testGetEntry, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testCopyConsistency, org.apache.commons.math.fraction.FractionFormatTest#testFormatNegative, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentSizes, org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testQuinticMin, org.apache.commons.math.random.RandomDataTest#testNextUniformExclusiveEndpoints, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#derivativesConsistency, org.apache.commons.math.optimization.general.MinpackTest#testMinpackJennrichSampson, org.apache.commons.math.distribution.ChiSquareDistributionTest#testSampling, org.apache.commons.math.distribution.PascalDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateTwoSegment, org.apache.commons.math.linear.RealMatrixImplTest#testSetColumn, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testBoundParameters, org.apache.commons.math.linear.RealMatrixImplTest#testGetVectors, org.apache.commons.math.analysis.solvers.MullerSolverTest#testExpm1Function, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testTwoSets, org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleWithDecimals, org.apache.commons.math.estimation.MinpackTest#testMinpackFreudensteinRoth, org.apache.commons.math.MathExceptionTest#testConstructor, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testEqualsAndHashCode, org.apache.commons.math.random.RandomDataTest#testNextPoissonLargeMean, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateResiduals, org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math.random.RandomDataTest#testNextLong, org.apache.commons.math.util.MathUtilsTest#testIndicatorByte, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testAEqualLLT, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testIncrementation, org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testKepler, org.apache.commons.math.util.OpenIntToFieldTest#testPutKeysWithCollision2, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testDimensionCheck, org.apache.commons.math.analysis.solvers.RiddersSolverTest#testDeprecated, org.apache.commons.math.geometry.RotationTest#testComposeInverse, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#testMinStep, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGetWithExpectedSize, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNan, org.apache.commons.math.estimation.MinpackTest#testMinpackBrownDennis, org.apache.commons.math.linear.LUSolverTest#testSingular, org.apache.commons.math.stat.descriptive.InteractionTest#testInteraction, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testBasicStats, org.apache.commons.math.stat.descriptive.summary.SumTest#testEvaluation, org.apache.commons.math.util.MathUtilsTest#testAddAndCheckLong, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testCopy, org.apache.commons.math.analysis.solvers.MullerSolverTest#testParameters, org.apache.commons.math.random.RandomAdaptorTest#testNextPoissonLargeMean, org.apache.commons.math.random.RandomDataTest#testNextSecureHex, org.apache.commons.math.random.RandomAdaptorTest#testNextHex, org.apache.commons.math.complex.FrenchComplexFormatTest#testFormatNumber, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testToString, org.apache.commons.math.MathConfigurationExceptionTest#testConstructor, org.apache.commons.math.linear.QRDecompositionImplTest#testMatricesValues, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testEqualsAndHashCode, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMoreEstimatedParametersUnsorted, org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeBoth, org.apache.commons.math.linear.SparseFieldMatrixTest#testMultiply2, org.apache.commons.math.fraction.BigFractionTest#testMultiply, org.apache.commons.math.util.ResizableDoubleArrayTest#testDiscard, org.apache.commons.math.util.ResizableDoubleArrayTest#testAdd1000, org.apache.commons.math.distribution.TDistributionTest#testSmallDf, org.apache.commons.math.distribution.HypergeometricDistributionTest#testFloatingPointArguments, org.apache.commons.math.linear.RealMatrixImplTest#testWalk, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextUniformExclusiveEndpoints, org.apache.commons.math.special.GammaTest#testRegularizedGammaZeroPositive, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testSkewAndKurtosis, org.apache.commons.math.MathExceptionTest#testConstructorPatternArguments, org.apache.commons.math.linear.RealMatrixImplTest#testCopyFunctions, org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnFieldMatrix, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMoreEstimatedParametersUnsorted, org.apache.commons.math.fraction.FractionTest#testIntegerOverflow, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testConsistency, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testPopulation, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testIncreasingRobustnessItersIncreasesSmoothnessWithOutliers, org.apache.commons.math.distribution.BinomialDistributionTest#testFloatingPointArguments, org.apache.commons.math.linear.SparseRealMatrixTest#testDimensions, org.apache.commons.math.complex.ComplexTest#testSinInf, org.apache.commons.math.special.GammaTest#testRegularizedGammaNanPositive, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParsePositiveInfinity, org.apache.commons.math.linear.RealVectorFormatTest#testForgottenPrefix, org.apache.commons.math.complex.ComplexFormatTest#testNegativeReal, org.apache.commons.math.optimization.direct.MultiDirectionalTest#testFunctionEvaluationExceptions, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testNoDependency, org.apache.commons.math.complex.ComplexFormatTest#testParseNan, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSerialization, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testPositiveInfinity, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGetWith0ExpectedSize, org.apache.commons.math.stat.descriptive.rank.MedianTest#testEvaluation, org.apache.commons.math.MathConfigurationExceptionTest#testConstructorPatternArgumentsCause, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testInconsistentEquations, org.apache.commons.math.util.TransformerMapTest#testContainsTransformer, org.apache.commons.math.linear.TriDiagonalTransformerTest#testMatricesValues5, org.apache.commons.math.linear.TriDiagonalTransformerTest#testMatricesValues3, org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest#testTestPositive, org.apache.commons.math.linear.SparseRealMatrixTest#testOperate, org.apache.commons.math.linear.FieldMatrixImplTest#testGetSubMatrix, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testControlParameters, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeInfinity, org.apache.commons.math.complex.ComplexTest#testAsin, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeInfinity, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowVectorLarge, org.apache.commons.math.fraction.BigFractionFormatTest#testParseInvalidDenominator, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, org.apache.commons.math.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testLinear, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testHat, org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_NAN_Inf, org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveZero, org.apache.commons.math.linear.FieldMatrixImplTest#testTranspose, org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsAndInfs, org.apache.commons.math.geometry.RotationTest#testAxisAngle, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetRelativeAccuracy, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstHermitePolynomials, org.apache.commons.math.stat.inference.TTestFactoryTest#testPaired, org.apache.commons.math.geometry.RotationTest#testRevert, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testSerial, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFitting, org.apache.commons.math.optimization.linear.SimplexSolverTest#testLargeModel, org.apache.commons.math.geometry.Vector3DTest#testVectorialProducts, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSerial, org.apache.commons.math.genetics.OnePointCrossoverTest#testCrossover, org.apache.commons.math.util.OpenIntToFieldTest#testRemove, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowMatrixLarge, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#exceedMaxEvaluations, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testConditionNumber, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testParameters, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testStaticFormatVector3D, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest#derivativesConsistency, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureInt, org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumnVector, org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations#test, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testRedundantEquations, org.apache.commons.math.linear.LUSolverTest#testSolveSingularityErrors, org.apache.commons.math.analysis.solvers.NewtonSolverTest#testDeprecated, org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testLinearFunction, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonBadCounts, org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testPercentileSetter, org.apache.commons.math.util.MathUtilsTest#testCoshNaN, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseDifferentImaginaryChar, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testPositiveInfinity, org.apache.commons.math.complex.ComplexTest#testPowNaNExponent, org.apache.commons.math.stat.StatUtilsTest#testSumLog, org.apache.commons.math.complex.ComplexFormatTest#testDifferentImaginaryChar, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testBackward, org.apache.commons.math.linear.BlockFieldMatrixTest#testMath209, org.apache.commons.math.transform.FastSineTransformerTest#testParameters, org.apache.commons.math.util.DefaultTransformerTest#testTransformNull, org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest#testNoOptimum, org.apache.commons.math.linear.BigMatrixImplTest#testAdd, org.apache.commons.math.complex.ComplexTest#testPowZero, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testOneSet, org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom, org.apache.commons.math.fraction.BigFractionFormatTest#testParseProper, org.apache.commons.math.optimization.linear.SimplexSolverTest#testSingleVariableAndConstraint, org.apache.commons.math.geometry.Vector3DTest#testDistance1, org.apache.commons.math.linear.RealMatrixImplTest#testFrobeniusNorm, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveNegativePositive, org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareZeroCount, org.apache.commons.math.linear.RealMatrixImplTest#testPremultiplyVector, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#interpolationAtBounds, org.apache.commons.math.stat.descriptive.rank.MinTest#testCopy, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeY, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeZ, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNan, org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testSerial, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeX, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveObsFromEmpty, org.apache.commons.math.optimization.general.MinpackTest#testMinpackMeyer, org.apache.commons.math.stat.inference.TestUtilsTest#testOneSampleTTest, org.apache.commons.math.complex.ComplexFormatTest#testSimpleWithDecimals, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testNonInversible, org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleWithDecimals, org.apache.commons.math.fraction.FractionTest#testFloatValue, org.apache.commons.math.complex.ComplexTest#testDivide, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testGetAbsent, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testOneSet, org.apache.commons.math.complex.ComplexTest#testSubtract, org.apache.commons.math.linear.LUDecompositionImplTest#testPPermutation, org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateNoFailures, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRow, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testKepler, org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testUnsorted, org.apache.commons.math.fraction.FractionTest#testMultiply, org.apache.commons.math.estimation.WeightedMeasurementTest#testIgnored, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testCopyConsistency, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPremultiply, org.apache.commons.math.fraction.BigFractionTest#testFloatValue, org.apache.commons.math.distribution.FDistributionTest#testSmallDegreesOfFreedom, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testExpm1Function, org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleWithDecimalsTrunc, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testCopyConsistency, org.apache.commons.math.analysis.solvers.MullerSolverTest#testExpm1Function2, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleWithDecimals, org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#testIncreasingTolerance, org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testMinStep, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testKepler, org.apache.commons.math.complex.ComplexTest#testAtan, org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testIncrementation, org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuadraticFunction, org.apache.commons.math.distribution.TDistributionTest#testDfAccessors, org.apache.commons.math.distribution.CauchyDistributionTest#testConsistency, org.apache.commons.math.special.BetaTest#testLogBetaPositivePositive, org.apache.commons.math.util.OpenIntToFieldTest#testPutOnExisting, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testProductAndGeometricMean, org.apache.commons.math.estimation.MinpackTest#testMinpackBard, org.apache.commons.math.linear.CholeskyDecompositionImplTest#testLTTransposed, org.apache.commons.math.linear.TriDiagonalTransformerTest#testNoAccessBelowDiagonal, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testRank, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testAEqualUSVt, org.apache.commons.math.stat.descriptive.moment.MeanTest#testConsistency, org.apache.commons.math.stat.descriptive.rank.MinTest#testSerial, org.apache.commons.math.transform.FastFourierTransformerTest#test2DData, org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateThreeSegment, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextInt, org.apache.commons.math.linear.SparseRealMatrixTest#testEqualsAndHashCode, org.apache.commons.math.linear.RealMatrixImplTest#testSerial, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testSkewAndKurtosis, org.apache.commons.math.stat.StatUtilsTest#testMean, org.apache.commons.math.linear.SingularValueSolverTest#testConditionNumber, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testCopy, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testCircleFittingBadInit, org.apache.commons.math.fraction.FractionFormatTest#testParseNegative, org.apache.commons.math.stat.descriptive.moment.MeanTest#testSerial, org.apache.commons.math.linear.FieldMatrixImplTest#testPremultiplyVector, org.apache.commons.math.util.ResizableDoubleArrayTest#testMutators, org.apache.commons.math.linear.SparseFieldMatrixTest#testEqualsAndHashCode, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRow, org.apache.commons.math.util.ContinuedFractionTest#testGoldenRatio, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testEvents, org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testParameters, org.apache.commons.math.stat.StatUtilsTest#testDifferenceStats, org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testInitialGuess, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testSmallStep, org.apache.commons.math.complex.ComplexTest#testSin, org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateFullSample, org.apache.commons.math.stat.inference.TestUtilsTest#testTwoSampleTHomoscedastic, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMath199, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextExponential, org.apache.commons.math.linear.RealMatrixImplTest#testExamples, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSerialization, org.apache.commons.math.complex.ComplexTest#testExpNaN, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testSmallStep, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRowMatrix, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetFunctionValueAccuracy, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testAddition, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testSerial, org.apache.commons.math.fraction.BigFractionTest#testIntValue, org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testHighDegreeLegendre, org.apache.commons.math.optimization.fitting.HarmonicFitterTest#test1PercentError, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testEqualsAndHashCode, org.apache.commons.math.estimation.MinpackTest#testMinpackJennrichSampson, org.apache.commons.math.linear.SparseRealMatrixTest#testGetRowVector, org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleNoDecimals, org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#serialization, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testQRColumnsPermutation, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testMomentSmallSamples, org.apache.commons.math.linear.EigenSolverTest#testInvertible, org.apache.commons.math.linear.BlockRealMatrixTest#testTranspose, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testNoDenseOutput, org.apache.commons.math.distribution.BinomialDistributionTest#testIllegalArguments, org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullFile, org.apache.commons.math.util.MathUtilsTest#testPow, org.apache.commons.math.linear.SparseFieldMatrixTest#testGetColumnVector, org.apache.commons.math.stat.descriptive.rank.MaxTest#testCopyConsistency, org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testN0andN1Conditions, org.apache.commons.math.distribution.ChiSquareDistributionTest#testCumulativeProbabilities, org.apache.commons.math.distribution.HypergeometricDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.analysis.solvers.RiddersSolverTest#testSinFunction, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenPrefix, org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testRemoval, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testScalarAdd, org.apache.commons.math.stat.inference.TTestTest#testTwoSampleTHomoscedastic, org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testNoDependency, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testEvaluation, org.apache.commons.math.distribution.ExponentialDistributionTest#testDensity, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnMatrixLarge, org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexIllegalModulus, org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryCharacterNull, org.apache.commons.math.linear.RealVectorFormatTest#testParseNoComponents, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumnVector, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testInsufficientData, org.apache.commons.math.estimation.MinpackTest#testMinpackWatson, org.apache.commons.math.linear.SparseRealMatrixTest#testCopyFunctions, org.apache.commons.math.geometry.RotationTest#testIdentity, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testLongly, org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testColumnsPermutation, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testDimensions, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayPatternArguments, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testCopy, org.apache.commons.math.random.ValueServerTest#testNextDigest, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorPatternArgumentsCause, org.apache.commons.math.random.EmpiricalDistributionTest#testGridTooFine, org.apache.commons.math.random.RandomDataTest#testNextGaussian, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testIterator, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testQuadratic, org.apache.commons.math.distribution.GammaDistributionTest#testProbabilities, org.apache.commons.math.linear.RealMatrixImplTest#testNorm, org.apache.commons.math.stat.inference.TestUtilsTest#testPaired, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testTrivial, org.apache.commons.math.MathExceptionTest#testPrintStackTrace, org.apache.commons.math.util.OpenIntToFieldTest#testConcurrentModification, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleNoDecimals, org.apache.commons.math.fraction.BigFractionFormatTest#testParseProperNegative, org.apache.commons.math.complex.ComplexFormatTest#testNan, org.apache.commons.math.random.RandomDataTest#testNextPermutation, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenPrefix, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testEmptyData, org.apache.commons.math.linear.BlockFieldMatrixTest#testWalk, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleWithDecimals, org.apache.commons.math.analysis.solvers.BisectionSolverTest#testQuinticZero, org.apache.commons.math.complex.ComplexTest#testEqualsRealDifference, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultipleToEmpty, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressandVariance, org.apache.commons.math.util.MathUtilsTest#testAddAndCheck, org.apache.commons.math.special.ErfTest#testErf2576, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullYSampleData, org.apache.commons.math.stat.descriptive.summary.ProductTest#testIncrementation, org.apache.commons.math.linear.BigMatrixImplTest#testSetSubMatrix, org.apache.commons.math.geometry.Vector3DFormatTest#testNonDefaultSetting, org.apache.commons.math.distribution.CauchyDistributionTest#testMedian, org.apache.commons.math.linear.SparseRealMatrixTest#testGetColumnVector, org.apache.commons.math.linear.BigMatrixImplTest#testScalarAdd, org.apache.commons.math.util.MathUtilsTest#testCompareTo, org.apache.commons.math.linear.BlockRealMatrixTest#testMultiply2, org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest#serialization, org.apache.commons.math.random.RandomAdaptorTest#testNextLongExtremeValues, org.apache.commons.math.util.MathUtilsTest#testArrayHash, org.apache.commons.math.distribution.BinomialDistributionTest#testCumulativeProbabilities, org.apache.commons.math.distribution.WeibullDistributionTest#testBeta, org.apache.commons.math.util.MathUtilsTest#testLcm, org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#dimensionCheck, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testBackward, org.apache.commons.math.util.MathUtilsTest#testIndicatorFloat, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testNaN, org.apache.commons.math.linear.BlockRealMatrixTest#testEqualsAndHashCode, org.apache.commons.math.random.EmpiricalDistributionTest#testLoad, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveZero, org.apache.commons.math.linear.SparseFieldMatrixTest#testExamples, org.apache.commons.math.complex.FrenchComplexFormatTest#testDifferentImaginaryChar, org.apache.commons.math.complex.FrenchComplexFormatTest#testZeroReal, org.apache.commons.math.complex.ComplexTest#testTanInf, org.apache.commons.math.complex.ComplexFormatTest#testForgottenImaginaryCharacter, org.apache.commons.math.linear.RealVectorFormatTest#testForgottenSuffix, org.apache.commons.math.complex.ComplexTest#testSerial, org.apache.commons.math.linear.SparseFieldMatrixTest#testGetVectors, org.apache.commons.math.ode.FirstOrderConverterTest#testDoubleDimension, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testEqualsAndHashCode, org.apache.commons.math.complex.ComplexTest#testTanhInf, org.apache.commons.math.stat.FrequencyTest#testCounts, org.apache.commons.math.linear.SparseFieldVectorTest#testPredicates, org.apache.commons.math.linear.BigMatrixImplTest#testSolve, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParameters, org.apache.commons.math.geometry.Vector3DFormatTest#testConstructorSingleFormat, org.apache.commons.math.util.ResizableDoubleArrayTest#testSetNumberOfElements, org.apache.commons.math.optimization.general.MinpackTest#testMinpackKowalikOsborne, org.apache.commons.math.linear.EigenDecompositionImplTest#testEigenvectors, org.apache.commons.math.distribution.PoissonDistributionTest#testLargeMeanInverseCumulativeProbability, org.apache.commons.math.linear.SparseRealMatrixTest#testAdd, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testConsistency, org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testMomentSmallSamples, org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumnMatrix, org.apache.commons.math.fraction.BigFractionFormatTest#testParse, org.apache.commons.math.fraction.BigFractionTest#testCompareTo, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testCopy, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testSerialization, org.apache.commons.math.complex.ComplexTest#testTanhNaN, org.apache.commons.math.distribution.FDistributionTest#testInverseCumulativeProbabilityExtremes, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testUnstableDerivative, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testEvaluation, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testN0andN1Conditions, org.apache.commons.math.util.MathUtilsTest#testSubAndCheckErrorMessage, org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testCopy, org.apache.commons.math.fraction.FractionTest#testAbs, org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#derivativesConsistency, org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testMinEndpoints, org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testEqualsAndHashCode, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testEvaluation, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testIncrementation, org.apache.commons.math.stat.descriptive.rank.MinTest#testSerialization, org.apache.commons.math.fraction.FractionFormatTest#testParseProperNegative, org.apache.commons.math.util.MathUtilsTest#testEquals, org.apache.commons.math.random.EmpiricalDistributionTest#testNexFail, org.apache.commons.math.complex.ComplexFormatTest#testFormatNumber, org.apache.commons.math.linear.SingularValueDecompositionImplTest#testHadamard, org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testDecreasingSteps, org.apache.commons.math.stat.descriptive.moment.MeanTest#testSmallSamples, org.apache.commons.math.util.DefaultTransformerTest#testTransformBigDecimal, org.apache.commons.math.linear.BigMatrixImplTest#testDimensions, org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSetterIllegalState, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testColumnsPermutation, org.apache.commons.math.optimization.direct.NelderMeadTest#testFunctionEvaluationExceptions, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumn, org.apache.commons.math.complex.FrenchComplexFormatTest#testGetRealFormat, org.apache.commons.math.complex.ComplexTest#testSqrtRealPositive, org.apache.commons.math.linear.BlockFieldMatrixTest#testToString, org.apache.commons.math.linear.BlockRealMatrixTest#testPremultiply, org.apache.commons.math.linear.BigMatrixImplTest#testAddFail, org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultiplePastEmpty, org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSpecialValues, org.apache.commons.math.linear.FieldMatrixImplTest#testMultiply, org.apache.commons.math.util.MathUtilsTest#testLog, org.apache.commons.math.transform.FastFourierTransformerTest#testParameters, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testFormatObject, org.apache.commons.math.linear.FieldMatrixImplTest#testGetRowVector, org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleNoDecimals, org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveNan, org.apache.commons.math.util.MathUtilsTest#testSignLong, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testUnequalSizeArguments, org.apache.commons.math.complex.ComplexTest#testMultiply, org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleNoDecimals, org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testMomentSmallSamples, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testBasicStats, org.apache.commons.math.random.GaussianRandomGeneratorTest#testMeanAndStandardDeviation, org.apache.commons.math.util.OpenIntToFieldTest#testRemoveFromEmpty, org.apache.commons.math.util.MathUtilsTest#testMulAndCheck, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testIncreasingTolerance, org.apache.commons.math.stat.StatUtilsTest#testGeometricMean, org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEvents, org.apache.commons.math.fraction.FractionTest#testAdd, org.apache.commons.math.complex.ComplexTest#testNegate, org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testSerial, org.apache.commons.math.linear.SparseFieldMatrixTest#testGetRowVector, org.apache.commons.math.stat.descriptive.summary.SumSqTest#testConsistency, org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficient, org.apache.commons.math.linear.FieldMatrixImplTest#testSetRow, org.apache.commons.math.stat.descriptive.moment.VarianceTest#testConsistency, org.apache.commons.math.complex.ComplexTest#testSinhInf, org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testDimensionCheck, org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testOneSet, org.apache.commons.math.analysis.solvers.MullerSolverTest#testQuinticFunction2, org.apache.commons.math.distribution.ExponentialDistributionTest#testConsistency, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeZ, org.apache.commons.math.complex.ComplexFormatTest#testZeroReal, org.apache.commons.math.linear.SparseFieldMatrixTest#testTrace, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testLLowerTriangular, org.apache.commons.math.linear.FieldMatrixImplTest#testAddFail, org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testSmallError, org.apache.commons.math.distribution.ZipfDistributionTest#testFloatingPointArguments, org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testCopyConsistency, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeX, org.apache.commons.math.linear.BlockRealMatrixTest#testGetRow, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeY, org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleNoDecimals, org.apache.commons.math.linear.FieldLUDecompositionImplTest#testPPermutation, org.apache.commons.math.stat.descriptive.summary.SumTest#testIncrementation, org.apache.commons.math.util.MathUtilsTest#testL1DistanceDouble, org.apache.commons.math.optimization.direct.MultiDirectionalTest#testRosenbrock, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testConsistency, org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testLinearFunction, org.apache.commons.math.optimization.linear.SimplexSolverTest#testUnboundedSolution, org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewSecantSolverValid, org.apache.commons.math.distribution.FDistributionTest#testIllegalArguments, org.apache.commons.math.stat.StatUtilsTest#testSumSq, org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryFormatNull, org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testNoError, org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testN0andN1Conditions, org.apache.commons.math.complex.ComplexTest#testAcos, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemoveAbsent, org.apache.commons.math.ode.FirstOrderConverterTest#testDecreasingSteps, org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeReal, org.apache.commons.math.stat.inference.TestUtilsTest#testOneSampleT, org.apache.commons.math.ode.sampling.StepNormalizerTest#testBeforeEnd, org.apache.commons.math.linear.SparseRealVectorTest#testConstructors, org.apache.commons.math.util.DefaultTransformerTest#testTransformInteger, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testNoDependency, org.apache.commons.math.complex.ComplexTest#testConjugateInfiinite, org.apache.commons.math.util.OpenIntToFieldTest#testCopy, org.apache.commons.math.optimization.linear.SimplexSolverTest#testSimplexSolver, org.apache.commons.math.linear.RealVectorFormatTest#testStaticFormatRealVectorImpl, org.apache.commons.math.linear.BigMatrixImplTest#testMultiply, org.apache.commons.math.fraction.FractionFormatTest#testParseInvalidDenominator, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumnVector, org.apache.commons.math.linear.SparseFieldMatrixTest#testDimensions, org.apache.commons.math.util.ResizableDoubleArrayTest#testAddElementRolling, org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testBigStep, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testIncrementation, org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddXSampleData, org.apache.commons.math.linear.BlockRealMatrixTest#testSeveralBlocks, org.apache.commons.math.distribution.PascalDistributionTest#testDensities, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeAll, org.apache.commons.math.complex.FrenchComplexFormatTest#testPaseNegativeInfinity, org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest#testDerivativesConsistency, org.apache.commons.math.linear.BlockRealMatrixTest#testToString, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArray, org.apache.commons.math.linear.RealVectorFormatTest#testNegativeX, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testDimensionCheck, org.apache.commons.math.complex.ComplexTest#testTanCritical, org.apache.commons.math.complex.ComplexFormatTest#testSimpleWithDecimalsTrunc, org.apache.commons.math.linear.RealMatrixImplTest#testGetColumnVector, org.apache.commons.math.complex.ComplexFormatTest#testSimpleNoDecimals, org.apache.commons.math.linear.RealVectorFormatTest#testNegativeZ, org.apache.commons.math.geometry.RotationTest#testApplyInverseTo, org.apache.commons.math.linear.RealVectorFormatTest#testNegativeY, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeZ, org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveNan, org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersSimple, org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testMeanAndCovariance, org.apache.commons.math.complex.ComplexTest#testExp, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testEvents, org.apache.commons.math.stat.StatUtilsTest#testMin, org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumn, org.apache.commons.math.util.OpenIntToFieldTest#testGetFromEmpty, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeX, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeY, org.apache.commons.math.stat.inference.TTestFactoryTest#testSmallSamples, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareZeroCount, org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParameters, org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumnVector, org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveNegative, org.apache.commons.math.MathConfigurationExceptionTest#testConstructorCause, org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleNoDecimals, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testQuinticFunction, org.apache.commons.math.fraction.FractionTest#testConstructorDouble, org.apache.commons.math.transform.FastHadamardTransformerTest#test4Points, org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSpecialValues, org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testEvaluation, org.apache.commons.math.util.DefaultTransformerTest#testTransformObject, org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareZeroCount, org.apache.commons.math.fraction.FractionTest#testSubtract, org.apache.commons.math.distribution.NormalDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemove, org.apache.commons.math.linear.BlockRealMatrixTest#testSetRowMatrix, org.apache.commons.math.geometry.Vector3DFormatTest#testStaticFormatVector3D, org.apache.commons.math.complex.ComplexTest#testPowNaNBase, org.apache.commons.math.linear.LUDecompositionImplTest#testPAEqualLU, org.apache.commons.math.genetics.RandomKeyTest#testRandomPermutation, org.apache.commons.math.linear.Array2DRowRealMatrixTest#testAddFail, org.apache.commons.math.linear.SparseRealVectorTest#testSerial, org.apache.commons.math.stat.regression.SimpleRegressionTest#testPerfectNegative, org.apache.commons.math.distribution.TDistributionTest#testCumulativeProbabilities, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testSwiss, org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testBackward, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testFormatObject, org.apache.commons.math.genetics.ChromosomeTest#testCompareTo, org.apache.commons.math.special.GammaTest#testLogGammaNan, org.apache.commons.math.linear.SparseFieldMatrixTest#testMultiply, org.apache.commons.math.linear.FieldMatrixImplTest#testScalarAdd, org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testMomentSmallSamples, org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNoComponents, org.apache.commons.math.util.MathUtilsTest#testSinhNaN, org.apache.commons.math.random.RandomDataTest#testNextHex, org.apache.commons.math.analysis.solvers.BrentSolverTest#testBadEndpoints, org.apache.commons.math.linear.MatrixUtilsTest#testcreateFieldIdentityMatrix, org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextBoolean, org.apache.commons.math.fraction.BigFractionTest#testLongValue, org.apache.commons.math.stat.inference.TTestFactoryTest#testTwoSampleTHomoscedastic, org.apache.commons.math.distribution.HypergeometricDistributionTest#testPopulationSize, org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testSinFunction, org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquare, org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeBoth, org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testCopy, org.apache.commons.math.linear.BlockRealMatrixTest#testOperate, org.apache.commons.math.stat.descriptive.rank.MaxTest#testCopy, org.apache.commons.math.linear.FieldMatrixImplTest#testAdd, org.apache.commons.math.random.ValueServerTest#testModes, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testfirstDerivativeComparison, org.apache.commons.math.stat.regression.SimpleRegressionTest#testNaNs, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testSerial, org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMoreEstimatedParametersSimple, org.apache.commons.math.linear.RealVectorFormatTest#testParsePositiveInfinity, org.apache.commons.math.fraction.FractionTest#testLongValue, org.apache.commons.math.analysis.solvers.RiddersSolverTest#testExpm1Function, org.apache.commons.math.random.RandomDataTest#testNextIntExtremeValues, org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testInsufficientData, org.apache.commons.math.ArgumentOutsideDomainExceptionTest#testConstructor, org.apache.commons.math.distribution.WeibullDistributionTest#testInverseCumulativeProbabilities, org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbabilities, org.apache.commons.math.transform.FastHadamardTransformerTest#test3Points, org.apache.commons.math.optimization.general.MinpackTest#testMinpackHelicalValley, org.apache.commons.math.linear.SparseRealMatrixTest#testScalarAdd, org.apache.commons.math.geometry.Vector3DFormatTest#testFormatObject, org.apache.commons.math.util.MathUtilsTest#testEqualsWithAllowedDelta, org.apache.commons.math.stat.data.LewTest#testCertifiedValues, org.apache.commons.math.analysis.solvers.NewtonSolverTest#testQuinticZero, org.apache.commons.math.analysis.solvers.MullerSolverTest#testSinFunction, org.apache.commons.math.optimization.direct.MultiDirectionalTest#testPowell, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testIncreasingBandwidthIncreasesSmoothness, org.apache.commons.math.linear.FieldMatrixImplTest#testTrace, org.apache.commons.math.fraction.FractionFormatTest#testDenominatorFormat, org.apache.commons.math.optimization.direct.NelderMeadTest#testMaxEvaluations, org.apache.commons.math.linear.RealVectorFormatTest#testConstructorSingleFormat, org.apache.commons.math.linear.SparseRealMatrixTest#testGetEntry, org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testStdErrorConsistency, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNonDefaultSetting, org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction, org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumnMatrix, org.apache.commons.math.stat.CertifiedDataTest#testDescriptiveStatistics, org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testSmallStep, org.apache.commons.math.linear.QRSolverTest#testUnderdetermined, org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testExactIntegration, org.apache.commons.math.linear.SparseFieldMatrixTest#testSetSubMatrix, org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testSerialization, org.apache.commons.math.distribution.ZipfDistributionTest#testDensities, org.apache.commons.math.estimation.MinpackTest#testMinpackLinearRank1, org.apache.commons.math.linear.SingularValueSolverTest#testSolve, org.apache.commons.math.fraction.FractionTest#testGoldenRatio, org.apache.commons.math.linear.BiDiagonalTransformerTest#testAEqualUSVt, org.apache.commons.math.random.EmpiricalDistributionTest#testSerialization, org.apache.commons.math.stat.descriptive.moment.MeanTest#testMomentSmallSamples, org.apache.commons.math.random.EmpiricalDistributionTest#testDoubleLoad, org.apache.commons.math.util.MathUtilsTest#testLInfDistanceDouble, org.apache.commons.math.geometry.FrenchVector3DFormatTest#testConstructorSingleFormat, org.apache.commons.math.optimization.general.MinpackTest#testMinpackBard, org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testSinFunction, org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNonStrictlyIncreasing, org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testSubtraction, org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeAll, org.apache.commons.math.special.ErfTest#testErf0, org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayArgumentCause, org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testBackward, org.apache.commons.math.fraction.FractionTest#testNegate, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSubMatrix, org.apache.commons.math.estimation.MinpackTest#testMinpackChebyquad, org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowMatrixLarge, org.apache.commons.math.linear.BlockFieldMatrixTest#testOperate, org.apache.commons.math.random.ValueServerTest#testEmptyReplayFile], jUnit5Tests=[], jacocoIncludes=[org.apache.commons.*], jacocoExcludes=[java.*], family=SPECTRUM_BASED, spectrumFormula=OP2, computeSpoonResults=false}
Computing tests from config.
Running TestContext{testMethods=[[Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL2DistanceInt, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testOverdetermined, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testSolveSingularityErrors, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testPow, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testCompose, [Manual]TestMethod=org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowFieldMatrix, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension4WithSplit, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNotPositiveDefinite, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeReal, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testCorr, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testNextAfterSpecialCases, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testPerfectFit, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testConfig, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMultiplyNaN, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSubAndCheckLong, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSanityChecks, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testReplay, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignInt, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnLarge, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#checkClone, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest#testTestNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewNewtonSolverValid, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testGetArgumentNaN, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAdd, [Manual]TestMethod=org.apache.commons.math.transform.FastSineTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositiveZero, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testString, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTan, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testIsSingular, [Manual]TestMethod=org.apache.commons.math.MaxIterationsExceededExceptionTest#testSimpleConstructor, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateSin, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonEqualCounts, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaNanPositive, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testSimplistic, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testPermutedArrayHash, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowLarge, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNorm, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCosNaN, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.linear.CholeskySolverTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataThatIsNotSquare, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testIsSame, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNotSymmetricMatrixException, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testdiscardArtificialVariables, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextUniform, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatImproper, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.stat.CertifiedDataTest#testSummaryStatistics, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonUnEqualCounts, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEventsErrors, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testToString, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearFullRank, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideInfinite, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDoubleConstructor, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testCompletelyIncorrectBandwidth, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyMutationTest#testMutate, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testEpsilon, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.estimation.WeightedMeasurementTest#testTheory, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSubtractNaN, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtRealZero, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatImproperNegative, [Manual]TestMethod=org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveBadParameters, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testGetImaginaryFormat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSetQuantile, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtImaginaryNegative, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testAddNonComparable, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinhNaN, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testEigenvalues, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testDegenerate1, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testGetSummary, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testDegenerate0, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowLarge, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testGetFromEmpty, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaNegativePositivePositive, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testTridiagonal, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testAngles, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPoissonLargeMean, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testSolutionWithNegativeDecisionVariable, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testMultiplication, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstLaguerrePolynomials, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testRandomAccess, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testIdentityPermutation, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testCovarianceConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.BetaDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseBig, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testSanityChecks, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testSolveRankErrors, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistanceSq, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testHermiteDifferentials, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testGetMean, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testComparatorPermutation, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIntegratorControls, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testSSENonNegative, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension1, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testTrivialModel, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension2, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest#testDerivativesConsistency, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension3, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseProperInvalidMinus, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackOsborne2, [Manual]TestMethod=org.apache.commons.math.genetics.GeneticAlgorithmTestBinary#test, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanhCritical, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackOsborne1, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSample, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetFunctionValueAccuracy, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnBigMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaPositive, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testProduct, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCosInf, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBrownAlmostLinear, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBrownAlmostLinear, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryChromosomeTest#testInvalidConstructor, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNormalize, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction2, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testEqualRepr, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testStaticFormatComplex, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testConstant, [Manual]TestMethod=org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaTest, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutOnExisting, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseZeroReal, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAngular, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testWithInitialCapacity, [Manual]TestMethod=org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBracketSin, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testGcd, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testValues, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeBoth, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.genetics.FitnessCachingTest#testFitnessCaching, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextUniform, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSample, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateNoSuccesses, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.distribution.BetaDistributionTest#testCumulative, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetMatrixLarge, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testLargeValues, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#backward, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testDegenerate1, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaNegativePositive, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testDegenerate0, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testScale, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSubAndCheck, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testNegate, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testExpInf, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testNorris, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseZeroImaginary, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testDecode, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackChebyquad, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateBigMatrix, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testConstant, [Manual]TestMethod=org.apache.commons.math.analysis.integration.RombergIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBadParameters, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.genetics.FixedGenerationCountTest#testIsSatisfied, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGet, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveZeroPositive, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstChebyshevPolynomials, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testTrace, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testMinimizeMaximize, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testNaN, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testGetAbsent, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testTransformers, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testIterator, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testConstants, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_normal_fourthRoot, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testDigammaSmallArgs, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testInference, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#test5, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testClear, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaZeroPositivePositive, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testInfeasibleSolution, [Manual]TestMethod=org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsTrue, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsNull, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArgumentCause, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testScalarMultiply, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveObsFromSingle, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testClear, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtPolar, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testFill, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatZero, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testSmallDf, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL1DistanceInt, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testMath280, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDistinctEigenvalues, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testDoubleFormat, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testMath226, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.genetics.ElitisticListPopulationTest#testNextGeneration, [Manual]TestMethod=org.apache.commons.math.analysis.integration.RombergIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureHex, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexNaN, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#checklone, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackHelicalValley, [Manual]TestMethod=org.apache.commons.math.genetics.ListPopulationTest#testGetFittestChromosome, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testLongly, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowBigMatrix, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLInfDistanceInt, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testUOrthogonal, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowRealMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testDeprecated2, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseManyComponents, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositivePositive, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testPutTransformer, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testDimension, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testWholeFormat, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testNormalizeAngle, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructorCause, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAbsNaN, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorInt, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaZero, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testPercentile, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testOperate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testLongly, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testErrorConditions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testZeroImaginary, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseInteger, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2Complex, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testPercentileSetter, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMath221, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrt1z, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnDistortedSine, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testQuaternion, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testDataInOut, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testHTrapezoidal, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveNoRoot, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.analysis.integration.RombergIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testQOrthogonal, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testMismatch, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatZero, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testSetBeta, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math.stat.data.LotteryTest#testCertifiedValues, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testFixedState, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testGetReducedFraction, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testSmallLastStep, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testContainsClass, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSeveralBlocks, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testGridTooFat, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetAbsoluteAccuracy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextHex, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMinimization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#test0Choose0, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformString, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testSetMean, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testRepeatedEigenvalue, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.genetics.ChromosomeTest#testFindSameChromosome, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testOperatePremultiplyLarge, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDigitLimitConstructor, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressandVariance, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConjugate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testChebyshevDifferentials, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEventsNoConvergence, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testAlpha, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEqualsWithAllowedUlps, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetRelativeAccuracy, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveAccuracySin, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testEmptyDigestFile, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDivide, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseZeroImaginary, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testNullIntervalCheck, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testTrigamma, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateIdentityMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemove2, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseInvalid, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testQuantiles, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testDigammaLargeArgs, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRandom, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testRemoval, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetMaximalIterationCount, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideNaN, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnTwoPoints, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testNoError, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseProper, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testScalarProduct, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.transform.FastCosineTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testVectorOnePair, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testQOrthogonal, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositiveNan, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositiveNegative, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testWrongDerivative, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testNormalApproximateProbability, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMaximalTiesMinimum, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#interpolationInside, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNegateNaN, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testDenominatorFormat, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinNaN, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testScalarMultiplyInf, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testMatricesValues2, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testInconsistentSizes, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testConstructor2, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testConstructor1, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLogZero, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testMinMax, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testUUpperTriangular, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCosh, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackLinearFullRank, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testNaNs, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testCopy, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testPerfect, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseManyComponents, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnLarge, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParse, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testNorm, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDigitLimitConstructor, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testBigFractionConverter, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGet, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMath199, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testStats, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testContainsKey, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetRealFormatNull, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testRedundantUnsolvable, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonBadCounts, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#backward, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.NewtonSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testToString, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testOperateLarge, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBox3Dimensional, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearRank1, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testOperateLarge, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistanceInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testDataInOut, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnOnePoint, [Manual]TestMethod=org.apache.commons.math.ode.sampling.StepNormalizerTest#testBoundaries, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAngularSeparation, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSecureInt, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testInverse, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformDouble, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testCosh, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testTableauWithNoArtificialVars, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testScalb, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryChromosomeTest#testRandomConstructor, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.estimation.EstimatedParameterTest#testEstimate, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackPowellSingular, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testContainsKey, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testUUpperTriangular, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_normal_thirdRoot, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testToString, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath272, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeReal, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testMinimizeMaximize, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnStraightLine, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinh, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testArrayIndexConditions, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testNaN, [Manual]TestMethod=org.apache.commons.math.estimation.WeightedMeasurementTest#testConstruction, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testGetSummary, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDiagonal, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testInitialGuess, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnRealMatrix, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormat, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignByte, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testBoundaries, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testPaseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSecureLong, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testOperate, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGetWith0ExpectedSize, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf3291, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testHashCode, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAddNaN, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackOsborne2, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testRUpperTriangular, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackOsborne1, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testOperatePremultiplyLarge, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConjugateNaN, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testMath209, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMoreRows, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testMath209, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCos, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaNanPositivePositive, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testQuintic, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#checklone, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testConfig, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAsinInf, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testNISTExample, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAtanNaN, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbability2, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAcosInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testInsufficientBandwidth, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryCharacterEmpty, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testMoreLargeValues, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPow, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testArrayEquals, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBrownDennis, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesMaximum, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSecureInt, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testOrthogonal, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistance, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testSetScale, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testEmptyTable, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaZeroPositive, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatNegative, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientLarge, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesAverage, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testWholeFormat, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testVariance, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorLong, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testNaNs, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testRemoveTransformer, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testcreateFieldMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testUpperOrLower, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.MaxIterationsExceededExceptionTest#testComplexConstructor, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testPcts, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAngle, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testSinFunction2, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewBrentSolverValid, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testLongFormat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testLUDecomposition, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testProperties, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNorm1, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAtanInf, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf2807, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testConfig, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testOperate, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testClasses, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testCovarianceConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrt1zNaN, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignShort, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testSerial, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf1960, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testHash, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testGetArgumentInf, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest#dimension2, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testIntegerValues, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.estimation.EstimatedParameterTest#testConstruction, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryMutationTest#testMutate, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testIntValue, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemoveAbsent, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAcosNaN, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testSerial, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAddInfinite, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testLargeDegreesOfFreedom, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testWalk, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLog, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testScalarMultiplyNaN, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRealMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryChromosomeTest#testIsSame, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackKowalikOsborne, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureLong, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testNoReset, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testBigDecimalValue, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testRootMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testChebyshevBounds, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testMulAndCheckLong, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testConstant, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextUniform, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testWithInitialCapacityAndExpansionFactor, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testNullEmpty, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsSame, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testNext, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testRoundDouble, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.DuplicateSampleAbscissaExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMultiplyNaNInf, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveNull, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinear, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testSerial, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testGetRealFormat, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testNullIntervalCheck, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testPercentile, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testGetValues, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseNegative, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.linear.CholeskySolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testToString, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullURL, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonUnEqualCounts, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testEpsilonLimitConstructor, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnVectorLarge, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientFail, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testRoundFloat, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testSetStandardDeviation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLogInf, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testSubstitute, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregate, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackPowellSingular, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCoshNaN, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testSinMin, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.InvalidMatrixExceptionTest#testConstructorMessage, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewBisectionSolverValid, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.transform.FastCosineTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testAEqualQR, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testNumeratorFormat, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testMath274, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnMatrixLarge, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetRealFormatNull, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaNegative, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstLegendrePolynomials, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowVectorLarge, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSecureHex, [Manual]TestMethod=org.apache.commons.math.random.UniformRandomGeneratorTest#testMeanAndStandardDeviation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testMismatch, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testCopy, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.estimation.EstimatedParameterTest#testBound, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#test8Points, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testDefault, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.transform.FastSineTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddNullYSampleData, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAbsentOnExisting, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testControlParameters, [Manual]TestMethod=org.apache.commons.math.genetics.TournamentSelectionTest#testSelect, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testPopulation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregation, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testForgottenImaginaryCharacter, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormat, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testRootEndpoints, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackWatson, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDoubleConstructor, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryFormatNull, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#polynomial, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testModelWithNoArtificialVars, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testSingular, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsImaginaryDifference, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackFreudensteinRoth, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDivide, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveSingle, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAbs, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testAdaptor, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testMeanAccessors, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testGetArgument, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullDoubleArray, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBox3Dimensional, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideNaNInf, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testExamples, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension4WithoutSplit, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtNaN, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testGetStandardDeviation, [Manual]TestMethod=org.apache.commons.math.linear.MatrixIndexExceptionTest#testConstructorMessage, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testConstructorDouble, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsRemovedTiesSequential, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testNumeratorFormat, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAbsentOnExisting, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMatricesValues2, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsClass, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollision2, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCoshInf, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMoreColumns, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultiple, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetAbsoluteAccuracy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSingleton, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testLongFormat, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#notEnoughData, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testCumulativeProbabilityAgaintStackOverflow, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testOneWayAnovaUtils, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testPowell, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL2DistanceDouble, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testLongly, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testHighPercentile, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveSin, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testNextAfter, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testSingular, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonEqualCounts, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemoveFromEmpty, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testCoordinates, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollisions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAsinNaN, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorDouble, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSecureLong, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateResiduals, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testNaN, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testFractionConverter, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testPAEqualLU, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testMean, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MedianTest#testCopy, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAdd, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaNegativePositive, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#checkClone, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtInf, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAbsInfinite, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataWithSampleSizeMismatch, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#exceedMaxEvaluations, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testStdErrorConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatImproper, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGetWithExpectedSize, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_realPartZero, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsNaN, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtImaginaryZero, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextFloat, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testPaired, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testImpossibleSerialization, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testZeroImaginary, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testParameterAccessors, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testNextDigestFail, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseProperInvalidMinus, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeBoth, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testDataInOut, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testMax, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testInitialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testNonInvertible, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveXY, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testModelsMerging, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testToString, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowInf, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest#testValues, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#noReset, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.transform.FastCosineTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryCharacterNull, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanh, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testMath209, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemove2, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtRealNegative, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testUOrthogonal, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testBBiDiagonal, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testpowNull, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetMatrixLarge, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testDegenerateInverseCumulativeProbability, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#polynomial, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testGetReducedFraction, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testMatricesValues2, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseInteger, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testStaticFormatRealVectorImpl, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackMeyer, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSerial, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveNanPositive, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetMaximalIterationCount, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testTTriDiagonal, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveAccuracyNull, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConstructorNaN, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateBigIdentityMatrix, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositivePositive, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest#testMeanAndCorrelation, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testConcurrentModification, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackRosenbrok, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignFloat, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignDouble, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseInvalid, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testVectorTwoPairs, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testExtremeValues, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testThreshold, [Manual]TestMethod=org.apache.commons.math.geometry.RotationOrderTest#testName, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorShort, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testLargeMeanCumulativeProbability, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutKeysWithCollisions, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testStaticFormatComplex, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testAEqualQTQt, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSinh, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testGetImaginaryFormat, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanNaN, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testInducedPermutation, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnVectorLarge, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaPValue, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#dimensionCheck, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructorCause, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackRosenbrok, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testAdd, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSample, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseZeroReal, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.linear.CholeskySolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testBigMatrix, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testRank, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddXSampleData, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testAEqualVDVt, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testSingularities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullCovarianceData, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testDoubleFormat, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testFactorialFail, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testQTOrthogonal, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testSimplistic, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testAbs, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testSetAlpha, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testLaguerreDifferentials, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testTrace, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNormInf, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testRedundantSolvable, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLogNaN, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatImproperNegative, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#testNoIntInverse, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryCharacterEmpty, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testBinIndexOverflow, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testEpsilonLimitConstructor, [Manual]TestMethod=org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaFValue, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testFactorial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testLegendreDifferentials, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatNegative, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentSizes, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testQuinticMin, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackJennrichSampson, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateTwoSegment, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testBoundParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackFreudensteinRoth, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextPoissonLargeMean, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateResiduals, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorByte, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testAEqualLLT, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutKeysWithCollision2, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testComposeInverse, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGetWithExpectedSize, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBrownDennis, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSingular, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.InteractionTest#testInteraction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testBasicStats, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testAddAndCheckLong, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testCopy, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextPoissonLargeMean, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSecureHex, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextHex, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testFormatNumber, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeBoth, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testDiscard, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testAdd1000, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testSmallDf, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testWalk, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaZeroPositive, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testSkewAndKurtosis, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnFieldMatrix, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testIntegerOverflow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testPopulation, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testIncreasingRobustnessItersIncreasesSmoothnessWithOutliers, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinInf, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaNanPositive, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeReal, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testFunctionEvaluationExceptions, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGetWith0ExpectedSize, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MedianTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testContainsTransformer, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testMatricesValues5, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testMatricesValues3, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest#testTestPositive, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testControlParameters, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAsin, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowVectorLarge, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseInvalidDenominator, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testLinear, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testHat, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_NAN_Inf, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveZero, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsAndInfs, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testAxisAngle, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetRelativeAccuracy, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstHermitePolynomials, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testPaired, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testRevert, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testSerial, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testLargeModel, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testVectorialProducts, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math.genetics.OnePointCrossoverTest#testCrossover, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemove, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowMatrixLarge, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#exceedMaxEvaluations, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testConditionNumber, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testParameters, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testStaticFormatVector3D, [Manual]TestMethod=org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureInt, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations#test, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSolveSingularityErrors, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.NewtonSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonBadCounts, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testPercentileSetter, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testCoshNaN, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowNaNExponent, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testSumLog, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.transform.FastSineTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformNull, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest#testNoOptimum, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testAdd, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowZero, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseProper, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testSingleVariableAndConstraint, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistance1, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveNegativePositive, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#interpolationAtBounds, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testCopy, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveObsFromEmpty, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackMeyer, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testFloatValue, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivide, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testGetAbsent, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testPPermutation, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateNoFailures, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testUnsorted, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.estimation.WeightedMeasurementTest#testIgnored, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testFloatValue, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testSmallDegreesOfFreedom, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testExpm1Function2, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAtan, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositivePositive, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutOnExisting, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBard, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testLTTransposed, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testNoAccessBelowDiagonal, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testRank, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testAEqualUSVt, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testSerial, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#test2DData, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateThreeSegment, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testSkewAndKurtosis, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testMean, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testConditionNumber, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testCopy, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testMutators, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.util.ContinuedFractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testDifferenceStats, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testInitialGuess, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSin, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateFullSample, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMath199, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testExamples, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testExpNaN, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetFunctionValueAccuracy, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testAddition, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testIntValue, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testHighDegreeLegendre, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#test1PercentError, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackJennrichSampson, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testInvertible, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testNoDenseOutput, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullFile, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testPow, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testRemoval, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnMatrixLarge, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexIllegalModulus, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryCharacterNull, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNoComponents, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackWatson, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testIdentity, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testLongly, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayPatternArguments, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testCopy, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testNextDigest, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testGridTooFine, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testIterator, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testQuadratic, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testNorm, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testPaired, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testPrintStackTrace, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testConcurrentModification, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseProperNegative, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testEmptyData, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsRealDifference, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultipleToEmpty, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressandVariance, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testAddAndCheck, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf2576, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullYSampleData, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testMedian, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testArrayHash, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testBeta, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLcm, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#dimensionCheck, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorFloat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testNaN, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoad, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveZero, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testZeroReal, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanInf, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testForgottenImaginaryCharacter, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testDoubleDimension, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanhInf, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testCounts, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testSolve, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParameters, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testSetNumberOfElements, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackKowalikOsborne, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testEigenvectors, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testLargeMeanInverseCumulativeProbability, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParse, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanhNaN, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSubAndCheckErrorMessage, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testCopy, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testAbs, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testMinEndpoints, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseProperNegative, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEquals, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testNexFail, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testFormatNumber, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testHadamard, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformBigDecimal, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testFunctionEvaluationExceptions, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testGetRealFormat, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtRealPositive, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultiplePastEmpty, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLog, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveNan, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignLong, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testUnequalSizeArguments, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testBasicStats, [Manual]TestMethod=org.apache.commons.math.random.GaussianRandomGeneratorTest#testMeanAndStandardDeviation, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemoveFromEmpty, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testMulAndCheck, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testGeometricMean, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testAdd, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNegate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficient, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinhInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testQuinticFunction2, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testZeroReal, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testSmallError, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testPPermutation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL1DistanceDouble, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testUnboundedSolution, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewSecantSolverValid, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testSumSq, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryFormatNull, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testNoError, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAcos, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemoveAbsent, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeReal, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math.ode.sampling.StepNormalizerTest#testBeforeEnd, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformInteger, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConjugateInfiinite, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testCopy, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testSimplexSolver, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testStaticFormatRealVectorImpl, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseInvalidDenominator, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testAddElementRolling, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddXSampleData, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSeveralBlocks, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testPaseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest#testDerivativesConsistency, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArray, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanCritical, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testApplyInverseTo, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveNan, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testMeanAndCovariance, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testExp, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testMin, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testGetFromEmpty, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParameters, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveNegative, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructorCause, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testConstructorDouble, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#test4Points, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformObject, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemove, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testStaticFormatVector3D, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowNaNBase, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testPAEqualLU, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testRandomPermutation, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testPerfectNegative, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testSwiss, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.genetics.ChromosomeTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaNan, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNoComponents, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSinhNaN, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextHex, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testBadEndpoints, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testcreateFieldIdentityMatrix, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextBoolean, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testLongValue, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testPopulationSize, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeBoth, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testAdd, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testModes, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testfirstDerivativeComparison, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testNaNs, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testLongValue, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math.ArgumentOutsideDomainExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#test3Points, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackHelicalValley, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEqualsWithAllowedDelta, [Manual]TestMethod=org.apache.commons.math.stat.data.LewTest#testCertifiedValues, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.NewtonSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testPowell, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testIncreasingBandwidthIncreasesSmoothness, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testTrace, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testDenominatorFormat, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testMaxEvaluations, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testStdErrorConsistency, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.stat.CertifiedDataTest#testDescriptiveStatistics, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testUnderdetermined, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, [Manual]TestMethod=org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testExactIntegration, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackLinearRank1, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testAEqualUSVt, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testDoubleLoad, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLInfDistanceDouble, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBard, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNonStrictlyIncreasing, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testSubtraction, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf0, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayArgumentCause, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testNegate, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackChebyquad, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowMatrixLarge, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testEmptyReplayFile], testFrameworkStrategy=fr.spoonlabs.flacoco.core.coverage.framework.JUnit4Strategy@3185fa6b}
Running TestContext{testMethods=[[Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL2DistanceInt, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testOverdetermined, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testSolveSingularityErrors, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testPow, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testCompose, [Manual]TestMethod=org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowFieldMatrix, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension4WithSplit, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNotPositiveDefinite, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeReal, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testCorr, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testNextAfterSpecialCases, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testPerfectFit, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testConfig, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMultiplyNaN, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSubAndCheckLong, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSanityChecks, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testReplay, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignInt, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnLarge, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#checkClone, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest#testTestNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewNewtonSolverValid, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testGetArgumentNaN, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAdd, [Manual]TestMethod=org.apache.commons.math.transform.FastSineTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositiveZero, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testString, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTan, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testIsSingular, [Manual]TestMethod=org.apache.commons.math.MaxIterationsExceededExceptionTest#testSimpleConstructor, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateSin, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonEqualCounts, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaNanPositive, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testSimplistic, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testPermutedArrayHash, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowLarge, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNorm, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCosNaN, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.linear.CholeskySolverTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataThatIsNotSquare, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testIsSame, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNotSymmetricMatrixException, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testdiscardArtificialVariables, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextUniform, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatImproper, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.stat.CertifiedDataTest#testSummaryStatistics, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonUnEqualCounts, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEventsErrors, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testToString, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearFullRank, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideInfinite, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDoubleConstructor, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testCompletelyIncorrectBandwidth, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyMutationTest#testMutate, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testEpsilon, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.estimation.WeightedMeasurementTest#testTheory, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSubtractNaN, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testWeightedConsistency, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtRealZero, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatImproperNegative, [Manual]TestMethod=org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveBadParameters, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testGetImaginaryFormat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSetQuantile, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtImaginaryNegative, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testAddNonComparable, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinhNaN, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDoubleValue, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testEigenvalues, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testDegenerate1, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testGetSummary, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testDegenerate0, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowLarge, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testGetFromEmpty, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaNegativePositivePositive, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testTridiagonal, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testAngles, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPoissonLargeMean, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testSolutionWithNegativeDecisionVariable, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testMultiplication, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstLaguerrePolynomials, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testRandomAccess, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testIdentityPermutation, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testCovarianceConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.BetaDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseBig, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testSanityChecks, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testSolveRankErrors, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistanceSq, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testHermiteDifferentials, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testGetMean, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testComparatorPermutation, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIntegratorControls, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testSSENonNegative, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension1, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testTrivialModel, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension2, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest#testDerivativesConsistency, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension3, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseProperInvalidMinus, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackOsborne2, [Manual]TestMethod=org.apache.commons.math.genetics.GeneticAlgorithmTestBinary#test, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanhCritical, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackOsborne1, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSample, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetFunctionValueAccuracy, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnBigMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaPositive, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testProduct, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCosInf, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBrownAlmostLinear, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBrownAlmostLinear, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryChromosomeTest#testInvalidConstructor, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNormalize, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction2, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testEqualRepr, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testStaticFormatComplex, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testConstant, [Manual]TestMethod=org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaTest, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutOnExisting, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseZeroReal, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAngular, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testWithInitialCapacity, [Manual]TestMethod=org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSerial, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBracketSin, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testGcd, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testValues, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeBoth, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.genetics.FitnessCachingTest#testFitnessCaching, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextUniform, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSample, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateNoSuccesses, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.distribution.BetaDistributionTest#testCumulative, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetMatrixLarge, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testLargeValues, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#backward, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testDegenerate1, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaNegativePositive, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testDegenerate0, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testScale, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSubAndCheck, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testNegate, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testExpInf, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testNorris, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseZeroImaginary, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testDecode, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackChebyquad, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateBigMatrix, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testConstant, [Manual]TestMethod=org.apache.commons.math.analysis.integration.RombergIntegratorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testBadParameters, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.genetics.FixedGenerationCountTest#testIsSatisfied, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGet, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveZeroPositive, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstChebyshevPolynomials, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testTrace, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testMinimizeMaximize, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testNaN, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testGetAbsent, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testTransformers, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testIterator, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testConstants, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_normal_fourthRoot, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testDigammaSmallArgs, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testInference, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#test5, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testClear, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaZeroPositivePositive, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testInfeasibleSolution, [Manual]TestMethod=org.apache.commons.math.analysis.integration.SimpsonIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsTrue, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsNull, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArgumentCause, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testScalarMultiply, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveObsFromSingle, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testClear, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtPolar, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testFill, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatZero, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testSmallDf, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL1DistanceInt, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testMath280, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDistinctEigenvalues, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testDoubleFormat, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testMath226, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.genetics.ElitisticListPopulationTest#testNextGeneration, [Manual]TestMethod=org.apache.commons.math.analysis.integration.RombergIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureHex, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexNaN, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#checklone, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackHelicalValley, [Manual]TestMethod=org.apache.commons.math.genetics.ListPopulationTest#testGetFittestChromosome, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testLongly, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowBigMatrix, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLInfDistanceInt, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testUOrthogonal, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRowRealMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testDeprecated2, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseManyComponents, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositivePositive, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testPutTransformer, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testDimension, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testWholeFormat, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testNormalizeAngle, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructorCause, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAbsNaN, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorInt, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaZero, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testPercentile, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testOperate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testLongly, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testErrorConditions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testZeroImaginary, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseInteger, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2Complex, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testPercentileSetter, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMath221, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrt1z, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnDistortedSine, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testQuaternion, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testDataInOut, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testHTrapezoidal, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveNoRoot, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.analysis.integration.RombergIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testQOrthogonal, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testMismatch, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatZero, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testSetBeta, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math.stat.data.LotteryTest#testCertifiedValues, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testFixedState, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testGetReducedFraction, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testSmallLastStep, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testContainsClass, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSeveralBlocks, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testGridTooFat, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetAbsoluteAccuracy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextHex, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMinimization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#test0Choose0, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformString, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testSetMean, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testRepeatedEigenvalue, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.genetics.ChromosomeTest#testFindSameChromosome, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testOperatePremultiplyLarge, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDigitLimitConstructor, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressandVariance, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConjugate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testChebyshevDifferentials, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEventsNoConvergence, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testAlpha, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEqualsWithAllowedUlps, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetRelativeAccuracy, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveAccuracySin, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testEmptyDigestFile, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDivide, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseZeroImaginary, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testNullIntervalCheck, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testTrigamma, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateIdentityMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemove2, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseInvalid, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testQuantiles, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testDigammaLargeArgs, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRandom, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testRemoval, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetMaximalIterationCount, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideNaN, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnTwoPoints, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testNoError, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseProper, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testScalarProduct, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.transform.FastCosineTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testVectorOnePair, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testQOrthogonal, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositiveNan, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositiveNegative, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testWrongDerivative, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testSubMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testNormalApproximateProbability, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMaximalTiesMinimum, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#interpolationInside, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNegateNaN, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testDenominatorFormat, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinNaN, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testScalarMultiplyInf, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testMatricesValues2, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testInconsistentSizes, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testConstructor2, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testConstructor1, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLogZero, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testMinMax, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testUUpperTriangular, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCosh, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackLinearFullRank, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testNaNs, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testCopy, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testPerfect, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseManyComponents, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnLarge, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParse, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testNorm, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDigitLimitConstructor, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testBigFractionConverter, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGet, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMath199, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testStats, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testContainsKey, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetRealFormatNull, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testRedundantUnsolvable, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareDataSetsComparisonBadCounts, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#backward, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.NewtonSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testToString, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testOperateLarge, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBox3Dimensional, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseNegativeImaginary, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearRank1, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testOperateLarge, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistanceInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testDataInOut, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnOnePoint, [Manual]TestMethod=org.apache.commons.math.ode.sampling.StepNormalizerTest#testBoundaries, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAngularSeparation, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSecureInt, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testInverse, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformDouble, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testCosh, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testTableauWithNoArtificialVars, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testScalb, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryChromosomeTest#testRandomConstructor, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.estimation.EstimatedParameterTest#testEstimate, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackPowellSingular, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testContainsKey, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testUUpperTriangular, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_normal_thirdRoot, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testToString, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testMath272, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeReal, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testMinimizeMaximize, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testOnStraightLine, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinh, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testArrayIndexConditions, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNotAllFiniteReal, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testNaN, [Manual]TestMethod=org.apache.commons.math.estimation.WeightedMeasurementTest#testConstruction, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testVariableSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testGetSummary, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDiagonal, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testInitialGuess, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnRealMatrix, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormat, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignByte, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testBoundaries, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testPaseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSecureLong, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testOperate, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGetWith0ExpectedSize, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf3291, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testHashCode, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAddNaN, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackOsborne2, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testRUpperTriangular, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackOsborne1, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testOperatePremultiplyLarge, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConjugateNaN, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testMath209, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMoreRows, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testMath209, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCos, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaNanPositivePositive, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testQuintic, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#checklone, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testConfig, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAsinInf, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testNISTExample, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAtanNaN, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbability2, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAcosInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testInsufficientBandwidth, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryCharacterEmpty, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testMoreLargeValues, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPow, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testArrayEquals, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBrownDennis, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesMaximum, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSecureInt, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testOrthogonal, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistance, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testSetScale, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testEmptyTable, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testMaxIterations, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaZeroPositive, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatNegative, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientLarge, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsMinimalTiesAverage, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testWholeFormat, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testVariance, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorLong, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testNaNs, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testRemoveTransformer, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testcreateFieldMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testUpperOrLower, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.MaxIterationsExceededExceptionTest#testComplexConstructor, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testTwoSampleTHeterscedastic, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testPcts, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testAngle, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testSinFunction2, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewBrentSolverValid, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testLongFormat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testLUDecomposition, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testSerial, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testProperties, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNorm1, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAtanInf, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf2807, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testConfig, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testOperate, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testClasses, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testCovarianceConsistency, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrt1zNaN, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignShort, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testSerial, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf1960, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testHash, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testNorm, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.ArrayFieldVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testGetArgumentInf, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest#dimension2, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testIntegerValues, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.estimation.EstimatedParameterTest#testConstruction, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryMutationTest#testMutate, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testIntValue, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemoveAbsent, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAcosNaN, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testSerial, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAddInfinite, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testLargeDegreesOfFreedom, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testWalk, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLog, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testScalarMultiplyNaN, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateRealMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.genetics.BinaryChromosomeTest#testIsSame, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackKowalikOsborne, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureLong, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testNoReset, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testBigDecimalValue, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testRootMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testChebyshevBounds, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testMulAndCheckLong, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testConstant, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextUniform, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testWithInitialCapacityAndExpansionFactor, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testNullEmpty, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsSame, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testNext, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testRoundDouble, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.DuplicateSampleAbscissaExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMultiplyNaNInf, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveNull, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinear, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testSerial, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testGetRealFormat, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testNullIntervalCheck, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testPercentile, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testGetValues, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseNegative, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.linear.CholeskySolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testToString, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullURL, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonUnEqualCounts, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testEpsilonLimitConstructor, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnVectorLarge, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficientFail, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testRoundFloat, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testSetStandardDeviation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLogInf, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testSubstitute, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testPlusMinus, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregate, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackPowellSingular, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCoshNaN, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testSinMin, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextPoisson, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.InvalidMatrixExceptionTest#testConstructorMessage, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewBisectionSolverValid, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.transform.FastCosineTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testAEqualQR, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testNumeratorFormat, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testMath274, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetColumnMatrixLarge, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetRealFormatNull, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaNegative, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstLegendrePolynomials, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testReciprocal, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowVectorLarge, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextSecureHex, [Manual]TestMethod=org.apache.commons.math.random.UniformRandomGeneratorTest#testMeanAndStandardDeviation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testMismatch, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testBasicFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testCopy, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.estimation.EstimatedParameterTest#testBound, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#test8Points, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testDefault, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.transform.FastSineTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddNullYSampleData, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAbsentOnExisting, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testControlParameters, [Manual]TestMethod=org.apache.commons.math.genetics.TournamentSelectionTest#testSelect, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testPopulation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest#testAggregation, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testForgottenImaginaryCharacter, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormat, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testRootEndpoints, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackWatson, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testDoubleConstructor, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryFormatNull, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#polynomial, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testModelWithNoArtificialVars, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testSingular, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsImaginaryDifference, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackFreudensteinRoth, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testDivide, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveSingle, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAbs, [Manual]TestMethod=org.apache.commons.math.linear.ArrayRealVectorTest#testMapFunctions, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testAdaptor, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testNonSquare, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testMeanAccessors, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testGetArgument, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullDoubleArray, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBox3Dimensional, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivideNaNInf, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testExamples, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testDimension4WithoutSplit, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtNaN, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testGetStandardDeviation, [Manual]TestMethod=org.apache.commons.math.linear.MatrixIndexExceptionTest#testConstructorMessage, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testParameters, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareIndependence, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testConstructorDouble, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsRemovedTiesSequential, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testNumeratorFormat, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAbsentOnExisting, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMatricesValues2, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testDeterminant, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsClass, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollision2, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testCoshInf, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testMoreColumns, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultiple, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetAbsoluteAccuracy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSingleton, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testLongFormat, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#notEnoughData, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testCumulativeProbabilityAgaintStackOverflow, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testOneWayAnovaUtils, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testPowell, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testIllConditioned, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseZeroX, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL2DistanceDouble, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testLongly, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testHighPercentile, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveSin, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testNextAfter, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testSingular, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonEqualCounts, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemoveFromEmpty, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testCoordinates, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutKeysWithCollisions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAsinNaN, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorDouble, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSecureLong, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateResiduals, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testNaN, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testFractionConverter, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testPAEqualLU, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testMean, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MedianTest#testCopy, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAdd, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareLargeTestStatistic, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaNegativePositive, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest#checkClone, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtInf, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAbsInfinite, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddCovarianceDataWithSampleSizeMismatch, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#exceedMaxEvaluations, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testStdErrorConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testFormatImproper, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutAndGetWithExpectedSize, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_realPartZero, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsNaN, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtImaginaryZero, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextFloat, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testPaired, [Manual]TestMethod=org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest#testImpossibleSerialization, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testZeroImaginary, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testParameterAccessors, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testNextDigestFail, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseProperInvalidMinus, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeBoth, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testDataInOut, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testMax, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testRestrictVariablesToNonNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.correlation.CovarianceTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexTableauTest#testInitialization, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testNonInvertible, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveXY, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.ode.ContinuousOutputModelTest#testModelsMerging, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testToString, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowInf, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest#testValues, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#noReset, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.transform.FastCosineTransformerTest#testAdHocData, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryCharacterNull, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanh, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testMath209, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemove2, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtRealNegative, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testUOrthogonal, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testBBiDiagonal, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testpowNull, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetMatrixLarge, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testVOrthogonal, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testDegenerateInverseCumulativeProbability, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#polynomial, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSinZero, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testGetReducedFraction, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testMatricesValues2, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseInteger, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testStaticFormatRealVectorImpl, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackMeyer, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testMatricesValues1, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSerial, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveNanPositive, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testSetMaximalIterationCount, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testSetterInjection, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testTTriDiagonal, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest#testSolveAccuracyNull, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConstructorNaN, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateBigIdentityMatrix, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositivePositive, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testStepSize, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest#testMeanAndCorrelation, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testConcurrentModification, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackRosenbrok, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignFloat, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignDouble, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseInvalid, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testVectorTwoPairs, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testExtremeValues, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testThreshold, [Manual]TestMethod=org.apache.commons.math.geometry.RotationOrderTest#testName, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorShort, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testLargeMeanCumulativeProbability, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutKeysWithCollisions, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testStaticFormatComplex, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testAEqualQTQt, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSinh, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testGetImaginaryFormat, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanNaN, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testInducedPermutation, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnVectorLarge, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenSeparator, [Manual]TestMethod=org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaPValue, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#dimensionCheck, [Manual]TestMethod=org.apache.commons.math.ConvergenceExceptionTest#testConstructorCause, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackRosenbrok, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testAdd, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testNaNContracts, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSample, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseZeroReal, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseIgnoredWhitespace, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.linear.CholeskySolverTest#testSolveDimensionErrors, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testBigMatrix, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testRank, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddXSampleData, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testAEqualVDVt, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testSingularities, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullCovarianceData, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testDoubleFormat, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testFactorialFail, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testQTOrthogonal, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testSimplistic, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testAbs, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testCopySubMatrix, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testSetAlpha, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testLaguerreDifferentials, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddSampleDataWithSizeMismatch, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetRowVector, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testTrace, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testNormInf, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSerial, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testRedundantSolvable, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testLogNaN, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatImproperNegative, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#testNoIntInverse, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryCharacterEmpty, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testBinIndexOverflow, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testEpsilonLimitConstructor, [Manual]TestMethod=org.apache.commons.math.stat.inference.OneWayAnovaTest#testAnovaFValue, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testSwissFertility, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testFactorial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testStats, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testLegendreDifferentials, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testMisc, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testFormatNegative, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testInconsistentSizes, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testQuinticMin, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackJennrichSampson, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testSampling, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateTwoSegment, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSetColumn, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testBoundParameters, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testTwoSets, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackFreudensteinRoth, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextPoissonLargeMean, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateResiduals, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextLong, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorByte, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testAEqualLLT, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutKeysWithCollision2, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testComposeInverse, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGetWithExpectedSize, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBrownDennis, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSingular, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.InteractionTest#testInteraction, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testBasicStats, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testAddAndCheckLong, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testCopy, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextPoissonLargeMean, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextSecureHex, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextHex, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testFormatNumber, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.linear.QRDecompositionImplTest#testMatricesValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNegativeBoth, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testDiscard, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testAdd1000, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testSmallDf, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testWalk, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextUniformExclusiveEndpoints, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaZeroPositive, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testSkewAndKurtosis, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testConstructorPatternArguments, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testCreateColumnFieldMatrix, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testMoreEstimatedParametersUnsorted, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testIntegerOverflow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testPopulation, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testIncreasingRobustnessItersIncreasesSmoothnessWithOutliers, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinInf, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaNanPositive, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNegativeReal, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testFunctionEvaluationExceptions, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testPutAndGetWith0ExpectedSize, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MedianTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testInconsistentEquations, [Manual]TestMethod=org.apache.commons.math.util.TransformerMapTest#testContainsTransformer, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testMatricesValues5, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testMatricesValues3, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest#testTestPositive, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testControlParameters, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAsin, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowVectorLarge, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseInvalidDenominator, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParametersVariance, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testSetElementArbitraryExpansion, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testLinear, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testHat, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_NAN_Inf, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveZero, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsAndInfs, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testAxisAngle, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetRelativeAccuracy, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testFirstHermitePolynomials, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testPaired, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testRevert, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testSerial, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testCircleFitting, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testLargeModel, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testVectorialProducts, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math.genetics.OnePointCrossoverTest#testCrossover, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemove, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetRowMatrixLarge, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#exceedMaxEvaluations, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testConditionNumber, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testParameters, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testStaticFormatVector3D, [Manual]TestMethod=org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextSecureInt, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations#test, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testRedundantEquations, [Manual]TestMethod=org.apache.commons.math.linear.LUSolverTest#testSolveSingularityErrors, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.NewtonSolverTest#testDeprecated, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareDataSetsComparisonBadCounts, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest#testPercentileSetter, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testCoshNaN, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testPositiveInfinity, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowNaNExponent, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testSumLog, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testMath209, [Manual]TestMethod=org.apache.commons.math.transform.FastSineTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformNull, [Manual]TestMethod=org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest#testNoOptimum, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testAdd, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowZero, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.stat.ranking.NaturalRankingTest#testNaNsFixedTiesRandom, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseProper, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testSingleVariableAndConstraint, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DTest#testDistance1, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testFrobeniusNorm, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositiveNegativePositive, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareTestTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#interpolationAtBounds, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testCopy, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNan, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveObsFromEmpty, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackMeyer, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testOneSampleTTest, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testNonInversible, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testFloatValue, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testDivide, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testGetAbsent, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testPPermutation, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateNoFailures, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testUnsorted, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.estimation.WeightedMeasurementTest#testIgnored, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testFloatValue, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testSmallDegreesOfFreedom, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testExpm1Function2, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest#testMinStep, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testKepler, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAtan, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuadraticFunction, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testDfAccessors, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testLogBetaPositivePositive, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testPutOnExisting, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testProductAndGeometricMean, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackBard, [Manual]TestMethod=org.apache.commons.math.linear.CholeskyDecompositionImplTest#testLTTransposed, [Manual]TestMethod=org.apache.commons.math.linear.TriDiagonalTransformerTest#testNoAccessBelowDiagonal, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testRank, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testAEqualUSVt, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testSerial, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#test2DData, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest#testInterpolateLinearDegenerateThreeSegment, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextInt, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testSkewAndKurtosis, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testMean, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testConditionNumber, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testCopy, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testCircleFittingBadInit, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseNegative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testPremultiplyVector, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testMutators, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.util.ContinuedFractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testParameters, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testDifferenceStats, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#testInitialGuess, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSin, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testDegenerateFullSample, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testMath199, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextExponential, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testExamples, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testExpNaN, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetRowMatrix, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testResetFunctionValueAccuracy, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testAddition, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testIntValue, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest#testHighDegreeLegendre, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.HarmonicFitterTest#test1PercentError, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackJennrichSampson, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testQRColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.EigenSolverTest#testInvertible, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testTranspose, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testNoDenseOutput, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoadNullFile, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testPow, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.distribution.ChiSquareDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest#testRemoval, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testDensity, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetSetColumnMatrixLarge, [Manual]TestMethod=org.apache.commons.math.complex.ComplexUtilsTest#testPolar2ComplexIllegalModulus, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSetImaginaryCharacterNull, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParseNoComponents, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testSetColumnVector, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackWatson, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testCopyFunctions, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testIdentity, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#testLongly, [Manual]TestMethod=org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest#testColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayPatternArguments, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testCopy, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testNextDigest, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorPatternArgumentsCause, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testGridTooFine, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextGaussian, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testIterator, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testQuadratic, [Manual]TestMethod=org.apache.commons.math.distribution.GammaDistributionTest#testProbabilities, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testNorm, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testPaired, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testTrivial, [Manual]TestMethod=org.apache.commons.math.MathExceptionTest#testPrintStackTrace, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testConcurrentModification, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParseProperNegative, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testNan, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextPermutation, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testForgottenPrefix, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testEmptyData, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testWalk, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleWithDecimals, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BisectionSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testEqualsRealDifference, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultipleToEmpty, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressandVariance, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testAddAndCheck, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf2576, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#cannotAddNullYSampleData, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.ProductTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.distribution.CauchyDistributionTest#testMedian, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testMultiply2, [Manual]TestMethod=org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest#serialization, [Manual]TestMethod=org.apache.commons.math.random.RandomAdaptorTest#testNextLongExtremeValues, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testArrayHash, [Manual]TestMethod=org.apache.commons.math.distribution.BinomialDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testBeta, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLcm, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest#dimensionCheck, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testIndicatorFloat, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testNaN, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testLoad, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveZero, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testExamples, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testDifferentImaginaryChar, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testZeroReal, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanInf, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testForgottenImaginaryCharacter, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testForgottenSuffix, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetVectors, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testDoubleDimension, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanhInf, [Manual]TestMethod=org.apache.commons.math.stat.FrequencyTest#testCounts, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldVectorTest#testPredicates, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testSolve, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#canEstimateRegressionParameters, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testSetNumberOfElements, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackKowalikOsborne, [Manual]TestMethod=org.apache.commons.math.linear.EigenDecompositionImplTest#testEigenvectors, [Manual]TestMethod=org.apache.commons.math.distribution.PoissonDistributionTest#testLargeMeanInverseCumulativeProbability, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testAdd, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FirstMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testGetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionFormatTest#testParse, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testCopy, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanhNaN, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testInverseCumulativeProbabilityExtremes, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testUnstableDerivative, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSubAndCheckErrorMessage, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest#testCopy, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testAbs, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest#derivativesConsistency, [Manual]TestMethod=org.apache.commons.math.optimization.univariate.BrentMinimizerTest#testMinEndpoints, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest#testEqualsAndHashCode, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MinTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseProperNegative, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEquals, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testNexFail, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testFormatNumber, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueDecompositionImplTest#testHadamard, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNthRoot_cornercase_thirdRoot_imaginaryPartEmpty, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformBigDecimal, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SummaryStatisticsTest#testSetterIllegalState, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testColumnsPermutation, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testFunctionEvaluationExceptions, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testGetRealFormat, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSqrtRealPositive, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testPremultiply, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testRemoveMultiplePastEmpty, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.PercentileTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLog, [Manual]TestMethod=org.apache.commons.math.transform.FastFourierTransformerTest#testParameters, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveNan, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSignLong, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testUnequalSizeArguments, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testBasicStats, [Manual]TestMethod=org.apache.commons.math.random.GaussianRandomGeneratorTest#testMeanAndStandardDeviation, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testRemoveFromEmpty, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testMulAndCheck, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testIncreasingTolerance, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testGeometricMean, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testAdd, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testNegate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest#testSerial, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testGetRowVector, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumSqTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testBinomialCoefficient, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testSetRow, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.VarianceTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testSinhInf, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.estimation.GaussNewtonEstimatorTest#testOneSet, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testQuinticFunction2, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testZeroReal, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testTrace, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testLLowerTriangular, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testSmallError, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testFloatingPointArguments, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.KurtosisTest#testCopyConsistency, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetRow, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.linear.FieldLUDecompositionImplTest#testPPermutation, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testL1DistanceDouble, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testRosenbrock, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testConsistency, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testLinearFunction, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testUnboundedSolution, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest#testNewSecantSolverValid, [Manual]TestMethod=org.apache.commons.math.distribution.FDistributionTest#testIllegalArguments, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testSumSq, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testSetImaginaryFormatNull, [Manual]TestMethod=org.apache.commons.math.optimization.fitting.PolynomialFitterTest#testNoError, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.ListUnivariateImplTest#testN0andN1Conditions, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testAcos, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemoveAbsent, [Manual]TestMethod=org.apache.commons.math.ode.FirstOrderConverterTest#testDecreasingSteps, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeReal, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testOneSampleT, [Manual]TestMethod=org.apache.commons.math.ode.sampling.StepNormalizerTest#testBeforeEnd, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testConstructors, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformInteger, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testNoDependency, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testConjugateInfiinite, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testCopy, [Manual]TestMethod=org.apache.commons.math.optimization.linear.SimplexSolverTest#testSimplexSolver, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testStaticFormatRealVectorImpl, [Manual]TestMethod=org.apache.commons.math.linear.BigMatrixImplTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testParseInvalidDenominator, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testDimensions, [Manual]TestMethod=org.apache.commons.math.util.ResizableDoubleArrayTest#testAddElementRolling, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GillIntegratorTest#testBigStep, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testIncrementation, [Manual]TestMethod=org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest#cannotAddXSampleData, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSeveralBlocks, [Manual]TestMethod=org.apache.commons.math.distribution.PascalDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testPaseNegativeInfinity, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest#testDerivativesConsistency, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testToString, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArray, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNegativeX, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testDimensionCheck, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testTanCritical, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSimpleWithDecimalsTrunc, [Manual]TestMethod=org.apache.commons.math.linear.RealMatrixImplTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.complex.ComplexFormatTest#testSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNegativeZ, [Manual]TestMethod=org.apache.commons.math.geometry.RotationTest#testApplyInverseTo, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testNegativeY, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeZ, [Manual]TestMethod=org.apache.commons.math.special.BetaTest#testRegularizedBetaPositivePositiveNan, [Manual]TestMethod=org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest#testMeanAndCovariance, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testExp, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testEvents, [Manual]TestMethod=org.apache.commons.math.stat.StatUtilsTest#testMin, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testGetColumn, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToFieldTest#testGetFromEmpty, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeX, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeY, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testSmallSamples, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest#canEstimateRegressionParameters, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetColumnVector, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testRegularizedGammaPositiveNegative, [Manual]TestMethod=org.apache.commons.math.MathConfigurationExceptionTest#testConstructorCause, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testParseSimpleNoDecimals, [Manual]TestMethod=org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testConstructorDouble, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#test4Points, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.summary.SumLogTest#testSpecialValues, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.FourthMomentTest#testEvaluation, [Manual]TestMethod=org.apache.commons.math.util.DefaultTransformerTest#testTransformObject, [Manual]TestMethod=org.apache.commons.math.stat.inference.TestUtilsTest#testChiSquareZeroCount, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testSubtract, [Manual]TestMethod=org.apache.commons.math.distribution.NormalDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.util.OpenIntToDoubleHashMapTest#testRemove, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testSetRowMatrix, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testStaticFormatVector3D, [Manual]TestMethod=org.apache.commons.math.complex.ComplexTest#testPowNaNBase, [Manual]TestMethod=org.apache.commons.math.linear.LUDecompositionImplTest#testPAEqualLU, [Manual]TestMethod=org.apache.commons.math.genetics.RandomKeyTest#testRandomPermutation, [Manual]TestMethod=org.apache.commons.math.linear.Array2DRowRealMatrixTest#testAddFail, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealVectorTest#testSerial, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testPerfectNegative, [Manual]TestMethod=org.apache.commons.math.distribution.TDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testSwiss, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.genetics.ChromosomeTest#testCompareTo, [Manual]TestMethod=org.apache.commons.math.special.GammaTest#testLogGammaNan, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testMultiply, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SkewnessTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.linear.FrenchRealVectorFormatTest#testParseNoComponents, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testSinhNaN, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextHex, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.BrentSolverTest#testBadEndpoints, [Manual]TestMethod=org.apache.commons.math.linear.MatrixUtilsTest#testcreateFieldIdentityMatrix, [Manual]TestMethod=org.apache.commons.math.random.AbstractRandomGeneratorTest#testNextBoolean, [Manual]TestMethod=org.apache.commons.math.fraction.BigFractionTest#testLongValue, [Manual]TestMethod=org.apache.commons.math.stat.inference.TTestFactoryTest#testTwoSampleTHomoscedastic, [Manual]TestMethod=org.apache.commons.math.distribution.HypergeometricDistributionTest#testPopulationSize, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.stat.inference.ChiSquareFactoryTest#testChiSquare, [Manual]TestMethod=org.apache.commons.math.complex.FrenchComplexFormatTest#testNegativeBoth, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.rank.MaxTest#testCopy, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testAdd, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testModes, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testfirstDerivativeComparison, [Manual]TestMethod=org.apache.commons.math.stat.regression.SimpleRegressionTest#testNaNs, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testSerial, [Manual]TestMethod=org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest#testMoreEstimatedParametersSimple, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testParsePositiveInfinity, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testLongValue, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.RiddersSolverTest#testExpm1Function, [Manual]TestMethod=org.apache.commons.math.random.RandomDataTest#testNextIntExtremeValues, [Manual]TestMethod=org.apache.commons.math.stat.correlation.PearsonsCorrelationTest#testInsufficientData, [Manual]TestMethod=org.apache.commons.math.ArgumentOutsideDomainExceptionTest#testConstructor, [Manual]TestMethod=org.apache.commons.math.distribution.WeibullDistributionTest#testInverseCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.distribution.ExponentialDistributionTest#testCumulativeProbabilities, [Manual]TestMethod=org.apache.commons.math.transform.FastHadamardTransformerTest#test3Points, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackHelicalValley, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testScalarAdd, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testFormatObject, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testEqualsWithAllowedDelta, [Manual]TestMethod=org.apache.commons.math.stat.data.LewTest#testCertifiedValues, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.NewtonSolverTest#testQuinticZero, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.MullerSolverTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.optimization.direct.MultiDirectionalTest#testPowell, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testIncreasingBandwidthIncreasesSmoothness, [Manual]TestMethod=org.apache.commons.math.linear.FieldMatrixImplTest#testTrace, [Manual]TestMethod=org.apache.commons.math.fraction.FractionFormatTest#testDenominatorFormat, [Manual]TestMethod=org.apache.commons.math.optimization.direct.NelderMeadTest#testMaxEvaluations, [Manual]TestMethod=org.apache.commons.math.linear.RealVectorFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.linear.SparseRealMatrixTest#testGetEntry, [Manual]TestMethod=org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest#testStdErrorConsistency, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testNonDefaultSetting, [Manual]TestMethod=org.apache.commons.math.analysis.solvers.LaguerreSolverTest#testQuinticFunction, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testSetColumnMatrix, [Manual]TestMethod=org.apache.commons.math.stat.CertifiedDataTest#testDescriptiveStatistics, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest#testSmallStep, [Manual]TestMethod=org.apache.commons.math.linear.QRSolverTest#testUnderdetermined, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackLinearRank1ZeroColsAndRows, [Manual]TestMethod=org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest#testExactIntegration, [Manual]TestMethod=org.apache.commons.math.linear.SparseFieldMatrixTest#testSetSubMatrix, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.SecondMomentTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.distribution.ZipfDistributionTest#testDensities, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackLinearRank1, [Manual]TestMethod=org.apache.commons.math.linear.SingularValueSolverTest#testSolve, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testGoldenRatio, [Manual]TestMethod=org.apache.commons.math.linear.BiDiagonalTransformerTest#testAEqualUSVt, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testSerialization, [Manual]TestMethod=org.apache.commons.math.stat.descriptive.moment.MeanTest#testMomentSmallSamples, [Manual]TestMethod=org.apache.commons.math.random.EmpiricalDistributionTest#testDoubleLoad, [Manual]TestMethod=org.apache.commons.math.util.MathUtilsTest#testLInfDistanceDouble, [Manual]TestMethod=org.apache.commons.math.geometry.FrenchVector3DFormatTest#testConstructorSingleFormat, [Manual]TestMethod=org.apache.commons.math.optimization.general.MinpackTest#testMinpackBard, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest#testSinFunction, [Manual]TestMethod=org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest#testNonStrictlyIncreasing, [Manual]TestMethod=org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest#testSubtraction, [Manual]TestMethod=org.apache.commons.math.geometry.Vector3DFormatTest#testParseNegativeAll, [Manual]TestMethod=org.apache.commons.math.special.ErfTest#testErf0, [Manual]TestMethod=org.apache.commons.math.FunctionEvaluationExceptionTest#testConstructorArrayArgumentCause, [Manual]TestMethod=org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest#testBackward, [Manual]TestMethod=org.apache.commons.math.fraction.FractionTest#testNegate, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSubMatrix, [Manual]TestMethod=org.apache.commons.math.estimation.MinpackTest#testMinpackChebyquad, [Manual]TestMethod=org.apache.commons.math.linear.BlockRealMatrixTest#testGetSetRowMatrixLarge, [Manual]TestMethod=org.apache.commons.math.linear.BlockFieldMatrixTest#testOperate, [Manual]TestMethod=org.apache.commons.math.random.ValueServerTest#testEmptyReplayFile], testFrameworkStrategy=fr.spoonlabs.flacoco.core.coverage.framework.JUnit4Strategy@3185fa6b}
Path to runner Classes: /Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar
Adding a line where an exception was thrown: org.apache.commons.math.distribution.AbstractContinuousDistribution@-@104
Adding a line from the block where an exception was thrown: org.apache.commons.math.distribution.AbstractContinuousDistribution@-@97
Adding a line from the block where an exception was thrown: org.apache.commons.math.distribution.AbstractContinuousDistribution@-@100
Adding a line from the block where an exception was thrown: org.apache.commons.math.distribution.AbstractContinuousDistribution@-@104
Adding a line where an exception was thrown: org.apache.commons.math.distribution.NormalDistributionImpl@-@162
Adding a line from the block where an exception was thrown: org.apache.commons.math.distribution.NormalDistributionImpl@-@156
Adding a line from the block where an exception was thrown: org.apache.commons.math.distribution.NormalDistributionImpl@-@159
Adding a line from the block where an exception was thrown: org.apache.commons.math.distribution.NormalDistributionImpl@-@162
Adding a line where an exception was thrown: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils@-@204
Adding a line from the block where an exception was thrown: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils@-@199
Adding a line where an exception was thrown: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils@-@127
Adding a line from the block where an exception was thrown: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils@-@127
Adding a line where an exception was thrown: org.apache.commons.math.distribution.AbstractContinuousDistribution@-@85
Adding a line from the block where an exception was thrown: org.apache.commons.math.distribution.AbstractContinuousDistribution@-@85
Tests found: 1986
Tests executed: 1986
Suspicious: 1 line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 88, susp 1.0
Suspicious: 2 line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 97, susp 1.0
Suspicious: 3 line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 100, susp 1.0
Suspicious: 4 line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 104, susp 1.0
Suspicious: 5 line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 199, susp 1.0
Suspicious: 6 line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 203, susp 1.0
Suspicious: 7 line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 204, susp 1.0
Suspicious: 8 line org.apache.commons.math.distribution.NormalDistributionImpl l: 128, susp 0.9994952044422009
Suspicious: 9 line org.apache.commons.math.distribution.NormalDistributionImpl l: 129, susp 0.9994952044422009
Suspicious: 10 line org.apache.commons.math.distribution.NormalDistributionImpl l: 131, susp 0.9994952044422009
Suspicious: 11 line org.apache.commons.math.distribution.NormalDistributionImpl l: 132, susp 0.9994952044422009
Suspicious: 12 line org.apache.commons.math.distribution.NormalDistributionImpl l: 162, susp 0.9994952044422009
Suspicious: 13 line org.apache.commons.math.distribution.NormalDistributionImpl l: 178, susp 0.9994952044422009
Suspicious: 14 line org.apache.commons.math.distribution.NormalDistributionImpl l: 181, susp 0.9994952044422009
Suspicious: 15 line org.apache.commons.math.special.Gamma l: 181, susp 0.9994952044422009
Suspicious: 16 line org.apache.commons.math.distribution.NormalDistributionImpl l: 184, susp 0.9994952044422009
Suspicious: 17 line org.apache.commons.math.distribution.NormalDistributionImpl l: 200, susp 0.9994952044422009
Suspicious: 18 line org.apache.commons.math.distribution.NormalDistributionImpl l: 203, susp 0.9994952044422009
Suspicious: 19 line org.apache.commons.math.distribution.NormalDistributionImpl l: 206, susp 0.9994952044422009
Suspicious: 20 line org.apache.commons.math.distribution.NormalDistributionImpl l: 221, susp 0.9994952044422009
Suspicious: 21 line org.apache.commons.math.distribution.NormalDistributionImpl l: 223, susp 0.9994952044422009
Suspicious: 22 line org.apache.commons.math.distribution.NormalDistributionImpl l: 224, susp 0.9994952044422009
Suspicious: 23 line org.apache.commons.math.distribution.NormalDistributionImpl l: 229, susp 0.9994952044422009
Suspicious: 24 line org.apache.commons.math.distribution.NormalDistributionImpl l: 156, susp 0.9989904088844018
Suspicious: 25 line org.apache.commons.math.distribution.NormalDistributionImpl l: 159, susp 0.9989904088844018
Suspicious: 26 line org.apache.commons.math.distribution.NormalDistributionImpl l: 72, susp 0.9969712266532055
Suspicious: 27 line org.apache.commons.math.distribution.NormalDistributionImpl l: 88, susp 0.9969712266532055
Suspicious: 28 line org.apache.commons.math.MaxIterationsExceededException l: 43, susp 0.9964664310954063
Suspicious: 29 line org.apache.commons.math.MaxIterationsExceededException l: 44, susp 0.9964664310954063
Suspicious: 30 line org.apache.commons.math.MaxIterationsExceededException l: 45, susp 0.9964664310954063
Suspicious: 31 line org.apache.commons.math.distribution.NormalDistributionImpl l: 126, susp 0.9959616355376073
Suspicious: 32 line org.apache.commons.math.distribution.NormalDistributionImpl l: 127, susp 0.9959616355376073
Suspicious: 33 line org.apache.commons.math.special.Gamma l: 162, susp 0.9954568399798082
Suspicious: 34 line org.apache.commons.math.MathException l: 172, susp 0.993942453306411
Suspicious: 35 line org.apache.commons.math.special.Erf l: 51, susp 0.9934376577486118
Suspicious: 36 line org.apache.commons.math.special.Erf l: 52, susp 0.9934376577486118
Suspicious: 37 line org.apache.commons.math.special.Erf l: 55, susp 0.9934376577486118
Suspicious: 38 line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 69, susp 0.9924280666330136
Suspicious: 39 line org.apache.commons.math.distribution.AbstractContinuousDistribution$1 l: 70, susp 0.9924280666330136
Suspicious: 40 line org.apache.commons.math.distribution.AbstractContinuousDistribution$1 l: 73, susp 0.9924280666330136
Suspicious: 41 line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 81, susp 0.9924280666330136
Suspicious: 42 line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 82, susp 0.9924280666330136
Suspicious: 43 line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 83, susp 0.9924280666330136
Suspicious: 44 line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 85, susp 0.9924280666330136
Suspicious: 45 line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 86, susp 0.9924280666330136
Suspicious: 46 line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 127, susp 0.9919232710752145
Suspicious: 47 line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 182, susp 0.9919232710752145
Suspicious: 48 line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 183, susp 0.9919232710752145
Suspicious: 49 line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 186, susp 0.9919232710752145
Suspicious: 50 line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 189, susp 0.9919232710752145
Suspicious: 51 line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 190, susp 0.9919232710752145
Suspicious: 52 line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 191, susp 0.9919232710752145
Suspicious: 53 line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 193, susp 0.9919232710752145
Suspicious: 54 line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 194, susp 0.9919232710752145
Suspicious: 55 line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 195, susp 0.9919232710752145
Suspicious: 56 line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 198, susp 0.9919232710752145
Suspicious: 57 line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 170, susp 0.9914184755174155
Suspicious: 58 line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 173, susp 0.9914184755174155
Suspicious: 59 line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 177, susp 0.9914184755174155
Suspicious: 60 line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 62, susp 0.9899040888440181
Suspicious: 61 line org.apache.commons.math.distribution.NormalDistributionImpl l: 43, susp 0.98889449772842
Suspicious: 62 line org.apache.commons.math.distribution.NormalDistributionImpl l: 46, susp 0.98889449772842
Suspicious: 63 line org.apache.commons.math.distribution.NormalDistributionImpl l: 54, susp 0.98889449772842
Suspicious: 64 line org.apache.commons.math.distribution.NormalDistributionImpl l: 55, susp 0.98889449772842
Suspicious: 65 line org.apache.commons.math.distribution.NormalDistributionImpl l: 56, susp 0.98889449772842
Suspicious: 66 line org.apache.commons.math.distribution.NormalDistributionImpl l: 57, susp 0.98889449772842
Suspicious: 67 line org.apache.commons.math.distribution.NormalDistributionImpl l: 80, susp 0.98889449772842
Suspicious: 68 line org.apache.commons.math.distribution.NormalDistributionImpl l: 81, susp 0.98889449772842
Suspicious: 69 line org.apache.commons.math.distribution.NormalDistributionImpl l: 97, susp 0.98889449772842
Suspicious: 70 line org.apache.commons.math.distribution.NormalDistributionImpl l: 102, susp 0.98889449772842
Suspicious: 71 line org.apache.commons.math.distribution.NormalDistributionImpl l: 103, susp 0.98889449772842
Suspicious: 72 line org.apache.commons.math.MathException l: 119, susp 0.9868753154972236
Suspicious: 73 line org.apache.commons.math.MathException l: 120, susp 0.9868753154972236
Suspicious: 74 line org.apache.commons.math.MathException l: 121, susp 0.9868753154972236
Suspicious: 75 line org.apache.commons.math.MathException l: 122, susp 0.9868753154972236
Suspicious: 76 line org.apache.commons.math.ConvergenceException l: 45, susp 0.9848561332660273
Suspicious: 77 line org.apache.commons.math.ConvergenceException l: 46, susp 0.9848561332660273
Suspicious: 78 line org.apache.commons.math.MathException l: 166, susp 0.9843513377082281
Suspicious: 79 line org.apache.commons.math.special.Gamma l: 169, susp 0.9818273599192328
Suspicious: 80 line org.apache.commons.math.special.Gamma l: 170, susp 0.9818273599192328
Suspicious: 81 line org.apache.commons.math.special.Gamma l: 171, susp 0.9818273599192328
Suspicious: 82 line org.apache.commons.math.special.Gamma l: 172, susp 0.9818273599192328
Suspicious: 83 line org.apache.commons.math.special.Gamma l: 174, susp 0.9818273599192328
Suspicious: 84 line org.apache.commons.math.special.Gamma l: 175, susp 0.9818273599192328
Suspicious: 85 line org.apache.commons.math.special.Gamma l: 178, susp 0.9818273599192328
Suspicious: 86 line org.apache.commons.math.special.Gamma l: 180, susp 0.9818273599192328
Suspicious: 87 line org.apache.commons.math.special.Gamma l: 183, susp 0.9818273599192328
Suspicious: 88 line org.apache.commons.math.special.Gamma l: 163, susp 0.97778899545684
Suspicious: 89 line org.apache.commons.math.special.Gamma l: 161, susp 0.9767794043412418
Suspicious: 90 line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 312, susp 0.9767794043412418
Suspicious: 91 line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 313, susp 0.9767794043412418
Suspicious: 92 line org.apache.commons.math.special.Gamma l: 159, susp 0.9742554265522463
Suspicious: 93 line org.apache.commons.math.special.Gamma l: 187, susp 0.9742554265522463
Suspicious: 94 line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 102, susp 0.9671882887430591
Suspicious: 95 line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 107, susp 0.9671882887430591
Suspicious: 96 line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 117, susp 0.9631499242806664
Suspicious: 97 line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 118, susp 0.9631499242806664
Suspicious: 98 line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 119, susp 0.9631499242806664
Suspicious: 99 line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 120, susp 0.9631499242806664
Suspicious: 100 line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 121, susp 0.9631499242806664
Suspicious: 101 line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 122, susp 0.9631499242806664
Suspicious: 102 line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 123, susp 0.9631499242806664
Suspicious: 103 line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 130, susp 0.9631499242806664
Suspicious: 104 line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 131, susp 0.9631499242806664
Suspicious: 105 line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 132, susp 0.9631499242806664
Suspicious: 106 line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 133, susp 0.9631499242806664
Suspicious: 107 line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 134, susp 0.9631499242806664
Suspicious: 108 line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 135, susp 0.9631499242806664
Suspicious: 109 line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 136, susp 0.9631499242806664
Suspicious: 110 line org.apache.commons.math.MathException l: 106, susp 0.9530540131246845
Suspicious: 111 line org.apache.commons.math.MathException l: 107, susp 0.9530540131246845
Suspicious: 112 line org.apache.commons.math.MathException l: 108, susp 0.9530540131246845
Suspicious: 113 line org.apache.commons.math.MathException l: 109, susp 0.9530540131246845
Suspicious: 114 line org.apache.commons.math.MathException l: 60, susp 0.9490156486622918
Suspicious: 115 line org.apache.commons.math.MathException l: 67, susp 0.9490156486622918
Suspicious: 116 line org.apache.commons.math.MathException l: 73, susp 0.9490156486622918
Suspicious: 117 line org.apache.commons.math.MathException l: 85, susp 0.9475012619888945
Suspicious: 118 line org.apache.commons.math.special.Gamma l: 94, susp 0.9469964664310954
Suspicious: 119 line org.apache.commons.math.special.Gamma l: 96, susp 0.9469964664310954
Suspicious: 120 line org.apache.commons.math.special.Gamma l: 97, susp 0.9469964664310954
Suspicious: 121 line org.apache.commons.math.special.Gamma l: 98, susp 0.9469964664310954
Suspicious: 122 line org.apache.commons.math.special.Gamma l: 100, susp 0.9469964664310954
Suspicious: 123 line org.apache.commons.math.special.Gamma l: 102, susp 0.9469964664310954
Suspicious: 124 line org.apache.commons.math.special.Gamma l: 103, susp 0.9469964664310954
Suspicious: 125 line org.apache.commons.math.special.Gamma l: 104, susp 0.9469964664310954
Suspicious: 126 line org.apache.commons.math.special.Gamma l: 91, susp 0.9454820797576982
Suspicious: 127 line org.apache.commons.math.special.Gamma l: 107, susp 0.9454820797576982
Suspicious: 128 line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 46, susp 0.939424533064109
Suspicious: 129 line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 47, susp 0.939424533064109
Suspicious: 130 line org.apache.commons.math.distribution.AbstractDistribution l: 39, susp 0.9242806663301363
Suspicious: 131 line org.apache.commons.math.distribution.AbstractDistribution l: 40, susp 0.9242806663301363
Suspicious:  line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 88, susp 1.0
Suspicious:  line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 97, susp 1.0
Suspicious:  line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 100, susp 1.0
Suspicious:  line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 104, susp 1.0
Suspicious:  line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 199, susp 1.0
Suspicious:  line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 203, susp 1.0
Suspicious:  line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 204, susp 1.0
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 128, susp 0.9994952044422009
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 129, susp 0.9994952044422009
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 131, susp 0.9994952044422009
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 132, susp 0.9994952044422009
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 162, susp 0.9994952044422009
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 178, susp 0.9994952044422009
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 181, susp 0.9994952044422009
Suspicious:  line org.apache.commons.math.special.Gamma l: 181, susp 0.9994952044422009
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 184, susp 0.9994952044422009
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 200, susp 0.9994952044422009
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 203, susp 0.9994952044422009
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 206, susp 0.9994952044422009
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 221, susp 0.9994952044422009
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 223, susp 0.9994952044422009
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 224, susp 0.9994952044422009
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 229, susp 0.9994952044422009
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 156, susp 0.9989904088844018
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 159, susp 0.9989904088844018
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 72, susp 0.9969712266532055
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 88, susp 0.9969712266532055
Suspicious:  line org.apache.commons.math.MaxIterationsExceededException l: 43, susp 0.9964664310954063
Suspicious:  line org.apache.commons.math.MaxIterationsExceededException l: 44, susp 0.9964664310954063
Suspicious:  line org.apache.commons.math.MaxIterationsExceededException l: 45, susp 0.9964664310954063
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 126, susp 0.9959616355376073
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 127, susp 0.9959616355376073
Suspicious:  line org.apache.commons.math.special.Gamma l: 162, susp 0.9954568399798082
Suspicious:  line org.apache.commons.math.MathException l: 172, susp 0.993942453306411
Suspicious:  line org.apache.commons.math.special.Erf l: 51, susp 0.9934376577486118
Suspicious:  line org.apache.commons.math.special.Erf l: 52, susp 0.9934376577486118
Suspicious:  line org.apache.commons.math.special.Erf l: 55, susp 0.9934376577486118
Suspicious:  line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 69, susp 0.9924280666330136
Suspicious:  line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 70, susp 0.9924280666330136
Suspicious:  line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 73, susp 0.9924280666330136
Suspicious:  line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 81, susp 0.9924280666330136
Suspicious:  line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 82, susp 0.9924280666330136
Suspicious:  line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 83, susp 0.9924280666330136
Suspicious:  line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 85, susp 0.9924280666330136
Suspicious:  line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 86, susp 0.9924280666330136
Suspicious:  line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 127, susp 0.9919232710752145
Suspicious:  line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 182, susp 0.9919232710752145
Suspicious:  line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 183, susp 0.9919232710752145
Suspicious:  line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 186, susp 0.9919232710752145
Suspicious:  line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 189, susp 0.9919232710752145
Suspicious:  line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 190, susp 0.9919232710752145
Suspicious:  line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 191, susp 0.9919232710752145
Suspicious:  line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 193, susp 0.9919232710752145
Suspicious:  line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 194, susp 0.9919232710752145
Suspicious:  line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 195, susp 0.9919232710752145
Suspicious:  line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 198, susp 0.9919232710752145
Suspicious:  line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 170, susp 0.9914184755174155
Suspicious:  line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 173, susp 0.9914184755174155
Suspicious:  line org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils l: 177, susp 0.9914184755174155
Suspicious:  line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 62, susp 0.9899040888440181
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 43, susp 0.98889449772842
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 46, susp 0.98889449772842
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 54, susp 0.98889449772842
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 55, susp 0.98889449772842
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 56, susp 0.98889449772842
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 57, susp 0.98889449772842
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 80, susp 0.98889449772842
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 81, susp 0.98889449772842
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 97, susp 0.98889449772842
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 102, susp 0.98889449772842
Suspicious:  line org.apache.commons.math.distribution.NormalDistributionImpl l: 103, susp 0.98889449772842
Suspicious:  line org.apache.commons.math.MathException l: 119, susp 0.9868753154972236
Suspicious:  line org.apache.commons.math.MathException l: 120, susp 0.9868753154972236
Suspicious:  line org.apache.commons.math.MathException l: 121, susp 0.9868753154972236
Suspicious:  line org.apache.commons.math.MathException l: 122, susp 0.9868753154972236
Suspicious:  line org.apache.commons.math.ConvergenceException l: 45, susp 0.9848561332660273
Suspicious:  line org.apache.commons.math.ConvergenceException l: 46, susp 0.9848561332660273
Suspicious:  line org.apache.commons.math.MathException l: 166, susp 0.9843513377082281
Suspicious:  line org.apache.commons.math.special.Gamma l: 169, susp 0.9818273599192328
Suspicious:  line org.apache.commons.math.special.Gamma l: 170, susp 0.9818273599192328
Suspicious:  line org.apache.commons.math.special.Gamma l: 171, susp 0.9818273599192328
Suspicious:  line org.apache.commons.math.special.Gamma l: 172, susp 0.9818273599192328
Suspicious:  line org.apache.commons.math.special.Gamma l: 174, susp 0.9818273599192328
Suspicious:  line org.apache.commons.math.special.Gamma l: 175, susp 0.9818273599192328
Suspicious:  line org.apache.commons.math.special.Gamma l: 178, susp 0.9818273599192328
Suspicious:  line org.apache.commons.math.special.Gamma l: 180, susp 0.9818273599192328
Suspicious:  line org.apache.commons.math.special.Gamma l: 183, susp 0.9818273599192328
Suspicious:  line org.apache.commons.math.special.Gamma l: 163, susp 0.97778899545684
Suspicious:  line org.apache.commons.math.special.Gamma l: 161, susp 0.9767794043412418
Suspicious:  line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 312, susp 0.9767794043412418
Suspicious:  line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 313, susp 0.9767794043412418
Suspicious:  line org.apache.commons.math.special.Gamma l: 159, susp 0.9742554265522463
Suspicious:  line org.apache.commons.math.special.Gamma l: 187, susp 0.9742554265522463
Suspicious:  line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 102, susp 0.9671882887430591
Suspicious:  line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 107, susp 0.9671882887430591
Suspicious:  line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 117, susp 0.9631499242806664
Suspicious:  line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 118, susp 0.9631499242806664
Suspicious:  line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 119, susp 0.9631499242806664
Suspicious:  line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 120, susp 0.9631499242806664
Suspicious:  line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 121, susp 0.9631499242806664
Suspicious:  line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 122, susp 0.9631499242806664
Suspicious:  line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 123, susp 0.9631499242806664
Suspicious:  line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 130, susp 0.9631499242806664
Suspicious:  line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 131, susp 0.9631499242806664
Suspicious:  line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 132, susp 0.9631499242806664
Suspicious:  line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 133, susp 0.9631499242806664
Suspicious:  line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 134, susp 0.9631499242806664
Suspicious:  line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 135, susp 0.9631499242806664
Suspicious:  line org.apache.commons.math.distribution.ContinuousDistributionAbstractTest l: 136, susp 0.9631499242806664
Suspicious:  line org.apache.commons.math.MathException l: 106, susp 0.9530540131246845
Suspicious:  line org.apache.commons.math.MathException l: 107, susp 0.9530540131246845
Suspicious:  line org.apache.commons.math.MathException l: 108, susp 0.9530540131246845
Suspicious:  line org.apache.commons.math.MathException l: 109, susp 0.9530540131246845
Suspicious:  line org.apache.commons.math.MathException l: 60, susp 0.9490156486622918
Suspicious:  line org.apache.commons.math.MathException l: 67, susp 0.9490156486622918
Suspicious:  line org.apache.commons.math.MathException l: 73, susp 0.9490156486622918
Suspicious:  line org.apache.commons.math.MathException l: 85, susp 0.9475012619888945
Suspicious:  line org.apache.commons.math.special.Gamma l: 94, susp 0.9469964664310954
Suspicious:  line org.apache.commons.math.special.Gamma l: 96, susp 0.9469964664310954
Suspicious:  line org.apache.commons.math.special.Gamma l: 97, susp 0.9469964664310954
Suspicious:  line org.apache.commons.math.special.Gamma l: 98, susp 0.9469964664310954
Suspicious:  line org.apache.commons.math.special.Gamma l: 100, susp 0.9469964664310954
Suspicious:  line org.apache.commons.math.special.Gamma l: 102, susp 0.9469964664310954
Suspicious:  line org.apache.commons.math.special.Gamma l: 103, susp 0.9469964664310954
Suspicious:  line org.apache.commons.math.special.Gamma l: 104, susp 0.9469964664310954
Suspicious:  line org.apache.commons.math.special.Gamma l: 91, susp 0.9454820797576982
Suspicious:  line org.apache.commons.math.special.Gamma l: 107, susp 0.9454820797576982
Suspicious:  line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 46, susp 0.939424533064109
Suspicious:  line org.apache.commons.math.distribution.AbstractContinuousDistribution l: 47, susp 0.939424533064109
Suspicious:  line org.apache.commons.math.distribution.AbstractDistribution l: 39, susp 0.9242806663301363
Suspicious:  line org.apache.commons.math.distribution.AbstractDistribution l: 40, susp 0.9242806663301363
Executing time Fault localization: 50 sec
Setting up the max to 507940 milliseconds (507 sec)
---- Initial suspicious size: 131
Creating variant 1
--ModifPoint:CtIfImpl, suspValue 1.0, line 97, file AbstractContinuousDistribution.java
--ModifPoint:CtIfImpl, suspValue 1.0, line 100, file AbstractContinuousDistribution.java
--ModifPoint:CtThrowImpl, suspValue 1.0, line 104, file AbstractContinuousDistribution.java
--ModifPoint:CtThrowImpl, suspValue 1.0, line 199, file UnivariateRealSolverUtils.java
--ModifPoint:CtIfImpl, suspValue 0.9994952044422009, line 129, file NormalDistributionImpl.java
--ModifPoint:CtIfImpl, suspValue 0.9994952044422009, line 131, file NormalDistributionImpl.java
--ModifPoint:CtReturnImpl, suspValue 0.9994952044422009, line 132, file NormalDistributionImpl.java
--ModifPoint:CtReturnImpl, suspValue 0.9994952044422009, line 162, file NormalDistributionImpl.java
--ModifPoint:CtIfImpl, suspValue 0.9994952044422009, line 178, file NormalDistributionImpl.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9994952044422009, line 181, file NormalDistributionImpl.java
--ModifPoint:CtThrowImpl, suspValue 0.9994952044422009, line 181, file Gamma.java
--ModifPoint:CtReturnImpl, suspValue 0.9994952044422009, line 184, file NormalDistributionImpl.java
--ModifPoint:CtIfImpl, suspValue 0.9994952044422009, line 200, file NormalDistributionImpl.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9994952044422009, line 203, file NormalDistributionImpl.java
--ModifPoint:CtReturnImpl, suspValue 0.9994952044422009, line 206, file NormalDistributionImpl.java
--ModifPoint:CtIfImpl, suspValue 0.9994952044422009, line 221, file NormalDistributionImpl.java
--ModifPoint:CtIfImpl, suspValue 0.9994952044422009, line 223, file NormalDistributionImpl.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9994952044422009, line 224, file NormalDistributionImpl.java
--ModifPoint:CtReturnImpl, suspValue 0.9994952044422009, line 229, file NormalDistributionImpl.java
--ModifPoint:CtIfImpl, suspValue 0.9989904088844018, line 156, file NormalDistributionImpl.java
--ModifPoint:CtIfImpl, suspValue 0.9989904088844018, line 159, file NormalDistributionImpl.java
--ModifPoint:CtReturnImpl, suspValue 0.9969712266532055, line 72, file NormalDistributionImpl.java
--ModifPoint:CtReturnImpl, suspValue 0.9969712266532055, line 88, file NormalDistributionImpl.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9964664310954063, line 44, file MaxIterationsExceededException.java
--ModifPoint:CtReturnImpl, suspValue 0.9959616355376073, line 126, file NormalDistributionImpl.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9954568399798082, line 162, file Gamma.java
--ModifPoint:CtReturnImpl, suspValue 0.993942453306411, line 172, file MathException.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9934376577486118, line 51, file Erf.java
--ModifPoint:CtIfImpl, suspValue 0.9934376577486118, line 52, file Erf.java
--ModifPoint:CtReturnImpl, suspValue 0.9934376577486118, line 55, file Erf.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9924280666330136, line 69, file AbstractContinuousDistribution.java
--ModifPoint:CtReturnImpl, suspValue 0.9924280666330136, line 73, file AbstractContinuousDistribution.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9924280666330136, line 81, file AbstractContinuousDistribution.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9924280666330136, line 82, file AbstractContinuousDistribution.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9924280666330136, line 83, file AbstractContinuousDistribution.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9924280666330136, line 85, file AbstractContinuousDistribution.java
--ModifPoint:CtReturnImpl, suspValue 0.9919232710752145, line 127, file UnivariateRealSolverUtils.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9919232710752145, line 182, file UnivariateRealSolverUtils.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9919232710752145, line 183, file UnivariateRealSolverUtils.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9919232710752145, line 186, file UnivariateRealSolverUtils.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9919232710752145, line 189, file UnivariateRealSolverUtils.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9919232710752145, line 190, file UnivariateRealSolverUtils.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9919232710752145, line 191, file UnivariateRealSolverUtils.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9919232710752145, line 193, file UnivariateRealSolverUtils.java
--ModifPoint:CtUnaryOperatorImpl, suspValue 0.9919232710752145, line 194, file UnivariateRealSolverUtils.java
--ModifPoint:CtIfImpl, suspValue 0.9919232710752145, line 198, file UnivariateRealSolverUtils.java
--ModifPoint:CtIfImpl, suspValue 0.9914184755174155, line 170, file UnivariateRealSolverUtils.java
--ModifPoint:CtIfImpl, suspValue 0.9914184755174155, line 173, file UnivariateRealSolverUtils.java
--ModifPoint:CtIfImpl, suspValue 0.9914184755174155, line 177, file UnivariateRealSolverUtils.java
--ModifPoint:CtIfImpl, suspValue 0.9899040888440181, line 62, file AbstractContinuousDistribution.java
--ModifPoint:CtInvocationImpl, suspValue 0.98889449772842, line 55, file NormalDistributionImpl.java
--ModifPoint:CtInvocationImpl, suspValue 0.98889449772842, line 56, file NormalDistributionImpl.java
--ModifPoint:CtAssignmentImpl, suspValue 0.98889449772842, line 80, file NormalDistributionImpl.java
--ModifPoint:CtIfImpl, suspValue 0.98889449772842, line 97, file NormalDistributionImpl.java
--ModifPoint:CtAssignmentImpl, suspValue 0.98889449772842, line 102, file NormalDistributionImpl.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9868753154972236, line 120, file MathException.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9868753154972236, line 121, file MathException.java
--ModifPoint:CtReturnImpl, suspValue 0.9843513377082281, line 166, file MathException.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9818273599192328, line 169, file Gamma.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9818273599192328, line 170, file Gamma.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9818273599192328, line 171, file Gamma.java
--ModifPoint:CtWhileImpl, suspValue 0.9818273599192328, line 172, file Gamma.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9818273599192328, line 174, file Gamma.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9818273599192328, line 175, file Gamma.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9818273599192328, line 178, file Gamma.java
--ModifPoint:CtIfImpl, suspValue 0.9818273599192328, line 180, file Gamma.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9818273599192328, line 183, file Gamma.java
--ModifPoint:CtIfImpl, suspValue 0.97778899545684, line 163, file Gamma.java
--ModifPoint:CtIfImpl, suspValue 0.9767794043412418, line 161, file Gamma.java
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.distribution.ContinuousDistributionAbstractTest, methodName=null, lineNumber=312, susp=0.9767794043412418]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.distribution.ContinuousDistributionAbstractTest, methodName=null, lineNumber=313, susp=0.9767794043412418]
--ModifPoint:CtIfImpl, suspValue 0.9742554265522463, line 159, file Gamma.java
--ModifPoint:CtReturnImpl, suspValue 0.9742554265522463, line 187, file Gamma.java
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.distribution.ContinuousDistributionAbstractTest, methodName=null, lineNumber=102, susp=0.9671882887430591]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.distribution.ContinuousDistributionAbstractTest, methodName=null, lineNumber=107, susp=0.9671882887430591]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.distribution.ContinuousDistributionAbstractTest, methodName=null, lineNumber=117, susp=0.9631499242806664]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.distribution.ContinuousDistributionAbstractTest, methodName=null, lineNumber=118, susp=0.9631499242806664]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.distribution.ContinuousDistributionAbstractTest, methodName=null, lineNumber=119, susp=0.9631499242806664]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.distribution.ContinuousDistributionAbstractTest, methodName=null, lineNumber=120, susp=0.9631499242806664]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.distribution.ContinuousDistributionAbstractTest, methodName=null, lineNumber=121, susp=0.9631499242806664]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.distribution.ContinuousDistributionAbstractTest, methodName=null, lineNumber=122, susp=0.9631499242806664]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.distribution.ContinuousDistributionAbstractTest, methodName=null, lineNumber=123, susp=0.9631499242806664]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.distribution.ContinuousDistributionAbstractTest, methodName=null, lineNumber=130, susp=0.9631499242806664]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.distribution.ContinuousDistributionAbstractTest, methodName=null, lineNumber=131, susp=0.9631499242806664]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.distribution.ContinuousDistributionAbstractTest, methodName=null, lineNumber=132, susp=0.9631499242806664]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.distribution.ContinuousDistributionAbstractTest, methodName=null, lineNumber=133, susp=0.9631499242806664]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.distribution.ContinuousDistributionAbstractTest, methodName=null, lineNumber=134, susp=0.9631499242806664]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.distribution.ContinuousDistributionAbstractTest, methodName=null, lineNumber=135, susp=0.9631499242806664]
 Not ctClass for suspicious code Candidate [className=org.apache.commons.math.distribution.ContinuousDistributionAbstractTest, methodName=null, lineNumber=136, susp=0.9631499242806664]
--ModifPoint:CtAssignmentImpl, suspValue 0.9530540131246845, line 107, file MathException.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9530540131246845, line 108, file MathException.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9490156486622918, line 60, file MathException.java
--ModifPoint:CtReturnImpl, suspValue 0.9490156486622918, line 73, file MathException.java
--ModifPoint:CtReturnImpl, suspValue 0.9475012619888945, line 85, file MathException.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9469964664310954, line 94, file Gamma.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9469964664310954, line 96, file Gamma.java
--ModifPoint:CtForImpl, suspValue 0.9469964664310954, line 97, file Gamma.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9469964664310954, line 98, file Gamma.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9469964664310954, line 100, file Gamma.java
--ModifPoint:CtLocalVariableImpl, suspValue 0.9469964664310954, line 102, file Gamma.java
--ModifPoint:CtAssignmentImpl, suspValue 0.9469964664310954, line 103, file Gamma.java
--ModifPoint:CtIfImpl, suspValue 0.9454820797576982, line 91, file Gamma.java
--ModifPoint:CtReturnImpl, suspValue 0.9454820797576982, line 107, file Gamma.java
Total suspicious from FL: 131,  85
Total ModPoint created: 85
Creating program variant #1, [Variant id: 1, #gens: 85, #ops: 0, parent:-]
Calculating fitness
Calculating fitness for original program variant.
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Test Failing is passing, Executing regression
Executing process: (timeout507secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.stat.data.LotteryTest  org.apache.commons.math.linear.FieldMatrixImplTest  org.apache.commons.math.ode.sampling.StepNormalizerTest  org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest  org.apache.commons.math.geometry.RotationOrderTest  org.apache.commons.math.analysis.solvers.NewtonSolverTest  org.apache.commons.math.estimation.EstimatedParameterTest  org.apache.commons.math.linear.CholeskyDecompositionImplTest  org.apache.commons.math.linear.Array2DRowRealMatrixTest  org.apache.commons.math.linear.SparseRealMatrixTest  org.apache.commons.math.util.OpenIntToFieldTest  org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest  org.apache.commons.math.optimization.fitting.PolynomialFitterTest  org.apache.commons.math.linear.ArrayRealVectorTest  org.apache.commons.math.distribution.HypergeometricDistributionTest  org.apache.commons.math.random.RandomAdaptorTest  org.apache.commons.math.ode.FirstOrderConverterTest  org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest  org.apache.commons.math.stat.inference.TestUtilsTest  org.apache.commons.math.stat.data.LewTest  org.apache.commons.math.distribution.GammaDistributionTest  org.apache.commons.math.stat.descriptive.rank.MedianTest  org.apache.commons.math.distribution.ZipfDistributionTest  org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest  org.apache.commons.math.stat.CertifiedDataTest  org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest  org.apache.commons.math.complex.FrenchComplexFormatTest  org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest  org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest  org.apache.commons.math.DuplicateSampleAbscissaExceptionTest  org.apache.commons.math.estimation.MinpackTest  org.apache.commons.math.genetics.FixedGenerationCountTest  org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest  org.apache.commons.math.fraction.BigFractionFormatTest  org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest  org.apache.commons.math.random.RandomDataTest  org.apache.commons.math.distribution.FDistributionTest  org.apache.commons.math.FunctionEvaluationExceptionTest  org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest  org.apache.commons.math.stat.inference.TTestFactoryTest  org.apache.commons.math.stat.descriptive.moment.SkewnessTest  org.apache.commons.math.special.GammaTest  org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest  org.apache.commons.math.analysis.integration.RombergIntegratorTest  org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest  org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest  org.apache.commons.math.stat.descriptive.SummaryStatisticsTest  org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest  org.apache.commons.math.stat.descriptive.moment.FirstMomentTest  org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest  org.apache.commons.math.complex.ComplexTest  org.apache.commons.math.distribution.BetaDistributionTest  org.apache.commons.math.special.ErfTest  org.apache.commons.math.special.BetaTest  org.apache.commons.math.ode.nonstiff.GillIntegratorTest  org.apache.commons.math.random.EmpiricalDistributionTest  org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest  org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest  org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest  org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest  org.apache.commons.math.random.AbstractRandomGeneratorTest  org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest  org.apache.commons.math.genetics.GeneticAlgorithmTestBinary  org.apache.commons.math.linear.BiDiagonalTransformerTest  org.apache.commons.math.util.DefaultTransformerTest  org.apache.commons.math.linear.LUDecompositionImplTest  org.apache.commons.math.random.ValueServerTest  org.apache.commons.math.stat.descriptive.moment.MeanTest  org.apache.commons.math.linear.QRDecompositionImplTest  org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest  org.apache.commons.math.stat.descriptive.moment.VarianceTest  org.apache.commons.math.genetics.OnePointCrossoverTest  org.apache.commons.math.stat.ranking.NaturalRankingTest  org.apache.commons.math.optimization.linear.SimplexSolverTest  org.apache.commons.math.stat.descriptive.moment.FourthMomentTest  org.apache.commons.math.linear.BlockRealMatrixTest  org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest  org.apache.commons.math.genetics.RandomKeyTest  org.apache.commons.math.stat.descriptive.summary.ProductTest  org.apache.commons.math.fraction.FractionTest  org.apache.commons.math.util.OpenIntToDoubleHashMapTest  org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest  org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest  org.apache.commons.math.genetics.ChromosomeTest  org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest  org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest  org.apache.commons.math.geometry.Vector3DTest  org.apache.commons.math.stat.descriptive.rank.MinTest  org.apache.commons.math.linear.FieldLUDecompositionImplTest  org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest  org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest  org.apache.commons.math.transform.FastHadamardTransformerTest  org.apache.commons.math.optimization.fitting.HarmonicFitterTest  org.apache.commons.math.stat.correlation.PearsonsCorrelationTest  org.apache.commons.math.random.GaussianRandomGeneratorTest  org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest  org.apache.commons.math.linear.FrenchRealVectorFormatTest  org.apache.commons.math.fraction.BigFractionTest  org.apache.commons.math.util.ContinuedFractionTest  org.apache.commons.math.util.TransformerMapTest  org.apache.commons.math.analysis.solvers.BisectionSolverTest  org.apache.commons.math.genetics.BinaryChromosomeTest  org.apache.commons.math.linear.BlockFieldMatrixTest  org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest  org.apache.commons.math.linear.SingularValueDecompositionImplTest  org.apache.commons.math.distribution.TDistributionTest  org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest  org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest  org.apache.commons.math.linear.InvalidMatrixExceptionTest  org.apache.commons.math.distribution.BinomialDistributionTest  org.apache.commons.math.linear.EigenSolverTest  org.apache.commons.math.stat.inference.TTestTest  org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest  org.apache.commons.math.random.UniformRandomGeneratorTest  org.apache.commons.math.stat.descriptive.rank.PercentileTest  org.apache.commons.math.analysis.solvers.RiddersSolverTest  org.apache.commons.math.linear.ArrayFieldVectorTest  org.apache.commons.math.ode.ContinuousOutputModelTest  org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest  org.apache.commons.math.optimization.linear.SimplexTableauTest  org.apache.commons.math.ConvergenceExceptionTest  org.apache.commons.math.util.ResizableDoubleArrayTest  org.apache.commons.math.complex.ComplexFormatTest  org.apache.commons.math.linear.RealMatrixImplTest  org.apache.commons.math.stat.descriptive.summary.SumTest  org.apache.commons.math.linear.SparseFieldVectorTest  org.apache.commons.math.genetics.ElitisticListPopulationTest  org.apache.commons.math.stat.descriptive.summary.SumSqTest  org.apache.commons.math.linear.SparseRealVectorTest  org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest  org.apache.commons.math.linear.EigenDecompositionImplTest  org.apache.commons.math.analysis.integration.SimpsonIntegratorTest  org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest  org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations  org.apache.commons.math.stat.descriptive.moment.KurtosisTest  org.apache.commons.math.transform.FastFourierTransformerTest  org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest  org.apache.commons.math.distribution.NormalDistributionTest  org.apache.commons.math.distribution.PoissonDistributionTest  org.apache.commons.math.geometry.Vector3DFormatTest  org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest  org.apache.commons.math.genetics.TournamentSelectionTest  org.apache.commons.math.optimization.general.MinpackTest  org.apache.commons.math.analysis.solvers.BrentSolverTest  org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest  org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest  org.apache.commons.math.estimation.WeightedMeasurementTest  org.apache.commons.math.stat.inference.ChiSquareTestTest  org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest  org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest  org.apache.commons.math.linear.MatrixIndexExceptionTest  org.apache.commons.math.genetics.BinaryMutationTest  org.apache.commons.math.fraction.FractionFormatTest  org.apache.commons.math.distribution.PascalDistributionTest  org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest  org.apache.commons.math.util.MathUtilsTest  org.apache.commons.math.complex.ComplexUtilsTest  org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest  org.apache.commons.math.optimization.direct.MultiDirectionalTest  org.apache.commons.math.genetics.FitnessCachingTest  org.apache.commons.math.linear.BigMatrixImplTest  org.apache.commons.math.stat.inference.ChiSquareFactoryTest  org.apache.commons.math.stat.descriptive.InteractionTest  org.apache.commons.math.stat.correlation.CovarianceTest  org.apache.commons.math.optimization.univariate.BrentMinimizerTest  org.apache.commons.math.linear.QRSolverTest  org.apache.commons.math.linear.RealVectorFormatTest  org.apache.commons.math.analysis.solvers.LaguerreSolverTest  org.apache.commons.math.linear.CholeskySolverTest  org.apache.commons.math.distribution.WeibullDistributionTest  org.apache.commons.math.stat.StatUtilsTest  org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest  org.apache.commons.math.analysis.solvers.MullerSolverTest  org.apache.commons.math.linear.TriDiagonalTransformerTest  org.apache.commons.math.distribution.ChiSquareDistributionTest  org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest  org.apache.commons.math.transform.FastSineTransformerTest  org.apache.commons.math.stat.inference.OneWayAnovaTest  org.apache.commons.math.transform.FastCosineTransformerTest  org.apache.commons.math.ArgumentOutsideDomainExceptionTest  org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest  org.apache.commons.math.ode.nonstiff.EulerIntegratorTest  org.apache.commons.math.stat.descriptive.rank.MaxTest  org.apache.commons.math.stat.descriptive.ListUnivariateImplTest  org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest  org.apache.commons.math.MaxIterationsExceededExceptionTest  org.apache.commons.math.linear.MatrixUtilsTest  org.apache.commons.math.optimization.direct.NelderMeadTest  org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest  org.apache.commons.math.geometry.RotationTest  org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest  org.apache.commons.math.linear.SingularValueSolverTest  org.apache.commons.math.genetics.RandomKeyMutationTest  org.apache.commons.math.distribution.ExponentialDistributionTest  org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest  org.apache.commons.math.geometry.FrenchVector3DFormatTest  org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest  org.apache.commons.math.stat.regression.SimpleRegressionTest  org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest  org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest  org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest  org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest  org.apache.commons.math.linear.LUSolverTest  org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest  org.apache.commons.math.MathConfigurationExceptionTest  org.apache.commons.math.estimation.GaussNewtonEstimatorTest  org.apache.commons.math.genetics.ListPopulationTest  org.apache.commons.math.MathExceptionTest  org.apache.commons.math.distribution.CauchyDistributionTest  org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest  org.apache.commons.math.linear.SparseFieldMatrixTest  org.apache.commons.math.stat.descriptive.summary.SumLogTest  org.apache.commons.math.stat.FrequencyTest  org.apache.commons.math.stat.descriptive.moment.SecondMomentTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 1986] ,[]
The original fitness is : 1.0
----------------------------
---Configuration properties
p:lastJUnitVersion= ./examples/libs/junit-4.11.jar
p:alternativecompliancelevel= 8
p:ignoredTestCases= 
p:workingDirectory= /Users/marekmazur/astor/./output_astor
p:manipulatesuper= false
p:validation= process
p:jvm4testexecution= /Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin
p:operatorspace= irr-statements
p:diffcontext= 0
p:binjavafolder= /target/classes/
p:synthesis_depth= 3
p:gzoltartestpackagetoexclude= junit.framework
p:skipfitnessinitialpopulation= false
p:evosuiteresultfolder= evosuite
p:flthreshold= 0
p:regressionforfaultlocalization= true
p:collectonlyusedmethod= false
p:folderDiff= ./diffSolutions
p:preservelinenumbers= true
p:tmax2= 507940
p:tmax1= 10000
p:probagenmutation= false
p:nomodificationconvergence= 100
p:diff_type= relative
p:nolog= False
p:targetelementprocessor= statements
p:srctestfolder= /src/test/
p:forceExecuteRegression= false
p:clusteringfilename= clustering.csv
p:failing= org.apache.commons.math.distribution.NormalDistributionTest
p:logtestexecution= false
p:evo_buggy_class= true
p:numberExecutions= 1
p:maxnumbersolutions= 1000000
p:evo_affected_by_op= true
p:population= 1
p:maxCombinationVariableLimit= false
p:savesolution= true
p:javacompliancelevel= 8
p:uniqueoptogen= false
p:gzoltarpackagetonotinstrument= junit.framework
p:projectIdentifier= 
p:modificationpointnavigation= weight
p:stopfirst= true
p:multipointmodification= false
p:elementsToMutate= 10
p:jsonoutputname= astor_output
p:evoDSE= false
p:bintestfolder= /target/test-classes/
p:testbystep= false
p:version-location= ./math-version/
p:gzoltarVersion= 1.7.3
p:locationGzoltarJar= ./lib/
p:reintroduce= PARENTS:ORIGINAL
p:executorjar= ./lib/jtestex7.jar
p:maxGeneration= 1000000
p:max_synthesis_step= 10000
p:projectinfocommand= com.github.tdurieux:project-config-maven-plugin:info
p:maxVarCombination= 1000
p:includeZeros= false
p:maxtime= 60
p:evosuitejar= ./lib/evosuite-master-1.0.4-SNAPSHOT.jar
p:jvmversion= 1.8.0_202
p:commandTrunk= 50000
p:faultlocalization= flacoco
p:resetmodel= true
p:maxsuspcandidates= 1000
p:mode= jgenprog
p:learningdir= 
p:jvm4evosuitetestexecution= /Users/marekmazur/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin
p:filterfaultlocalization= true
p:mutationrate= 1 
p:pathToMVNRepository= 
p:resourcesfolder= /src/main/resources:/src/test/resources:
p:timezone= America/Los_Angeles
p:runjava7code= false
p:evoRunOnBuggyClass= true
p:compiler= fr.inria.astor.core.manipulation.bytecode.compiler.SpoonClassCompiler
p:limitbysuspicious= true
p:logsattemps= true
p:dependenciespath= /Users/marekmazur/astor/examples/libs/junit-4.4.jar
p:packageToInstrument= org.apache.commons
p:skipfaultlocalization= false
p:scope= local
p:transformingredient= false
p:fitnessfunction= fr.inria.astor.core.solutionsearch.population.TestCaseFitnessFunction
p:maxnumvariablesperingredient= 10
p:parsesourcefromoriginal= true
p:pvariantfoldername= variant-
p:savespoonmodelondisk= false
p:srcjavafolder= /src/java/
p:populationcontroller= fr.inria.astor.core.solutionsearch.population.TestCaseBasedFitnessPopulationController
p:ignoreflakyinfl= false
p:cleantemplates= true
p:applyCrossover= false
p:maxmodificationpoints= 1000
p:duplicateingredientsinspace= false
p:metid= 0
p:continuewhenmodelfail= true
p:saveall= false
p:seed= 10
p:savecompletepatched= true
p:resetoperations= false
p:keepcomments= true
p:processoutputinfile= false
p:location= /Users/marekmazur/astor/defects4j/math-85
p:probabilistictransformation= true
p:overridemaxtime= true
p:outputjsonresult= true
p:allpoints= false
p:antipattern= false
p:bugId= 280
p:evosuitetimeout= 120
p:maxtimefactor= 10
p:nrPlaceholders= 1
p:forcesubprocesskilling= false
----------------------------
----Starting Solution Search
----------Running generation: 1, population size: 1

***** Generation 1 : 0
**Parent Variant: [Variant id: 1, #gens: 85, #ops: 0, parent:-]

--Child created id: 2
--Creating new operations for variant [Variant id: 2, #gens: 85, #ops: 0, parent:1]
---analyzing modificationPoint position: 61
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [n]
--> var from patch: n spoon.support.reflect.code.CtVariableWriteImpl
location: Gamma.java172
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtWhileImpl) `while ((java.lang.Math.abs(an) > epsilon) && (n < maxIterations)) { 	// compute next element in the [...] ` -topatch--> `// compute next element in the series n = n + 1.0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.special.Gamma line: 172, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtWhileImpl) `while ((java.lang.Math.abs(an) > epsilon) && (n < maxIterations)) { 	// compute next element in the [...] ` -topatch--> `// compute next element in the series n = n + 1.0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 2, #gens: 86, #ops: 1, parent:1] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 2
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-2/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
-Killed id: pid->7875
The Process that runs JUnit test cases did not terminate within waitTime of 10 seconds
Killed the Process that runs JUnit test cases 7875
**The validation 1 have not finished well**
-Valid?: null, fitness 1.7976931348623157E308
Ingredient counter is Zero
---Undoing: gnrtn(1): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtWhileImpl) `while ((java.lang.Math.abs(an) > epsilon) && (n < maxIterations)) { 	// compute next element in the [...] ` -topatch--> `// compute next element in the series n = n + 1.0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (1(f=1.0), 2(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (1(f=1.0), )
----------Running generation: 2, population size: 1

***** Generation 2 : 0
**Parent Variant: [Variant id: 3, #gens: 85, #ops: 0, parent:-]

--Child created id: 4
--Creating new operations for variant [Variant id: 4, #gens: 85, #ops: 0, parent:3]
---analyzing modificationPoint position: 12
Templates availables33
Attempts Base Ingredients  1 total 33
vars from patch [p, java.lang.Double.POSITIVE_INFINITY]
--> var from patch: p spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: java.lang.Double.POSITIVE_INFINITY spoon.support.reflect.code.CtFieldReadImpl
location: NormalDistributionImpl.java200
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (p < 0.5) { 	ret = getMean(); } else { 	ret = java.lang.Double.MAX_VALUE; } ` -topatch--> `if (p == 1) { 	return java.lang.Double.POSITIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.distribution.NormalDistributionImpl line: 200, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (p < 0.5) { 	ret = getMean(); } else { 	ret = java.lang.Double.MAX_VALUE; } ` -topatch--> `if (p == 1) { 	return java.lang.Double.POSITIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 4, #gens: 86, #ops: 1, parent:3] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 4
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-4/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(2): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (p < 0.5) { 	ret = getMean(); } else { 	ret = java.lang.Double.MAX_VALUE; } ` -topatch--> `if (p == 1) { 	return java.lang.Double.POSITIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (3(f=1.0), 4(f=1.0), )
Selected to next generation: IDs2--> (3(f=1.0), )
----------Running generation: 3, population size: 1

***** Generation 3 : 0
**Parent Variant: [Variant id: 5, #gens: 85, #ops: 0, parent:-]

--Child created id: 6
--Creating new operations for variant [Variant id: 6, #gens: 85, #ops: 0, parent:5]
---analyzing modificationPoint position: 49
Templates availables3
Attempts Base Ingredients  1 total 3
vars from patch [p]
--> var from patch: p spoon.support.reflect.code.CtVariableReadImpl
location: AbstractContinuousDistribution.java62
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((p < 0.0) || (p > 1.0)) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgum[...] ` -topatch--> `if ((p < 0.0) || (p > 1.0)) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgum[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.distribution.AbstractContinuousDistribution line: 62, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((p < 0.0) || (p > 1.0)) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgum[...] ` -topatch--> `if ((p < 0.0) || (p > 1.0)) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgum[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 6, #gens: 85, #ops: 1, parent:5] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 6
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-6/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(3): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((p < 0.0) || (p > 1.0)) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgum[...] ` -topatch--> `if ((p < 0.0) || (p > 1.0)) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgum[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (5(f=1.0), 6(f=1.0), )
Selected to next generation: IDs2--> (5(f=1.0), )
----------Running generation: 4, population size: 1

***** Generation 4 : 0
**Parent Variant: [Variant id: 7, #gens: 85, #ops: 0, parent:-]

--Child created id: 8
--Creating new operations for variant [Variant id: 8, #gens: 85, #ops: 0, parent:7]
---analyzing modificationPoint position: 33
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 0 not mutation generated in  double upperBound = getDomainUpperBound(p)
---analyzing modificationPoint position: 30
---modifPoint 1 not mutation generated in  // by default, do simple root finding using bracketing and default solver. // subclasses can overrid[...]
---analyzing modificationPoint position: 58
---modifPoint 2 not mutation generated in  // calculate series double n = 0.0// current element index 
---analyzing modificationPoint position: 16
location: NormalDistributionImpl.java223
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (p > 0.5) { 	ret = getMean() + getStandardDeviation(); } else { 	ret = getMean(); } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 8, #gens: 84, #ops: 1, parent:7] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 8, errors: [NormalDistributionImpl.java:230: error: variable ret might not have been initialized
		return ret;
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(4): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (p > 0.5) { 	ret = getMean() + getStandardDeviation(); } else { 	ret = getMean(); } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (7(f=1.0), 8(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (7(f=1.0), )
----------Running generation: 5, population size: 1

***** Generation 5 : 0
**Parent Variant: [Variant id: 9, #gens: 85, #ops: 0, parent:-]

--Child created id: 10
--Creating new operations for variant [Variant id: 10, #gens: 85, #ops: 0, parent:9]
---analyzing modificationPoint position: 7
Templates availables33
Attempts Base Ingredients  1 total 33
vars from patch [mean]
--> var from patch: mean spoon.support.reflect.code.CtVariableReadImpl
location: NormalDistributionImpl.java162
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return super.inverseCumulativeProbability(p) ` -topatch--> `setMean(mean)` (spoon.support.reflect.code.CtInvocationImpl) 
---MP=org.apache.commons.math.distribution.NormalDistributionImpl line: 162, pointed element: CtInvocationImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return super.inverseCumulativeProbability(p) ` -topatch--> `setMean(mean)` (spoon.support.reflect.code.CtInvocationImpl) 

--Summary Creation: for variant [Variant id: 10, #gens: 86, #ops: 1, parent:9] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 10
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-10/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(5): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return super.inverseCumulativeProbability(p) ` -topatch--> `setMean(mean)` (spoon.support.reflect.code.CtInvocationImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (9(f=1.0), 10(f=1.0), )
Selected to next generation: IDs2--> (9(f=1.0), )
----------Running generation: 6, population size: 1

***** Generation 6 : 0
**Parent Variant: [Variant id: 11, #gens: 85, #ops: 0, parent:-]

--Child created id: 12
--Creating new operations for variant [Variant id: 12, #gens: 85, #ops: 0, parent:11]
---analyzing modificationPoint position: 2
location: AbstractContinuousDistribution.java104
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtThrowImpl) `// Failed bracket convergence was not because of corner solution throw new org.apache.commons.math.M[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 12, #gens: 84, #ops: 1, parent:11] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 12
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-12/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(6): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtThrowImpl) `// Failed bracket convergence was not because of corner solution throw new org.apache.commons.math.M[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (11(f=1.0), 12(f=1.0), )
Selected to next generation: IDs2--> (11(f=1.0), )
----------Running generation: 7, population size: 1

***** Generation 7 : 0
**Parent Variant: [Variant id: 13, #gens: 85, #ops: 0, parent:-]

--Child created id: 14
--Creating new operations for variant [Variant id: 14, #gens: 85, #ops: 0, parent:13]
---analyzing modificationPoint position: 50
Templates availables33
Attempts Base Ingredients  1 total 33
vars from patch []
location: NormalDistributionImpl.java55
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `setMean(mean) ` -topatch--> `double ret` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.distribution.NormalDistributionImpl line: 55, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `setMean(mean) ` -topatch--> `double ret` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 14, #gens: 86, #ops: 1, parent:13] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 14
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-14/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(7): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtInvocationImpl) `setMean(mean) ` -topatch--> `double ret` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (13(f=1.0), 14(f=1.0), )
Selected to next generation: IDs2--> (13(f=1.0), )
----------Running generation: 8, population size: 1

***** Generation 8 : 0
**Parent Variant: [Variant id: 15, #gens: 85, #ops: 0, parent:-]

--Child created id: 16
--Creating new operations for variant [Variant id: 16, #gens: 85, #ops: 0, parent:15]
---analyzing modificationPoint position: 32
Templates availables5
Attempts Base Ingredients  1 total 5
---modifPoint 0 not mutation generated in  // Try to bracket root, test domain endoints if this fails double lowerBound = getDomainLowerBound(p[...]
---analyzing modificationPoint position: 59
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 1 not mutation generated in  double an = 1.0 / a// n-th element in the series 
---analyzing modificationPoint position: 69
location: Gamma.java159
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 	ret = [...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 16, #gens: 84, #ops: 1, parent:15] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 16, errors: [Gamma.java:188: error: variable ret might not have been initialized
		return ret;
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(8): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 	ret = [...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (15(f=1.0), 16(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (15(f=1.0), )
----------Running generation: 9, population size: 1

***** Generation 9 : 0
**Parent Variant: [Variant id: 17, #gens: 85, #ops: 0, parent:-]

--Child created id: 18
--Creating new operations for variant [Variant id: 18, #gens: 85, #ops: 0, parent:17]
---analyzing modificationPoint position: 23
Templates availables2
Attempts Base Ingredients  1 total 2
vars from patch [this.maxIterations]
--> var from patch: this.maxIterations spoon.support.reflect.code.CtFieldWriteImpl
SameName: final 








































int maxIterations
SameName: final 








































int maxIterations
Transforming shadowed variable in maxIterations = maxIterations
location: MaxIterationsExceededException.java44
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.MaxIterationsExceededException line: 44, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 18, #gens: 86, #ops: 1, parent:17] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 18, errors: [MaxIterationsExceededException.java:45: error: final parameter maxIterations may not be assigned
		maxIterations = maxIterations; 		this.maxIterations = maxIterations;
		^]
Ingredient counter is Zero
---Undoing: gnrtn(9): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (17(f=1.0), 18(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (17(f=1.0), )
----------Running generation: 10, population size: 1

***** Generation 10 : 0
**Parent Variant: [Variant id: 19, #gens: 85, #ops: 0, parent:-]

--Child created id: 20
--Creating new operations for variant [Variant id: 20, #gens: 85, #ops: 0, parent:19]
---analyzing modificationPoint position: 32
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 0 not mutation generated in  // Try to bracket root, test domain endoints if this fails double lowerBound = getDomainLowerBound(p[...]
---analyzing modificationPoint position: 28
Templates availables4
Attempts Base Ingredients  1 total 4
vars from patch [x]
--> var from patch: x spoon.support.reflect.code.CtVariableReadImpl
location: Erf.java52
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (x < 0) { 	ret = -ret; } ` -topatch--> `double ret = org.apache.commons.math.special.Gamma.regularizedGammaP(0.5, x * x, 1.0E-15, 10000)` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.special.Erf line: 52, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (x < 0) { 	ret = -ret; } ` -topatch--> `double ret = org.apache.commons.math.special.Gamma.regularizedGammaP(0.5, x * x, 1.0E-15, 10000)` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 20, #gens: 86, #ops: 1, parent:19] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 20, errors: [Erf.java:55: error: variable ret is already defined in method erf(double)
		} 		double ret = org.apache.commons.math.special.Gamma.regularizedGammaP(0.5, x * x, 1.0E-15, 10000);
		  		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(10): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (x < 0) { 	ret = -ret; } ` -topatch--> `double ret = org.apache.commons.math.special.Gamma.regularizedGammaP(0.5, x * x, 1.0E-15, 10000)` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (19(f=1.0), 20(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (19(f=1.0), )
----------Running generation: 11, population size: 1

***** Generation 11 : 0
**Parent Variant: [Variant id: 21, #gens: 85, #ops: 0, parent:-]

--Child created id: 22
--Creating new operations for variant [Variant id: 22, #gens: 85, #ops: 0, parent:21]
---analyzing modificationPoint position: 53
location: NormalDistributionImpl.java97
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (sd <= 0.0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException([...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 22, #gens: 84, #ops: 1, parent:21] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 22
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-22/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 13] ,[]
-Valid?: |false|2|13|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(11): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (sd <= 0.0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException([...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (21(f=1.0), 22(f=2.0), )
Selected to next generation: IDs2--> (21(f=1.0), )
----------Running generation: 12, population size: 1

***** Generation 12 : 0
**Parent Variant: [Variant id: 23, #gens: 85, #ops: 0, parent:-]

--Child created id: 24
--Creating new operations for variant [Variant id: 24, #gens: 85, #ops: 0, parent:23]
---analyzing modificationPoint position: 33
---modifPoint 0 not mutation generated in  double upperBound = getDomainUpperBound(p)
---analyzing modificationPoint position: 18
---modifPoint 1 not mutation generated in  return ret
---analyzing modificationPoint position: 22
Templates availables33
Attempts Base Ingredients  1 total 33
---modifPoint 2 not mutation generated in  return standardDeviation
---analyzing modificationPoint position: 34
Templates availables5
Attempts Base Ingredients  1 total 5
vars from patch [p]
--> var from patch: p spoon.support.reflect.code.CtVariableReadImpl
location: AbstractContinuousDistribution.java83
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] bracket = null ` -topatch--> `double upperBound = getDomainUpperBound(p)` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.distribution.AbstractContinuousDistribution line: 83, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] bracket = null ` -topatch--> `double upperBound = getDomainUpperBound(p)` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 24, #gens: 85, #ops: 1, parent:23] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 24, errors: [AbstractContinuousDistribution.java:83: error: variable upperBound is already defined in method inverseCumulativeProbability(double)
		double upperBound = getDomainUpperBound(p); 		double upperBound = getDomainUpperBound(p);
		                                            		       ^, AbstractContinuousDistribution.java:86: error: cannot find symbol
			bracket = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket(
			^
  symbol:   variable bracket
  location: class org.apache.commons.math.distribution.AbstractContinuousDistribution, AbstractContinuousDistribution.java:110: error: cannot find symbol
		bracket[0], bracket[1]);
		^
  symbol:   variable bracket
  location: class org.apache.commons.math.distribution.AbstractContinuousDistribution, AbstractContinuousDistribution.java:110: error: cannot find symbol
		bracket[0], bracket[1]);
		            ^
  symbol:   variable bracket
  location: class org.apache.commons.math.distribution.AbstractContinuousDistribution]
Ingredient counter is Zero
---Undoing: gnrtn(12): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] bracket = null ` -topatch--> `double upperBound = getDomainUpperBound(p)` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (23(f=1.0), 24(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (23(f=1.0), )
----------Running generation: 13, population size: 1

***** Generation 13 : 0
**Parent Variant: [Variant id: 25, #gens: 85, #ops: 0, parent:-]

--Child created id: 26
--Creating new operations for variant [Variant id: 26, #gens: 85, #ops: 0, parent:25]
---analyzing modificationPoint position: 47
Templates availables28
Attempts Base Ingredients  1 total 28
vars from patch [maximumIterations]
--> var from patch: maximumIterations spoon.support.reflect.code.CtVariableReadImpl
location: UnivariateRealSolverUtils.java173
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (maximumIterations <= 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgum[...] ` -topatch--> `if (maximumIterations <= 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgum[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils line: 173, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (maximumIterations <= 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgum[...] ` -topatch--> `if (maximumIterations <= 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgum[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 26, #gens: 86, #ops: 1, parent:25] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 26
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-26/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(13): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (maximumIterations <= 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgum[...] ` -topatch--> `if (maximumIterations <= 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgum[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (25(f=1.0), 26(f=1.0), )
Selected to next generation: IDs2--> (25(f=1.0), )
----------Running generation: 14, population size: 1

***** Generation 14 : 0
**Parent Variant: [Variant id: 27, #gens: 85, #ops: 0, parent:-]

--Child created id: 28
--Creating new operations for variant [Variant id: 28, #gens: 85, #ops: 0, parent:27]
---analyzing modificationPoint position: 14
---modifPoint 0 not mutation generated in  return ret
---analyzing modificationPoint position: 28
Templates availables1
Attempts Base Ingredients  1 total 1
vars from patch [x, ret]
--> var from patch: x spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: ret spoon.support.reflect.code.CtVariableWriteImpl
location: Erf.java52
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (x < 0) { 	ret = -ret; } ` -topatch--> `if (x < 0) { 	ret = -ret; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.special.Erf line: 52, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (x < 0) { 	ret = -ret; } ` -topatch--> `if (x < 0) { 	ret = -ret; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 28, #gens: 85, #ops: 1, parent:27] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 28
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-28/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(14): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (x < 0) { 	ret = -ret; } ` -topatch--> `if (x < 0) { 	ret = -ret; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (27(f=1.0), 28(f=1.0), )
Selected to next generation: IDs2--> (27(f=1.0), )
----------Running generation: 15, population size: 1

***** Generation 15 : 0
**Parent Variant: [Variant id: 29, #gens: 85, #ops: 0, parent:-]

--Child created id: 30
--Creating new operations for variant [Variant id: 30, #gens: 85, #ops: 0, parent:29]
---analyzing modificationPoint position: 2
location: AbstractContinuousDistribution.java104
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtThrowImpl) `// Failed bracket convergence was not because of corner solution throw new org.apache.commons.math.M[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 30, #gens: 84, #ops: 1, parent:29] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 30
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-30/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(15): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtThrowImpl) `// Failed bracket convergence was not because of corner solution throw new org.apache.commons.math.M[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (29(f=1.0), 30(f=1.0), )
Selected to next generation: IDs2--> (29(f=1.0), )
----------Running generation: 16, population size: 1

***** Generation 16 : 0
**Parent Variant: [Variant id: 31, #gens: 85, #ops: 0, parent:-]

--Child created id: 32
--Creating new operations for variant [Variant id: 32, #gens: 85, #ops: 0, parent:31]
---analyzing modificationPoint position: 11
---modifPoint 0 not mutation generated in  return ret
---analyzing modificationPoint position: 42
Templates availables28
Attempts Base Ingredients  1 total 28
vars from patch [function]
--> var from patch: function spoon.support.reflect.code.CtVariableReadImpl
location: UnivariateRealSolverUtils.java191
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `fa = function.value(a) ` -topatch--> `if (function == null) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentExc[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils line: 191, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `fa = function.value(a) ` -topatch--> `if (function == null) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentExc[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 32, #gens: 86, #ops: 1, parent:31] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 32
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-32/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(16): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `fa = function.value(a) ` -topatch--> `if (function == null) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentExc[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (31(f=1.0), 32(f=1.0), )
Selected to next generation: IDs2--> (31(f=1.0), )
----------Running generation: 17, population size: 1

***** Generation 17 : 0
**Parent Variant: [Variant id: 33, #gens: 85, #ops: 0, parent:-]

--Child created id: 34
--Creating new operations for variant [Variant id: 34, #gens: 85, #ops: 0, parent:33]
---analyzing modificationPoint position: 53
Templates availables9
Attempts Base Ingredients  1 total 9
---modifPoint 0 not mutation generated in  if (sd <= 0.0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException([...]
---analyzing modificationPoint position: 72
Templates availables20
Attempts Base Ingredients  1 total 20
vars from patch [this.pattern]
--> var from patch: this.pattern spoon.support.reflect.code.CtFieldWriteImpl
SameName: java.lang.String pattern
SameName: java.lang.String pattern
Transforming shadowed variable in pattern = pattern
location: MathException.java108
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.arguments = (arguments == null) ? new java.lang.Object[0] : arguments.clone() ` -topatch--> `pattern = pattern` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.MathException line: 108, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.arguments = (arguments == null) ? new java.lang.Object[0] : arguments.clone() ` -topatch--> `pattern = pattern` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 34, #gens: 86, #ops: 1, parent:33] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 34
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-34/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(17): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.arguments = (arguments == null) ? new java.lang.Object[0] : arguments.clone() ` -topatch--> `pattern = pattern` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (33(f=1.0), 34(f=1.0), )
Selected to next generation: IDs2--> (33(f=1.0), )
----------Running generation: 18, population size: 1

***** Generation 18 : 0
**Parent Variant: [Variant id: 35, #gens: 85, #ops: 0, parent:-]

--Child created id: 36
--Creating new operations for variant [Variant id: 36, #gens: 85, #ops: 0, parent:35]
---analyzing modificationPoint position: 23
Templates availables2
Attempts Base Ingredients  1 total 2
Attempts Base Ingredients  2 total 2
vars from patch [maxIterations]
--> var from patch: maxIterations spoon.support.reflect.code.CtFieldReadImpl
SameName: final 








































int maxIterations
SameName: final 








































int maxIterations
Transforming shadowed variable in return maxIterations
location: MaxIterationsExceededException.java44
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `return maxIterations` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.MaxIterationsExceededException line: 44, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `return maxIterations` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 36, #gens: 86, #ops: 1, parent:35] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 36, errors: [MaxIterationsExceededException.java:65: error: incompatible types: unexpected return value
		return maxIterations; 		this.maxIterations = maxIterations;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(18): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `return maxIterations` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (35(f=1.0), 36(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (35(f=1.0), )
----------Running generation: 19, population size: 1

***** Generation 19 : 0
**Parent Variant: [Variant id: 37, #gens: 85, #ops: 0, parent:-]

--Child created id: 38
--Creating new operations for variant [Variant id: 38, #gens: 85, #ops: 0, parent:37]
---analyzing modificationPoint position: 41
Templates availables28
Attempts Base Ingredients  1 total 28
vars from patch [maximumIterations]
--> var from patch: maximumIterations spoon.support.reflect.code.CtVariableReadImpl
location: UnivariateRealSolverUtils.java190
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `b = java.lang.Math.min(b + 1.0, upperBound) ` -topatch--> `if (maximumIterations <= 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgum[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils line: 190, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `b = java.lang.Math.min(b + 1.0, upperBound) ` -topatch--> `if (maximumIterations <= 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgum[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 38, #gens: 86, #ops: 1, parent:37] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 38
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-38/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(19): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `b = java.lang.Math.min(b + 1.0, upperBound) ` -topatch--> `if (maximumIterations <= 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgum[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (37(f=1.0), 38(f=1.0), )
Selected to next generation: IDs2--> (37(f=1.0), )
----------Running generation: 20, population size: 1

***** Generation 20 : 0
**Parent Variant: [Variant id: 39, #gens: 85, #ops: 0, parent:-]

--Child created id: 40
--Creating new operations for variant [Variant id: 40, #gens: 85, #ops: 0, parent:39]
---analyzing modificationPoint position: 28
location: Erf.java52
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (x < 0) { 	ret = -ret; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 40, #gens: 84, #ops: 1, parent:39] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 40
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-40/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 13] ,[]
-Valid?: |false|7|13|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(20): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (x < 0) { 	ret = -ret; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (39(f=1.0), 40(f=7.0), )
Selected to next generation: IDs2--> (39(f=1.0), )
----------Running generation: 21, population size: 1

***** Generation 21 : 0
**Parent Variant: [Variant id: 41, #gens: 85, #ops: 0, parent:-]

--Child created id: 42
--Creating new operations for variant [Variant id: 42, #gens: 85, #ops: 0, parent:41]
---analyzing modificationPoint position: 51
location: NormalDistributionImpl.java56
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setStandardDeviation(sd) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 42, #gens: 84, #ops: 1, parent:41] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 42
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-42/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 4, was successful: false, cases executed: 13] ,[]
-Valid?: |false|4|13|[]|, fitness 4.0
Ingredient counter is Zero
---Undoing: gnrtn(21): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtInvocationImpl) `setStandardDeviation(sd) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (41(f=1.0), 42(f=4.0), )
Selected to next generation: IDs2--> (41(f=1.0), )
----------Running generation: 22, population size: 1

***** Generation 22 : 0
**Parent Variant: [Variant id: 43, #gens: 85, #ops: 0, parent:-]

--Child created id: 44
--Creating new operations for variant [Variant id: 44, #gens: 85, #ops: 0, parent:43]
---analyzing modificationPoint position: 8
Templates availables9
Attempts Base Ingredients  1 total 9
vars from patch [p, ret, java.lang.Double.MAX_VALUE]
--> var from patch: p spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: ret spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: java.lang.Double.MAX_VALUE spoon.support.reflect.code.CtFieldReadImpl
location: NormalDistributionImpl.java178
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (p < 0.5) { 	ret = -java.lang.Double.MAX_VALUE; } else { 	ret = getMean(); } ` -topatch--> `if (p < 0.5) { 	ret = -java.lang.Double.MAX_VALUE; } else { 	ret = getMean(); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.distribution.NormalDistributionImpl line: 178, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (p < 0.5) { 	ret = -java.lang.Double.MAX_VALUE; } else { 	ret = getMean(); } ` -topatch--> `if (p < 0.5) { 	ret = -java.lang.Double.MAX_VALUE; } else { 	ret = getMean(); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 44, #gens: 85, #ops: 1, parent:43] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 44
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-44/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(22): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (p < 0.5) { 	ret = -java.lang.Double.MAX_VALUE; } else { 	ret = getMean(); } ` -topatch--> `if (p < 0.5) { 	ret = -java.lang.Double.MAX_VALUE; } else { 	ret = getMean(); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (43(f=1.0), 44(f=1.0), )
Selected to next generation: IDs2--> (43(f=1.0), )
----------Running generation: 23, population size: 1

***** Generation 23 : 0
**Parent Variant: [Variant id: 45, #gens: 85, #ops: 0, parent:-]

--Child created id: 46
--Creating new operations for variant [Variant id: 46, #gens: 85, #ops: 0, parent:45]
---analyzing modificationPoint position: 31
Templates availables2
Attempts Base Ingredients  1 total 2
---modifPoint 0 not mutation generated in  return cumulativeProbability(x) - p
---analyzing modificationPoint position: 21
Templates availables33
Attempts Base Ingredients  1 total 33
vars from patch []
location: NormalDistributionImpl.java72
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return mean ` -topatch--> `// JDK 1.5 blows at 38 return 0.0` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.distribution.NormalDistributionImpl line: 72, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return mean ` -topatch--> `// JDK 1.5 blows at 38 return 0.0` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 46, #gens: 86, #ops: 1, parent:45] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 46, errors: [NormalDistributionImpl.java:131: error: unreachable statement
		return 0.0; 		return mean;} 	/**
		            		^]
Ingredient counter is Zero
---Undoing: gnrtn(23): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return mean ` -topatch--> `// JDK 1.5 blows at 38 return 0.0` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (45(f=1.0), 46(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (45(f=1.0), )
----------Running generation: 24, population size: 1

***** Generation 24 : 0
**Parent Variant: [Variant id: 47, #gens: 85, #ops: 0, parent:-]

--Child created id: 48
--Creating new operations for variant [Variant id: 48, #gens: 85, #ops: 0, parent:47]
---analyzing modificationPoint position: 23
Templates availables2
Attempts Base Ingredients  1 total 2
vars from patch [maxIterations]
--> var from patch: maxIterations spoon.support.reflect.code.CtVariableReadImpl
location: MaxIterationsExceededException.java44
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.MaxIterationsExceededException line: 44, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 48, #gens: 86, #ops: 1, parent:47] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 48, errors: [MaxIterationsExceededException.java:45: error: final parameter maxIterations may not be assigned
		this.maxIterations = maxIterations; 		maxIterations = maxIterations;
		                                    		^]
Ingredient counter is Zero
---Undoing: gnrtn(24): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `maxIterations = maxIterations` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (47(f=1.0), 48(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (47(f=1.0), )
----------Running generation: 25, population size: 1

***** Generation 25 : 0
**Parent Variant: [Variant id: 49, #gens: 85, #ops: 0, parent:-]

--Child created id: 50
--Creating new operations for variant [Variant id: 50, #gens: 85, #ops: 0, parent:49]
---analyzing modificationPoint position: 21
Templates availables33
Attempts Base Ingredients  1 total 33
---modifPoint 0 not mutation generated in  return mean
---analyzing modificationPoint position: 31
Templates availables2
Attempts Base Ingredients  1 total 2
Attempts Base Ingredients  2 total 2
--- no mutation left to apply in element spoon.support.reflect.code.CtReturnImpl@1, search space size: 2
---modifPoint 1 not mutation generated in  return cumulativeProbability(x) - p
---analyzing modificationPoint position: 17
Templates availables7
Attempts Base Ingredients  1 total 7
vars from patch [ret]
--> var from patch: ret spoon.support.reflect.code.CtVariableWriteImpl
location: NormalDistributionImpl.java224
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = getMean() + getStandardDeviation() ` -topatch--> `ret = getMean()` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.distribution.NormalDistributionImpl line: 224, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = getMean() + getStandardDeviation() ` -topatch--> `ret = getMean()` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 50, #gens: 85, #ops: 1, parent:49] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 50
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-50/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(25): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = getMean() + getStandardDeviation() ` -topatch--> `ret = getMean()` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (49(f=1.0), 50(f=1.0), )
Selected to next generation: IDs2--> (49(f=1.0), )
----------Running generation: 26, population size: 1

***** Generation 26 : 0
**Parent Variant: [Variant id: 51, #gens: 85, #ops: 0, parent:-]

--Child created id: 52
--Creating new operations for variant [Variant id: 52, #gens: 85, #ops: 0, parent:51]
---analyzing modificationPoint position: 84
---modifPoint 0 not mutation generated in  return ret
---analyzing modificationPoint position: 8
Templates availables33
Attempts Base Ingredients  1 total 33
vars from patch [ret]
--> var from patch: ret spoon.support.reflect.code.CtVariableWriteImpl
location: NormalDistributionImpl.java178
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (p < 0.5) { 	ret = -java.lang.Double.MAX_VALUE; } else { 	ret = getMean(); } ` -topatch--> `ret = getMean()` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.distribution.NormalDistributionImpl line: 178, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (p < 0.5) { 	ret = -java.lang.Double.MAX_VALUE; } else { 	ret = getMean(); } ` -topatch--> `ret = getMean()` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 52, #gens: 86, #ops: 1, parent:51] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 52
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-52/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(26): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (p < 0.5) { 	ret = -java.lang.Double.MAX_VALUE; } else { 	ret = getMean(); } ` -topatch--> `ret = getMean()` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (51(f=1.0), 52(f=1.0), )
Selected to next generation: IDs2--> (51(f=1.0), )
----------Running generation: 27, population size: 1

***** Generation 27 : 0
**Parent Variant: [Variant id: 53, #gens: 85, #ops: 0, parent:-]

--Child created id: 54
--Creating new operations for variant [Variant id: 54, #gens: 85, #ops: 0, parent:53]
---analyzing modificationPoint position: 36
---modifPoint 0 not mutation generated in  return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket(function, initial,[...]
---analyzing modificationPoint position: 37
---modifPoint 1 not mutation generated in  double a = initial
---analyzing modificationPoint position: 69
Templates availables12
Attempts Base Ingredients  1 total 12
vars from patch [x, org.apache.commons.math.special.Gamma.S_LIMIT]
--> var from patch: x spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: org.apache.commons.math.special.Gamma.S_LIMIT spoon.support.reflect.code.CtFieldReadImpl
location: Gamma.java159
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 	ret = [...] ` -topatch--> `if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 	return 1 / (x * x); }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.special.Gamma line: 159, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 	ret = [...] ` -topatch--> `if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 	return 1 / (x * x); }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 54, #gens: 85, #ops: 1, parent:53] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 54, errors: [Gamma.java:361: error: illegal start of expression
	 * C limit
	 ^, Gamma.java:361: error: ';' expected
	 * C limit
	    ^, Gamma.java:362: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	  ^, Gamma.java:362: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	^, Gamma.java:362: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	        ^, Gamma.java:362: error: ';' expected
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	              ^, Gamma.java:364: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	^, Gamma.java:364: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	        ^, Gamma.java:364: error: ';' expected
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	              ^, Gamma.java:384: error: illegal start of expression
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	^, Gamma.java:384: error: illegal start of expression
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	       ^, Gamma.java:384: error: ';' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	             ^, Gamma.java:384: error: '.class' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	                                    ^, Gamma.java:384: error: ';' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	                                     ^, Gamma.java:396: error: illegal start of expression
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	^, Gamma.java:396: error: illegal start of expression
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	       ^, Gamma.java:396: error: ';' expected
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	             ^, Gamma.java:396: error: '.class' expected
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	                                     ^, Gamma.java:396: error: ';' expected
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	                                      ^, Gamma.java:397: error: reached end of file while parsing
			return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));} 		return org.apache.commons.math.special.Gamma.trigamma(x + 1) + (1 / (x * x));}}
			                                                                                               		                                                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(27): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 	ret = [...] ` -topatch--> `if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 	return 1 / (x * x); }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (53(f=1.0), 54(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (53(f=1.0), )
----------Running generation: 28, population size: 1

***** Generation 28 : 0
**Parent Variant: [Variant id: 55, #gens: 85, #ops: 0, parent:-]

--Child created id: 56
--Creating new operations for variant [Variant id: 56, #gens: 85, #ops: 0, parent:55]
---analyzing modificationPoint position: 82
location: Gamma.java103
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = ((((x + 0.5) * java.lang.Math.log(tmp)) - tmp) +  org.apache.commons.math.special.Gamma.HALF_L[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 56, #gens: 84, #ops: 1, parent:55] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 56, errors: [Gamma.java:108: error: variable ret might not have been initialized
		return ret;
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(28): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = ((((x + 0.5) * java.lang.Math.log(tmp)) - tmp) +  org.apache.commons.math.special.Gamma.HALF_L[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (55(f=1.0), 56(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (55(f=1.0), )
----------Running generation: 29, population size: 1

***** Generation 29 : 0
**Parent Variant: [Variant id: 57, #gens: 85, #ops: 0, parent:-]

--Child created id: 58
--Creating new operations for variant [Variant id: 58, #gens: 85, #ops: 0, parent:57]
---analyzing modificationPoint position: 3
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 0 not mutation generated in  throw new org.apache.commons.math.ConvergenceException( "number of iterations={0}, maximum iteration[...]
---analyzing modificationPoint position: 56
Templates availables20
Attempts Base Ingredients  1 total 20
vars from patch [this.arguments]
--> var from patch: this.arguments spoon.support.reflect.code.CtFieldWriteImpl
location: MathException.java121
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.arguments = new java.lang.Object[0] ` -topatch--> `this.arguments = new java.lang.Object[0]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.MathException line: 121, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.arguments = new java.lang.Object[0] ` -topatch--> `this.arguments = new java.lang.Object[0]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 58, #gens: 86, #ops: 1, parent:57] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 58, errors: [MathException.java:122: error: variable arguments might already have been assigned
		this.arguments = new java.lang.Object[0]; 		this.arguments = new java.lang.Object[0];
		                                          		    ^]
Ingredient counter is Zero
---Undoing: gnrtn(29): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.arguments = new java.lang.Object[0] ` -topatch--> `this.arguments = new java.lang.Object[0]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (57(f=1.0), 58(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (57(f=1.0), )
----------Running generation: 30, population size: 1

***** Generation 30 : 0
**Parent Variant: [Variant id: 59, #gens: 85, #ops: 0, parent:-]

--Child created id: 60
--Creating new operations for variant [Variant id: 60, #gens: 85, #ops: 0, parent:59]
---analyzing modificationPoint position: 46
location: UnivariateRealSolverUtils.java170
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (function == null) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentExc[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 60, #gens: 84, #ops: 1, parent:59] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 60
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-60/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(30): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (function == null) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentExc[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (59(f=1.0), 60(f=1.0), )
Selected to next generation: IDs2--> (59(f=1.0), )
----------Running generation: 31, population size: 1

***** Generation 31 : 0
**Parent Variant: [Variant id: 61, #gens: 85, #ops: 0, parent:-]

--Child created id: 62
--Creating new operations for variant [Variant id: 62, #gens: 85, #ops: 0, parent:61]
---analyzing modificationPoint position: 33
Templates availables14
Attempts Base Ingredients  1 total 14
vars from patch [p]
--> var from patch: p spoon.support.reflect.code.CtVariableReadImpl
location: AbstractContinuousDistribution.java82
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double upperBound = getDomainUpperBound(p) ` -topatch--> `// Try to bracket root, test domain endoints if this fails double lowerBound = getDomainLowerBound(p[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.distribution.AbstractContinuousDistribution line: 82, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double upperBound = getDomainUpperBound(p) ` -topatch--> `// Try to bracket root, test domain endoints if this fails double lowerBound = getDomainLowerBound(p[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 62, #gens: 86, #ops: 1, parent:61] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 62
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-62/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(31): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double upperBound = getDomainUpperBound(p) ` -topatch--> `// Try to bracket root, test domain endoints if this fails double lowerBound = getDomainLowerBound(p[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (61(f=1.0), 62(f=1.0), )
Selected to next generation: IDs2--> (61(f=1.0), )
----------Running generation: 32, population size: 1

***** Generation 32 : 0
**Parent Variant: [Variant id: 63, #gens: 85, #ops: 0, parent:-]

--Child created id: 64
--Creating new operations for variant [Variant id: 64, #gens: 85, #ops: 0, parent:63]
---analyzing modificationPoint position: 59
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  double an = 1.0 / a// n-th element in the series 
---analyzing modificationPoint position: 8
location: NormalDistributionImpl.java178
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (p < 0.5) { 	ret = -java.lang.Double.MAX_VALUE; } else { 	ret = getMean(); } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 64, #gens: 84, #ops: 1, parent:63] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 64, errors: [NormalDistributionImpl.java:185: error: variable ret might not have been initialized
		return ret;
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(32): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (p < 0.5) { 	ret = -java.lang.Double.MAX_VALUE; } else { 	ret = getMean(); } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (63(f=1.0), 64(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (63(f=1.0), )
----------Running generation: 33, population size: 1

***** Generation 33 : 0
**Parent Variant: [Variant id: 65, #gens: 85, #ops: 0, parent:-]

--Child created id: 66
--Creating new operations for variant [Variant id: 66, #gens: 85, #ops: 0, parent:65]
---analyzing modificationPoint position: 67
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  if ((a >= 1.0) && (x > a)) { 	// use regularizedGammaQ because it should converge faster in this 	//[...]
---analyzing modificationPoint position: 77
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 1 not mutation generated in  double sum = 0.0
---analyzing modificationPoint position: 13
Templates availables33
Attempts Base Ingredients  1 total 33
vars from patch [java.lang.Double.NEGATIVE_INFINITY]
--> var from patch: java.lang.Double.NEGATIVE_INFINITY spoon.support.reflect.code.CtFieldReadImpl
location: NormalDistributionImpl.java203
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = java.lang.Double.MAX_VALUE ` -topatch--> `return java.lang.Double.NEGATIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.distribution.NormalDistributionImpl line: 203, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = java.lang.Double.MAX_VALUE ` -topatch--> `return java.lang.Double.NEGATIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 66, #gens: 86, #ops: 1, parent:65] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 66
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-66/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 13] ,[]
-Valid?: |false|2|13|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(33): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = java.lang.Double.MAX_VALUE ` -topatch--> `return java.lang.Double.NEGATIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (65(f=1.0), 66(f=2.0), )
Selected to next generation: IDs2--> (65(f=1.0), )
----------Running generation: 34, population size: 1

***** Generation 34 : 0
**Parent Variant: [Variant id: 67, #gens: 85, #ops: 0, parent:-]

--Child created id: 68
--Creating new operations for variant [Variant id: 68, #gens: 85, #ops: 0, parent:67]
---analyzing modificationPoint position: 71
Templates availables20
Attempts Base Ingredients  1 total 20
vars from patch [pattern]
--> var from patch: pattern spoon.support.reflect.code.CtFieldReadImpl
SameName: java.lang.String pattern
SameName: java.lang.String pattern
Transforming shadowed variable in return pattern
location: MathException.java107
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.pattern = pattern ` -topatch--> `return pattern` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.MathException line: 107, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.pattern = pattern ` -topatch--> `return pattern` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 68, #gens: 86, #ops: 1, parent:67] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 68, errors: [MathException.java:147: error: incompatible types: unexpected return value
		return pattern; 		this.arguments = (arguments == null) ? new java.lang.Object[0] : arguments.clone();} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(34): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.pattern = pattern ` -topatch--> `return pattern` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (67(f=1.0), 68(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (67(f=1.0), )
----------Running generation: 35, population size: 1

***** Generation 35 : 0
**Parent Variant: [Variant id: 69, #gens: 85, #ops: 0, parent:-]

--Child created id: 70
--Creating new operations for variant [Variant id: 70, #gens: 85, #ops: 0, parent:69]
---analyzing modificationPoint position: 74
---modifPoint 0 not mutation generated in  // the locale is not supported or the resource is unknown // don't translate and fall back to using [...]
---analyzing modificationPoint position: 25
Templates availables14
Attempts Base Ingredients  1 total 14
vars from patch [ret, x, a]
--> var from patch: ret spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: x spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: a spoon.support.reflect.code.CtVariableReadImpl
location: Gamma.java162
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = 0.0 ` -topatch--> `ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamm[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.special.Gamma line: 162, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = 0.0 ` -topatch--> `ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamm[...]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 70, #gens: 85, #ops: 1, parent:69] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 70, errors: [Gamma.java:260: error: illegal start of expression
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	 ^, Gamma.java:260: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	          ^, Gamma.java:260: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                          ^, Gamma.java:260: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                                         ^, Gamma.java:260: error: <identifier> expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                                                                ^, Gamma.java:262: error: illegal start of expression
	 * @param a
	 ^, Gamma.java:262: error: illegal start of expression
	 * @param a
	   ^, Gamma.java:263: error: ';' expected
	 * 		the a parameter.
	   		   ^, Gamma.java:263: error: ';' expected
	 * 		the a parameter.
	   		               ^, Gamma.java:264: error: <identifier> expected
	 * @param x
	           ^, Gamma.java:265: error: ';' expected
	 * 		the value.
	   		         ^, Gamma.java:266: error: <identifier> expected
	 * @return the regularized gamma function Q(a, x)
	    ^, Gamma.java:266: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	              ^, Gamma.java:266: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                ^, Gamma.java:266: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                           ^, Gamma.java:266: error: not a statement
	 * @return the regularized gamma function Q(a, x)
	                                            ^, Gamma.java:266: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                             ^, Gamma.java:266: error: not a statement
	 * @return the regularized gamma function Q(a, x)
	                                               ^, Gamma.java:266: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                                ^, Gamma.java:267: error: <identifier> expected
	 * @throws MathException
	    ^, Gamma.java:267: error: ';' expected
	 * @throws MathException
	                        ^, Gamma.java:268: error: '(' expected
	 * 		if the algorithm fails to converge.
	   		  ^, Gamma.java:268: error: ')' expected
	 * 		if the algorithm fails to converge.
	   		      ^, Gamma.java:268: error: ';' expected
	 * 		if the algorithm fails to converge.
	   		                      ^, Gamma.java:268: error: variable declaration not allowed here
	 * 		if the algorithm fails to converge.
	   		                 ^, Gamma.java:268: error: ';' expected
	 * 		if the algorithm fails to converge.
	   		                                  ^, Gamma.java:269: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	^, Gamma.java:269: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	       ^, Gamma.java:269: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	             ^, Gamma.java:269: error: '.class' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                              ^, Gamma.java:269: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                               ^, Gamma.java:269: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                         ^, Gamma.java:269: error: not a statement
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                                                         ^, Gamma.java:269: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                                                                       ^, Gamma.java:295: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	^, Gamma.java:295: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	       ^, Gamma.java:295: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	             ^, Gamma.java:295: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                       ^, Gamma.java:295: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                            ^, Gamma.java:295: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                    ^, Gamma.java:295: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                     ^, Gamma.java:295: error: <identifier> expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                ^, Gamma.java:295: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                        ^, Gamma.java:295: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                               ^, Gamma.java:295: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                  ^, Gamma.java:295: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                                                  ^, Gamma.java:295: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                                                                ^, Gamma.java:296: error: illegal start of expression
	 * C limit
	 ^, Gamma.java:296: error: ';' expected
	 * C limit
	    ^, Gamma.java:297: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	  ^, Gamma.java:297: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	^, Gamma.java:297: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	        ^, Gamma.java:297: error: ';' expected
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	              ^, Gamma.java:299: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	^, Gamma.java:299: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	        ^, Gamma.java:299: error: ';' expected
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	              ^, Gamma.java:319: error: illegal start of expression
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	^, Gamma.java:319: error: illegal start of expression
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	       ^, Gamma.java:319: error: ';' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	             ^, Gamma.java:319: error: '.class' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	                                    ^, Gamma.java:319: error: ';' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	                                     ^, Gamma.java:331: error: illegal start of expression
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	^, Gamma.java:331: error: illegal start of expression
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	       ^, Gamma.java:331: error: ';' expected
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	             ^, Gamma.java:331: error: '.class' expected
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	                                     ^, Gamma.java:331: error: ';' expected
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	                                      ^, Gamma.java:337: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(35): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = 0.0 ` -topatch--> `ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamm[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (69(f=1.0), 70(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (69(f=1.0), )
----------Running generation: 36, population size: 1

***** Generation 36 : 0
**Parent Variant: [Variant id: 71, #gens: 85, #ops: 0, parent:-]

--Child created id: 72
--Creating new operations for variant [Variant id: 72, #gens: 85, #ops: 0, parent:71]
---analyzing modificationPoint position: 65
Templates availables12
Attempts Base Ingredients  1 total 12
---modifPoint 0 not mutation generated in  if (n >= maxIterations) { 	throw new org.apache.commons.math.MaxIterationsExceededException(maxItera[...]
---analyzing modificationPoint position: 64
location: Gamma.java178
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// update partial sum sum = sum + an ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 72, #gens: 84, #ops: 1, parent:71] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 72
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-72/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 13] ,[]
-Valid?: |false|7|13|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(36): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// update partial sum sum = sum + an ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (71(f=1.0), 72(f=7.0), )
Selected to next generation: IDs2--> (71(f=1.0), )
----------Running generation: 37, population size: 1

***** Generation 37 : 0
**Parent Variant: [Variant id: 73, #gens: 85, #ops: 0, parent:-]

--Child created id: 74
--Creating new operations for variant [Variant id: 74, #gens: 85, #ops: 0, parent:73]
---analyzing modificationPoint position: 9
Templates availables33
Attempts Base Ingredients  1 total 33
---modifPoint 0 not mutation generated in  ret = getMean()
---analyzing modificationPoint position: 63
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [n, maxIterations, ret, x, a, sum]
--> var from patch: n spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: maxIterations spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: ret spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: x spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: a spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: sum spoon.support.reflect.code.CtVariableReadImpl
location: Gamma.java175
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `an = an * (x / (a + n)) ` -topatch--> `if (n >= maxIterations) { 	throw new org.apache.commons.math.MaxIterationsExceededException(maxItera[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.special.Gamma line: 175, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `an = an * (x / (a + n)) ` -topatch--> `if (n >= maxIterations) { 	throw new org.apache.commons.math.MaxIterationsExceededException(maxItera[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 74, #gens: 86, #ops: 1, parent:73] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 74, errors: [Gamma.java:201: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
	    	^, Gamma.java:201: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
	    	       ^, Gamma.java:201: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
	    	             ^, Gamma.java:201: error: '.class' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
	    	                                              ^, Gamma.java:201: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
	    	                                               ^, Gamma.java:201: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
	    	                                                         ^, Gamma.java:201: error: not a statement
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
	    	                                                                                         ^, Gamma.java:201: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
	    	                                                                                                       ^, Gamma.java:231: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException 
	    	^, Gamma.java:231: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException 
	    	       ^, Gamma.java:231: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException 
	    	             ^, Gamma.java:231: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException 
	    	                                       ^, Gamma.java:231: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException 
	    	                                            ^, Gamma.java:231: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException 
	    	                                                    ^, Gamma.java:231: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException 
	    	                                                     ^, Gamma.java:231: error: <identifier> expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException 
	    	                                                                ^, Gamma.java:231: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException 
	    	                                                                        ^, Gamma.java:231: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException 
	    	                                                                               ^, Gamma.java:231: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException 
	    	                                                                                                  ^, Gamma.java:231: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException 
	    	                                                                                                                                  ^, Gamma.java:231: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException 
	    	                                                                                                                                                ^, Gamma.java:269: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	^, Gamma.java:269: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	        ^, Gamma.java:269: error: ';' expected
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	              ^, Gamma.java:271: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5;
	    	^, Gamma.java:271: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5;
	    	        ^, Gamma.java:271: error: ';' expected
	 */ 	private static final double S_LIMIT = 1.0E-5;
	    	              ^, Gamma.java:292: error: illegal start of expression
	 */ 	public static double digamma(double x) {
	    	^, Gamma.java:292: error: illegal start of expression
	 */ 	public static double digamma(double x) {
	    	       ^, Gamma.java:292: error: ';' expected
	 */ 	public static double digamma(double x) {
	    	             ^, Gamma.java:292: error: '.class' expected
	 */ 	public static double digamma(double x) {
	    	                                    ^, Gamma.java:292: error: ';' expected
	 */ 	public static double digamma(double x) {
	    	                                     ^, Gamma.java:321: error: illegal start of expression
	 */ 	public static double trigamma(double x) {
	    	^, Gamma.java:321: error: illegal start of expression
	 */ 	public static double trigamma(double x) {
	    	       ^, Gamma.java:321: error: ';' expected
	 */ 	public static double trigamma(double x) {
	    	             ^, Gamma.java:321: error: '.class' expected
	 */ 	public static double trigamma(double x) {
	    	                                     ^, Gamma.java:321: error: ';' expected
	 */ 	public static double trigamma(double x) {
	    	                                      ^, Gamma.java:337: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(37): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `an = an * (x / (a + n)) ` -topatch--> `if (n >= maxIterations) { 	throw new org.apache.commons.math.MaxIterationsExceededException(maxItera[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (73(f=1.0), 74(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (73(f=1.0), )
----------Running generation: 38, population size: 1

***** Generation 38 : 0
**Parent Variant: [Variant id: 75, #gens: 85, #ops: 0, parent:-]

--Child created id: 76
--Creating new operations for variant [Variant id: 76, #gens: 85, #ops: 0, parent:75]
---analyzing modificationPoint position: 0
Templates availables14
Attempts Base Ingredients  1 total 14
vars from patch [p]
--> var from patch: p spoon.support.reflect.code.CtVariableReadImpl
location: AbstractContinuousDistribution.java97
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `/* Check domain endpoints to see if one gives value that is within the default solver's defaultAbsol[...] ` -topatch--> `double upperBound = getDomainUpperBound(p)` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.distribution.AbstractContinuousDistribution line: 97, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `/* Check domain endpoints to see if one gives value that is within the default solver's defaultAbsol[...] ` -topatch--> `double upperBound = getDomainUpperBound(p)` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 76, #gens: 86, #ops: 1, parent:75] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 76, errors: [AbstractContinuousDistribution.java:100: error: variable upperBound is already defined in method inverseCumulativeProbability(double)
			} 			double upperBound = getDomainUpperBound(p);
			  			       ^]
Ingredient counter is Zero
---Undoing: gnrtn(38): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `/* Check domain endpoints to see if one gives value that is within the default solver's defaultAbsol[...] ` -topatch--> `double upperBound = getDomainUpperBound(p)` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (75(f=1.0), 76(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (75(f=1.0), )
----------Running generation: 39, population size: 1

***** Generation 39 : 0
**Parent Variant: [Variant id: 77, #gens: 85, #ops: 0, parent:-]

--Child created id: 78
--Creating new operations for variant [Variant id: 78, #gens: 85, #ops: 0, parent:77]
---analyzing modificationPoint position: 60
Templates availables10
Attempts Base Ingredients  1 total 10
---modifPoint 0 not mutation generated in  double sum = an// partial sum 
---analyzing modificationPoint position: 55
Templates availables5
Attempts Base Ingredients  1 total 5
vars from patch [this.pattern]
--> var from patch: this.pattern spoon.support.reflect.code.CtFieldWriteImpl
location: MathException.java120
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.pattern = getMessage() ` -topatch--> `this.pattern = null` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.MathException line: 120, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.pattern = getMessage() ` -topatch--> `this.pattern = null` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 78, #gens: 85, #ops: 1, parent:77] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 78
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-78/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(39): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.pattern = getMessage() ` -topatch--> `this.pattern = null` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (77(f=1.0), 78(f=1.0), )
Selected to next generation: IDs2--> (77(f=1.0), )
----------Running generation: 40, population size: 1

***** Generation 40 : 0
**Parent Variant: [Variant id: 79, #gens: 85, #ops: 0, parent:-]

--Child created id: 80
--Creating new operations for variant [Variant id: 80, #gens: 85, #ops: 0, parent:79]
---analyzing modificationPoint position: 12
Templates availables33
Attempts Base Ingredients  1 total 33
vars from patch []
location: NormalDistributionImpl.java200
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (p < 0.5) { 	ret = getMean(); } else { 	ret = java.lang.Double.MAX_VALUE; } ` -topatch--> `double ret` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.distribution.NormalDistributionImpl line: 200, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (p < 0.5) { 	ret = getMean(); } else { 	ret = java.lang.Double.MAX_VALUE; } ` -topatch--> `double ret` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 80, #gens: 86, #ops: 1, parent:79] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 80, errors: [NormalDistributionImpl.java:199: error: variable ret is already defined in method getDomainUpperBound(double)
		double ret; 		double ret;
		            		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(40): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (p < 0.5) { 	ret = getMean(); } else { 	ret = java.lang.Double.MAX_VALUE; } ` -topatch--> `double ret` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (79(f=1.0), 80(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (79(f=1.0), )
----------Running generation: 41, population size: 1

***** Generation 41 : 0
**Parent Variant: [Variant id: 81, #gens: 85, #ops: 0, parent:-]

--Child created id: 82
--Creating new operations for variant [Variant id: 82, #gens: 85, #ops: 0, parent:81]
---analyzing modificationPoint position: 6
Templates availables10
Attempts Base Ingredients  1 total 10
vars from patch [java.lang.Double.NEGATIVE_INFINITY]
--> var from patch: java.lang.Double.NEGATIVE_INFINITY spoon.support.reflect.code.CtFieldReadImpl
location: NormalDistributionImpl.java132
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return 1.0 ` -topatch--> `return java.lang.Double.NEGATIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.distribution.NormalDistributionImpl line: 132, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return 1.0 ` -topatch--> `return java.lang.Double.NEGATIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 82, #gens: 85, #ops: 1, parent:81] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 82
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-82/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 13] ,[]
-Valid?: |false|2|13|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(41): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return 1.0 ` -topatch--> `return java.lang.Double.NEGATIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (81(f=1.0), 82(f=2.0), )
Selected to next generation: IDs2--> (81(f=1.0), )
----------Running generation: 42, population size: 1

***** Generation 42 : 0
**Parent Variant: [Variant id: 83, #gens: 85, #ops: 0, parent:-]

--Child created id: 84
--Creating new operations for variant [Variant id: 84, #gens: 85, #ops: 0, parent:83]
---analyzing modificationPoint position: 41
Templates availables4
Attempts Base Ingredients  1 total 4
vars from patch [b, upperBound]
--> var from patch: b spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: upperBound spoon.support.reflect.code.CtVariableReadImpl
location: UnivariateRealSolverUtils.java190
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `b = java.lang.Math.min(b + 1.0, upperBound) ` -topatch--> `b = java.lang.Math.min(b + 1.0, upperBound)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils line: 190, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `b = java.lang.Math.min(b + 1.0, upperBound) ` -topatch--> `b = java.lang.Math.min(b + 1.0, upperBound)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 84, #gens: 85, #ops: 1, parent:83] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 84
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-84/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(42): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `b = java.lang.Math.min(b + 1.0, upperBound) ` -topatch--> `b = java.lang.Math.min(b + 1.0, upperBound)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (83(f=1.0), 84(f=1.0), )
Selected to next generation: IDs2--> (83(f=1.0), )
----------Running generation: 43, population size: 1

***** Generation 43 : 0
**Parent Variant: [Variant id: 85, #gens: 85, #ops: 0, parent:-]

--Child created id: 86
--Creating new operations for variant [Variant id: 86, #gens: 85, #ops: 0, parent:85]
---analyzing modificationPoint position: 5
Templates availables33
Attempts Base Ingredients  1 total 33
---modifPoint 0 not mutation generated in  if (x > (mean + (20 * standardDeviation))) { 	return 1.0; } else { 	throw ex; }
---analyzing modificationPoint position: 53
Templates availables9
Attempts Base Ingredients  1 total 9
vars from patch [sd]
--> var from patch: sd spoon.support.reflect.code.CtVariableReadImpl
location: NormalDistributionImpl.java97
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (sd <= 0.0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException([...] ` -topatch--> `if (sd <= 0.0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException([...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.distribution.NormalDistributionImpl line: 97, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (sd <= 0.0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException([...] ` -topatch--> `if (sd <= 0.0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException([...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 86, #gens: 85, #ops: 1, parent:85] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 86
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-86/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(43): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (sd <= 0.0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException([...] ` -topatch--> `if (sd <= 0.0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException([...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (85(f=1.0), 86(f=1.0), )
Selected to next generation: IDs2--> (85(f=1.0), )
----------Running generation: 44, population size: 1

***** Generation 44 : 0
**Parent Variant: [Variant id: 87, #gens: 85, #ops: 0, parent:-]

--Child created id: 88
--Creating new operations for variant [Variant id: 88, #gens: 85, #ops: 0, parent:87]
---analyzing modificationPoint position: 35
location: AbstractContinuousDistribution.java85
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `bracket = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket( rootFindingFun[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 88, #gens: 84, #ops: 1, parent:87] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 88, errors: [AbstractContinuousDistribution.java:89: error: exception org.apache.commons.math.ConvergenceException is never thrown in body of corresponding try statement
		} catch (org.apache.commons.math.ConvergenceException ex) {
		  ^]
Ingredient counter is Zero
---Undoing: gnrtn(44): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `bracket = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket( rootFindingFun[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (87(f=1.0), 88(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (87(f=1.0), )
----------Running generation: 45, population size: 1

***** Generation 45 : 0
**Parent Variant: [Variant id: 89, #gens: 85, #ops: 0, parent:-]

--Child created id: 90
--Creating new operations for variant [Variant id: 90, #gens: 85, #ops: 0, parent:89]
---analyzing modificationPoint position: 56
Templates availables20
Attempts Base Ingredients  1 total 20
vars from patch [pattern]
--> var from patch: pattern spoon.support.reflect.code.CtVariableReadImpl
location: MathException.java121
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.arguments = new java.lang.Object[0] ` -topatch--> `return pattern` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.MathException line: 121, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.arguments = new java.lang.Object[0] ` -topatch--> `return pattern` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 90, #gens: 86, #ops: 1, parent:89] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 90, errors: [MathException.java:147: error: incompatible types: unexpected return value
		return pattern; 		this.arguments = new java.lang.Object[0];} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(45): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.arguments = new java.lang.Object[0] ` -topatch--> `return pattern` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (89(f=1.0), 90(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (89(f=1.0), )
----------Running generation: 46, population size: 1

***** Generation 46 : 0
**Parent Variant: [Variant id: 91, #gens: 85, #ops: 0, parent:-]

--Child created id: 92
--Creating new operations for variant [Variant id: 92, #gens: 85, #ops: 0, parent:91]
---analyzing modificationPoint position: 29
Templates availables1
Attempts Base Ingredients  1 total 1
vars from patch [ret]
--> var from patch: ret spoon.support.reflect.code.CtVariableReadImpl
location: Erf.java55
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ret ` -topatch--> `return ret` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.special.Erf line: 55, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ret ` -topatch--> `return ret` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 92, #gens: 85, #ops: 1, parent:91] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 92
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-92/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(46): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ret ` -topatch--> `return ret` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (91(f=1.0), 92(f=1.0), )
Selected to next generation: IDs2--> (91(f=1.0), )
----------Running generation: 47, population size: 1

***** Generation 47 : 0
**Parent Variant: [Variant id: 93, #gens: 85, #ops: 0, parent:-]

--Child created id: 94
--Creating new operations for variant [Variant id: 94, #gens: 85, #ops: 0, parent:93]
---analyzing modificationPoint position: 75
---modifPoint 0 not mutation generated in  return pattern == null ? "" : new java.text.MessageFormat(org.apache.commons.math.MathException.tran[...]
---analyzing modificationPoint position: 64
location: Gamma.java178
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// update partial sum sum = sum + an ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 94, #gens: 84, #ops: 1, parent:93] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 94
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-94/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 13] ,[]
-Valid?: |false|7|13|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(47): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `// update partial sum sum = sum + an ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (93(f=1.0), 94(f=7.0), )
Selected to next generation: IDs2--> (93(f=1.0), )
----------Running generation: 48, population size: 1

***** Generation 48 : 0
**Parent Variant: [Variant id: 95, #gens: 85, #ops: 0, parent:-]

--Child created id: 96
--Creating new operations for variant [Variant id: 96, #gens: 85, #ops: 0, parent:95]
---analyzing modificationPoint position: 14
---modifPoint 0 not mutation generated in  return ret
---analyzing modificationPoint position: 50
Templates availables3
Attempts Base Ingredients  1 total 3
---modifPoint 1 not mutation generated in  setMean(mean)
---analyzing modificationPoint position: 80
Templates availables14
Attempts Base Ingredients  1 total 14
vars from patch [sum, org.apache.commons.math.special.Gamma.lanczos]
--> var from patch: sum spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: org.apache.commons.math.special.Gamma.lanczos spoon.support.reflect.code.CtFieldReadImpl
location: Gamma.java100
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum = sum + org.apache.commons.math.special.Gamma.lanczos[0] ` -topatch--> `sum = sum + org.apache.commons.math.special.Gamma.lanczos[0]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.special.Gamma line: 100, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum = sum + org.apache.commons.math.special.Gamma.lanczos[0] ` -topatch--> `sum = sum + org.apache.commons.math.special.Gamma.lanczos[0]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 96, #gens: 85, #ops: 1, parent:95] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 96
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-96/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(48): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum = sum + org.apache.commons.math.special.Gamma.lanczos[0] ` -topatch--> `sum = sum + org.apache.commons.math.special.Gamma.lanczos[0]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (95(f=1.0), 96(f=1.0), )
Selected to next generation: IDs2--> (95(f=1.0), )
----------Running generation: 49, population size: 1

***** Generation 49 : 0
**Parent Variant: [Variant id: 97, #gens: 85, #ops: 0, parent:-]

--Child created id: 98
--Creating new operations for variant [Variant id: 98, #gens: 85, #ops: 0, parent:97]
---analyzing modificationPoint position: 81
Templates availables10
Attempts Base Ingredients  1 total 10
vars from patch []
location: Gamma.java102
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp = (x + g) + 0.5 ` -topatch--> `double g = 607.0 / 128.0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.special.Gamma line: 102, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp = (x + g) + 0.5 ` -topatch--> `double g = 607.0 / 128.0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 98, #gens: 85, #ops: 1, parent:97] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 98, errors: [Gamma.java:101: error: variable g is already defined in method logGamma(double)
			sum = sum + org.apache.commons.math.special.Gamma.lanczos[0]; 			double g = 607.0 / 128.0;
			                                                              			       ^, Gamma.java:104: error: cannot find symbol
			ret = ((((x + 0.5) * java.lang.Math.log(tmp)) - tmp) + 
			                                        ^
  symbol:   variable tmp
  location: class org.apache.commons.math.special.Gamma, Gamma.java:104: error: cannot find symbol
			ret = ((((x + 0.5) * java.lang.Math.log(tmp)) - tmp) + 
			                                                ^
  symbol:   variable tmp
  location: class org.apache.commons.math.special.Gamma]
Ingredient counter is Zero
---Undoing: gnrtn(49): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double tmp = (x + g) + 0.5 ` -topatch--> `double g = 607.0 / 128.0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (97(f=1.0), 98(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (97(f=1.0), )
----------Running generation: 50, population size: 1

***** Generation 50 : 0
**Parent Variant: [Variant id: 99, #gens: 85, #ops: 0, parent:-]

--Child created id: 100
--Creating new operations for variant [Variant id: 100, #gens: 85, #ops: 0, parent:99]
---analyzing modificationPoint position: 74
---modifPoint 0 not mutation generated in  // the locale is not supported or the resource is unknown // don't translate and fall back to using [...]
---analyzing modificationPoint position: 23
location: MaxIterationsExceededException.java44
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 100, #gens: 84, #ops: 1, parent:99] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 100, errors: [MaxIterationsExceededException.java:46: error: variable maxIterations might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(50): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (99(f=1.0), 100(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (99(f=1.0), )
----------Running generation: 51, population size: 1

***** Generation 51 : 0
**Parent Variant: [Variant id: 101, #gens: 85, #ops: 0, parent:-]

--Child created id: 102
--Creating new operations for variant [Variant id: 102, #gens: 85, #ops: 0, parent:101]
---analyzing modificationPoint position: 83
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  if (java.lang.Double.isNaN(x) || (x <= 0.0)) { 	ret = java.lang.Double.NaN; } else { 	double g = 607[...]
---analyzing modificationPoint position: 2
Templates availables14
Attempts Base Ingredients  1 total 14
vars from patch [bracket, rootFindingFunction, p, lowerBound, upperBound]
--> var from patch: bracket spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: rootFindingFunction spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: p spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: lowerBound spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: upperBound spoon.support.reflect.code.CtVariableReadImpl
location: AbstractContinuousDistribution.java104
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtThrowImpl) `// Failed bracket convergence was not because of corner solution throw new org.apache.commons.math.M[...] ` -topatch--> `bracket = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket( rootFindingFun[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.distribution.AbstractContinuousDistribution line: 104, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtThrowImpl) `// Failed bracket convergence was not because of corner solution throw new org.apache.commons.math.M[...] ` -topatch--> `bracket = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket( rootFindingFun[...]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 102, #gens: 86, #ops: 1, parent:101] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 102, errors: [AbstractContinuousDistribution.java:105: error: unreachable statement
			throw new org.apache.commons.math.MathException(ex); 			bracket = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket(rootFindingFunction, getInitialDomain(p), lowerBound, upperBound);
			                                                     			^]
Ingredient counter is Zero
---Undoing: gnrtn(51): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtThrowImpl) `// Failed bracket convergence was not because of corner solution throw new org.apache.commons.math.M[...] ` -topatch--> `bracket = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket( rootFindingFun[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (101(f=1.0), 102(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (101(f=1.0), )
----------Running generation: 52, population size: 1

***** Generation 52 : 0
**Parent Variant: [Variant id: 103, #gens: 85, #ops: 0, parent:-]

--Child created id: 104
--Creating new operations for variant [Variant id: 104, #gens: 85, #ops: 0, parent:103]
---analyzing modificationPoint position: 59
---modifPoint 0 not mutation generated in  double an = 1.0 / a// n-th element in the series 
---analyzing modificationPoint position: 18
Templates availables33
Attempts Base Ingredients  1 total 33
vars from patch []
location: NormalDistributionImpl.java229
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ret ` -topatch--> `return 1.0` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.distribution.NormalDistributionImpl line: 229, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ret ` -topatch--> `return 1.0` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 104, #gens: 86, #ops: 1, parent:103] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 104, errors: [NormalDistributionImpl.java:230: error: unreachable statement
		return ret;
		^]
Ingredient counter is Zero
---Undoing: gnrtn(52): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ret ` -topatch--> `return 1.0` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (103(f=1.0), 104(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (103(f=1.0), )
----------Running generation: 53, population size: 1

***** Generation 53 : 0
**Parent Variant: [Variant id: 105, #gens: 85, #ops: 0, parent:-]

--Child created id: 106
--Creating new operations for variant [Variant id: 106, #gens: 85, #ops: 0, parent:105]
---analyzing modificationPoint position: 53
Templates availables33
Attempts Base Ingredients  1 total 33
vars from patch [java.lang.Double.NEGATIVE_INFINITY]
--> var from patch: java.lang.Double.NEGATIVE_INFINITY spoon.support.reflect.code.CtFieldReadImpl
location: NormalDistributionImpl.java97
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (sd <= 0.0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException([...] ` -topatch--> `return java.lang.Double.NEGATIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.distribution.NormalDistributionImpl line: 97, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (sd <= 0.0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException([...] ` -topatch--> `return java.lang.Double.NEGATIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 106, #gens: 86, #ops: 1, parent:105] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 106, errors: [NormalDistributionImpl.java:158: error: incompatible types: unexpected return value
		return java.lang.Double.NEGATIVE_INFINITY; 		standardDeviation = sd;} 	/**
		                       ^]
Ingredient counter is Zero
---Undoing: gnrtn(53): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (sd <= 0.0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException([...] ` -topatch--> `return java.lang.Double.NEGATIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (105(f=1.0), 106(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (105(f=1.0), )
----------Running generation: 54, population size: 1

***** Generation 54 : 0
**Parent Variant: [Variant id: 107, #gens: 85, #ops: 0, parent:-]

--Child created id: 108
--Creating new operations for variant [Variant id: 108, #gens: 85, #ops: 0, parent:107]
---analyzing modificationPoint position: 55
Templates availables5
Attempts Base Ingredients  1 total 5
vars from patch [this.arguments]
--> var from patch: this.arguments spoon.support.reflect.code.CtFieldWriteImpl
location: MathException.java120
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.pattern = getMessage() ` -topatch--> `this.arguments = (arguments == null) ? new java.lang.Object[0] : arguments.clone()` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.MathException line: 120, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.pattern = getMessage() ` -topatch--> `this.arguments = (arguments == null) ? new java.lang.Object[0] : arguments.clone()` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 108, #gens: 85, #ops: 1, parent:107] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 108, errors: [MathException.java:120: error: variable arguments might not have been initialized
		super(rootCause); 		this.arguments = (arguments == null) ? new java.lang.Object[0] : arguments.clone();
		                  		                  ^, MathException.java:122: error: variable arguments might already have been assigned
		this.arguments = new java.lang.Object[0];
		    ^, MathException.java:123: error: variable pattern might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(54): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.pattern = getMessage() ` -topatch--> `this.arguments = (arguments == null) ? new java.lang.Object[0] : arguments.clone()` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (107(f=1.0), 108(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (107(f=1.0), )
----------Running generation: 55, population size: 1

***** Generation 55 : 0
**Parent Variant: [Variant id: 109, #gens: 85, #ops: 0, parent:-]

--Child created id: 110
--Creating new operations for variant [Variant id: 110, #gens: 85, #ops: 0, parent:109]
---analyzing modificationPoint position: 11
---modifPoint 0 not mutation generated in  return ret
---analyzing modificationPoint position: 84
---modifPoint 1 not mutation generated in  return ret
---analyzing modificationPoint position: 55
location: MathException.java120
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.pattern = getMessage() ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 110, #gens: 84, #ops: 1, parent:109] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 110, errors: [MathException.java:123: error: variable pattern might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(55): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.pattern = getMessage() ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (109(f=1.0), 110(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (109(f=1.0), )
----------Running generation: 56, population size: 1

***** Generation 56 : 0
**Parent Variant: [Variant id: 111, #gens: 85, #ops: 0, parent:-]

--Child created id: 112
--Creating new operations for variant [Variant id: 112, #gens: 85, #ops: 0, parent:111]
---analyzing modificationPoint position: 24
Templates availables33
Attempts Base Ingredients  1 total 33
---modifPoint 0 not mutation generated in  return 0.5 * (1.0 + org.apache.commons.math.special.Erf.erf((x - mean) /  (standardDeviation * java.[...]
---analyzing modificationPoint position: 63
location: Gamma.java175
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `an = an * (x / (a + n)) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 112, #gens: 84, #ops: 1, parent:111] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 112
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-112/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 13] ,[]
-Valid?: |false|8|13|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(56): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `an = an * (x / (a + n)) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (111(f=1.0), 112(f=8.0), )
Selected to next generation: IDs2--> (111(f=1.0), )
----------Running generation: 57, population size: 1

***** Generation 57 : 0
**Parent Variant: [Variant id: 113, #gens: 85, #ops: 0, parent:-]

--Child created id: 114
--Creating new operations for variant [Variant id: 114, #gens: 85, #ops: 0, parent:113]
---analyzing modificationPoint position: 16
Templates availables33
Attempts Base Ingredients  1 total 33
vars from patch []
location: NormalDistributionImpl.java223
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (p > 0.5) { 	ret = getMean() + getStandardDeviation(); } else { 	ret = getMean(); } ` -topatch--> `// JDK 1.5 blows at 38 return 0.0` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.distribution.NormalDistributionImpl line: 223, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (p > 0.5) { 	ret = getMean() + getStandardDeviation(); } else { 	ret = getMean(); } ` -topatch--> `// JDK 1.5 blows at 38 return 0.0` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 114, #gens: 86, #ops: 1, parent:113] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 114
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-114/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 13] ,[]
-Valid?: |false|2|13|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(57): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (p > 0.5) { 	ret = getMean() + getStandardDeviation(); } else { 	ret = getMean(); } ` -topatch--> `// JDK 1.5 blows at 38 return 0.0` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (113(f=1.0), 114(f=2.0), )
Selected to next generation: IDs2--> (113(f=1.0), )
----------Running generation: 58, population size: 1

***** Generation 58 : 0
**Parent Variant: [Variant id: 115, #gens: 85, #ops: 0, parent:-]

--Child created id: 116
--Creating new operations for variant [Variant id: 116, #gens: 85, #ops: 0, parent:115]
---analyzing modificationPoint position: 17
Templates availables7
Attempts Base Ingredients  1 total 7
vars from patch [ret]
--> var from patch: ret spoon.support.reflect.code.CtVariableWriteImpl
location: NormalDistributionImpl.java224
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = getMean() + getStandardDeviation() ` -topatch--> `ret = getMean() - getStandardDeviation()` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.distribution.NormalDistributionImpl line: 224, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = getMean() + getStandardDeviation() ` -topatch--> `ret = getMean() - getStandardDeviation()` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 116, #gens: 85, #ops: 1, parent:115] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 116
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-116/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 13] ,[]
-Valid?: |false|2|13|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(58): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = getMean() + getStandardDeviation() ` -topatch--> `ret = getMean() - getStandardDeviation()` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (115(f=1.0), 116(f=2.0), )
Selected to next generation: IDs2--> (115(f=1.0), )
----------Running generation: 59, population size: 1

***** Generation 59 : 0
**Parent Variant: [Variant id: 117, #gens: 85, #ops: 0, parent:-]

--Child created id: 118
--Creating new operations for variant [Variant id: 118, #gens: 85, #ops: 0, parent:117]
---analyzing modificationPoint position: 73
Templates availables20
Attempts Base Ingredients  1 total 20
vars from patch [this.arguments]
--> var from patch: this.arguments spoon.support.reflect.code.CtFieldWriteImpl
location: MathException.java60
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.ResourceBundle bundle =  java.util.ResourceBundle.getBundle("org.apache.commons.math.Messa[...] ` -topatch--> `this.arguments = new java.lang.Object[0]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.MathException line: 60, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.ResourceBundle bundle =  java.util.ResourceBundle.getBundle("org.apache.commons.math.Messa[...] ` -topatch--> `this.arguments = new java.lang.Object[0]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 118, #gens: 86, #ops: 1, parent:117] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 118, errors: [MathException.java:108: error: illegal start of expression
	 */ 	private static java.lang.String buildMessage(java.util.Locale locale, java.lang.String pattern, java.lang.Object... arguments) { 		return pattern == null ? "" : new java.text.MessageFormat(org.apache.commons.math.MathException.translate(pattern, locale), locale).format(arguments);} 	/**
	    	^, MathException.java:108: error: illegal start of expression
	 */ 	private static java.lang.String buildMessage(java.util.Locale locale, java.lang.String pattern, java.lang.Object... arguments) { 		return pattern == null ? "" : new java.text.MessageFormat(org.apache.commons.math.MathException.translate(pattern, locale), locale).format(arguments);} 	/**
	    	        ^, MathException.java:108: error: ';' expected
	 */ 	private static java.lang.String buildMessage(java.util.Locale locale, java.lang.String pattern, java.lang.Object... arguments) { 		return pattern == null ? "" : new java.text.MessageFormat(org.apache.commons.math.MathException.translate(pattern, locale), locale).format(arguments);} 	/**
	    	                   ^, MathException.java:108: error: ';' expected
	 */ 	private static java.lang.String buildMessage(java.util.Locale locale, java.lang.String pattern, java.lang.Object... arguments) { 		return pattern == null ? "" : new java.text.MessageFormat(org.apache.commons.math.MathException.translate(pattern, locale), locale).format(arguments);} 	/**
	    	                                            ^, MathException.java:108: error: ';' expected
	 */ 	private static java.lang.String buildMessage(java.util.Locale locale, java.lang.String pattern, java.lang.Object... arguments) { 		return pattern == null ? "" : new java.text.MessageFormat(org.apache.commons.math.MathException.translate(pattern, locale), locale).format(arguments);} 	/**
	    	                                                                          ^, MathException.java:108: error: ';' expected
	 */ 	private static java.lang.String buildMessage(java.util.Locale locale, java.lang.String pattern, java.lang.Object... arguments) { 		return pattern == null ? "" : new java.text.MessageFormat(org.apache.commons.math.MathException.translate(pattern, locale), locale).format(arguments);} 	/**
	    	                                                                                                    ^, MathException.java:108: error: not a statement
	 */ 	private static java.lang.String buildMessage(java.util.Locale locale, java.lang.String pattern, java.lang.Object... arguments) { 		return pattern == null ? "" : new java.text.MessageFormat(org.apache.commons.math.MathException.translate(pattern, locale), locale).format(arguments);} 	/**
	    	                                                                                                         ^, MathException.java:108: error: ';' expected
	 */ 	private static java.lang.String buildMessage(java.util.Locale locale, java.lang.String pattern, java.lang.Object... arguments) { 		return pattern == null ? "" : new java.text.MessageFormat(org.apache.commons.math.MathException.translate(pattern, locale), locale).format(arguments);} 	/**
	    	                                                                                                                ^, MathException.java:108: error: not a statement
	 */ 	private static java.lang.String buildMessage(java.util.Locale locale, java.lang.String pattern, java.lang.Object... arguments) { 		return pattern == null ? "" : new java.text.MessageFormat(org.apache.commons.math.MathException.translate(pattern, locale), locale).format(arguments);} 	/**
	    	                                                                                                                    ^, MathException.java:108: error: ';' expected
	 */ 	private static java.lang.String buildMessage(java.util.Locale locale, java.lang.String pattern, java.lang.Object... arguments) { 		return pattern == null ? "" : new java.text.MessageFormat(org.apache.commons.math.MathException.translate(pattern, locale), locale).format(arguments);} 	/**
	    	                                                                                                                             ^, MathException.java:111: error: illegal start of expression
	 */ 	public MathException() { 		super(); 		this.pattern = null; 		this.arguments = new java.lang.Object[0];} 	/**
	    	^, MathException.java:111: error: ';' expected
	 */ 	public MathException() { 		super(); 		this.pattern = null; 		this.arguments = new java.lang.Object[0];} 	/**
	    	                      ^, MathException.java:120: error: illegal start of expression
	 */ 	public MathException(java.lang.String pattern, java.lang.Object... arguments) { 		super(org.apache.commons.math.MathException.buildMessage(java.util.Locale.US, pattern, arguments)); 		this.pattern = pattern; 		this.arguments = (arguments == null) ? new java.lang.Object[0] : arguments.clone();} 	/**
	    	^, MathException.java:120: error: ')' expected
	 */ 	public MathException(java.lang.String pattern, java.lang.Object... arguments) { 		super(org.apache.commons.math.MathException.buildMessage(java.util.Locale.US, pattern, arguments)); 		this.pattern = pattern; 		this.arguments = (arguments == null) ? new java.lang.Object[0] : arguments.clone();} 	/**
	    	                                     ^, MathException.java:120: error: illegal start of expression
	 */ 	public MathException(java.lang.String pattern, java.lang.Object... arguments) { 		super(org.apache.commons.math.MathException.buildMessage(java.util.Locale.US, pattern, arguments)); 		this.pattern = pattern; 		this.arguments = (arguments == null) ? new java.lang.Object[0] : arguments.clone();} 	/**
	    	                                             ^, MathException.java:120: error: ';' expected
	 */ 	public MathException(java.lang.String pattern, java.lang.Object... arguments) { 		super(org.apache.commons.math.MathException.buildMessage(java.util.Locale.US, pattern, arguments)); 		this.pattern = pattern; 		this.arguments = (arguments == null) ? new java.lang.Object[0] : arguments.clone();} 	/**
	    	                                                   ^, MathException.java:120: error: not a statement
	 */ 	public MathException(java.lang.String pattern, java.lang.Object... arguments) { 		super(org.apache.commons.math.MathException.buildMessage(java.util.Locale.US, pattern, arguments)); 		this.pattern = pattern; 		this.arguments = (arguments == null) ? new java.lang.Object[0] : arguments.clone();} 	/**
	    	                                                        ^, MathException.java:120: error: ';' expected
	 */ 	public MathException(java.lang.String pattern, java.lang.Object... arguments) { 		super(org.apache.commons.math.MathException.buildMessage(java.util.Locale.US, pattern, arguments)); 		this.pattern = pattern; 		this.arguments = (arguments == null) ? new java.lang.Object[0] : arguments.clone();} 	/**
	    	                                                               ^, MathException.java:120: error: not a statement
	 */ 	public MathException(java.lang.String pattern, java.lang.Object... arguments) { 		super(org.apache.commons.math.MathException.buildMessage(java.util.Locale.US, pattern, arguments)); 		this.pattern = pattern; 		this.arguments = (arguments == null) ? new java.lang.Object[0] : arguments.clone();} 	/**
	    	                                                                   ^, MathException.java:120: error: ';' expected
	 */ 	public MathException(java.lang.String pattern, java.lang.Object... arguments) { 		super(org.apache.commons.math.MathException.buildMessage(java.util.Locale.US, pattern, arguments)); 		this.pattern = pattern; 		this.arguments = (arguments == null) ? new java.lang.Object[0] : arguments.clone();} 	/**
	    	                                                                            ^, MathException.java:127: error: illegal start of expression
	 */ 	public MathException(java.lang.Throwable rootCause) { 		super(rootCause); 		this.pattern = getMessage(); 		this.arguments = new java.lang.Object[0];} 	/**
	    	^, MathException.java:127: error: ')' expected
	 */ 	public MathException(java.lang.Throwable rootCause) { 		super(rootCause); 		this.pattern = getMessage(); 		this.arguments = new java.lang.Object[0];} 	/**
	    	                                        ^, MathException.java:127: error: illegal start of expression
	 */ 	public MathException(java.lang.Throwable rootCause) { 		super(rootCause); 		this.pattern = getMessage(); 		this.arguments = new java.lang.Object[0];} 	/**
	    	                                                  ^, MathException.java:127: error: ';' expected
	 */ 	public MathException(java.lang.Throwable rootCause) { 		super(rootCause); 		this.pattern = getMessage(); 		this.arguments = new java.lang.Object[0];} 	/**
	    	                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(59): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.ResourceBundle bundle =  java.util.ResourceBundle.getBundle("org.apache.commons.math.Messa[...] ` -topatch--> `this.arguments = new java.lang.Object[0]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (117(f=1.0), 118(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (117(f=1.0), )
----------Running generation: 60, population size: 1

***** Generation 60 : 0
**Parent Variant: [Variant id: 119, #gens: 85, #ops: 0, parent:-]

--Child created id: 120
--Creating new operations for variant [Variant id: 120, #gens: 85, #ops: 0, parent:119]
---analyzing modificationPoint position: 79
location: Gamma.java98
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum = sum + (org.apache.commons.math.special.Gamma.lanczos[i] / (x + i)) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 120, #gens: 84, #ops: 1, parent:119] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 120
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-120/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 13] ,[]
-Valid?: |false|7|13|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(60): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum = sum + (org.apache.commons.math.special.Gamma.lanczos[i] / (x + i)) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (119(f=1.0), 120(f=7.0), )
Selected to next generation: IDs2--> (119(f=1.0), )
----------Running generation: 61, population size: 1

***** Generation 61 : 0
**Parent Variant: [Variant id: 121, #gens: 85, #ops: 0, parent:-]

--Child created id: 122
--Creating new operations for variant [Variant id: 122, #gens: 85, #ops: 0, parent:121]
---analyzing modificationPoint position: 60
---modifPoint 0 not mutation generated in  double sum = an// partial sum 
---analyzing modificationPoint position: 58
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 1 not mutation generated in  // calculate series double n = 0.0// current element index 
---analyzing modificationPoint position: 69
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [x, ret, a, epsilon, maxIterations, an, n, sum]
--> var from patch: x spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: ret spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: a spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: maxIterations spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: an spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: n spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: sum spoon.support.reflect.code.CtVariableWriteImpl
location: Gamma.java159
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 	ret = [...] ` -topatch--> `if (x == 0.0) { 	ret = 0.0; } else if ((a >= 1.0) && (x > a)) { 	// use regularizedGammaQ because it[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.special.Gamma line: 159, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 	ret = [...] ` -topatch--> `if (x == 0.0) { 	ret = 0.0; } else if ((a >= 1.0) && (x > a)) { 	// use regularizedGammaQ because it[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 122, #gens: 86, #ops: 1, parent:121] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 122, errors: [Gamma.java:201: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
	    	^, Gamma.java:201: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
	    	       ^, Gamma.java:201: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
	    	             ^, Gamma.java:201: error: '.class' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
	    	                                              ^, Gamma.java:201: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
	    	                                               ^, Gamma.java:201: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
	    	                                                         ^, Gamma.java:201: error: not a statement
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
	    	                                                                                         ^, Gamma.java:201: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException {
	    	                                                                                                       ^, Gamma.java:231: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException 
	    	^, Gamma.java:231: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException 
	    	       ^, Gamma.java:231: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException 
	    	             ^, Gamma.java:231: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException 
	    	                                       ^, Gamma.java:231: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException 
	    	                                            ^, Gamma.java:231: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException 
	    	                                                    ^, Gamma.java:231: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException 
	    	                                                     ^, Gamma.java:231: error: <identifier> expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException 
	    	                                                                ^, Gamma.java:231: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException 
	    	                                                                        ^, Gamma.java:231: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException 
	    	                                                                               ^, Gamma.java:231: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException 
	    	                                                                                                  ^, Gamma.java:231: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException 
	    	                                                                                                                                  ^, Gamma.java:231: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException 
	    	                                                                                                                                                ^, Gamma.java:269: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	^, Gamma.java:269: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	        ^, Gamma.java:269: error: ';' expected
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	              ^, Gamma.java:271: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5;
	    	^, Gamma.java:271: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5;
	    	        ^, Gamma.java:271: error: ';' expected
	 */ 	private static final double S_LIMIT = 1.0E-5;
	    	              ^, Gamma.java:292: error: illegal start of expression
	 */ 	public static double digamma(double x) {
	    	^, Gamma.java:292: error: illegal start of expression
	 */ 	public static double digamma(double x) {
	    	       ^, Gamma.java:292: error: ';' expected
	 */ 	public static double digamma(double x) {
	    	             ^, Gamma.java:292: error: '.class' expected
	 */ 	public static double digamma(double x) {
	    	                                    ^, Gamma.java:292: error: ';' expected
	 */ 	public static double digamma(double x) {
	    	                                     ^, Gamma.java:321: error: illegal start of expression
	 */ 	public static double trigamma(double x) {
	    	^, Gamma.java:321: error: illegal start of expression
	 */ 	public static double trigamma(double x) {
	    	       ^, Gamma.java:321: error: ';' expected
	 */ 	public static double trigamma(double x) {
	    	             ^, Gamma.java:321: error: '.class' expected
	 */ 	public static double trigamma(double x) {
	    	                                     ^, Gamma.java:321: error: ';' expected
	 */ 	public static double trigamma(double x) {
	    	                                      ^, Gamma.java:337: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(61): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 	ret = [...] ` -topatch--> `if (x == 0.0) { 	ret = 0.0; } else if ((a >= 1.0) && (x > a)) { 	// use regularizedGammaQ because it[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (121(f=1.0), 122(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (121(f=1.0), )
----------Running generation: 62, population size: 1

***** Generation 62 : 0
**Parent Variant: [Variant id: 123, #gens: 85, #ops: 0, parent:-]

--Child created id: 124
--Creating new operations for variant [Variant id: 124, #gens: 85, #ops: 0, parent:123]
---analyzing modificationPoint position: 45
Templates availables28
Attempts Base Ingredients  1 total 28
vars from patch [function, initial, lowerBound, upperBound, java.lang.Integer.MAX_VALUE]
--> var from patch: function spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: initial spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: lowerBound spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: upperBound spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: java.lang.Integer.MAX_VALUE spoon.support.reflect.code.CtFieldReadImpl
location: UnivariateRealSolverUtils.java198
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((fa * fb) >= 0.0) { 	throw new org.apache.commons.math.ConvergenceException( 	"number of iterati[...] ` -topatch--> `return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket(function, initial,[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils line: 198, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((fa * fb) >= 0.0) { 	throw new org.apache.commons.math.ConvergenceException( 	"number of iterati[...] ` -topatch--> `return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket(function, initial,[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 124, #gens: 86, #ops: 1, parent:123] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 124, errors: [UnivariateRealSolverUtils.java:208: error: unreachable statement
		return new double[]{ a, b };
		^]
Ingredient counter is Zero
---Undoing: gnrtn(62): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if ((fa * fb) >= 0.0) { 	throw new org.apache.commons.math.ConvergenceException( 	"number of iterati[...] ` -topatch--> `return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket(function, initial,[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (123(f=1.0), 124(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (123(f=1.0), )
----------Running generation: 63, population size: 1

***** Generation 63 : 0
**Parent Variant: [Variant id: 125, #gens: 85, #ops: 0, parent:-]

--Child created id: 126
--Creating new operations for variant [Variant id: 126, #gens: 85, #ops: 0, parent:125]
---analyzing modificationPoint position: 17
Templates availables33
Attempts Base Ingredients  1 total 33
---modifPoint 0 not mutation generated in  ret = getMean() + getStandardDeviation()
---analyzing modificationPoint position: 63
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [x]
--> var from patch: x spoon.support.reflect.code.CtVariableReadImpl
location: Gamma.java175
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `an = an * (x / (a + n)) ` -topatch--> `// use method 4 (accurate to O(1/x^8) double inv = 1 / (x * x)` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.special.Gamma line: 175, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `an = an * (x / (a + n)) ` -topatch--> `// use method 4 (accurate to O(1/x^8) double inv = 1 / (x * x)` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 126, #gens: 86, #ops: 1, parent:125] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 126, errors: [Gamma.java:302: error: illegal start of expression
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	 ^, Gamma.java:302: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	          ^, Gamma.java:302: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                          ^, Gamma.java:302: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                                         ^, Gamma.java:302: error: <identifier> expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                                                                ^, Gamma.java:304: error: illegal start of expression
	 * @param a
	 ^, Gamma.java:304: error: illegal start of expression
	 * @param a
	   ^, Gamma.java:305: error: ';' expected
	 * 		the a parameter.
	   		   ^, Gamma.java:305: error: ';' expected
	 * 		the a parameter.
	   		               ^, Gamma.java:306: error: <identifier> expected
	 * @param x
	           ^, Gamma.java:307: error: ';' expected
	 * 		the value.
	   		         ^, Gamma.java:308: error: <identifier> expected
	 * @return the regularized gamma function Q(a, x)
	    ^, Gamma.java:308: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	              ^, Gamma.java:308: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                ^, Gamma.java:308: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                           ^, Gamma.java:308: error: not a statement
	 * @return the regularized gamma function Q(a, x)
	                                            ^, Gamma.java:308: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                             ^, Gamma.java:308: error: not a statement
	 * @return the regularized gamma function Q(a, x)
	                                               ^, Gamma.java:308: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                                ^, Gamma.java:309: error: <identifier> expected
	 * @throws MathException
	    ^, Gamma.java:309: error: ';' expected
	 * @throws MathException
	                        ^, Gamma.java:310: error: '(' expected
	 * 		if the algorithm fails to converge.
	   		  ^, Gamma.java:310: error: ')' expected
	 * 		if the algorithm fails to converge.
	   		      ^, Gamma.java:310: error: ';' expected
	 * 		if the algorithm fails to converge.
	   		                      ^, Gamma.java:310: error: variable declaration not allowed here
	 * 		if the algorithm fails to converge.
	   		                 ^, Gamma.java:310: error: ';' expected
	 * 		if the algorithm fails to converge.
	   		                                  ^, Gamma.java:311: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	^, Gamma.java:311: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	       ^, Gamma.java:311: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	             ^, Gamma.java:311: error: '.class' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                              ^, Gamma.java:311: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                               ^, Gamma.java:311: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                         ^, Gamma.java:311: error: not a statement
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                                                         ^, Gamma.java:311: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                                                                       ^, Gamma.java:337: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	^, Gamma.java:337: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	       ^, Gamma.java:337: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	             ^, Gamma.java:337: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                       ^, Gamma.java:337: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                            ^, Gamma.java:337: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                    ^, Gamma.java:337: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                     ^, Gamma.java:337: error: <identifier> expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                ^, Gamma.java:337: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                        ^, Gamma.java:337: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                               ^, Gamma.java:337: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                  ^, Gamma.java:337: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                                                  ^, Gamma.java:337: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                                                                ^, Gamma.java:338: error: illegal start of expression
	 * C limit
	 ^, Gamma.java:338: error: ';' expected
	 * C limit
	    ^, Gamma.java:339: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	  ^, Gamma.java:339: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	^, Gamma.java:339: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	        ^, Gamma.java:339: error: ';' expected
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	              ^, Gamma.java:341: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	^, Gamma.java:341: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	        ^, Gamma.java:341: error: ';' expected
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	              ^, Gamma.java:361: error: illegal start of expression
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	^, Gamma.java:361: error: illegal start of expression
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	       ^, Gamma.java:361: error: ';' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	             ^, Gamma.java:361: error: '.class' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	                                    ^, Gamma.java:361: error: ';' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	                                     ^, Gamma.java:373: error: illegal start of expression
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	^, Gamma.java:373: error: illegal start of expression
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	       ^, Gamma.java:373: error: ';' expected
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	             ^, Gamma.java:373: error: '.class' expected
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	                                     ^, Gamma.java:373: error: ';' expected
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	                                      ^, Gamma.java:374: error: reached end of file while parsing
			return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));} 		return org.apache.commons.math.special.Gamma.trigamma(x + 1) + (1 / (x * x));}}
			                                                                                               		                                                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(63): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `an = an * (x / (a + n)) ` -topatch--> `// use method 4 (accurate to O(1/x^8) double inv = 1 / (x * x)` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (125(f=1.0), 126(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (125(f=1.0), )
----------Running generation: 64, population size: 1

***** Generation 64 : 0
**Parent Variant: [Variant id: 127, #gens: 85, #ops: 0, parent:-]

--Child created id: 128
--Creating new operations for variant [Variant id: 128, #gens: 85, #ops: 0, parent:127]
---analyzing modificationPoint position: 45
Templates availables28
Attempts Base Ingredients  1 total 28
vars from patch [function]
--> var from patch: function spoon.support.reflect.code.CtVariableReadImpl
location: UnivariateRealSolverUtils.java198
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if ((fa * fb) >= 0.0) { 	throw new org.apache.commons.math.ConvergenceException( 	"number of iterati[...] ` -topatch--> `if (function == null) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentExc[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils line: 198, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if ((fa * fb) >= 0.0) { 	throw new org.apache.commons.math.ConvergenceException( 	"number of iterati[...] ` -topatch--> `if (function == null) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentExc[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 128, #gens: 86, #ops: 1, parent:127] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 128
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-128/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(64): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if ((fa * fb) >= 0.0) { 	throw new org.apache.commons.math.ConvergenceException( 	"number of iterati[...] ` -topatch--> `if (function == null) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentExc[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (127(f=1.0), 128(f=1.0), )
Selected to next generation: IDs2--> (127(f=1.0), )
----------Running generation: 65, population size: 1

***** Generation 65 : 0
**Parent Variant: [Variant id: 129, #gens: 85, #ops: 0, parent:-]

--Child created id: 130
--Creating new operations for variant [Variant id: 130, #gens: 85, #ops: 0, parent:129]
---analyzing modificationPoint position: 63
Templates availables14
Attempts Base Ingredients  1 total 14
vars from patch [ret, a, x, epsilon, maxIterations]
--> var from patch: ret spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: a spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: x spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: epsilon spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: maxIterations spoon.support.reflect.code.CtVariableReadImpl
location: Gamma.java175
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `an = an * (x / (a + n)) ` -topatch--> `// use regularizedGammaP because it should converge faster in this // case. ret = 1.0 - org.apache.c[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.special.Gamma line: 175, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `an = an * (x / (a + n)) ` -topatch--> `// use regularizedGammaP because it should converge faster in this // case. ret = 1.0 - org.apache.c[...]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 130, #gens: 85, #ops: 1, parent:129] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 130, errors: [Gamma.java:243: error: illegal start of expression
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	 ^, Gamma.java:243: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	          ^, Gamma.java:243: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                          ^, Gamma.java:243: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                                         ^, Gamma.java:243: error: <identifier> expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                                                                ^, Gamma.java:245: error: illegal start of expression
	 * @param a
	 ^, Gamma.java:245: error: illegal start of expression
	 * @param a
	   ^, Gamma.java:246: error: ';' expected
	 * 		the a parameter.
	   		   ^, Gamma.java:246: error: ';' expected
	 * 		the a parameter.
	   		               ^, Gamma.java:247: error: <identifier> expected
	 * @param x
	           ^, Gamma.java:248: error: ';' expected
	 * 		the value.
	   		         ^, Gamma.java:249: error: <identifier> expected
	 * @return the regularized gamma function Q(a, x)
	    ^, Gamma.java:249: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	              ^, Gamma.java:249: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                ^, Gamma.java:249: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                           ^, Gamma.java:249: error: not a statement
	 * @return the regularized gamma function Q(a, x)
	                                            ^, Gamma.java:249: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                             ^, Gamma.java:249: error: not a statement
	 * @return the regularized gamma function Q(a, x)
	                                               ^, Gamma.java:249: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                                ^, Gamma.java:250: error: <identifier> expected
	 * @throws MathException
	    ^, Gamma.java:250: error: ';' expected
	 * @throws MathException
	                        ^, Gamma.java:251: error: '(' expected
	 * 		if the algorithm fails to converge.
	   		  ^, Gamma.java:251: error: ')' expected
	 * 		if the algorithm fails to converge.
	   		      ^, Gamma.java:251: error: ';' expected
	 * 		if the algorithm fails to converge.
	   		                      ^, Gamma.java:251: error: variable declaration not allowed here
	 * 		if the algorithm fails to converge.
	   		                 ^, Gamma.java:251: error: ';' expected
	 * 		if the algorithm fails to converge.
	   		                                  ^, Gamma.java:252: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	^, Gamma.java:252: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	       ^, Gamma.java:252: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	             ^, Gamma.java:252: error: '.class' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                              ^, Gamma.java:252: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                               ^, Gamma.java:252: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                         ^, Gamma.java:252: error: not a statement
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                                                         ^, Gamma.java:252: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                                                                       ^, Gamma.java:278: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	^, Gamma.java:278: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	       ^, Gamma.java:278: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	             ^, Gamma.java:278: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                       ^, Gamma.java:278: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                            ^, Gamma.java:278: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                    ^, Gamma.java:278: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                     ^, Gamma.java:278: error: <identifier> expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                ^, Gamma.java:278: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                        ^, Gamma.java:278: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                               ^, Gamma.java:278: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                  ^, Gamma.java:278: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                                                  ^, Gamma.java:278: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                                                                ^, Gamma.java:279: error: illegal start of expression
	 * C limit
	 ^, Gamma.java:279: error: ';' expected
	 * C limit
	    ^, Gamma.java:280: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	  ^, Gamma.java:280: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	^, Gamma.java:280: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	        ^, Gamma.java:280: error: ';' expected
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	              ^, Gamma.java:282: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	^, Gamma.java:282: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	        ^, Gamma.java:282: error: ';' expected
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	              ^, Gamma.java:302: error: illegal start of expression
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	^, Gamma.java:302: error: illegal start of expression
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	       ^, Gamma.java:302: error: ';' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	             ^, Gamma.java:302: error: '.class' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	                                    ^, Gamma.java:302: error: ';' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	                                     ^, Gamma.java:321: error: illegal start of expression
	 */ 	public static double trigamma(double x) {
	    	^, Gamma.java:321: error: illegal start of expression
	 */ 	public static double trigamma(double x) {
	    	       ^, Gamma.java:321: error: ';' expected
	 */ 	public static double trigamma(double x) {
	    	             ^, Gamma.java:321: error: '.class' expected
	 */ 	public static double trigamma(double x) {
	    	                                     ^, Gamma.java:321: error: ';' expected
	 */ 	public static double trigamma(double x) {
	    	                                      ^, Gamma.java:337: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(65): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `an = an * (x / (a + n)) ` -topatch--> `// use regularizedGammaP because it should converge faster in this // case. ret = 1.0 - org.apache.c[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (129(f=1.0), 130(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (129(f=1.0), )
----------Running generation: 66, population size: 1

***** Generation 66 : 0
**Parent Variant: [Variant id: 131, #gens: 85, #ops: 0, parent:-]

--Child created id: 132
--Creating new operations for variant [Variant id: 132, #gens: 85, #ops: 0, parent:131]
---analyzing modificationPoint position: 38
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch []
location: UnivariateRealSolverUtils.java183
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double b = initial ` -topatch--> `int numIterations = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils line: 183, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double b = initial ` -topatch--> `int numIterations = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 132, #gens: 85, #ops: 1, parent:131] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 132, errors: [UnivariateRealSolverUtils.java:187: error: variable numIterations is already defined in method bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,int)
		int numIterations = 0; 		double fa; 		double fb; 		int numIterations = 0;
		                       		           		           		    ^, UnivariateRealSolverUtils.java:191: error: cannot find symbol
			b = java.lang.Math.min(b + 1.0, upperBound);
			^
  symbol:   variable b
  location: class org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils, UnivariateRealSolverUtils.java:191: error: cannot find symbol
			b = java.lang.Math.min(b + 1.0, upperBound);
			                       ^
  symbol:   variable b
  location: class org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils, UnivariateRealSolverUtils.java:194: error: cannot find symbol
			fb = function.value(b);
			                    ^
  symbol:   variable b
  location: class org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils, UnivariateRealSolverUtils.java:197: error: cannot find symbol
		((a > lowerBound) || (b < upperBound)) );
		                      ^
  symbol:   variable b
  location: class org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils, UnivariateRealSolverUtils.java:205: error: cannot find symbol
			lowerBound, upperBound, a, b, fa, fb);
			                           ^
  symbol:   variable b
  location: class org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils, UnivariateRealSolverUtils.java:208: error: cannot find symbol
		return new double[]{ a, b };
		                        ^
  symbol:   variable b
  location: class org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils]
Ingredient counter is Zero
---Undoing: gnrtn(66): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double b = initial ` -topatch--> `int numIterations = 0` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (131(f=1.0), 132(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (131(f=1.0), )
----------Running generation: 67, population size: 1

***** Generation 67 : 0
**Parent Variant: [Variant id: 133, #gens: 85, #ops: 0, parent:-]

--Child created id: 134
--Creating new operations for variant [Variant id: 134, #gens: 85, #ops: 0, parent:133]
---analyzing modificationPoint position: 79
Templates availables14
Attempts Base Ingredients  1 total 14
vars from patch [ret]
--> var from patch: ret spoon.support.reflect.code.CtVariableWriteImpl
location: Gamma.java98
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum = sum + (org.apache.commons.math.special.Gamma.lanczos[i] / (x + i)) ` -topatch--> `ret = 0.0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.special.Gamma line: 98, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum = sum + (org.apache.commons.math.special.Gamma.lanczos[i] / (x + i)) ` -topatch--> `ret = 0.0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 134, #gens: 85, #ops: 1, parent:133] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 134, errors: [Gamma.java:204: error: illegal start of expression
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	 ^, Gamma.java:204: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	          ^, Gamma.java:204: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                          ^, Gamma.java:204: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                                         ^, Gamma.java:204: error: <identifier> expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                                                                ^, Gamma.java:206: error: illegal start of expression
	 * @param a
	 ^, Gamma.java:206: error: illegal start of expression
	 * @param a
	   ^, Gamma.java:207: error: ';' expected
	 * 		the a parameter.
	   		   ^, Gamma.java:207: error: ';' expected
	 * 		the a parameter.
	   		               ^, Gamma.java:208: error: <identifier> expected
	 * @param x
	           ^, Gamma.java:209: error: ';' expected
	 * 		the value.
	   		         ^, Gamma.java:210: error: <identifier> expected
	 * @return the regularized gamma function Q(a, x)
	    ^, Gamma.java:210: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	              ^, Gamma.java:210: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                ^, Gamma.java:210: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                           ^, Gamma.java:210: error: not a statement
	 * @return the regularized gamma function Q(a, x)
	                                            ^, Gamma.java:210: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                             ^, Gamma.java:210: error: not a statement
	 * @return the regularized gamma function Q(a, x)
	                                               ^, Gamma.java:210: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                                ^, Gamma.java:211: error: <identifier> expected
	 * @throws MathException
	    ^, Gamma.java:211: error: ';' expected
	 * @throws MathException
	                        ^, Gamma.java:212: error: '(' expected
	 * 		if the algorithm fails to converge.
	   		  ^, Gamma.java:212: error: ')' expected
	 * 		if the algorithm fails to converge.
	   		      ^, Gamma.java:212: error: ';' expected
	 * 		if the algorithm fails to converge.
	   		                      ^, Gamma.java:212: error: variable declaration not allowed here
	 * 		if the algorithm fails to converge.
	   		                 ^, Gamma.java:212: error: ';' expected
	 * 		if the algorithm fails to converge.
	   		                                  ^, Gamma.java:213: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	^, Gamma.java:213: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	       ^, Gamma.java:213: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	             ^, Gamma.java:213: error: '.class' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                              ^, Gamma.java:213: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                               ^, Gamma.java:213: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                         ^, Gamma.java:213: error: not a statement
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                                                         ^, Gamma.java:213: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                                                                       ^, Gamma.java:239: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) {
	    	^, Gamma.java:239: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) {
	    	       ^, Gamma.java:239: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) {
	    	             ^, Gamma.java:239: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) {
	    	                                       ^, Gamma.java:239: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) {
	    	                                            ^, Gamma.java:239: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) {
	    	                                                    ^, Gamma.java:239: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) {
	    	                                                     ^, Gamma.java:239: error: <identifier> expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) {
	    	                                                                ^, Gamma.java:239: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) {
	    	                                                                        ^, Gamma.java:239: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) {
	    	                                                                               ^, Gamma.java:239: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) {
	    	                                                                                                  ^, Gamma.java:239: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) {
	    	                                                                                                                                  ^, Gamma.java:239: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) {
	    	                                                                                                                                                ^, Gamma.java:269: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	^, Gamma.java:269: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	        ^, Gamma.java:269: error: ';' expected
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	              ^, Gamma.java:271: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5;
	    	^, Gamma.java:271: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5;
	    	        ^, Gamma.java:271: error: ';' expected
	 */ 	private static final double S_LIMIT = 1.0E-5;
	    	              ^, Gamma.java:292: error: illegal start of expression
	 */ 	public static double digamma(double x) {
	    	^, Gamma.java:292: error: illegal start of expression
	 */ 	public static double digamma(double x) {
	    	       ^, Gamma.java:292: error: ';' expected
	 */ 	public static double digamma(double x) {
	    	             ^, Gamma.java:292: error: '.class' expected
	 */ 	public static double digamma(double x) {
	    	                                    ^, Gamma.java:292: error: ';' expected
	 */ 	public static double digamma(double x) {
	    	                                     ^, Gamma.java:321: error: illegal start of expression
	 */ 	public static double trigamma(double x) {
	    	^, Gamma.java:321: error: illegal start of expression
	 */ 	public static double trigamma(double x) {
	    	       ^, Gamma.java:321: error: ';' expected
	 */ 	public static double trigamma(double x) {
	    	             ^, Gamma.java:321: error: '.class' expected
	 */ 	public static double trigamma(double x) {
	    	                                     ^, Gamma.java:321: error: ';' expected
	 */ 	public static double trigamma(double x) {
	    	                                      ^, Gamma.java:337: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(67): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum = sum + (org.apache.commons.math.special.Gamma.lanczos[i] / (x + i)) ` -topatch--> `ret = 0.0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (133(f=1.0), 134(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (133(f=1.0), )
----------Running generation: 68, population size: 1

***** Generation 68 : 0
**Parent Variant: [Variant id: 135, #gens: 85, #ops: 0, parent:-]

--Child created id: 136
--Creating new operations for variant [Variant id: 136, #gens: 85, #ops: 0, parent:135]
---analyzing modificationPoint position: 54
Templates availables33
Attempts Base Ingredients  1 total 33
---modifPoint 0 not mutation generated in  standardDeviation = sd
---analyzing modificationPoint position: 34
Templates availables14
Attempts Base Ingredients  1 total 14
vars from patch [lowerBound]
--> var from patch: lowerBound spoon.support.reflect.code.CtVariableReadImpl
location: AbstractContinuousDistribution.java83
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] bracket = null ` -topatch--> `return lowerBound` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.distribution.AbstractContinuousDistribution line: 83, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] bracket = null ` -topatch--> `return lowerBound` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 136, #gens: 86, #ops: 1, parent:135] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 136, errors: [AbstractContinuousDistribution.java:99: error: unreachable statement
		return lowerBound; 		double[] bracket = null; 		try { 			bracket = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket(rootFindingFunction, getInitialDomain(p), lowerBound, upperBound);} catch (org.apache.commons.math.ConvergenceException ex) { 			/* Check domain endpoints to see if one gives value that is within
		                   		         ^]
Ingredient counter is Zero
---Undoing: gnrtn(68): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] bracket = null ` -topatch--> `return lowerBound` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (135(f=1.0), 136(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (135(f=1.0), )
----------Running generation: 69, population size: 1

***** Generation 69 : 0
**Parent Variant: [Variant id: 137, #gens: 85, #ops: 0, parent:-]

--Child created id: 138
--Creating new operations for variant [Variant id: 138, #gens: 85, #ops: 0, parent:137]
---analyzing modificationPoint position: 14
---modifPoint 0 not mutation generated in  return ret
---analyzing modificationPoint position: 35
Templates availables1
Attempts Base Ingredients  1 total 1
vars from patch [bracket, rootFindingFunction, p, lowerBound, upperBound]
--> var from patch: bracket spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: rootFindingFunction spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: p spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: lowerBound spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: upperBound spoon.support.reflect.code.CtVariableReadImpl
location: AbstractContinuousDistribution.java85
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `bracket = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket( rootFindingFun[...] ` -topatch--> `bracket = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket( rootFindingFun[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.distribution.AbstractContinuousDistribution line: 85, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `bracket = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket( rootFindingFun[...] ` -topatch--> `bracket = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket( rootFindingFun[...]` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 138, #gens: 85, #ops: 1, parent:137] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 138
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-138/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(69): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `bracket = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket( rootFindingFun[...] ` -topatch--> `bracket = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket( rootFindingFun[...]` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (137(f=1.0), 138(f=1.0), )
Selected to next generation: IDs2--> (137(f=1.0), )
----------Running generation: 70, population size: 1

***** Generation 70 : 0
**Parent Variant: [Variant id: 139, #gens: 85, #ops: 0, parent:-]

--Child created id: 140
--Creating new operations for variant [Variant id: 140, #gens: 85, #ops: 0, parent:139]
---analyzing modificationPoint position: 57
Templates availables20
Attempts Base Ingredients  1 total 20
vars from patch [this.pattern]
--> var from patch: this.pattern spoon.support.reflect.code.CtFieldWriteImpl
location: MathException.java166
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math.MathException.buildMessage(locale, pattern, arguments) ` -topatch--> `this.pattern = null` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.MathException line: 166, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math.MathException.buildMessage(locale, pattern, arguments) ` -topatch--> `this.pattern = null` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 140, #gens: 86, #ops: 1, parent:139] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 140, errors: [MathException.java:166: error: cannot assign a value to final variable pattern
	 */ 	public java.lang.String getMessage(java.util.Locale locale) { 		this.pattern = null;
	    	                                                              		    ^]
Ingredient counter is Zero
---Undoing: gnrtn(70): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math.MathException.buildMessage(locale, pattern, arguments) ` -topatch--> `this.pattern = null` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (139(f=1.0), 140(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (139(f=1.0), )
----------Running generation: 71, population size: 1

***** Generation 71 : 0
**Parent Variant: [Variant id: 141, #gens: 85, #ops: 0, parent:-]

--Child created id: 142
--Creating new operations for variant [Variant id: 142, #gens: 85, #ops: 0, parent:141]
---analyzing modificationPoint position: 36
Templates availables28
Attempts Base Ingredients  1 total 28
vars from patch [org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.LazyHolder.FACTORY]
--> var from patch: org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.LazyHolder.FACTORY spoon.support.reflect.code.CtFieldReadImpl
location: UnivariateRealSolverUtils.java127
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket(function, initial,[...] ` -topatch--> `org.apache.commons.math.analysis.solvers.UnivariateRealSolver solver = org.apache.commons.math.analy[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils line: 127, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket(function, initial,[...] ` -topatch--> `org.apache.commons.math.analysis.solvers.UnivariateRealSolver solver = org.apache.commons.math.analy[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 142, #gens: 86, #ops: 1, parent:141] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 142
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-142/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(71): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket(function, initial,[...] ` -topatch--> `org.apache.commons.math.analysis.solvers.UnivariateRealSolver solver = org.apache.commons.math.analy[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (141(f=1.0), 142(f=1.0), )
Selected to next generation: IDs2--> (141(f=1.0), )
----------Running generation: 72, population size: 1

***** Generation 72 : 0
**Parent Variant: [Variant id: 143, #gens: 85, #ops: 0, parent:-]

--Child created id: 144
--Creating new operations for variant [Variant id: 144, #gens: 85, #ops: 0, parent:143]
---analyzing modificationPoint position: 48
Templates availables28
Attempts Base Ingredients  1 total 28
vars from patch [function]
--> var from patch: function spoon.support.reflect.code.CtVariableReadImpl
location: UnivariateRealSolverUtils.java177
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (((initial < lowerBound) || (initial > upperBound)) || (lowerBound >= upperBound)) { 	throw org.a[...] ` -topatch--> `if (function == null) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentExc[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils line: 177, pointed element: CtIfImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (((initial < lowerBound) || (initial > upperBound)) || (lowerBound >= upperBound)) { 	throw org.a[...] ` -topatch--> `if (function == null) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentExc[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 144, #gens: 86, #ops: 1, parent:143] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 144
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-144/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(72): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (((initial < lowerBound) || (initial > upperBound)) || (lowerBound >= upperBound)) { 	throw org.a[...] ` -topatch--> `if (function == null) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentExc[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (143(f=1.0), 144(f=1.0), )
Selected to next generation: IDs2--> (143(f=1.0), )
----------Running generation: 73, population size: 1

***** Generation 73 : 0
**Parent Variant: [Variant id: 145, #gens: 85, #ops: 0, parent:-]

--Child created id: 146
--Creating new operations for variant [Variant id: 146, #gens: 85, #ops: 0, parent:145]
---analyzing modificationPoint position: 15
Templates availables33
Attempts Base Ingredients  1 total 33
vars from patch [p]
--> var from patch: p spoon.support.reflect.code.CtVariableReadImpl
location: NormalDistributionImpl.java221
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (p < 0.5) { 	ret = getMean() - getStandardDeviation(); } else if (p > 0.5) { 	ret = getMean() + g[...] ` -topatch--> `return super.inverseCumulativeProbability(p)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.distribution.NormalDistributionImpl line: 221, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (p < 0.5) { 	ret = getMean() - getStandardDeviation(); } else if (p > 0.5) { 	ret = getMean() + g[...] ` -topatch--> `return super.inverseCumulativeProbability(p)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 146, #gens: 86, #ops: 1, parent:145] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 146, errors: [NormalDistributionImpl.java:230: error: unreachable statement
		return ret;
		^, NormalDistributionImpl.java:228: error: unreported exception org.apache.commons.math.MathException; must be caught or declared to be thrown
		} 		return super.inverseCumulativeProbability(p);
		  		                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(73): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (p < 0.5) { 	ret = getMean() - getStandardDeviation(); } else if (p > 0.5) { 	ret = getMean() + g[...] ` -topatch--> `return super.inverseCumulativeProbability(p)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (145(f=1.0), 146(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (145(f=1.0), )
----------Running generation: 74, population size: 1

***** Generation 74 : 0
**Parent Variant: [Variant id: 147, #gens: 85, #ops: 0, parent:-]

--Child created id: 148
--Creating new operations for variant [Variant id: 148, #gens: 85, #ops: 0, parent:147]
---analyzing modificationPoint position: 59
Templates availables10
Attempts Base Ingredients  1 total 10
---modifPoint 0 not mutation generated in  double an = 1.0 / a// n-th element in the series 
---analyzing modificationPoint position: 11
Templates availables10
Attempts Base Ingredients  1 total 10
---modifPoint 1 not mutation generated in  return ret
---analyzing modificationPoint position: 30
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 2 not mutation generated in  // by default, do simple root finding using bracketing and default solver. // subclasses can overrid[...]
---analyzing modificationPoint position: 9
Templates availables33
Attempts Base Ingredients  1 total 33
vars from patch [ret]
--> var from patch: ret spoon.support.reflect.code.CtVariableWriteImpl
location: NormalDistributionImpl.java181
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = getMean() ` -topatch--> `ret = getMean()` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.distribution.NormalDistributionImpl line: 181, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = getMean() ` -topatch--> `ret = getMean()` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 148, #gens: 86, #ops: 1, parent:147] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 148
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-148/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(74): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = getMean() ` -topatch--> `ret = getMean()` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (147(f=1.0), 148(f=1.0), )
Selected to next generation: IDs2--> (147(f=1.0), )
----------Running generation: 75, population size: 1

***** Generation 75 : 0
**Parent Variant: [Variant id: 149, #gens: 85, #ops: 0, parent:-]

--Child created id: 150
--Creating new operations for variant [Variant id: 150, #gens: 85, #ops: 0, parent:149]
---analyzing modificationPoint position: 68
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [x, org.apache.commons.math.special.Gamma.C_LIMIT, inv]
--> var from patch: x spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: org.apache.commons.math.special.Gamma.C_LIMIT spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: inv spoon.support.reflect.code.CtVariableReadImpl
location: Gamma.java161
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (x == 0.0) { 	ret = 0.0; } else if ((a >= 1.0) && (x > a)) { 	// use regularizedGammaQ because it[...] ` -topatch--> `if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 	double inv = 1 / (x * x); 	// 1    1     [...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.special.Gamma line: 161, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (x == 0.0) { 	ret = 0.0; } else if ((a >= 1.0) && (x > a)) { 	// use regularizedGammaQ because it[...] ` -topatch--> `if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 	double inv = 1 / (x * x); 	// 1    1     [...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 150, #gens: 86, #ops: 1, parent:149] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 150, errors: [Gamma.java:334: error: illegal start of expression
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	 ^, Gamma.java:334: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	          ^, Gamma.java:334: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                          ^, Gamma.java:334: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                                         ^, Gamma.java:334: error: <identifier> expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                                                                ^, Gamma.java:336: error: illegal start of expression
	 * @param a
	 ^, Gamma.java:336: error: illegal start of expression
	 * @param a
	   ^, Gamma.java:337: error: ';' expected
	 * 		the a parameter.
	   		   ^, Gamma.java:337: error: ';' expected
	 * 		the a parameter.
	   		               ^, Gamma.java:338: error: <identifier> expected
	 * @param x
	           ^, Gamma.java:339: error: ';' expected
	 * 		the value.
	   		         ^, Gamma.java:340: error: <identifier> expected
	 * @return the regularized gamma function Q(a, x)
	    ^, Gamma.java:340: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	              ^, Gamma.java:340: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                ^, Gamma.java:340: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                           ^, Gamma.java:340: error: not a statement
	 * @return the regularized gamma function Q(a, x)
	                                            ^, Gamma.java:340: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                             ^, Gamma.java:340: error: not a statement
	 * @return the regularized gamma function Q(a, x)
	                                               ^, Gamma.java:340: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                                ^, Gamma.java:341: error: <identifier> expected
	 * @throws MathException
	    ^, Gamma.java:341: error: ';' expected
	 * @throws MathException
	                        ^, Gamma.java:342: error: '(' expected
	 * 		if the algorithm fails to converge.
	   		  ^, Gamma.java:342: error: ')' expected
	 * 		if the algorithm fails to converge.
	   		      ^, Gamma.java:342: error: ';' expected
	 * 		if the algorithm fails to converge.
	   		                      ^, Gamma.java:342: error: variable declaration not allowed here
	 * 		if the algorithm fails to converge.
	   		                 ^, Gamma.java:342: error: ';' expected
	 * 		if the algorithm fails to converge.
	   		                                  ^, Gamma.java:343: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	^, Gamma.java:343: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	       ^, Gamma.java:343: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	             ^, Gamma.java:343: error: '.class' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                              ^, Gamma.java:343: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                               ^, Gamma.java:343: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                         ^, Gamma.java:343: error: not a statement
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                                                         ^, Gamma.java:343: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                                                                       ^, Gamma.java:369: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	^, Gamma.java:369: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	       ^, Gamma.java:369: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	             ^, Gamma.java:369: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                       ^, Gamma.java:369: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                            ^, Gamma.java:369: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                    ^, Gamma.java:369: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                     ^, Gamma.java:369: error: <identifier> expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                ^, Gamma.java:369: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                        ^, Gamma.java:369: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                               ^, Gamma.java:369: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                  ^, Gamma.java:369: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                                                  ^, Gamma.java:369: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                                                                ^, Gamma.java:370: error: illegal start of expression
	 * C limit
	 ^, Gamma.java:370: error: ';' expected
	 * C limit
	    ^, Gamma.java:371: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	  ^, Gamma.java:371: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	^, Gamma.java:371: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	        ^, Gamma.java:371: error: ';' expected
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	              ^, Gamma.java:373: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	^, Gamma.java:373: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	        ^, Gamma.java:373: error: ';' expected
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	              ^, Gamma.java:393: error: illegal start of expression
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	^, Gamma.java:393: error: illegal start of expression
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	       ^, Gamma.java:393: error: ';' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	             ^, Gamma.java:393: error: '.class' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	                                    ^, Gamma.java:393: error: ';' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	                                     ^, Gamma.java:405: error: illegal start of expression
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	^, Gamma.java:405: error: illegal start of expression
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	       ^, Gamma.java:405: error: ';' expected
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	             ^, Gamma.java:405: error: '.class' expected
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	                                     ^, Gamma.java:405: error: ';' expected
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	                                      ^, Gamma.java:406: error: reached end of file while parsing
			return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));} 		return org.apache.commons.math.special.Gamma.trigamma(x + 1) + (1 / (x * x));}}
			                                                                                               		                                                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(75): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtIfImpl) `if (x == 0.0) { 	ret = 0.0; } else if ((a >= 1.0) && (x > a)) { 	// use regularizedGammaQ because it[...] ` -topatch--> `if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 	double inv = 1 / (x * x); 	// 1    1     [...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (149(f=1.0), 150(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (149(f=1.0), )
----------Running generation: 76, population size: 1

***** Generation 76 : 0
**Parent Variant: [Variant id: 151, #gens: 85, #ops: 0, parent:-]

--Child created id: 152
--Creating new operations for variant [Variant id: 152, #gens: 85, #ops: 0, parent:151]
---analyzing modificationPoint position: 39
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch [initial]
--> var from patch: initial spoon.support.reflect.code.CtVariableReadImpl
location: UnivariateRealSolverUtils.java186
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int numIterations = 0 ` -topatch--> `double a = initial` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils line: 186, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int numIterations = 0 ` -topatch--> `double a = initial` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 152, #gens: 85, #ops: 1, parent:151] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 152, errors: [UnivariateRealSolverUtils.java:186: error: variable a is already defined in method bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,int)
		double fb; 		double a = initial;
		           		       ^, UnivariateRealSolverUtils.java:195: error: cannot find symbol
			numIterations++;
			^
  symbol:   variable numIterations
  location: class org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils, UnivariateRealSolverUtils.java:196: error: cannot find symbol
		} while ((((fa * fb) > 0.0) && (numIterations < maximumIterations)) && 
		                                ^
  symbol:   variable numIterations
  location: class org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils, UnivariateRealSolverUtils.java:204: error: cannot find symbol
			numIterations, maximumIterations, initial, 
			^
  symbol:   variable numIterations
  location: class org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils]
Ingredient counter is Zero
---Undoing: gnrtn(76): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int numIterations = 0 ` -topatch--> `double a = initial` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (151(f=1.0), 152(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (151(f=1.0), )
----------Running generation: 77, population size: 1

***** Generation 77 : 0
**Parent Variant: [Variant id: 153, #gens: 85, #ops: 0, parent:-]

--Child created id: 154
--Creating new operations for variant [Variant id: 154, #gens: 85, #ops: 0, parent:153]
---analyzing modificationPoint position: 57
---modifPoint 0 not mutation generated in  return org.apache.commons.math.MathException.buildMessage(locale, pattern, arguments)
---analyzing modificationPoint position: 32
Templates availables5
Attempts Base Ingredients  1 total 5
---modifPoint 1 not mutation generated in  // Try to bracket root, test domain endoints if this fails double lowerBound = getDomainLowerBound(p[...]
---analyzing modificationPoint position: 70
---modifPoint 2 not mutation generated in  return ret
---analyzing modificationPoint position: 13
Templates availables7
Attempts Base Ingredients  1 total 7
vars from patch [ret, java.lang.Double.MAX_VALUE]
--> var from patch: ret spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: java.lang.Double.MAX_VALUE spoon.support.reflect.code.CtFieldReadImpl
location: NormalDistributionImpl.java203
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = java.lang.Double.MAX_VALUE ` -topatch--> `ret = -java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.distribution.NormalDistributionImpl line: 203, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = java.lang.Double.MAX_VALUE ` -topatch--> `ret = -java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 154, #gens: 85, #ops: 1, parent:153] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child compiles: id 154
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-154/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 13] ,[]
-Valid?: |false|2|13|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(77): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = java.lang.Double.MAX_VALUE ` -topatch--> `ret = -java.lang.Double.MAX_VALUE` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (153(f=1.0), 154(f=2.0), )
Selected to next generation: IDs2--> (153(f=1.0), )
----------Running generation: 78, population size: 1

***** Generation 78 : 0
**Parent Variant: [Variant id: 155, #gens: 85, #ops: 0, parent:-]

--Child created id: 156
--Creating new operations for variant [Variant id: 156, #gens: 85, #ops: 0, parent:155]
---analyzing modificationPoint position: 63
location: Gamma.java175
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `an = an * (x / (a + n)) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 156, #gens: 84, #ops: 1, parent:155] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 156
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-156/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 8, was successful: false, cases executed: 13] ,[]
-Valid?: |false|8|13|[]|, fitness 8.0
Ingredient counter is Zero
---Undoing: gnrtn(78): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `an = an * (x / (a + n)) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (155(f=1.0), 156(f=8.0), )
Selected to next generation: IDs2--> (155(f=1.0), )
----------Running generation: 79, population size: 1

***** Generation 79 : 0
**Parent Variant: [Variant id: 157, #gens: 85, #ops: 0, parent:-]

--Child created id: 158
--Creating new operations for variant [Variant id: 158, #gens: 85, #ops: 0, parent:157]
---analyzing modificationPoint position: 75
---modifPoint 0 not mutation generated in  return pattern == null ? "" : new java.text.MessageFormat(org.apache.commons.math.MathException.tran[...]
---analyzing modificationPoint position: 25
location: Gamma.java162
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = 0.0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 158, #gens: 84, #ops: 1, parent:157] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 158, errors: [Gamma.java:188: error: variable ret might not have been initialized
		return ret;
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(79): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = 0.0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (157(f=1.0), 158(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (157(f=1.0), )
----------Running generation: 80, population size: 1

***** Generation 80 : 0
**Parent Variant: [Variant id: 159, #gens: 85, #ops: 0, parent:-]

--Child created id: 160
--Creating new operations for variant [Variant id: 160, #gens: 85, #ops: 0, parent:159]
---analyzing modificationPoint position: 64
Templates availables14
Attempts Base Ingredients  1 total 14
vars from patch [ret]
--> var from patch: ret spoon.support.reflect.code.CtVariableWriteImpl
location: Gamma.java178
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// update partial sum sum = sum + an ` -topatch--> `ret = 1.0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.special.Gamma line: 178, pointed element: CtAssignmentImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// update partial sum sum = sum + an ` -topatch--> `ret = 1.0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 160, #gens: 85, #ops: 1, parent:159] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 160, errors: [Gamma.java:275: error: illegal start of expression
	 * C limit
	 ^, Gamma.java:275: error: ';' expected
	 * C limit
	    ^, Gamma.java:276: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	  ^, Gamma.java:276: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	^, Gamma.java:276: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	        ^, Gamma.java:276: error: ';' expected
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	              ^, Gamma.java:278: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	^, Gamma.java:278: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	        ^, Gamma.java:278: error: ';' expected
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	              ^, Gamma.java:298: error: illegal start of expression
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	^, Gamma.java:298: error: illegal start of expression
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	       ^, Gamma.java:298: error: ';' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	             ^, Gamma.java:298: error: '.class' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	                                    ^, Gamma.java:298: error: ';' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	                                     ^, Gamma.java:321: error: illegal start of expression
	 */ 	public static double trigamma(double x) {
	    	^, Gamma.java:321: error: illegal start of expression
	 */ 	public static double trigamma(double x) {
	    	       ^, Gamma.java:321: error: ';' expected
	 */ 	public static double trigamma(double x) {
	    	             ^, Gamma.java:321: error: '.class' expected
	 */ 	public static double trigamma(double x) {
	    	                                     ^, Gamma.java:321: error: ';' expected
	 */ 	public static double trigamma(double x) {
	    	                                      ^, Gamma.java:337: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(80): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtAssignmentImpl) `// update partial sum sum = sum + an ` -topatch--> `ret = 1.0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (159(f=1.0), 160(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (159(f=1.0), )
----------Running generation: 81, population size: 1

***** Generation 81 : 0
**Parent Variant: [Variant id: 161, #gens: 85, #ops: 0, parent:-]

--Child created id: 162
--Creating new operations for variant [Variant id: 162, #gens: 85, #ops: 0, parent:161]
---analyzing modificationPoint position: 38
---modifPoint 0 not mutation generated in  double b = initial
---analyzing modificationPoint position: 33
Templates availables5
Attempts Base Ingredients  1 total 5
vars from patch [p]
--> var from patch: p spoon.support.reflect.code.CtVariableReadImpl
location: AbstractContinuousDistribution.java82
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double upperBound = getDomainUpperBound(p) ` -topatch--> `// Try to bracket root, test domain endoints if this fails double lowerBound = getDomainLowerBound(p[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.distribution.AbstractContinuousDistribution line: 82, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double upperBound = getDomainUpperBound(p) ` -topatch--> `// Try to bracket root, test domain endoints if this fails double lowerBound = getDomainLowerBound(p[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 162, #gens: 85, #ops: 1, parent:161] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 162, errors: [AbstractContinuousDistribution.java:88: error: cannot find symbol
			lowerBound, upperBound);
			            ^
  symbol:   variable upperBound
  location: class org.apache.commons.math.distribution.AbstractContinuousDistribution, AbstractContinuousDistribution.java:101: error: cannot find symbol
			if (java.lang.Math.abs(rootFindingFunction.value(upperBound)) < 1.0E-6) {
			                                                 ^
  symbol:   variable upperBound
  location: class org.apache.commons.math.distribution.AbstractContinuousDistribution, AbstractContinuousDistribution.java:102: error: cannot find symbol
				return upperBound;
				       ^
  symbol:   variable upperBound
  location: class org.apache.commons.math.distribution.AbstractContinuousDistribution]
Ingredient counter is Zero
---Undoing: gnrtn(81): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double upperBound = getDomainUpperBound(p) ` -topatch--> `// Try to bracket root, test domain endoints if this fails double lowerBound = getDomainLowerBound(p[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (161(f=1.0), 162(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (161(f=1.0), )
----------Running generation: 82, population size: 1

***** Generation 82 : 0
**Parent Variant: [Variant id: 163, #gens: 85, #ops: 0, parent:-]

--Child created id: 164
--Creating new operations for variant [Variant id: 164, #gens: 85, #ops: 0, parent:163]
---analyzing modificationPoint position: 21
Templates availables33
Attempts Base Ingredients  1 total 33
---modifPoint 0 not mutation generated in  return mean
---analyzing modificationPoint position: 2
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 1 not mutation generated in  // Failed bracket convergence was not because of corner solution throw new org.apache.commons.math.M[...]
---analyzing modificationPoint position: 39
Templates availables6
Attempts Base Ingredients  1 total 6
vars from patch []
location: UnivariateRealSolverUtils.java186
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int numIterations = 0 ` -topatch--> `double fb` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils line: 186, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int numIterations = 0 ` -topatch--> `double fb` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 164, #gens: 85, #ops: 1, parent:163] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 164, errors: [UnivariateRealSolverUtils.java:186: error: variable fb is already defined in method bracket(org.apache.commons.math.analysis.UnivariateRealFunction,double,double,double,int)
		double fb; 		double fb;
		           		       ^, UnivariateRealSolverUtils.java:195: error: cannot find symbol
			numIterations++;
			^
  symbol:   variable numIterations
  location: class org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils, UnivariateRealSolverUtils.java:196: error: cannot find symbol
		} while ((((fa * fb) > 0.0) && (numIterations < maximumIterations)) && 
		                                ^
  symbol:   variable numIterations
  location: class org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils, UnivariateRealSolverUtils.java:204: error: cannot find symbol
			numIterations, maximumIterations, initial, 
			^
  symbol:   variable numIterations
  location: class org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils]
Ingredient counter is Zero
---Undoing: gnrtn(82): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `int numIterations = 0 ` -topatch--> `double fb` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (163(f=1.0), 164(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (163(f=1.0), )
----------Running generation: 83, population size: 1

***** Generation 83 : 0
**Parent Variant: [Variant id: 165, #gens: 85, #ops: 0, parent:-]

--Child created id: 166
--Creating new operations for variant [Variant id: 166, #gens: 85, #ops: 0, parent:165]
---analyzing modificationPoint position: 1
location: AbstractContinuousDistribution.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (java.lang.Math.abs(rootFindingFunction.value(upperBound)) < 1.0E-6) { 	return upperBound; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 166, #gens: 84, #ops: 1, parent:165] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 166
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-166/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(83): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (java.lang.Math.abs(rootFindingFunction.value(upperBound)) < 1.0E-6) { 	return upperBound; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (165(f=1.0), 166(f=1.0), )
Selected to next generation: IDs2--> (165(f=1.0), )
----------Running generation: 84, population size: 1

***** Generation 84 : 0
**Parent Variant: [Variant id: 167, #gens: 85, #ops: 0, parent:-]

--Child created id: 168
--Creating new operations for variant [Variant id: 168, #gens: 85, #ops: 0, parent:167]
---analyzing modificationPoint position: 47
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 0 not mutation generated in  if (maximumIterations <= 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgum[...]
---analyzing modificationPoint position: 32
---modifPoint 1 not mutation generated in  // Try to bracket root, test domain endoints if this fails double lowerBound = getDomainLowerBound(p[...]
---analyzing modificationPoint position: 52
Templates availables33
Attempts Base Ingredients  1 total 33
---modifPoint 2 not mutation generated in  this.mean = mean
---analyzing modificationPoint position: 66
Templates availables48
Attempts Base Ingredients  1 total 48
Name Conflict [x, ret, a, epsilon, maxIterations]
---modifPoint 3 not mutation generated in  ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamm[...]
---analyzing modificationPoint position: 68
Templates availables12
Attempts Base Ingredients  1 total 12
---modifPoint 4 not mutation generated in  if (x == 0.0) { 	ret = 0.0; } else if ((a >= 1.0) && (x > a)) { 	// use regularizedGammaQ because it[...]
---analyzing modificationPoint position: 22
---modifPoint 5 not mutation generated in  return standardDeviation
---analyzing modificationPoint position: 83
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 6 not mutation generated in  if (java.lang.Double.isNaN(x) || (x <= 0.0)) { 	ret = java.lang.Double.NaN; } else { 	double g = 607[...]
---analyzing modificationPoint position: 29
---modifPoint 7 not mutation generated in  return ret
---analyzing modificationPoint position: 72
Templates availables20
Attempts Base Ingredients  1 total 20
---modifPoint 8 not mutation generated in  this.arguments = (arguments == null) ? new java.lang.Object[0] : arguments.clone()
---analyzing modificationPoint position: 8
Templates availables9
Attempts Base Ingredients  1 total 9
vars from patch [p, java.lang.Double.POSITIVE_INFINITY]
--> var from patch: p spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: java.lang.Double.POSITIVE_INFINITY spoon.support.reflect.code.CtFieldReadImpl
location: NormalDistributionImpl.java178
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (p < 0.5) { 	ret = -java.lang.Double.MAX_VALUE; } else { 	ret = getMean(); } ` -topatch--> `if (p == 1) { 	return java.lang.Double.POSITIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.distribution.NormalDistributionImpl line: 178, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (p < 0.5) { 	ret = -java.lang.Double.MAX_VALUE; } else { 	ret = getMean(); } ` -topatch--> `if (p == 1) { 	return java.lang.Double.POSITIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 168, #gens: 85, #ops: 1, parent:167] gen mutated: 1 , gen not mut: 9, gen not applied  0
-The child does NOT compile: 168, errors: [NormalDistributionImpl.java:185: error: variable ret might not have been initialized
		return ret;
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(84): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (p < 0.5) { 	ret = -java.lang.Double.MAX_VALUE; } else { 	ret = getMean(); } ` -topatch--> `if (p == 1) { 	return java.lang.Double.POSITIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (167(f=1.0), 168(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (167(f=1.0), )
----------Running generation: 85, population size: 1

***** Generation 85 : 0
**Parent Variant: [Variant id: 169, #gens: 85, #ops: 0, parent:-]

--Child created id: 170
--Creating new operations for variant [Variant id: 170, #gens: 85, #ops: 0, parent:169]
---analyzing modificationPoint position: 70
---modifPoint 0 not mutation generated in  return ret
---analyzing modificationPoint position: 40
Templates availables28
Attempts Base Ingredients  1 total 28
vars from patch [a, lowerBound]
--> var from patch: a spoon.support.reflect.code.CtVariableWriteImpl
--> var from patch: lowerBound spoon.support.reflect.code.CtVariableReadImpl
location: UnivariateRealSolverUtils.java189
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `a = java.lang.Math.max(a - 1.0, lowerBound) ` -topatch--> `a = java.lang.Math.max(a - 1.0, lowerBound)` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils line: 189, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `a = java.lang.Math.max(a - 1.0, lowerBound) ` -topatch--> `a = java.lang.Math.max(a - 1.0, lowerBound)` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 170, #gens: 86, #ops: 1, parent:169] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 170
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-170/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(85): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `a = java.lang.Math.max(a - 1.0, lowerBound) ` -topatch--> `a = java.lang.Math.max(a - 1.0, lowerBound)` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (169(f=1.0), 170(f=1.0), )
Selected to next generation: IDs2--> (169(f=1.0), )
----------Running generation: 86, population size: 1

***** Generation 86 : 0
**Parent Variant: [Variant id: 171, #gens: 85, #ops: 0, parent:-]

--Child created id: 172
--Creating new operations for variant [Variant id: 172, #gens: 85, #ops: 0, parent:171]
---analyzing modificationPoint position: 9
Templates availables33
Attempts Base Ingredients  1 total 33
vars from patch [p]
--> var from patch: p spoon.support.reflect.code.CtVariableReadImpl
location: NormalDistributionImpl.java181
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = getMean() ` -topatch--> `return super.inverseCumulativeProbability(p)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.distribution.NormalDistributionImpl line: 181, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = getMean() ` -topatch--> `return super.inverseCumulativeProbability(p)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 172, #gens: 86, #ops: 1, parent:171] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 172, errors: [NormalDistributionImpl.java:182: error: unreachable statement
			ret = getMean();
			^, NormalDistributionImpl.java:181: error: unreported exception org.apache.commons.math.MathException; must be caught or declared to be thrown
		} else { 			return super.inverseCumulativeProbability(p);
		         			                                         ^]
Ingredient counter is Zero
---Undoing: gnrtn(86): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = getMean() ` -topatch--> `return super.inverseCumulativeProbability(p)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (171(f=1.0), 172(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (171(f=1.0), )
----------Running generation: 87, population size: 1

***** Generation 87 : 0
**Parent Variant: [Variant id: 173, #gens: 85, #ops: 0, parent:-]

--Child created id: 174
--Creating new operations for variant [Variant id: 174, #gens: 85, #ops: 0, parent:173]
---analyzing modificationPoint position: 28
location: Erf.java52
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (x < 0) { 	ret = -ret; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 174, #gens: 84, #ops: 1, parent:173] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 174
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-174/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 13] ,[]
-Valid?: |false|7|13|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(87): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (x < 0) { 	ret = -ret; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (173(f=1.0), 174(f=7.0), )
Selected to next generation: IDs2--> (173(f=1.0), )
----------Running generation: 88, population size: 1

***** Generation 88 : 0
**Parent Variant: [Variant id: 175, #gens: 85, #ops: 0, parent:-]

--Child created id: 176
--Creating new operations for variant [Variant id: 176, #gens: 85, #ops: 0, parent:175]
---analyzing modificationPoint position: 18
---modifPoint 0 not mutation generated in  return ret
---analyzing modificationPoint position: 6
Templates availables10
Attempts Base Ingredients  1 total 10
vars from patch [x, mean, standardDeviation]
--> var from patch: x spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: mean spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: standardDeviation spoon.support.reflect.code.CtFieldReadImpl
location: NormalDistributionImpl.java132
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return 1.0 ` -topatch--> `return 0.5 * (1.0 + org.apache.commons.math.special.Erf.erf((x - mean) /  (standardDeviation * java.[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.distribution.NormalDistributionImpl line: 132, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return 1.0 ` -topatch--> `return 0.5 * (1.0 + org.apache.commons.math.special.Erf.erf((x - mean) /  (standardDeviation * java.[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 176, #gens: 85, #ops: 1, parent:175] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 176
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-176/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 13] ,[]
-Valid?: |false|2|13|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(88): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return 1.0 ` -topatch--> `return 0.5 * (1.0 + org.apache.commons.math.special.Erf.erf((x - mean) /  (standardDeviation * java.[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (175(f=1.0), 176(f=2.0), )
Selected to next generation: IDs2--> (175(f=1.0), )
----------Running generation: 89, population size: 1

***** Generation 89 : 0
**Parent Variant: [Variant id: 177, #gens: 85, #ops: 0, parent:-]

--Child created id: 178
--Creating new operations for variant [Variant id: 178, #gens: 85, #ops: 0, parent:177]
---analyzing modificationPoint position: 9
Templates availables33
Attempts Base Ingredients  1 total 33
---modifPoint 0 not mutation generated in  ret = getMean()
---analyzing modificationPoint position: 84
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [x, org.apache.commons.math.special.Gamma.S_LIMIT, org.apache.commons.math.special.Gamma.GAMMA]
--> var from patch: x spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: org.apache.commons.math.special.Gamma.S_LIMIT spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: org.apache.commons.math.special.Gamma.GAMMA spoon.support.reflect.code.CtFieldReadImpl
location: Gamma.java107
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ret ` -topatch--> `if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 	// use method 5 from Bernard[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.special.Gamma line: 107, pointed element: CtIfImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ret ` -topatch--> `if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 	// use method 5 from Bernard[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 178, #gens: 86, #ops: 1, parent:177] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 178, errors: [Gamma.java:338: error: illegal start of expression
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	 ^, Gamma.java:338: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	          ^, Gamma.java:338: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                          ^, Gamma.java:338: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                                         ^, Gamma.java:338: error: <identifier> expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                                                                ^, Gamma.java:340: error: illegal start of expression
	 * @param a
	 ^, Gamma.java:340: error: illegal start of expression
	 * @param a
	   ^, Gamma.java:341: error: ';' expected
	 * 		the a parameter.
	   		   ^, Gamma.java:341: error: ';' expected
	 * 		the a parameter.
	   		               ^, Gamma.java:342: error: <identifier> expected
	 * @param x
	           ^, Gamma.java:343: error: ';' expected
	 * 		the value.
	   		         ^, Gamma.java:344: error: <identifier> expected
	 * @return the regularized gamma function Q(a, x)
	    ^, Gamma.java:344: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	              ^, Gamma.java:344: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                ^, Gamma.java:344: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                           ^, Gamma.java:344: error: not a statement
	 * @return the regularized gamma function Q(a, x)
	                                            ^, Gamma.java:344: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                             ^, Gamma.java:344: error: not a statement
	 * @return the regularized gamma function Q(a, x)
	                                               ^, Gamma.java:344: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                                ^, Gamma.java:345: error: <identifier> expected
	 * @throws MathException
	    ^, Gamma.java:345: error: ';' expected
	 * @throws MathException
	                        ^, Gamma.java:346: error: '(' expected
	 * 		if the algorithm fails to converge.
	   		  ^, Gamma.java:346: error: ')' expected
	 * 		if the algorithm fails to converge.
	   		      ^, Gamma.java:346: error: ';' expected
	 * 		if the algorithm fails to converge.
	   		                      ^, Gamma.java:346: error: variable declaration not allowed here
	 * 		if the algorithm fails to converge.
	   		                 ^, Gamma.java:346: error: ';' expected
	 * 		if the algorithm fails to converge.
	   		                                  ^, Gamma.java:347: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	^, Gamma.java:347: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	       ^, Gamma.java:347: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	             ^, Gamma.java:347: error: '.class' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                              ^, Gamma.java:347: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                               ^, Gamma.java:347: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                         ^, Gamma.java:347: error: not a statement
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                                                         ^, Gamma.java:347: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                                                                       ^, Gamma.java:373: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	^, Gamma.java:373: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	       ^, Gamma.java:373: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	             ^, Gamma.java:373: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                       ^, Gamma.java:373: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                            ^, Gamma.java:373: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                    ^, Gamma.java:373: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                     ^, Gamma.java:373: error: <identifier> expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                ^, Gamma.java:373: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                        ^, Gamma.java:373: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                               ^, Gamma.java:373: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                  ^, Gamma.java:373: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                                                  ^, Gamma.java:373: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                                                                ^, Gamma.java:374: error: illegal start of expression
	 * C limit
	 ^, Gamma.java:374: error: ';' expected
	 * C limit
	    ^, Gamma.java:375: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	  ^, Gamma.java:375: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	^, Gamma.java:375: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	        ^, Gamma.java:375: error: ';' expected
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	              ^, Gamma.java:377: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	^, Gamma.java:377: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	        ^, Gamma.java:377: error: ';' expected
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	              ^, Gamma.java:397: error: illegal start of expression
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	^, Gamma.java:397: error: illegal start of expression
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	       ^, Gamma.java:397: error: ';' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	             ^, Gamma.java:397: error: '.class' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	                                    ^, Gamma.java:397: error: ';' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	                                     ^, Gamma.java:409: error: illegal start of expression
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	^, Gamma.java:409: error: illegal start of expression
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	       ^, Gamma.java:409: error: ';' expected
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	             ^, Gamma.java:409: error: '.class' expected
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	                                     ^, Gamma.java:409: error: ';' expected
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	                                      ^, Gamma.java:410: error: reached end of file while parsing
			return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));} 		return org.apache.commons.math.special.Gamma.trigamma(x + 1) + (1 / (x * x));}}
			                                                                                               		                                                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(89): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `return ret ` -topatch--> `if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 	// use method 5 from Bernard[...]` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (177(f=1.0), 178(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (177(f=1.0), )
----------Running generation: 90, population size: 1

***** Generation 90 : 0
**Parent Variant: [Variant id: 179, #gens: 85, #ops: 0, parent:-]

--Child created id: 180
--Creating new operations for variant [Variant id: 180, #gens: 85, #ops: 0, parent:179]
---analyzing modificationPoint position: 0
Templates availables14
Attempts Base Ingredients  1 total 14
vars from patch [rootFindingFunction, bracket]
--> var from patch: rootFindingFunction spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: bracket spoon.support.reflect.code.CtVariableReadImpl
location: AbstractContinuousDistribution.java97
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `/* Check domain endpoints to see if one gives value that is within the default solver's defaultAbsol[...] ` -topatch--> `// find root double root = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.solve([...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.distribution.AbstractContinuousDistribution line: 97, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `/* Check domain endpoints to see if one gives value that is within the default solver's defaultAbsol[...] ` -topatch--> `// find root double root = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.solve([...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 180, #gens: 86, #ops: 1, parent:179] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 180, errors: [AbstractContinuousDistribution.java:112: error: missing return statement
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(90): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `/* Check domain endpoints to see if one gives value that is within the default solver's defaultAbsol[...] ` -topatch--> `// find root double root = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.solve([...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (179(f=1.0), 180(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (179(f=1.0), )
----------Running generation: 91, population size: 1

***** Generation 91 : 0
**Parent Variant: [Variant id: 181, #gens: 85, #ops: 0, parent:-]

--Child created id: 182
--Creating new operations for variant [Variant id: 182, #gens: 85, #ops: 0, parent:181]
---analyzing modificationPoint position: 74
Templates availables20
Attempts Base Ingredients  1 total 20
vars from patch [this.pattern]
--> var from patch: this.pattern spoon.support.reflect.code.CtFieldWriteImpl
location: MathException.java73
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `// the locale is not supported or the resource is unknown // don't translate and fall back to using [...] ` -topatch--> `this.pattern = null` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.MathException line: 73, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `// the locale is not supported or the resource is unknown // don't translate and fall back to using [...] ` -topatch--> `this.pattern = null` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 182, #gens: 86, #ops: 1, parent:181] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 182, errors: [MathException.java:95: error: non-static variable this cannot be referenced from a static context
		this.pattern = null; 		// the locale is not supported or the resource is unknown 		// don't translate and fall back to using the string as is
		^, MathException.java:95: error: cannot assign a value to final variable pattern
		this.pattern = null; 		// the locale is not supported or the resource is unknown 		// don't translate and fall back to using the string as is
		    ^]
Ingredient counter is Zero
---Undoing: gnrtn(91): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtReturnImpl) `// the locale is not supported or the resource is unknown // don't translate and fall back to using [...] ` -topatch--> `this.pattern = null` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (181(f=1.0), 182(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (181(f=1.0), )
----------Running generation: 92, population size: 1

***** Generation 92 : 0
**Parent Variant: [Variant id: 183, #gens: 85, #ops: 0, parent:-]

--Child created id: 184
--Creating new operations for variant [Variant id: 184, #gens: 85, #ops: 0, parent:183]
---analyzing modificationPoint position: 72
Templates availables20
Attempts Base Ingredients  1 total 20
---modifPoint 0 not mutation generated in  this.arguments = (arguments == null) ? new java.lang.Object[0] : arguments.clone()
---analyzing modificationPoint position: 23
Templates availables2
Attempts Base Ingredients  1 total 2
vars from patch [maxIterations]
--> var from patch: maxIterations spoon.support.reflect.code.CtVariableReadImpl
location: MaxIterationsExceededException.java44
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `return maxIterations` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.MaxIterationsExceededException line: 44, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `return maxIterations` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 184, #gens: 86, #ops: 1, parent:183] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 184, errors: [MaxIterationsExceededException.java:65: error: incompatible types: unexpected return value
		return maxIterations;} 	/**
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(92): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `return maxIterations` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (183(f=1.0), 184(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (183(f=1.0), )
----------Running generation: 93, population size: 1

***** Generation 93 : 0
**Parent Variant: [Variant id: 185, #gens: 85, #ops: 0, parent:-]

--Child created id: 186
--Creating new operations for variant [Variant id: 186, #gens: 85, #ops: 0, parent:185]
---analyzing modificationPoint position: 7
Templates availables10
Attempts Base Ingredients  1 total 10
vars from patch [java.lang.Double.POSITIVE_INFINITY]
--> var from patch: java.lang.Double.POSITIVE_INFINITY spoon.support.reflect.code.CtFieldReadImpl
location: NormalDistributionImpl.java162
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return super.inverseCumulativeProbability(p) ` -topatch--> `return java.lang.Double.POSITIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.distribution.NormalDistributionImpl line: 162, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return super.inverseCumulativeProbability(p) ` -topatch--> `return java.lang.Double.POSITIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 186, #gens: 85, #ops: 1, parent:185] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 186
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-186/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 3, was successful: false, cases executed: 13] ,[]
-Valid?: |false|3|13|[]|, fitness 3.0
Ingredient counter is Zero
---Undoing: gnrtn(93): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return super.inverseCumulativeProbability(p) ` -topatch--> `return java.lang.Double.POSITIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (185(f=1.0), 186(f=3.0), )
Selected to next generation: IDs2--> (185(f=1.0), )
----------Running generation: 94, population size: 1

***** Generation 94 : 0
**Parent Variant: [Variant id: 187, #gens: 85, #ops: 0, parent:-]

--Child created id: 188
--Creating new operations for variant [Variant id: 188, #gens: 85, #ops: 0, parent:187]
---analyzing modificationPoint position: 65
Templates availables48
Attempts Base Ingredients  1 total 48
Name Conflict [a, x, ret, java.lang.Double.NaN, epsilon, maxIterations]
---modifPoint 0 not mutation generated in  if (n >= maxIterations) { 	throw new org.apache.commons.math.MaxIterationsExceededException(maxItera[...]
---analyzing modificationPoint position: 71
Templates availables20
Attempts Base Ingredients  1 total 20
---modifPoint 1 not mutation generated in  this.pattern = pattern
---analyzing modificationPoint position: 81
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 2 not mutation generated in  double tmp = (x + g) + 0.5
---analyzing modificationPoint position: 15
location: NormalDistributionImpl.java221
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (p < 0.5) { 	ret = getMean() - getStandardDeviation(); } else if (p > 0.5) { 	ret = getMean() + g[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 188, #gens: 84, #ops: 1, parent:187] gen mutated: 1 , gen not mut: 3, gen not applied  0
-The child does NOT compile: 188, errors: [NormalDistributionImpl.java:230: error: variable ret might not have been initialized
		return ret;
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(94): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (p < 0.5) { 	ret = getMean() - getStandardDeviation(); } else if (p > 0.5) { 	ret = getMean() + g[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (187(f=1.0), 188(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (187(f=1.0), )
----------Running generation: 95, population size: 1

***** Generation 95 : 0
**Parent Variant: [Variant id: 189, #gens: 85, #ops: 0, parent:-]

--Child created id: 190
--Creating new operations for variant [Variant id: 190, #gens: 85, #ops: 0, parent:189]
---analyzing modificationPoint position: 34
Templates availables14
Attempts Base Ingredients  1 total 14
Attempts Base Ingredients  2 total 14
vars from patch [upperBound]
--> var from patch: upperBound spoon.support.reflect.code.CtVariableReadImpl
location: AbstractContinuousDistribution.java83
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] bracket = null ` -topatch--> `return upperBound` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.distribution.AbstractContinuousDistribution line: 83, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] bracket = null ` -topatch--> `return upperBound` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 190, #gens: 86, #ops: 1, parent:189] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 190, errors: [AbstractContinuousDistribution.java:111: error: cannot find symbol
		return root;
		       ^
  symbol:   variable root
  location: class org.apache.commons.math.distribution.AbstractContinuousDistribution]
Ingredient counter is Zero
---Undoing: gnrtn(95): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] bracket = null ` -topatch--> `return upperBound` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (189(f=1.0), 190(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (189(f=1.0), )
----------Running generation: 96, population size: 1

***** Generation 96 : 0
**Parent Variant: [Variant id: 191, #gens: 85, #ops: 0, parent:-]

--Child created id: 192
--Creating new operations for variant [Variant id: 192, #gens: 85, #ops: 0, parent:191]
---analyzing modificationPoint position: 26
---modifPoint 0 not mutation generated in  return getMessage(java.util.Locale.getDefault())
---analyzing modificationPoint position: 19
Templates availables9
Attempts Base Ingredients  1 total 9
vars from patch [p, java.lang.Double.NEGATIVE_INFINITY]
--> var from patch: p spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: java.lang.Double.NEGATIVE_INFINITY spoon.support.reflect.code.CtFieldReadImpl
location: NormalDistributionImpl.java156
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (p == 0) { 	return java.lang.Double.NEGATIVE_INFINITY; } ` -topatch--> `if (p == 0) { 	return java.lang.Double.NEGATIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.distribution.NormalDistributionImpl line: 156, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (p == 0) { 	return java.lang.Double.NEGATIVE_INFINITY; } ` -topatch--> `if (p == 0) { 	return java.lang.Double.NEGATIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 192, #gens: 85, #ops: 1, parent:191] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 192
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-192/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(96): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if (p == 0) { 	return java.lang.Double.NEGATIVE_INFINITY; } ` -topatch--> `if (p == 0) { 	return java.lang.Double.NEGATIVE_INFINITY; }` (spoon.support.reflect.code.CtIfImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (191(f=1.0), 192(f=1.0), )
Selected to next generation: IDs2--> (191(f=1.0), )
----------Running generation: 97, population size: 1

***** Generation 97 : 0
**Parent Variant: [Variant id: 193, #gens: 85, #ops: 0, parent:-]

--Child created id: 194
--Creating new operations for variant [Variant id: 194, #gens: 85, #ops: 0, parent:193]
---analyzing modificationPoint position: 11
Templates availables10
Attempts Base Ingredients  1 total 10
vars from patch [java.lang.Double.POSITIVE_INFINITY]
--> var from patch: java.lang.Double.POSITIVE_INFINITY spoon.support.reflect.code.CtFieldReadImpl
location: NormalDistributionImpl.java184
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ret ` -topatch--> `return java.lang.Double.POSITIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.distribution.NormalDistributionImpl line: 184, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ret ` -topatch--> `return java.lang.Double.POSITIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 194, #gens: 85, #ops: 1, parent:193] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 194
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-194/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 2, was successful: false, cases executed: 13] ,[]
-Valid?: |false|2|13|[]|, fitness 2.0
Ingredient counter is Zero
---Undoing: gnrtn(97): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ret ` -topatch--> `return java.lang.Double.POSITIVE_INFINITY` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (193(f=1.0), 194(f=2.0), )
Selected to next generation: IDs2--> (193(f=1.0), )
----------Running generation: 98, population size: 1

***** Generation 98 : 0
**Parent Variant: [Variant id: 195, #gens: 85, #ops: 0, parent:-]

--Child created id: 196
--Creating new operations for variant [Variant id: 196, #gens: 85, #ops: 0, parent:195]
---analyzing modificationPoint position: 29
Templates availables1
Attempts Base Ingredients  1 total 1
--- no mutation left to apply in element spoon.support.reflect.code.CtReturnImpl@1, search space size: 1
---modifPoint 0 not mutation generated in  return ret
---analyzing modificationPoint position: 31
Templates availables2
Attempts Base Ingredients  1 total 2
Attempts Base Ingredients  2 total 2
---modifPoint 1 not mutation generated in  return cumulativeProbability(x) - p
---analyzing modificationPoint position: 80
location: Gamma.java100
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum = sum + org.apache.commons.math.special.Gamma.lanczos[0] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 196, #gens: 84, #ops: 1, parent:195] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child compiles: id 196
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-196/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 13] ,[]
-Valid?: |false|7|13|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(98): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum = sum + org.apache.commons.math.special.Gamma.lanczos[0] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (195(f=1.0), 196(f=7.0), )
Selected to next generation: IDs2--> (195(f=1.0), )
----------Running generation: 99, population size: 1

***** Generation 99 : 0
**Parent Variant: [Variant id: 197, #gens: 85, #ops: 0, parent:-]

--Child created id: 198
--Creating new operations for variant [Variant id: 198, #gens: 85, #ops: 0, parent:197]
---analyzing modificationPoint position: 26
---modifPoint 0 not mutation generated in  return getMessage(java.util.Locale.getDefault())
---analyzing modificationPoint position: 27
Templates availables4
Attempts Base Ingredients  1 total 4
vars from patch [x]
--> var from patch: x spoon.support.reflect.code.CtVariableReadImpl
location: Erf.java51
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double ret = org.apache.commons.math.special.Gamma.regularizedGammaP(0.5, x * x, 1.0E-15, 10000) ` -topatch--> `double ret = org.apache.commons.math.special.Gamma.regularizedGammaP(0.5, x * x, 1.0E-15, 10000)` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.special.Erf line: 51, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double ret = org.apache.commons.math.special.Gamma.regularizedGammaP(0.5, x * x, 1.0E-15, 10000) ` -topatch--> `double ret = org.apache.commons.math.special.Gamma.regularizedGammaP(0.5, x * x, 1.0E-15, 10000)` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 198, #gens: 86, #ops: 1, parent:197] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 198, errors: [Erf.java:52: error: variable ret is already defined in method erf(double)
	 */ 	public static double erf(double x) throws org.apache.commons.math.MathException { 		double ret = org.apache.commons.math.special.Gamma.regularizedGammaP(0.5, x * x, 1.0E-15, 10000); 		double ret = org.apache.commons.math.special.Gamma.regularizedGammaP(0.5, x * x, 1.0E-15, 10000);
	    	                                                                                  		                                                                                                  		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(99): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double ret = org.apache.commons.math.special.Gamma.regularizedGammaP(0.5, x * x, 1.0E-15, 10000) ` -topatch--> `double ret = org.apache.commons.math.special.Gamma.regularizedGammaP(0.5, x * x, 1.0E-15, 10000)` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (197(f=1.0), 198(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (197(f=1.0), )
----------Running generation: 100, population size: 1

***** Generation 100 : 0
**Parent Variant: [Variant id: 199, #gens: 85, #ops: 0, parent:-]

--Child created id: 200
--Creating new operations for variant [Variant id: 200, #gens: 85, #ops: 0, parent:199]
---analyzing modificationPoint position: 34
Templates availables14
Attempts Base Ingredients  1 total 14
vars from patch [p]
--> var from patch: p spoon.support.reflect.code.CtVariableReadImpl
location: AbstractContinuousDistribution.java83
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] bracket = null ` -topatch--> `double upperBound = getDomainUpperBound(p)` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.distribution.AbstractContinuousDistribution line: 83, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] bracket = null ` -topatch--> `double upperBound = getDomainUpperBound(p)` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 200, #gens: 86, #ops: 1, parent:199] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 200, errors: [AbstractContinuousDistribution.java:83: error: variable upperBound is already defined in method inverseCumulativeProbability(double)
		double upperBound = getDomainUpperBound(p); 		double upperBound = getDomainUpperBound(p);
		                                            		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(100): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double[] bracket = null ` -topatch--> `double upperBound = getDomainUpperBound(p)` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (199(f=1.0), 200(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (199(f=1.0), )
----------Running generation: 101, population size: 1

***** Generation 101 : 0
**Parent Variant: [Variant id: 201, #gens: 85, #ops: 0, parent:-]

--Child created id: 202
--Creating new operations for variant [Variant id: 202, #gens: 85, #ops: 0, parent:201]
---analyzing modificationPoint position: 44
location: UnivariateRealSolverUtils.java194
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `numIterations++ ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 202, #gens: 84, #ops: 1, parent:201] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 202
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-202/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(101): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtUnaryOperatorImpl) `numIterations++ ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (201(f=1.0), 202(f=1.0), )
Selected to next generation: IDs2--> (201(f=1.0), )
----------Running generation: 102, population size: 1

***** Generation 102 : 0
**Parent Variant: [Variant id: 203, #gens: 85, #ops: 0, parent:-]

--Child created id: 204
--Creating new operations for variant [Variant id: 204, #gens: 85, #ops: 0, parent:203]
---analyzing modificationPoint position: 26
Templates availables7
Attempts Base Ingredients  1 total 7
vars from patch [pattern]
--> var from patch: pattern spoon.support.reflect.code.CtVariableReadImpl
location: MathException.java172
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return getMessage(java.util.Locale.getDefault()) ` -topatch--> `return pattern` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.MathException line: 172, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return getMessage(java.util.Locale.getDefault()) ` -topatch--> `return pattern` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 204, #gens: 85, #ops: 1, parent:203] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 204
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-204/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(102): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return getMessage(java.util.Locale.getDefault()) ` -topatch--> `return pattern` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (203(f=1.0), 204(f=1.0), )
Selected to next generation: IDs2--> (203(f=1.0), )
----------Running generation: 103, population size: 1

***** Generation 103 : 0
**Parent Variant: [Variant id: 205, #gens: 85, #ops: 0, parent:-]

--Child created id: 206
--Creating new operations for variant [Variant id: 206, #gens: 85, #ops: 0, parent:205]
---analyzing modificationPoint position: 51
Templates availables33
Attempts Base Ingredients  1 total 33
---modifPoint 0 not mutation generated in  setStandardDeviation(sd)
---analyzing modificationPoint position: 76
Templates availables10
Attempts Base Ingredients  1 total 10
vars from patch []
location: Gamma.java94
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double g = 607.0 / 128.0 ` -topatch--> `double ret` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.special.Gamma line: 94, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double g = 607.0 / 128.0 ` -topatch--> `double ret` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 206, #gens: 85, #ops: 1, parent:205] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 206, errors: [Gamma.java:94: error: variable ret is already defined in method logGamma(double)
		} else { 			double ret;
		         			       ^, Gamma.java:103: error: cannot find symbol
			double tmp = (x + g) + 0.5;
			                  ^
  symbol:   variable g
  location: class org.apache.commons.math.special.Gamma]
Ingredient counter is Zero
---Undoing: gnrtn(103): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double g = 607.0 / 128.0 ` -topatch--> `double ret` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (205(f=1.0), 206(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (205(f=1.0), )
----------Running generation: 104, population size: 1

***** Generation 104 : 0
**Parent Variant: [Variant id: 207, #gens: 85, #ops: 0, parent:-]

--Child created id: 208
--Creating new operations for variant [Variant id: 208, #gens: 85, #ops: 0, parent:207]
---analyzing modificationPoint position: 12
Templates availables33
Attempts Base Ingredients  1 total 33
vars from patch []
location: NormalDistributionImpl.java200
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (p < 0.5) { 	ret = getMean(); } else { 	ret = java.lang.Double.MAX_VALUE; } ` -topatch--> `return 1.0` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.distribution.NormalDistributionImpl line: 200, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (p < 0.5) { 	ret = getMean(); } else { 	ret = java.lang.Double.MAX_VALUE; } ` -topatch--> `return 1.0` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 208, #gens: 86, #ops: 1, parent:207] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 208, errors: [NormalDistributionImpl.java:207: error: unreachable statement
		return ret;
		^]
Ingredient counter is Zero
---Undoing: gnrtn(104): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtIfImpl) `if (p < 0.5) { 	ret = getMean(); } else { 	ret = java.lang.Double.MAX_VALUE; } ` -topatch--> `return 1.0` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (207(f=1.0), 208(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (207(f=1.0), )
----------Running generation: 105, population size: 1

***** Generation 105 : 0
**Parent Variant: [Variant id: 209, #gens: 85, #ops: 0, parent:-]

--Child created id: 210
--Creating new operations for variant [Variant id: 210, #gens: 85, #ops: 0, parent:209]
---analyzing modificationPoint position: 35
location: AbstractContinuousDistribution.java85
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `bracket = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket( rootFindingFun[...] ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 210, #gens: 84, #ops: 1, parent:209] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 210, errors: [AbstractContinuousDistribution.java:89: error: exception org.apache.commons.math.ConvergenceException is never thrown in body of corresponding try statement
		} catch (org.apache.commons.math.ConvergenceException ex) {
		  ^]
Ingredient counter is Zero
---Undoing: gnrtn(105): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `bracket = org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket( rootFindingFun[...] ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (209(f=1.0), 210(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (209(f=1.0), )
----------Running generation: 106, population size: 1

***** Generation 106 : 0
**Parent Variant: [Variant id: 211, #gens: 85, #ops: 0, parent:-]

--Child created id: 212
--Creating new operations for variant [Variant id: 212, #gens: 85, #ops: 0, parent:211]
---analyzing modificationPoint position: 74
---modifPoint 0 not mutation generated in  // the locale is not supported or the resource is unknown // don't translate and fall back to using [...]
---analyzing modificationPoint position: 18
Templates availables10
Attempts Base Ingredients  1 total 10
vars from patch [ret]
--> var from patch: ret spoon.support.reflect.code.CtVariableReadImpl
location: NormalDistributionImpl.java229
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ret ` -topatch--> `return ret` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.distribution.NormalDistributionImpl line: 229, pointed element: CtReturnImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ret ` -topatch--> `return ret` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 212, #gens: 85, #ops: 1, parent:211] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 212
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-212/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(106): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtReturnImpl) `return ret ` -topatch--> `return ret` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (211(f=1.0), 212(f=1.0), )
Selected to next generation: IDs2--> (211(f=1.0), )
----------Running generation: 107, population size: 1

***** Generation 107 : 0
**Parent Variant: [Variant id: 213, #gens: 85, #ops: 0, parent:-]

--Child created id: 214
--Creating new operations for variant [Variant id: 214, #gens: 85, #ops: 0, parent:213]
---analyzing modificationPoint position: 77
---modifPoint 0 not mutation generated in  double sum = 0.0
---analyzing modificationPoint position: 59
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [ret]
--> var from patch: ret spoon.support.reflect.code.CtVariableWriteImpl
location: Gamma.java170
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double an = 1.0 / a// n-th element in the series  ` -topatch--> `ret = 1.0` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.special.Gamma line: 170, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double an = 1.0 / a// n-th element in the series  ` -topatch--> `ret = 1.0` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 214, #gens: 86, #ops: 1, parent:213] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 214, errors: [Gamma.java:239: error: illegal start of expression
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	 ^, Gamma.java:239: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	          ^, Gamma.java:239: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                          ^, Gamma.java:239: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                                         ^, Gamma.java:239: error: <identifier> expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                                                                ^, Gamma.java:241: error: illegal start of expression
	 * @param a
	 ^, Gamma.java:241: error: illegal start of expression
	 * @param a
	   ^, Gamma.java:242: error: ';' expected
	 * 		the a parameter.
	   		   ^, Gamma.java:242: error: ';' expected
	 * 		the a parameter.
	   		               ^, Gamma.java:243: error: <identifier> expected
	 * @param x
	           ^, Gamma.java:244: error: ';' expected
	 * 		the value.
	   		         ^, Gamma.java:245: error: <identifier> expected
	 * @return the regularized gamma function Q(a, x)
	    ^, Gamma.java:245: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	              ^, Gamma.java:245: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                ^, Gamma.java:245: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                           ^, Gamma.java:245: error: not a statement
	 * @return the regularized gamma function Q(a, x)
	                                            ^, Gamma.java:245: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                             ^, Gamma.java:245: error: not a statement
	 * @return the regularized gamma function Q(a, x)
	                                               ^, Gamma.java:245: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                                ^, Gamma.java:246: error: <identifier> expected
	 * @throws MathException
	    ^, Gamma.java:246: error: ';' expected
	 * @throws MathException
	                        ^, Gamma.java:247: error: '(' expected
	 * 		if the algorithm fails to converge.
	   		  ^, Gamma.java:247: error: ')' expected
	 * 		if the algorithm fails to converge.
	   		      ^, Gamma.java:247: error: ';' expected
	 * 		if the algorithm fails to converge.
	   		                      ^, Gamma.java:247: error: variable declaration not allowed here
	 * 		if the algorithm fails to converge.
	   		                 ^, Gamma.java:247: error: ';' expected
	 * 		if the algorithm fails to converge.
	   		                                  ^, Gamma.java:248: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	^, Gamma.java:248: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	       ^, Gamma.java:248: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	             ^, Gamma.java:248: error: '.class' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                              ^, Gamma.java:248: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                               ^, Gamma.java:248: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                         ^, Gamma.java:248: error: not a statement
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                                                         ^, Gamma.java:248: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                                                                       ^, Gamma.java:274: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	^, Gamma.java:274: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	       ^, Gamma.java:274: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	             ^, Gamma.java:274: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                       ^, Gamma.java:274: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                            ^, Gamma.java:274: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                    ^, Gamma.java:274: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                     ^, Gamma.java:274: error: <identifier> expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                ^, Gamma.java:274: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                        ^, Gamma.java:274: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                               ^, Gamma.java:274: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                  ^, Gamma.java:274: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                                                  ^, Gamma.java:274: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                                                                ^, Gamma.java:275: error: illegal start of expression
	 * C limit
	 ^, Gamma.java:275: error: ';' expected
	 * C limit
	    ^, Gamma.java:276: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	  ^, Gamma.java:276: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	^, Gamma.java:276: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	        ^, Gamma.java:276: error: ';' expected
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	              ^, Gamma.java:278: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	^, Gamma.java:278: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	        ^, Gamma.java:278: error: ';' expected
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	              ^, Gamma.java:298: error: illegal start of expression
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	^, Gamma.java:298: error: illegal start of expression
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	       ^, Gamma.java:298: error: ';' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	             ^, Gamma.java:298: error: '.class' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	                                    ^, Gamma.java:298: error: ';' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	                                     ^, Gamma.java:321: error: illegal start of expression
	 */ 	public static double trigamma(double x) {
	    	^, Gamma.java:321: error: illegal start of expression
	 */ 	public static double trigamma(double x) {
	    	       ^, Gamma.java:321: error: ';' expected
	 */ 	public static double trigamma(double x) {
	    	             ^, Gamma.java:321: error: '.class' expected
	 */ 	public static double trigamma(double x) {
	    	                                     ^, Gamma.java:321: error: ';' expected
	 */ 	public static double trigamma(double x) {
	    	                                      ^, Gamma.java:337: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(107): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double an = 1.0 / a// n-th element in the series  ` -topatch--> `ret = 1.0` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (213(f=1.0), 214(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (213(f=1.0), )
----------Running generation: 108, population size: 1

***** Generation 108 : 0
**Parent Variant: [Variant id: 215, #gens: 85, #ops: 0, parent:-]

--Child created id: 216
--Creating new operations for variant [Variant id: 216, #gens: 85, #ops: 0, parent:215]
---analyzing modificationPoint position: 40
location: UnivariateRealSolverUtils.java189
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `a = java.lang.Math.max(a - 1.0, lowerBound) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 216, #gens: 84, #ops: 1, parent:215] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 216
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-216/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
-Killed id: pid->7978
The Process that runs JUnit test cases did not terminate within waitTime of 10 seconds
Killed the Process that runs JUnit test cases 7978
**The validation 1 have not finished well**
-Valid?: null, fitness 1.7976931348623157E308
Ingredient counter is Zero
---Undoing: gnrtn(108): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `a = java.lang.Math.max(a - 1.0, lowerBound) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (215(f=1.0), 216(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (215(f=1.0), )
----------Running generation: 109, population size: 1

***** Generation 109 : 0
**Parent Variant: [Variant id: 217, #gens: 85, #ops: 0, parent:-]

--Child created id: 218
--Creating new operations for variant [Variant id: 218, #gens: 85, #ops: 0, parent:217]
---analyzing modificationPoint position: 60
Templates availables10
Attempts Base Ingredients  1 total 10
vars from patch [x]
--> var from patch: x spoon.support.reflect.code.CtVariableReadImpl
location: Gamma.java171
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = an// partial sum  ` -topatch--> `// use method 4 (accurate to O(1/x^8) double inv = 1 / (x * x)` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.special.Gamma line: 171, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = an// partial sum  ` -topatch--> `// use method 4 (accurate to O(1/x^8) double inv = 1 / (x * x)` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 218, #gens: 85, #ops: 1, parent:217] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 218, errors: [Gamma.java:302: error: illegal start of expression
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	 ^, Gamma.java:302: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	          ^, Gamma.java:302: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                          ^, Gamma.java:302: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                                         ^, Gamma.java:302: error: <identifier> expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                                                                ^, Gamma.java:304: error: illegal start of expression
	 * @param a
	 ^, Gamma.java:304: error: illegal start of expression
	 * @param a
	   ^, Gamma.java:305: error: ';' expected
	 * 		the a parameter.
	   		   ^, Gamma.java:305: error: ';' expected
	 * 		the a parameter.
	   		               ^, Gamma.java:306: error: <identifier> expected
	 * @param x
	           ^, Gamma.java:307: error: ';' expected
	 * 		the value.
	   		         ^, Gamma.java:308: error: <identifier> expected
	 * @return the regularized gamma function Q(a, x)
	    ^, Gamma.java:308: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	              ^, Gamma.java:308: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                ^, Gamma.java:308: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                           ^, Gamma.java:308: error: not a statement
	 * @return the regularized gamma function Q(a, x)
	                                            ^, Gamma.java:308: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                             ^, Gamma.java:308: error: not a statement
	 * @return the regularized gamma function Q(a, x)
	                                               ^, Gamma.java:308: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                                ^, Gamma.java:309: error: <identifier> expected
	 * @throws MathException
	    ^, Gamma.java:309: error: ';' expected
	 * @throws MathException
	                        ^, Gamma.java:310: error: '(' expected
	 * 		if the algorithm fails to converge.
	   		  ^, Gamma.java:310: error: ')' expected
	 * 		if the algorithm fails to converge.
	   		      ^, Gamma.java:310: error: ';' expected
	 * 		if the algorithm fails to converge.
	   		                      ^, Gamma.java:310: error: variable declaration not allowed here
	 * 		if the algorithm fails to converge.
	   		                 ^, Gamma.java:310: error: ';' expected
	 * 		if the algorithm fails to converge.
	   		                                  ^, Gamma.java:311: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	^, Gamma.java:311: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	       ^, Gamma.java:311: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	             ^, Gamma.java:311: error: '.class' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                              ^, Gamma.java:311: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                               ^, Gamma.java:311: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                         ^, Gamma.java:311: error: not a statement
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                                                         ^, Gamma.java:311: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                                                                       ^, Gamma.java:337: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	^, Gamma.java:337: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	       ^, Gamma.java:337: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	             ^, Gamma.java:337: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                       ^, Gamma.java:337: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                            ^, Gamma.java:337: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                    ^, Gamma.java:337: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                     ^, Gamma.java:337: error: <identifier> expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                ^, Gamma.java:337: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                        ^, Gamma.java:337: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                               ^, Gamma.java:337: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                  ^, Gamma.java:337: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                                                  ^, Gamma.java:337: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                                                                ^, Gamma.java:338: error: illegal start of expression
	 * C limit
	 ^, Gamma.java:338: error: ';' expected
	 * C limit
	    ^, Gamma.java:339: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	  ^, Gamma.java:339: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	^, Gamma.java:339: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	        ^, Gamma.java:339: error: ';' expected
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	              ^, Gamma.java:341: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	^, Gamma.java:341: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	        ^, Gamma.java:341: error: ';' expected
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	              ^, Gamma.java:361: error: illegal start of expression
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	^, Gamma.java:361: error: illegal start of expression
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	       ^, Gamma.java:361: error: ';' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	             ^, Gamma.java:361: error: '.class' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	                                    ^, Gamma.java:361: error: ';' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	                                     ^, Gamma.java:373: error: illegal start of expression
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	^, Gamma.java:373: error: illegal start of expression
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	       ^, Gamma.java:373: error: ';' expected
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	             ^, Gamma.java:373: error: '.class' expected
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	                                     ^, Gamma.java:373: error: ';' expected
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	                                      ^, Gamma.java:374: error: reached end of file while parsing
			return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));} 		return org.apache.commons.math.special.Gamma.trigamma(x + 1) + (1 / (x * x));}}
			                                                                                               		                                                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(109): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtLocalVariableImpl) `double sum = an// partial sum  ` -topatch--> `// use method 4 (accurate to O(1/x^8) double inv = 1 / (x * x)` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (217(f=1.0), 218(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (217(f=1.0), )
----------Running generation: 110, population size: 1

***** Generation 110 : 0
**Parent Variant: [Variant id: 219, #gens: 85, #ops: 0, parent:-]

--Child created id: 220
--Creating new operations for variant [Variant id: 220, #gens: 85, #ops: 0, parent:219]
---analyzing modificationPoint position: 25
location: Gamma.java162
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = 0.0 ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 220, #gens: 84, #ops: 1, parent:219] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 220, errors: [Gamma.java:188: error: variable ret might not have been initialized
		return ret;
		       ^]
Ingredient counter is Zero
---Undoing: gnrtn(110): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `ret = 0.0 ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (219(f=1.0), 220(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (219(f=1.0), )
----------Running generation: 111, population size: 1

***** Generation 111 : 0
**Parent Variant: [Variant id: 221, #gens: 85, #ops: 0, parent:-]

--Child created id: 222
--Creating new operations for variant [Variant id: 222, #gens: 85, #ops: 0, parent:221]
---analyzing modificationPoint position: 28
location: Erf.java52
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (x < 0) { 	ret = -ret; } ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 222, #gens: 84, #ops: 1, parent:221] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child compiles: id 222
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-222/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 7, was successful: false, cases executed: 13] ,[]
-Valid?: |false|7|13|[]|, fitness 7.0
Ingredient counter is Zero
---Undoing: gnrtn(111): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtIfImpl) `if (x < 0) { 	ret = -ret; } ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (221(f=1.0), 222(f=7.0), )
Selected to next generation: IDs2--> (221(f=1.0), )
----------Running generation: 112, population size: 1

***** Generation 112 : 0
**Parent Variant: [Variant id: 223, #gens: 85, #ops: 0, parent:-]

--Child created id: 224
--Creating new operations for variant [Variant id: 224, #gens: 85, #ops: 0, parent:223]
---analyzing modificationPoint position: 68
Templates availables48
Attempts Base Ingredients  1 total 48
---modifPoint 0 not mutation generated in  if (x == 0.0) { 	ret = 0.0; } else if ((a >= 1.0) && (x > a)) { 	// use regularizedGammaQ because it[...]
---analyzing modificationPoint position: 73
Templates availables20
Attempts Base Ingredients  1 total 20
vars from patch [this.pattern]
--> var from patch: this.pattern spoon.support.reflect.code.CtFieldWriteImpl
location: MathException.java60
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.ResourceBundle bundle =  java.util.ResourceBundle.getBundle("org.apache.commons.math.Messa[...] ` -topatch--> `this.pattern = getMessage()` (spoon.support.reflect.code.CtAssignmentImpl) 
---MP=org.apache.commons.math.MathException line: 60, pointed element: CtAssignmentImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.ResourceBundle bundle =  java.util.ResourceBundle.getBundle("org.apache.commons.math.Messa[...] ` -topatch--> `this.pattern = getMessage()` (spoon.support.reflect.code.CtAssignmentImpl) 

--Summary Creation: for variant [Variant id: 224, #gens: 86, #ops: 1, parent:223] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 224, errors: [MathException.java:133: error: illegal start of expression
	 */ 	private static java.lang.String buildMessage(java.util.Locale locale, java.lang.String pattern, java.lang.Object... arguments) { 		return pattern == null ? "" : new java.text.MessageFormat(org.apache.commons.math.MathException.translate(pattern, locale), locale).format(arguments);} 	/**
	    	^, MathException.java:133: error: illegal start of expression
	 */ 	private static java.lang.String buildMessage(java.util.Locale locale, java.lang.String pattern, java.lang.Object... arguments) { 		return pattern == null ? "" : new java.text.MessageFormat(org.apache.commons.math.MathException.translate(pattern, locale), locale).format(arguments);} 	/**
	    	        ^, MathException.java:133: error: ';' expected
	 */ 	private static java.lang.String buildMessage(java.util.Locale locale, java.lang.String pattern, java.lang.Object... arguments) { 		return pattern == null ? "" : new java.text.MessageFormat(org.apache.commons.math.MathException.translate(pattern, locale), locale).format(arguments);} 	/**
	    	                   ^, MathException.java:133: error: ';' expected
	 */ 	private static java.lang.String buildMessage(java.util.Locale locale, java.lang.String pattern, java.lang.Object... arguments) { 		return pattern == null ? "" : new java.text.MessageFormat(org.apache.commons.math.MathException.translate(pattern, locale), locale).format(arguments);} 	/**
	    	                                            ^, MathException.java:133: error: ';' expected
	 */ 	private static java.lang.String buildMessage(java.util.Locale locale, java.lang.String pattern, java.lang.Object... arguments) { 		return pattern == null ? "" : new java.text.MessageFormat(org.apache.commons.math.MathException.translate(pattern, locale), locale).format(arguments);} 	/**
	    	                                                                          ^, MathException.java:133: error: ';' expected
	 */ 	private static java.lang.String buildMessage(java.util.Locale locale, java.lang.String pattern, java.lang.Object... arguments) { 		return pattern == null ? "" : new java.text.MessageFormat(org.apache.commons.math.MathException.translate(pattern, locale), locale).format(arguments);} 	/**
	    	                                                                                                    ^, MathException.java:133: error: not a statement
	 */ 	private static java.lang.String buildMessage(java.util.Locale locale, java.lang.String pattern, java.lang.Object... arguments) { 		return pattern == null ? "" : new java.text.MessageFormat(org.apache.commons.math.MathException.translate(pattern, locale), locale).format(arguments);} 	/**
	    	                                                                                                         ^, MathException.java:133: error: ';' expected
	 */ 	private static java.lang.String buildMessage(java.util.Locale locale, java.lang.String pattern, java.lang.Object... arguments) { 		return pattern == null ? "" : new java.text.MessageFormat(org.apache.commons.math.MathException.translate(pattern, locale), locale).format(arguments);} 	/**
	    	                                                                                                                ^, MathException.java:133: error: not a statement
	 */ 	private static java.lang.String buildMessage(java.util.Locale locale, java.lang.String pattern, java.lang.Object... arguments) { 		return pattern == null ? "" : new java.text.MessageFormat(org.apache.commons.math.MathException.translate(pattern, locale), locale).format(arguments);} 	/**
	    	                                                                                                                    ^, MathException.java:133: error: ';' expected
	 */ 	private static java.lang.String buildMessage(java.util.Locale locale, java.lang.String pattern, java.lang.Object... arguments) { 		return pattern == null ? "" : new java.text.MessageFormat(org.apache.commons.math.MathException.translate(pattern, locale), locale).format(arguments);} 	/**
	    	                                                                                                                             ^, MathException.java:136: error: illegal start of expression
	 */ 	public MathException() { 		super(); 		this.pattern = null; 		this.arguments = new java.lang.Object[0];} 	/**
	    	^, MathException.java:136: error: ';' expected
	 */ 	public MathException() { 		super(); 		this.pattern = null; 		this.arguments = new java.lang.Object[0];} 	/**
	    	                      ^, MathException.java:145: error: illegal start of expression
	 */ 	public MathException(java.lang.String pattern, java.lang.Object... arguments) { 		super(org.apache.commons.math.MathException.buildMessage(java.util.Locale.US, pattern, arguments)); 		this.pattern = pattern; 		this.arguments = (arguments == null) ? new java.lang.Object[0] : arguments.clone();} 	/**
	    	^, MathException.java:145: error: ')' expected
	 */ 	public MathException(java.lang.String pattern, java.lang.Object... arguments) { 		super(org.apache.commons.math.MathException.buildMessage(java.util.Locale.US, pattern, arguments)); 		this.pattern = pattern; 		this.arguments = (arguments == null) ? new java.lang.Object[0] : arguments.clone();} 	/**
	    	                                     ^, MathException.java:145: error: illegal start of expression
	 */ 	public MathException(java.lang.String pattern, java.lang.Object... arguments) { 		super(org.apache.commons.math.MathException.buildMessage(java.util.Locale.US, pattern, arguments)); 		this.pattern = pattern; 		this.arguments = (arguments == null) ? new java.lang.Object[0] : arguments.clone();} 	/**
	    	                                             ^, MathException.java:145: error: ';' expected
	 */ 	public MathException(java.lang.String pattern, java.lang.Object... arguments) { 		super(org.apache.commons.math.MathException.buildMessage(java.util.Locale.US, pattern, arguments)); 		this.pattern = pattern; 		this.arguments = (arguments == null) ? new java.lang.Object[0] : arguments.clone();} 	/**
	    	                                                   ^, MathException.java:145: error: not a statement
	 */ 	public MathException(java.lang.String pattern, java.lang.Object... arguments) { 		super(org.apache.commons.math.MathException.buildMessage(java.util.Locale.US, pattern, arguments)); 		this.pattern = pattern; 		this.arguments = (arguments == null) ? new java.lang.Object[0] : arguments.clone();} 	/**
	    	                                                        ^, MathException.java:145: error: ';' expected
	 */ 	public MathException(java.lang.String pattern, java.lang.Object... arguments) { 		super(org.apache.commons.math.MathException.buildMessage(java.util.Locale.US, pattern, arguments)); 		this.pattern = pattern; 		this.arguments = (arguments == null) ? new java.lang.Object[0] : arguments.clone();} 	/**
	    	                                                               ^, MathException.java:145: error: not a statement
	 */ 	public MathException(java.lang.String pattern, java.lang.Object... arguments) { 		super(org.apache.commons.math.MathException.buildMessage(java.util.Locale.US, pattern, arguments)); 		this.pattern = pattern; 		this.arguments = (arguments == null) ? new java.lang.Object[0] : arguments.clone();} 	/**
	    	                                                                   ^, MathException.java:145: error: ';' expected
	 */ 	public MathException(java.lang.String pattern, java.lang.Object... arguments) { 		super(org.apache.commons.math.MathException.buildMessage(java.util.Locale.US, pattern, arguments)); 		this.pattern = pattern; 		this.arguments = (arguments == null) ? new java.lang.Object[0] : arguments.clone();} 	/**
	    	                                                                            ^, MathException.java:152: error: illegal start of expression
	 */ 	public MathException(java.lang.Throwable rootCause) { 		super(rootCause); 		this.pattern = getMessage(); 		this.arguments = new java.lang.Object[0];} 	/**
	    	^, MathException.java:152: error: ')' expected
	 */ 	public MathException(java.lang.Throwable rootCause) { 		super(rootCause); 		this.pattern = getMessage(); 		this.arguments = new java.lang.Object[0];} 	/**
	    	                                        ^, MathException.java:152: error: illegal start of expression
	 */ 	public MathException(java.lang.Throwable rootCause) { 		super(rootCause); 		this.pattern = getMessage(); 		this.arguments = new java.lang.Object[0];} 	/**
	    	                                                  ^, MathException.java:152: error: ';' expected
	 */ 	public MathException(java.lang.Throwable rootCause) { 		super(rootCause); 		this.pattern = getMessage(); 		this.arguments = new java.lang.Object[0];} 	/**
	    	                                                   ^]
Ingredient counter is Zero
---Undoing: gnrtn(112): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtLocalVariableImpl) `java.util.ResourceBundle bundle =  java.util.ResourceBundle.getBundle("org.apache.commons.math.Messa[...] ` -topatch--> `this.pattern = getMessage()` (spoon.support.reflect.code.CtAssignmentImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (223(f=1.0), 224(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (223(f=1.0), )
----------Running generation: 113, population size: 1

***** Generation 113 : 0
**Parent Variant: [Variant id: 225, #gens: 85, #ops: 0, parent:-]

--Child created id: 226
--Creating new operations for variant [Variant id: 226, #gens: 85, #ops: 0, parent:225]
---analyzing modificationPoint position: 23
location: MaxIterationsExceededException.java44
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 226, #gens: 84, #ops: 1, parent:225] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 226, errors: [MaxIterationsExceededException.java:46: error: variable maxIterations might not have been initialized
	}
	^]
Ingredient counter is Zero
---Undoing: gnrtn(113): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `this.maxIterations = maxIterations ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (225(f=1.0), 226(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (225(f=1.0), )
----------Running generation: 114, population size: 1

***** Generation 114 : 0
**Parent Variant: [Variant id: 227, #gens: 85, #ops: 0, parent:-]

--Child created id: 228
--Creating new operations for variant [Variant id: 228, #gens: 85, #ops: 0, parent:227]
---analyzing modificationPoint position: 30
Templates availables14
Attempts Base Ingredients  1 total 14
---modifPoint 0 not mutation generated in  // by default, do simple root finding using bracketing and default solver. // subclasses can overrid[...]
---analyzing modificationPoint position: 2
Templates availables14
Attempts Base Ingredients  1 total 14
vars from patch [p]
--> var from patch: p spoon.support.reflect.code.CtVariableReadImpl
location: AbstractContinuousDistribution.java104
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtThrowImpl) `// Failed bracket convergence was not because of corner solution throw new org.apache.commons.math.M[...] ` -topatch--> `// Try to bracket root, test domain endoints if this fails double lowerBound = getDomainLowerBound(p[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
---MP=org.apache.commons.math.distribution.AbstractContinuousDistribution line: 104, pointed element: CtLocalVariableImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtThrowImpl) `// Failed bracket convergence was not because of corner solution throw new org.apache.commons.math.M[...] ` -topatch--> `// Try to bracket root, test domain endoints if this fails double lowerBound = getDomainLowerBound(p[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 

--Summary Creation: for variant [Variant id: 228, #gens: 86, #ops: 1, parent:227] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 228
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-228/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: false, failTest= 1, was successful: false, cases executed: 13] ,[]
-Valid?: |false|1|13|[]|, fitness 1.0
Ingredient counter is Zero
---Undoing: gnrtn(114): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtThrowImpl) `// Failed bracket convergence was not because of corner solution throw new org.apache.commons.math.M[...] ` -topatch--> `// Try to bracket root, test domain endoints if this fails double lowerBound = getDomainLowerBound(p[...]` (spoon.support.reflect.code.CtLocalVariableImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (227(f=1.0), 228(f=1.0), )
Selected to next generation: IDs2--> (227(f=1.0), )
----------Running generation: 115, population size: 1

***** Generation 115 : 0
**Parent Variant: [Variant id: 229, #gens: 85, #ops: 0, parent:-]

--Child created id: 230
--Creating new operations for variant [Variant id: 230, #gens: 85, #ops: 0, parent:229]
---analyzing modificationPoint position: 20
Templates availables9
Attempts Base Ingredients  1 total 9
---modifPoint 0 not mutation generated in  if (p == 1) { 	return java.lang.Double.POSITIVE_INFINITY; }
---analyzing modificationPoint position: 62
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE]
--> var from patch: a spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: x spoon.support.reflect.code.CtVariableReadImpl
--> var from patch: org.apache.commons.math.special.Gamma.DEFAULT_EPSILON spoon.support.reflect.code.CtFieldReadImpl
--> var from patch: java.lang.Integer.MAX_VALUE spoon.support.reflect.code.CtFieldReadImpl
location: Gamma.java174
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// compute next element in the series n = n + 1.0 ` -topatch--> `return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special[...]` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.special.Gamma line: 174, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// compute next element in the series n = n + 1.0 ` -topatch--> `return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special[...]` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 230, #gens: 86, #ops: 1, parent:229] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 230, errors: [Gamma.java:203: error: illegal start of expression
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	 ^, Gamma.java:203: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	          ^, Gamma.java:203: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                          ^, Gamma.java:203: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                                         ^, Gamma.java:203: error: <identifier> expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                                                                ^, Gamma.java:205: error: illegal start of expression
	 * @param a
	 ^, Gamma.java:205: error: illegal start of expression
	 * @param a
	   ^, Gamma.java:206: error: ';' expected
	 * 		the a parameter.
	   		   ^, Gamma.java:206: error: ';' expected
	 * 		the a parameter.
	   		               ^, Gamma.java:207: error: <identifier> expected
	 * @param x
	           ^, Gamma.java:208: error: ';' expected
	 * 		the value.
	   		         ^, Gamma.java:209: error: <identifier> expected
	 * @return the regularized gamma function Q(a, x)
	    ^, Gamma.java:209: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	              ^, Gamma.java:209: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                ^, Gamma.java:209: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                           ^, Gamma.java:209: error: not a statement
	 * @return the regularized gamma function Q(a, x)
	                                            ^, Gamma.java:209: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                             ^, Gamma.java:209: error: not a statement
	 * @return the regularized gamma function Q(a, x)
	                                               ^, Gamma.java:209: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                                ^, Gamma.java:210: error: <identifier> expected
	 * @throws MathException
	    ^, Gamma.java:210: error: ';' expected
	 * @throws MathException
	                        ^, Gamma.java:211: error: '(' expected
	 * 		if the algorithm fails to converge.
	   		  ^, Gamma.java:211: error: ')' expected
	 * 		if the algorithm fails to converge.
	   		      ^, Gamma.java:211: error: ';' expected
	 * 		if the algorithm fails to converge.
	   		                      ^, Gamma.java:211: error: variable declaration not allowed here
	 * 		if the algorithm fails to converge.
	   		                 ^, Gamma.java:211: error: ';' expected
	 * 		if the algorithm fails to converge.
	   		                                  ^, Gamma.java:212: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	^, Gamma.java:212: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	       ^, Gamma.java:212: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	             ^, Gamma.java:212: error: '.class' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                              ^, Gamma.java:212: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                               ^, Gamma.java:212: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                         ^, Gamma.java:212: error: not a statement
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                                                         ^, Gamma.java:212: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                                                                       ^, Gamma.java:238: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;
	    	^, Gamma.java:238: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;
	    	       ^, Gamma.java:238: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;
	    	             ^, Gamma.java:238: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;
	    	                                       ^, Gamma.java:238: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;
	    	                                            ^, Gamma.java:238: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;
	    	                                                    ^, Gamma.java:238: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;
	    	                                                     ^, Gamma.java:238: error: <identifier> expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;
	    	                                                                ^, Gamma.java:238: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;
	    	                                                                        ^, Gamma.java:238: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;
	    	                                                                               ^, Gamma.java:238: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;
	    	                                                                                                  ^, Gamma.java:238: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;
	    	                                                                                                                                  ^, Gamma.java:238: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;
	    	                                                                                                                                                ^, Gamma.java:269: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	^, Gamma.java:269: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	        ^, Gamma.java:269: error: ';' expected
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	              ^, Gamma.java:271: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5;
	    	^, Gamma.java:271: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5;
	    	        ^, Gamma.java:271: error: ';' expected
	 */ 	private static final double S_LIMIT = 1.0E-5;
	    	              ^, Gamma.java:292: error: illegal start of expression
	 */ 	public static double digamma(double x) {
	    	^, Gamma.java:292: error: illegal start of expression
	 */ 	public static double digamma(double x) {
	    	       ^, Gamma.java:292: error: ';' expected
	 */ 	public static double digamma(double x) {
	    	             ^, Gamma.java:292: error: '.class' expected
	 */ 	public static double digamma(double x) {
	    	                                    ^, Gamma.java:292: error: ';' expected
	 */ 	public static double digamma(double x) {
	    	                                     ^, Gamma.java:321: error: illegal start of expression
	 */ 	public static double trigamma(double x) {
	    	^, Gamma.java:321: error: illegal start of expression
	 */ 	public static double trigamma(double x) {
	    	       ^, Gamma.java:321: error: ';' expected
	 */ 	public static double trigamma(double x) {
	    	             ^, Gamma.java:321: error: '.class' expected
	 */ 	public static double trigamma(double x) {
	    	                                     ^, Gamma.java:321: error: ';' expected
	 */ 	public static double trigamma(double x) {
	    	                                      ^, Gamma.java:337: error: reached end of file while parsing
}
 ^]
Ingredient counter is Zero
---Undoing: gnrtn(115): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `// compute next element in the series n = n + 1.0 ` -topatch--> `return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special[...]` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (229(f=1.0), 230(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (229(f=1.0), )
----------Running generation: 116, population size: 1

***** Generation 116 : 0
**Parent Variant: [Variant id: 231, #gens: 85, #ops: 0, parent:-]

--Child created id: 232
--Creating new operations for variant [Variant id: 232, #gens: 85, #ops: 0, parent:231]
---analyzing modificationPoint position: 84
---modifPoint 0 not mutation generated in  return ret
---analyzing modificationPoint position: 36
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 1 not mutation generated in  return org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils.bracket(function, initial,[...]
---analyzing modificationPoint position: 63
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [x]
--> var from patch: x spoon.support.reflect.code.CtVariableReadImpl
location: Gamma.java175
operation: OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `an = an * (x / (a + n)) ` -topatch--> `return org.apache.commons.math.special.Gamma.trigamma(x + 1) + (1 / (x * x))` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.special.Gamma line: 175, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `an = an * (x / (a + n)) ` -topatch--> `return org.apache.commons.math.special.Gamma.trigamma(x + 1) + (1 / (x * x))` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 232, #gens: 86, #ops: 1, parent:231] gen mutated: 1 , gen not mut: 2, gen not applied  0
-The child does NOT compile: 232, errors: [Gamma.java:336: error: illegal start of expression
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	 ^, Gamma.java:336: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	          ^, Gamma.java:336: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                          ^, Gamma.java:336: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                                         ^, Gamma.java:336: error: <identifier> expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                                                                ^, Gamma.java:338: error: illegal start of expression
	 * @param a
	 ^, Gamma.java:338: error: illegal start of expression
	 * @param a
	   ^, Gamma.java:339: error: ';' expected
	 * 		the a parameter.
	   		   ^, Gamma.java:339: error: ';' expected
	 * 		the a parameter.
	   		               ^, Gamma.java:340: error: <identifier> expected
	 * @param x
	           ^, Gamma.java:341: error: ';' expected
	 * 		the value.
	   		         ^, Gamma.java:342: error: <identifier> expected
	 * @return the regularized gamma function Q(a, x)
	    ^, Gamma.java:342: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	              ^, Gamma.java:342: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                ^, Gamma.java:342: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                           ^, Gamma.java:342: error: not a statement
	 * @return the regularized gamma function Q(a, x)
	                                            ^, Gamma.java:342: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                             ^, Gamma.java:342: error: not a statement
	 * @return the regularized gamma function Q(a, x)
	                                               ^, Gamma.java:342: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                                ^, Gamma.java:343: error: <identifier> expected
	 * @throws MathException
	    ^, Gamma.java:343: error: ';' expected
	 * @throws MathException
	                        ^, Gamma.java:344: error: '(' expected
	 * 		if the algorithm fails to converge.
	   		  ^, Gamma.java:344: error: ')' expected
	 * 		if the algorithm fails to converge.
	   		      ^, Gamma.java:344: error: ';' expected
	 * 		if the algorithm fails to converge.
	   		                      ^, Gamma.java:344: error: variable declaration not allowed here
	 * 		if the algorithm fails to converge.
	   		                 ^, Gamma.java:344: error: ';' expected
	 * 		if the algorithm fails to converge.
	   		                                  ^, Gamma.java:345: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	^, Gamma.java:345: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	       ^, Gamma.java:345: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	             ^, Gamma.java:345: error: '.class' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                              ^, Gamma.java:345: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                               ^, Gamma.java:345: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                         ^, Gamma.java:345: error: not a statement
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                                                         ^, Gamma.java:345: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                                                                       ^, Gamma.java:371: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	^, Gamma.java:371: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	       ^, Gamma.java:371: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	             ^, Gamma.java:371: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                       ^, Gamma.java:371: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                            ^, Gamma.java:371: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                    ^, Gamma.java:371: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                     ^, Gamma.java:371: error: <identifier> expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                ^, Gamma.java:371: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                        ^, Gamma.java:371: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                               ^, Gamma.java:371: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                  ^, Gamma.java:371: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                                                  ^, Gamma.java:371: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                                                                ^, Gamma.java:372: error: illegal start of expression
	 * C limit
	 ^, Gamma.java:372: error: ';' expected
	 * C limit
	    ^, Gamma.java:373: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	  ^, Gamma.java:373: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	^, Gamma.java:373: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	        ^, Gamma.java:373: error: ';' expected
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	              ^, Gamma.java:375: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	^, Gamma.java:375: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	        ^, Gamma.java:375: error: ';' expected
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	              ^, Gamma.java:395: error: illegal start of expression
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	^, Gamma.java:395: error: illegal start of expression
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	       ^, Gamma.java:395: error: ';' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	             ^, Gamma.java:395: error: '.class' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	                                    ^, Gamma.java:395: error: ';' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	                                     ^, Gamma.java:407: error: illegal start of expression
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	^, Gamma.java:407: error: illegal start of expression
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	       ^, Gamma.java:407: error: ';' expected
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	             ^, Gamma.java:407: error: '.class' expected
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	                                     ^, Gamma.java:407: error: ';' expected
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	                                      ^, Gamma.java:408: error: reached end of file while parsing
			return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));} 		return org.apache.commons.math.special.Gamma.trigamma(x + 1) + (1 / (x * x));}}
			                                                                                               		                                                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(116): OP_INSTANCE:
InsertAfterOp:(spoon.support.reflect.code.CtAssignmentImpl) `an = an * (x / (a + n)) ` -topatch--> `return org.apache.commons.math.special.Gamma.trigamma(x + 1) + (1 / (x * x))` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (231(f=1.0), 232(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (231(f=1.0), )
----------Running generation: 117, population size: 1

***** Generation 117 : 0
**Parent Variant: [Variant id: 233, #gens: 85, #ops: 0, parent:-]

--Child created id: 234
--Creating new operations for variant [Variant id: 234, #gens: 85, #ops: 0, parent:233]
---analyzing modificationPoint position: 43
location: UnivariateRealSolverUtils.java193
operation: OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `fb = function.value(b) ` -topatch--> `-` (null) 

--Summary Creation: for variant [Variant id: 234, #gens: 84, #ops: 1, parent:233] gen mutated: 1 , gen not mut: 0, gen not applied  0
-The child does NOT compile: 234, errors: [UnivariateRealSolverUtils.java:196: error: variable fb might not have been initialized
		} while ((((fa * fb) > 0.0) && (numIterations < maximumIterations)) && 
		                 ^]
Ingredient counter is Zero
---Undoing: gnrtn(117): OP_INSTANCE:
RemoveOp:(spoon.support.reflect.code.CtAssignmentImpl) `fb = function.value(b) ` -topatch--> `-` (null) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (233(f=1.0), 234(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (233(f=1.0), )
----------Running generation: 118, population size: 1

***** Generation 118 : 0
**Parent Variant: [Variant id: 235, #gens: 85, #ops: 0, parent:-]

--Child created id: 236
--Creating new operations for variant [Variant id: 236, #gens: 85, #ops: 0, parent:235]
---analyzing modificationPoint position: 29
---modifPoint 0 not mutation generated in  return ret
---analyzing modificationPoint position: 79
Templates availables48
Attempts Base Ingredients  1 total 48
vars from patch [x]
--> var from patch: x spoon.support.reflect.code.CtVariableReadImpl
location: Gamma.java98
operation: OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum = sum + (org.apache.commons.math.special.Gamma.lanczos[i] / (x + i)) ` -topatch--> `return org.apache.commons.math.special.Gamma.digamma(x + 1) - (1 / x)` (spoon.support.reflect.code.CtReturnImpl) 
---MP=org.apache.commons.math.special.Gamma line: 98, pointed element: CtReturnImpl
---OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum = sum + (org.apache.commons.math.special.Gamma.lanczos[i] / (x + i)) ` -topatch--> `return org.apache.commons.math.special.Gamma.digamma(x + 1) - (1 / x)` (spoon.support.reflect.code.CtReturnImpl) 

--Summary Creation: for variant [Variant id: 236, #gens: 86, #ops: 1, parent:235] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child does NOT compile: 236, errors: [Gamma.java:349: error: illegal start of expression
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	 ^, Gamma.java:349: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	          ^, Gamma.java:349: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                          ^, Gamma.java:349: error: ';' expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                                         ^, Gamma.java:349: error: <identifier> expected
	 * Returns the regularized gamma function Q(a, x) = 1 - P(a, x).
	                                                                ^, Gamma.java:351: error: illegal start of expression
	 * @param a
	 ^, Gamma.java:351: error: illegal start of expression
	 * @param a
	   ^, Gamma.java:352: error: ';' expected
	 * 		the a parameter.
	   		   ^, Gamma.java:352: error: ';' expected
	 * 		the a parameter.
	   		               ^, Gamma.java:353: error: <identifier> expected
	 * @param x
	           ^, Gamma.java:354: error: ';' expected
	 * 		the value.
	   		         ^, Gamma.java:355: error: <identifier> expected
	 * @return the regularized gamma function Q(a, x)
	    ^, Gamma.java:355: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	              ^, Gamma.java:355: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                ^, Gamma.java:355: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                           ^, Gamma.java:355: error: not a statement
	 * @return the regularized gamma function Q(a, x)
	                                            ^, Gamma.java:355: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                             ^, Gamma.java:355: error: not a statement
	 * @return the regularized gamma function Q(a, x)
	                                               ^, Gamma.java:355: error: ';' expected
	 * @return the regularized gamma function Q(a, x)
	                                                ^, Gamma.java:356: error: <identifier> expected
	 * @throws MathException
	    ^, Gamma.java:356: error: ';' expected
	 * @throws MathException
	                        ^, Gamma.java:357: error: '(' expected
	 * 		if the algorithm fails to converge.
	   		  ^, Gamma.java:357: error: ')' expected
	 * 		if the algorithm fails to converge.
	   		      ^, Gamma.java:357: error: ';' expected
	 * 		if the algorithm fails to converge.
	   		                      ^, Gamma.java:357: error: variable declaration not allowed here
	 * 		if the algorithm fails to converge.
	   		                 ^, Gamma.java:357: error: ';' expected
	 * 		if the algorithm fails to converge.
	   		                                  ^, Gamma.java:358: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	^, Gamma.java:358: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	       ^, Gamma.java:358: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	             ^, Gamma.java:358: error: '.class' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                              ^, Gamma.java:358: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                               ^, Gamma.java:358: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                         ^, Gamma.java:358: error: not a statement
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                                                         ^, Gamma.java:358: error: ';' expected
	 */ 	public static double regularizedGammaQ(double a, double x) throws org.apache.commons.math.MathException { 		return org.apache.commons.math.special.Gamma.regularizedGammaQ(a, x, org.apache.commons.math.special.Gamma.DEFAULT_EPSILON, java.lang.Integer.MAX_VALUE);} 	/**
	    	                                                                                                       ^, Gamma.java:384: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	^, Gamma.java:384: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	       ^, Gamma.java:384: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	             ^, Gamma.java:384: error: illegal start of expression
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                       ^, Gamma.java:384: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                            ^, Gamma.java:384: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                    ^, Gamma.java:384: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                     ^, Gamma.java:384: error: <identifier> expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                ^, Gamma.java:384: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                        ^, Gamma.java:384: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                               ^, Gamma.java:384: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                  ^, Gamma.java:384: error: not a statement
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                                                  ^, Gamma.java:384: error: ';' expected
	 */ 	public static double regularizedGammaQ(final double a, double x, double epsilon, int maxIterations) throws org.apache.commons.math.MathException { 		double ret; 		if (((java.lang.Double.isNaN(a) || java.lang.Double.isNaN(x)) || (a <= 0.0)) || (x < 0.0)) { 			ret = java.lang.Double.NaN;} else if (x == 0.0) { 			ret = 1.0;} else if ((x < a) || (a < 1.0)) { 			// use regularizedGammaP because it should converge faster in this 			// case. 			ret = 1.0 - org.apache.commons.math.special.Gamma.regularizedGammaP(a, x, epsilon, maxIterations);} else { 			// create continued fraction 			org.apache.commons.math.util.ContinuedFraction cf = new org.apache.commons.math.util.ContinuedFraction() { 				@java.lang.Override 				protected double getA(int n, double x) { 					return (((2.0 * n) + 1.0) - a) + x;} 				@java.lang.Override 				protected double getB(int n, double x) { 					return n * (a - n);}}; 			ret = 1.0 / cf.evaluate(x, epsilon, maxIterations); 			ret = java.lang.Math.exp(((-x) + (a * java.lang.Math.log(x))) - org.apache.commons.math.special.Gamma.logGamma(a)) * ret;} 		return ret;} 	// limits for switching algorithm in digamma 	/**
	    	                                                                                                                                                ^, Gamma.java:385: error: illegal start of expression
	 * C limit
	 ^, Gamma.java:385: error: ';' expected
	 * C limit
	    ^, Gamma.java:386: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	  ^, Gamma.java:386: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	^, Gamma.java:386: error: illegal start of expression
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	        ^, Gamma.java:386: error: ';' expected
	 */ 	private static final double C_LIMIT = 49; 	/**
	    	              ^, Gamma.java:388: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	^, Gamma.java:388: error: illegal start of expression
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	        ^, Gamma.java:388: error: ';' expected
	 */ 	private static final double S_LIMIT = 1.0E-5; 	/**
	    	              ^, Gamma.java:408: error: illegal start of expression
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	^, Gamma.java:408: error: illegal start of expression
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	       ^, Gamma.java:408: error: ';' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	             ^, Gamma.java:408: error: '.class' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	                                    ^, Gamma.java:408: error: ';' expected
	 */ 	public static double digamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			// use method 5 from Bernardo AS103 			// accurate to O(x)
	    	                                     ^, Gamma.java:420: error: illegal start of expression
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	^, Gamma.java:420: error: illegal start of expression
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	       ^, Gamma.java:420: error: ';' expected
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	             ^, Gamma.java:420: error: '.class' expected
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	                                     ^, Gamma.java:420: error: ';' expected
	 */ 	public static double trigamma(double x) { 		if ((x > 0) && (x <= org.apache.commons.math.special.Gamma.S_LIMIT)) { 			return 1 / (x * x);} 		if (x >= org.apache.commons.math.special.Gamma.C_LIMIT) { 			double inv = 1 / (x * x); 			// 1    1      1       1       1 			// - + ---- + ---- - ----- + ----- 			// x      2      3       5       7 			// 2 x    6 x    30 x    42 x
	    	                                      ^, Gamma.java:421: error: reached end of file while parsing
			return ((1 / x) + (inv / 2)) + ((inv / x) * ((1.0 / 6) - (inv * ((1.0 / 30) + (inv / 42)))));} 		return org.apache.commons.math.special.Gamma.trigamma(x + 1) + (1 / (x * x));}}
			                                                                                               		                                                                               ^]
Ingredient counter is Zero
---Undoing: gnrtn(118): OP_INSTANCE:
InsertBeforeOp:(spoon.support.reflect.code.CtAssignmentImpl) `sum = sum + (org.apache.commons.math.special.Gamma.lanczos[i] / (x + i)) ` -topatch--> `return org.apache.commons.math.special.Gamma.digamma(x + 1) - (1 / x)` (spoon.support.reflect.code.CtReturnImpl) 
End analysis generation - Solutions found:--> ()
Variants to next generation from: 2-->IDs: (235(f=1.0), 236(f=1.7976931348623157E308), )
Selected to next generation: IDs2--> (235(f=1.0), )
----------Running generation: 119, population size: 1

***** Generation 119 : 0
**Parent Variant: [Variant id: 237, #gens: 85, #ops: 0, parent:-]

--Child created id: 238
--Creating new operations for variant [Variant id: 238, #gens: 85, #ops: 0, parent:237]
---analyzing modificationPoint position: 46
Templates availables28
Attempts Base Ingredients  1 total 28
---modifPoint 0 not mutation generated in  if (function == null) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentExc[...]
---analyzing modificationPoint position: 45
Templates availables5
Attempts Base Ingredients  1 total 5
vars from patch [maximumIterations]
--> var from patch: maximumIterations spoon.support.reflect.code.CtVariableReadImpl
location: UnivariateRealSolverUtils.java198
operation: OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((fa * fb) >= 0.0) { 	throw new org.apache.commons.math.ConvergenceException( 	"number of iterati[...] ` -topatch--> `if (maximumIterations <= 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgum[...]` (spoon.support.reflect.code.CtIfImpl) 
---MP=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils line: 198, pointed element: CtIfImpl
---OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((fa * fb) >= 0.0) { 	throw new org.apache.commons.math.ConvergenceException( 	"number of iterati[...] ` -topatch--> `if (maximumIterations <= 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgum[...]` (spoon.support.reflect.code.CtIfImpl) 

--Summary Creation: for variant [Variant id: 238, #gens: 85, #ops: 1, parent:237] gen mutated: 1 , gen not mut: 1, gen not applied  0
-The child compiles: id 238
-Running first validation
Executing process: (timeout10secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-238/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.distribution.NormalDistributionTest
Analyzing output from process
TR: Success: true, failTest= 0, was successful: true, cases executed: 13] ,[]
-Test Failing is passing, Executing regression
Executing process: (timeout507secs) 
/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home/bin/java  -Xmx2048m  -Dmutnumber_0=null  -cp  "/Users/marekmazur/astor/./lib/com.gzoltar-0.1.1-jar-with-dependencies.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/variant-238/":"/Users/marekmazur/astor/examples/libs/junit-4.4.jar":"/Users/marekmazur/astor/./output_astor/AstorMain-math-85/bin/default/":"/Users/marekmazur/astor/target/astor-2.0.0-jar-with-dependencies.jar":  fr.inria.astor.core.validation.junit.JUnitNologExternalExecutor  org.apache.commons.math.stat.data.LotteryTest  org.apache.commons.math.linear.FieldMatrixImplTest  org.apache.commons.math.ode.sampling.StepNormalizerTest  org.apache.commons.math.stat.descriptive.AggregateSummaryStatisticsTest  org.apache.commons.math.geometry.RotationOrderTest  org.apache.commons.math.analysis.solvers.NewtonSolverTest  org.apache.commons.math.estimation.EstimatedParameterTest  org.apache.commons.math.linear.CholeskyDecompositionImplTest  org.apache.commons.math.linear.Array2DRowRealMatrixTest  org.apache.commons.math.linear.SparseRealMatrixTest  org.apache.commons.math.util.OpenIntToFieldTest  org.apache.commons.math.stat.clustering.KMeansPlusPlusClustererTest  org.apache.commons.math.optimization.fitting.PolynomialFitterTest  org.apache.commons.math.linear.ArrayRealVectorTest  org.apache.commons.math.distribution.HypergeometricDistributionTest  org.apache.commons.math.random.RandomAdaptorTest  org.apache.commons.math.ode.FirstOrderConverterTest  org.apache.commons.math.stat.descriptive.SynchronizedSummaryStatisticsTest  org.apache.commons.math.stat.inference.TestUtilsTest  org.apache.commons.math.stat.data.LewTest  org.apache.commons.math.distribution.GammaDistributionTest  org.apache.commons.math.stat.descriptive.rank.MedianTest  org.apache.commons.math.distribution.ZipfDistributionTest  org.apache.commons.math.ode.nonstiff.DormandPrince54StepInterpolatorTest  org.apache.commons.math.stat.CertifiedDataTest  org.apache.commons.math.ode.nonstiff.HighamHall54IntegratorTest  org.apache.commons.math.complex.FrenchComplexFormatTest  org.apache.commons.math.ode.nonstiff.MidpointStepInterpolatorTest  org.apache.commons.math.analysis.polynomials.PolynomialsUtilsTest  org.apache.commons.math.DuplicateSampleAbscissaExceptionTest  org.apache.commons.math.estimation.MinpackTest  org.apache.commons.math.genetics.FixedGenerationCountTest  org.apache.commons.math.optimization.general.GaussNewtonOptimizerTest  org.apache.commons.math.fraction.BigFractionFormatTest  org.apache.commons.math.stat.descriptive.MixedListUnivariateImplTest  org.apache.commons.math.random.RandomDataTest  org.apache.commons.math.distribution.FDistributionTest  org.apache.commons.math.FunctionEvaluationExceptionTest  org.apache.commons.math.ode.sampling.NordsieckStepInterpolatorTest  org.apache.commons.math.stat.inference.TTestFactoryTest  org.apache.commons.math.stat.descriptive.moment.SkewnessTest  org.apache.commons.math.special.GammaTest  org.apache.commons.math.ode.nonstiff.EulerStepInterpolatorTest  org.apache.commons.math.analysis.integration.RombergIntegratorTest  org.apache.commons.math.ode.nonstiff.HighamHall54StepInterpolatorTest  org.apache.commons.math.analysis.integration.LegendreGaussIntegratorTest  org.apache.commons.math.stat.descriptive.SummaryStatisticsTest  org.apache.commons.math.ode.nonstiff.MidpointIntegratorTest  org.apache.commons.math.stat.descriptive.moment.FirstMomentTest  org.apache.commons.math.stat.descriptive.moment.StandardDeviationTest  org.apache.commons.math.complex.ComplexTest  org.apache.commons.math.distribution.BetaDistributionTest  org.apache.commons.math.special.ErfTest  org.apache.commons.math.special.BetaTest  org.apache.commons.math.ode.nonstiff.GillIntegratorTest  org.apache.commons.math.random.EmpiricalDistributionTest  org.apache.commons.math.stat.descriptive.MultivariateSummaryStatisticsTest  org.apache.commons.math.stat.descriptive.StatisticalSummaryValuesTest  org.apache.commons.math.stat.regression.OLSMultipleLinearRegressionTest  org.apache.commons.math.estimation.LevenbergMarquardtEstimatorTest  org.apache.commons.math.random.AbstractRandomGeneratorTest  org.apache.commons.math.ode.nonstiff.GraggBulirschStoerStepInterpolatorTest  org.apache.commons.math.genetics.GeneticAlgorithmTestBinary  org.apache.commons.math.linear.BiDiagonalTransformerTest  org.apache.commons.math.util.DefaultTransformerTest  org.apache.commons.math.linear.LUDecompositionImplTest  org.apache.commons.math.random.ValueServerTest  org.apache.commons.math.stat.descriptive.moment.MeanTest  org.apache.commons.math.linear.QRDecompositionImplTest  org.apache.commons.math.analysis.interpolation.NevilleInterpolatorTest  org.apache.commons.math.stat.descriptive.moment.VarianceTest  org.apache.commons.math.genetics.OnePointCrossoverTest  org.apache.commons.math.stat.ranking.NaturalRankingTest  org.apache.commons.math.optimization.linear.SimplexSolverTest  org.apache.commons.math.stat.descriptive.moment.FourthMomentTest  org.apache.commons.math.linear.BlockRealMatrixTest  org.apache.commons.math.ode.nonstiff.DormandPrince853StepInterpolatorTest  org.apache.commons.math.genetics.RandomKeyTest  org.apache.commons.math.stat.descriptive.summary.ProductTest  org.apache.commons.math.fraction.FractionTest  org.apache.commons.math.util.OpenIntToDoubleHashMapTest  org.apache.commons.math.ode.nonstiff.DormandPrince54IntegratorTest  org.apache.commons.math.analysis.polynomials.PolynomialFunctionTest  org.apache.commons.math.genetics.ChromosomeTest  org.apache.commons.math.stat.descriptive.moment.GeometricMeanTest  org.apache.commons.math.random.CorrelatedRandomVectorGeneratorTest  org.apache.commons.math.geometry.Vector3DTest  org.apache.commons.math.stat.descriptive.rank.MinTest  org.apache.commons.math.linear.FieldLUDecompositionImplTest  org.apache.commons.math.analysis.integration.TrapezoidIntegratorTest  org.apache.commons.math.stat.descriptive.moment.VectorialCovarianceTest  org.apache.commons.math.transform.FastHadamardTransformerTest  org.apache.commons.math.optimization.fitting.HarmonicFitterTest  org.apache.commons.math.stat.correlation.PearsonsCorrelationTest  org.apache.commons.math.random.GaussianRandomGeneratorTest  org.apache.commons.math.stat.descriptive.moment.ThirdMomentTest  org.apache.commons.math.linear.FrenchRealVectorFormatTest  org.apache.commons.math.fraction.BigFractionTest  org.apache.commons.math.util.ContinuedFractionTest  org.apache.commons.math.util.TransformerMapTest  org.apache.commons.math.analysis.solvers.BisectionSolverTest  org.apache.commons.math.genetics.BinaryChromosomeTest  org.apache.commons.math.linear.BlockFieldMatrixTest  org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaStepInterpolatorTest  org.apache.commons.math.linear.SingularValueDecompositionImplTest  org.apache.commons.math.distribution.TDistributionTest  org.apache.commons.math.ode.nonstiff.AdamsBashforthIntegratorTest  org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest  org.apache.commons.math.linear.InvalidMatrixExceptionTest  org.apache.commons.math.distribution.BinomialDistributionTest  org.apache.commons.math.linear.EigenSolverTest  org.apache.commons.math.stat.inference.TTestTest  org.apache.commons.math.analysis.polynomials.PolynomialFunctionNewtonFormTest  org.apache.commons.math.random.UniformRandomGeneratorTest  org.apache.commons.math.stat.descriptive.rank.PercentileTest  org.apache.commons.math.analysis.solvers.RiddersSolverTest  org.apache.commons.math.linear.ArrayFieldVectorTest  org.apache.commons.math.ode.ContinuousOutputModelTest  org.apache.commons.math.random.UncorrelatedRandomVectorGeneratorTest  org.apache.commons.math.optimization.linear.SimplexTableauTest  org.apache.commons.math.ConvergenceExceptionTest  org.apache.commons.math.util.ResizableDoubleArrayTest  org.apache.commons.math.complex.ComplexFormatTest  org.apache.commons.math.linear.RealMatrixImplTest  org.apache.commons.math.stat.descriptive.summary.SumTest  org.apache.commons.math.linear.SparseFieldVectorTest  org.apache.commons.math.genetics.ElitisticListPopulationTest  org.apache.commons.math.stat.descriptive.summary.SumSqTest  org.apache.commons.math.linear.SparseRealVectorTest  org.apache.commons.math.analysis.interpolation.DividedDifferenceInterpolatorTest  org.apache.commons.math.linear.EigenDecompositionImplTest  org.apache.commons.math.analysis.integration.SimpsonIntegratorTest  org.apache.commons.math.analysis.polynomials.PolynomialSplineFunctionTest  org.apache.commons.math.genetics.GeneticAlgorithmTestPermutations  org.apache.commons.math.stat.descriptive.moment.KurtosisTest  org.apache.commons.math.transform.FastFourierTransformerTest  org.apache.commons.math.stat.descriptive.moment.VectorialMeanTest  org.apache.commons.math.distribution.NormalDistributionTest  org.apache.commons.math.distribution.PoissonDistributionTest  org.apache.commons.math.geometry.Vector3DFormatTest  org.apache.commons.math.analysis.polynomials.PolynomialFunctionLagrangeFormTest  org.apache.commons.math.genetics.TournamentSelectionTest  org.apache.commons.math.optimization.general.MinpackTest  org.apache.commons.math.analysis.solvers.BrentSolverTest  org.apache.commons.math.ode.nonstiff.GraggBulirschStoerIntegratorTest  org.apache.commons.math.stat.descriptive.AbstractUnivariateStatisticTest  org.apache.commons.math.estimation.WeightedMeasurementTest  org.apache.commons.math.stat.inference.ChiSquareTestTest  org.apache.commons.math.analysis.interpolation.LoessInterpolatorTest  org.apache.commons.math.ode.nonstiff.ThreeEighthesStepInterpolatorTest  org.apache.commons.math.linear.MatrixIndexExceptionTest  org.apache.commons.math.genetics.BinaryMutationTest  org.apache.commons.math.fraction.FractionFormatTest  org.apache.commons.math.distribution.PascalDistributionTest  org.apache.commons.math.optimization.general.NonLinearConjugateGradientOptimizerTest  org.apache.commons.math.util.MathUtilsTest  org.apache.commons.math.complex.ComplexUtilsTest  org.apache.commons.math.analysis.solvers.UnivariateRealSolverFactoryImplTest  org.apache.commons.math.optimization.direct.MultiDirectionalTest  org.apache.commons.math.genetics.FitnessCachingTest  org.apache.commons.math.linear.BigMatrixImplTest  org.apache.commons.math.stat.inference.ChiSquareFactoryTest  org.apache.commons.math.stat.descriptive.InteractionTest  org.apache.commons.math.stat.correlation.CovarianceTest  org.apache.commons.math.optimization.univariate.BrentMinimizerTest  org.apache.commons.math.linear.QRSolverTest  org.apache.commons.math.linear.RealVectorFormatTest  org.apache.commons.math.analysis.solvers.LaguerreSolverTest  org.apache.commons.math.linear.CholeskySolverTest  org.apache.commons.math.distribution.WeibullDistributionTest  org.apache.commons.math.stat.StatUtilsTest  org.apache.commons.math.analysis.interpolation.SplineInterpolatorTest  org.apache.commons.math.analysis.solvers.MullerSolverTest  org.apache.commons.math.linear.TriDiagonalTransformerTest  org.apache.commons.math.distribution.ChiSquareDistributionTest  org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtilsTest  org.apache.commons.math.transform.FastSineTransformerTest  org.apache.commons.math.stat.inference.OneWayAnovaTest  org.apache.commons.math.transform.FastCosineTransformerTest  org.apache.commons.math.ArgumentOutsideDomainExceptionTest  org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest  org.apache.commons.math.ode.nonstiff.EulerIntegratorTest  org.apache.commons.math.stat.descriptive.rank.MaxTest  org.apache.commons.math.stat.descriptive.ListUnivariateImplTest  org.apache.commons.math.stat.descriptive.DescriptiveStatisticsTest  org.apache.commons.math.MaxIterationsExceededExceptionTest  org.apache.commons.math.linear.MatrixUtilsTest  org.apache.commons.math.optimization.direct.NelderMeadTest  org.apache.commons.math.optimization.MultiStartDifferentiableMultivariateVectorialOptimizerTest  org.apache.commons.math.geometry.RotationTest  org.apache.commons.math.ode.sampling.DummyStepInterpolatorTest  org.apache.commons.math.linear.SingularValueSolverTest  org.apache.commons.math.genetics.RandomKeyMutationTest  org.apache.commons.math.distribution.ExponentialDistributionTest  org.apache.commons.math.stat.descriptive.SynchronizedDescriptiveStatisticsTest  org.apache.commons.math.geometry.FrenchVector3DFormatTest  org.apache.commons.math.ode.nonstiff.AdamsMoultonIntegratorTest  org.apache.commons.math.stat.regression.SimpleRegressionTest  org.apache.commons.math.optimization.MultiStartMultivariateRealOptimizerTest  org.apache.commons.math.stat.regression.GLSMultipleLinearRegressionTest  org.apache.commons.math.ode.nonstiff.ThreeEighthesIntegratorTest  org.apache.commons.math.ode.nonstiff.GillStepInterpolatorTest  org.apache.commons.math.linear.LUSolverTest  org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizerTest  org.apache.commons.math.MathConfigurationExceptionTest  org.apache.commons.math.estimation.GaussNewtonEstimatorTest  org.apache.commons.math.genetics.ListPopulationTest  org.apache.commons.math.MathExceptionTest  org.apache.commons.math.distribution.CauchyDistributionTest  org.apache.commons.math.stat.correlation.SpearmansRankCorrelationTest  org.apache.commons.math.linear.SparseFieldMatrixTest  org.apache.commons.math.stat.descriptive.summary.SumLogTest  org.apache.commons.math.stat.FrequencyTest  org.apache.commons.math.stat.descriptive.moment.SecondMomentTest
Analyzing output from process
TR: Success: true, failTest= 0, was successful: true, cases executed: 1986] ,[]
-Valid?: |true|0|1986|[]|, fitness 0.0
-Found Solution, child variant #238
Ingredient counter is Zero

Attempts to find patch Id 238: 0, successful 0, failing 0

-Saving child on disk variant #238 at /Users/marekmazur/astor/./output_astor/AstorMain-math-85//src//variant-238

-Saving child on disk variant #238 at /Users/marekmazur/astor/./output_astor/AstorMain-math-85//src//variant-238_f
---Undoing: gnrtn(119): OP_INSTANCE:
ReplaceOp:(spoon.support.reflect.code.CtIfImpl) `if ((fa * fb) >= 0.0) { 	throw new org.apache.commons.math.ConvergenceException("number of iteration[...] ` -topatch--> `if (maximumIterations <= 0) { 	throw org.apache.commons.math.MathRuntimeException.createIllegalArgum[...]` (spoon.support.reflect.code.CtIfImpl) 
/Users/marekmazur/astor/./output_astor/AstorMain-math-85/src/default_f/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
/Users/marekmazur/astor/./output_astor/AstorMain-math-85/src/variant-238_f/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
diff command : diff -w -b  --label=/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java --label=/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java /Users/marekmazur/astor/./output_astor/AstorMain-math-85/src/default_f/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java /Users/marekmazur/astor/./output_astor/AstorMain-math-85/src/variant-238_f/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java --unified=0
/Users/marekmazur/astor/./output_astor/AstorMain-math-85/src/default/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
/Users/marekmazur/astor/./output_astor/AstorMain-math-85/src/variant-238/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
diff command : diff -w -b  --label=/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java --label=/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java /Users/marekmazur/astor/./output_astor/AstorMain-math-85/src/default/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java /Users/marekmazur/astor/./output_astor/AstorMain-math-85/src/variant-238/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java --unified=0
Generation 1
Generation 2
Generation 3
Generation 4
Generation 5
Generation 6
Generation 7
Generation 8
Generation 9
Generation 10
Generation 11
Generation 12
Generation 13
Generation 14
Generation 15
Generation 16
Generation 17
Generation 18
Generation 19
Generation 20
Generation 21
Generation 22
Generation 23
Generation 24
Generation 25
Generation 26
Generation 27
Generation 28
Generation 29
Generation 30
Generation 31
Generation 32
Generation 33
Generation 34
Generation 35
Generation 36
Generation 37
Generation 38
Generation 39
Generation 40
Generation 41
Generation 42
Generation 43
Generation 44
Generation 45
Generation 46
Generation 47
Generation 48
Generation 49
Generation 50
Generation 51
Generation 52
Generation 53
Generation 54
Generation 55
Generation 56
Generation 57
Generation 58
Generation 59
Generation 60
Generation 61
Generation 62
Generation 63
Generation 64
Generation 65
Generation 66
Generation 67
Generation 68
Generation 69
Generation 70
Generation 71
Generation 72
Generation 73
Generation 74
Generation 75
Generation 76
Generation 77
Generation 78
Generation 79
Generation 80
Generation 81
Generation 82
Generation 83
Generation 84
Generation 85
Generation 86
Generation 87
Generation 88
Generation 89
Generation 90
Generation 91
Generation 92
Generation 93
Generation 94
Generation 95
Generation 96
Generation 97
Generation 98
Generation 99
Generation 100
Generation 101
Generation 102
Generation 103
Generation 104
Generation 105
Generation 106
Generation 107
Generation 108
Generation 109
Generation 110
Generation 111
Generation 112
Generation 113
Generation 114
Generation 115
Generation 116
Generation 117
Generation 118
Generation 119
Storing ing JSON at ./diffSolutions/patchinfo_238.json
./diffSolutions/patchinfo_238.json:
{"VARIANT_ID":"238","VALIDATION":"|true|0|1986|[]|","patchhunks":[{"LOCATION":"org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils","PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/defects4j\\\/math-85\\\/src\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/analysis\\\/solvers\\\/UnivariateRealSolverUtils.java","INGREDIENT_SCOPE":"LOCAL","SUSPICIOUNESS":"0,992","INGREDIENT_PARENT":"if (maximumIterations <= 0) {\\n\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n\\t\\\"bad value for maximum iterations number: {0}\\\", maximumIterations);\\n}","PATCH_HUNK_TYPE":"CtIfImpl|CtBlockImpl","ORIGINAL_CODE":"if ((fa * fb) >= 0.0) {\\n\\tthrow new org.apache.commons.math.ConvergenceException(\\n\\t\\\"number of iterations={0}, maximum iterations={1}, \\\" + \\n\\t(\\\"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \\\" + \\n\\t\\\"final b value={6}, f(a)={7}, f(b)={8}\\\"), \\n\\tnumIterations, maximumIterations, initial, \\n\\tlowerBound, upperBound, a, b, fa, fb);\\n}","BUGGY_CODE_TYPE":"CtIfImpl|CtBlockImpl","OPERATOR":"ReplaceOp","MODIFIED_FILE_PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-85\\\/\\\/src\\\/\\\/variant-238\\\/org\\\/apache\\\/commons\\\/math\\\/analysis\\\/solvers\\\/UnivariateRealSolverUtils.java","LINE":"198","MP_RANKING":"45","PATCH_HUNK_CODE":"if (maximumIterations <= 0) {\\n\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n\\t\\\"bad value for maximum iterations number: {0}\\\", maximumIterations);\\n}"}],"TIME":"63","GENERATION":"119","FOLDER_SOLUTION_CODE":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-85\\\/\\\/src\\\/\\\/variant-238","PATCH_DIFF_ORIG":"--- \\\/src\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/analysis\\\/solvers\\\/UnivariateRealSolverUtils.java\\n+++ \\\/src\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/analysis\\\/solvers\\\/UnivariateRealSolverUtils.java\\n@@ -196 +196 @@\\n-\\t\\t((a > lowerBound) || (b < upperBound)) );\\n+\\t\\t((a > lowerBound) || (b < upperBound)) ); \\t\\tif (maximumIterations <= 0) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\\"bad value for maximum iterations number: {0}\\\", maximumIterations);}\\n@@ -198,8 +198,8 @@\\n-\\t\\tif ((fa * fb) >= 0.0) {\\n-\\t\\t\\tthrow new org.apache.commons.math.ConvergenceException(\\n-\\t\\t\\t\\\"number of iterations={0}, maximum iterations={1}, \\\" + \\n-\\t\\t\\t(\\\"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \\\" + \\n-\\t\\t\\t\\\"final b value={6}, f(a)={7}, f(b)={8}\\\"), \\n-\\t\\t\\tnumIterations, maximumIterations, initial, \\n-\\t\\t\\tlowerBound, upperBound, a, b, fa, fb);\\n-\\t\\t}\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n\\n"}
Saving patch info at ./diffSolutions/patchinfo_238.json
Storing ing JSON at /Users/marekmazur/astor/./diffSolutions/patch_64123_238.diff
/Users/marekmazur/astor/./diffSolutions/patch_64123_238.diff:
{"VARIANT_ID":"238","VALIDATION":"|true|0|1986|[]|","patchhunks":[{"LOCATION":"org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils","PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/defects4j\\\/math-85\\\/src\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/analysis\\\/solvers\\\/UnivariateRealSolverUtils.java","INGREDIENT_SCOPE":"LOCAL","SUSPICIOUNESS":"0,992","INGREDIENT_PARENT":"if (maximumIterations <= 0) {\\n\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n\\t\\\"bad value for maximum iterations number: {0}\\\", maximumIterations);\\n}","PATCH_HUNK_TYPE":"CtIfImpl|CtBlockImpl","ORIGINAL_CODE":"if ((fa * fb) >= 0.0) {\\n\\tthrow new org.apache.commons.math.ConvergenceException(\\n\\t\\\"number of iterations={0}, maximum iterations={1}, \\\" + \\n\\t(\\\"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \\\" + \\n\\t\\\"final b value={6}, f(a)={7}, f(b)={8}\\\"), \\n\\tnumIterations, maximumIterations, initial, \\n\\tlowerBound, upperBound, a, b, fa, fb);\\n}","BUGGY_CODE_TYPE":"CtIfImpl|CtBlockImpl","OPERATOR":"ReplaceOp","MODIFIED_FILE_PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-85\\\/\\\/src\\\/\\\/variant-238\\\/org\\\/apache\\\/commons\\\/math\\\/analysis\\\/solvers\\\/UnivariateRealSolverUtils.java","LINE":"198","MP_RANKING":"45","PATCH_HUNK_CODE":"if (maximumIterations <= 0) {\\n\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n\\t\\\"bad value for maximum iterations number: {0}\\\", maximumIterations);\\n}"}],"TIME":"63","GENERATION":"119","FOLDER_SOLUTION_CODE":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-85\\\/\\\/src\\\/\\\/variant-238","PATCH_DIFF_ORIG":"--- \\\/src\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/analysis\\\/solvers\\\/UnivariateRealSolverUtils.java\\n+++ \\\/src\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/analysis\\\/solvers\\\/UnivariateRealSolverUtils.java\\n@@ -196 +196 @@\\n-\\t\\t((a > lowerBound) || (b < upperBound)) );\\n+\\t\\t((a > lowerBound) || (b < upperBound)) ); \\t\\tif (maximumIterations <= 0) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\\"bad value for maximum iterations number: {0}\\\", maximumIterations);}\\n@@ -198,8 +198,8 @@\\n-\\t\\tif ((fa * fb) >= 0.0) {\\n-\\t\\t\\tthrow new org.apache.commons.math.ConvergenceException(\\n-\\t\\t\\t\\\"number of iterations={0}, maximum iterations={1}, \\\" + \\n-\\t\\t\\t(\\\"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \\\" + \\n-\\t\\t\\t\\\"final b value={6}, f(a)={7}, f(b)={8}\\\"), \\n-\\t\\t\\tnumIterations, maximumIterations, initial, \\n-\\t\\t\\tlowerBound, upperBound, a, b, fa, fb);\\n-\\t\\t}\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n\\n"}
Saving patch diff at /Users/marekmazur/astor/./diffSolutions/patch_64123_238.diff
End analysis generation - Solutions found:--> (238(SOLUTION)(f=0.0), )
Variants to next generation from: 2-->IDs: (238(f=0.0)[SOL], 237(f=1.0), )
Selected to next generation: IDs2--> (237(f=1.0), )
Max Solution found 1
Time Repair Loop (s): 64.126
generationsexecuted: 119
----SUMMARY_EXECUTION---
End Repair Search: Found solution
Solution stored at: /Users/marekmazur/astor/./output_astor/AstorMain-math-85//src/
Number solutions:1
f (sol): 0.0, [Variant id: 238 (SOL) , #gens: 85, #ops: 1, parent:237]
All variants:
f 1.0, [Variant id: 239, #gens: 85, #ops: 0, parent:-]
Number suspicious:1

 --SOLUTIONS DESCRIPTION--

 ----
ProgramVariant 238
 
time(sec)= 63
operation: ReplaceOp
location= org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils
line= 198
lineSuspiciousness= 0,992
lineSuspiciousness= 45
original statement= if ((fa * fb) >= 0.0) {
	throw new org.apache.commons.math.ConvergenceException(
	"number of iterations={0}, maximum iterations={1}, " + 
	("initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " + 
	"final b value={6}, f(a)={7}, f(b)={8}"), 
	numIterations, maximumIterations, initial, 
	lowerBound, upperBound, a, b, fa, fb);
}
buggy kind= CtIfImpl|CtBlockImpl
fixed statement= if (maximumIterations <= 0) {
	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
	"bad value for maximum iterations number: {0}", maximumIterations);
}
Patch kind= CtIfImpl|CtBlockImpl
generation= 119
ingredientScope= LOCAL
validation=|true|0|1986|[]|
diffpatch=--- /src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
+++ /src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
@@ -186,2 +186,2 @@
-		if ((fa * fb) >= 0.0) {
-			throw new org.apache.commons.math.ConvergenceException("number of iterations={0}, maximum iterations={1}, " + ("initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " + "final b value={6}, f(a)={7}, f(b)={8}"), numIterations, maximumIterations, initial, lowerBound, upperBound, a, b, fa, fb);
+		if (maximumIterations <= 0) {
+			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}", maximumIterations);


diffpatchoriginal=--- /src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
+++ /src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
@@ -196 +196 @@
-		((a > lowerBound) || (b < upperBound)) );
+		((a > lowerBound) || (b < upperBound)) ); 		if (maximumIterations <= 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}", maximumIterations);}
@@ -198,8 +198,8 @@
-		if ((fa * fb) >= 0.0) {
-			throw new org.apache.commons.math.ConvergenceException(
-			"number of iterations={0}, maximum iterations={1}, " + 
-			("initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " + 
-			"final b value={6}, f(a)={7}, f(b)={8}"), 
-			numIterations, maximumIterations, initial, 
-			lowerBound, upperBound, a, b, fa, fb);
-		}
+
+
+
+
+
+
+
+



Astor Output:

General stats:
EXECUTION_IDENTIFIER=
TOTAL_TIME=64.126
NR_GENERATIONS=119
NR_RIGHT_COMPILATIONS=55
NR_FAILLING_COMPILATIONS=64
NR_ERRONEOUS_VARIANCES=null
NR_FAILING_VALIDATION_PROCESS=null
OUTPUT_STATUS=STOP_BY_PATCH_FOUND
FAULT_LOCALIZATION=flacoco

Patch stats:

Patch 1
VARIANT_ID=238
TIME=63
VALIDATION=|true|0|1986|[]|
GENERATION=119
FOLDER_SOLUTION_CODE=/Users/marekmazur/astor/./output_astor/AstorMain-math-85//src//variant-238
--Patch Hunk #1
OPERATOR=ReplaceOp

LOCATION=org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils

PATH=/Users/marekmazur/astor/defects4j/math-85/src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java

MODIFIED_FILE_PATH=/Users/marekmazur/astor/./output_astor/AstorMain-math-85//src//variant-238/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java

LINE=198

SUSPICIOUNESS=0,992

MP_RANKING=45

ORIGINAL_CODE=if ((fa * fb) >= 0.0) {
	throw new org.apache.commons.math.ConvergenceException(
	"number of iterations={0}, maximum iterations={1}, " + 
	("initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " + 
	"final b value={6}, f(a)={7}, f(b)={8}"), 
	numIterations, maximumIterations, initial, 
	lowerBound, upperBound, a, b, fa, fb);
}

BUGGY_CODE_TYPE=CtIfImpl|CtBlockImpl

PATCH_HUNK_CODE=if (maximumIterations <= 0) {
	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
	"bad value for maximum iterations number: {0}", maximumIterations);
}

PATCH_HUNK_TYPE=CtIfImpl|CtBlockImpl

INGREDIENT_SCOPE=LOCAL

INGREDIENT_PARENT=if (maximumIterations <= 0) {
	throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(
	"bad value for maximum iterations number: {0}", maximumIterations);
}

PATCH_DIFF_ORIG=--- /src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
+++ /src/java/org/apache/commons/math/analysis/solvers/UnivariateRealSolverUtils.java
@@ -196 +196 @@
-		((a > lowerBound) || (b < upperBound)) );
+		((a > lowerBound) || (b < upperBound)) ); 		if (maximumIterations <= 0) { 			throw org.apache.commons.math.MathRuntimeException.createIllegalArgumentException("bad value for maximum iterations number: {0}", maximumIterations);}
@@ -198,8 +198,8 @@
-		if ((fa * fb) >= 0.0) {
-			throw new org.apache.commons.math.ConvergenceException(
-			"number of iterations={0}, maximum iterations={1}, " + 
-			("initial={2}, lower bound={3}, upper bound={4}, final a value={5}, " + 
-			"final b value={6}, f(a)={7}, f(b)={8}"), 
-			numIterations, maximumIterations, initial, 
-			lowerBound, upperBound, a, b, fa, fb);
-		}
+
+
+
+
+
+
+
+



Storing ing JSON at /Users/marekmazur/astor/./output_astor/AstorMain-math-85//astor_output.json
astor_output:
{"general":{"NR_RIGHT_COMPILATIONS":55,"NR_ERRONEOUS_VARIANCES":null,"EXECUTION_IDENTIFIER":"","FAULT_LOCALIZATION":"flacoco","OUTPUT_STATUS":"STOP_BY_PATCH_FOUND","NR_FAILLING_COMPILATIONS":64,"NR_GENERATIONS":119,"TOTAL_TIME":64.126,"NR_FAILING_VALIDATION_PROCESS":null},"patches":[{"VARIANT_ID":"238","VALIDATION":"|true|0|1986|[]|","patchhunks":[{"LOCATION":"org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils","PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/defects4j\\\/math-85\\\/src\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/analysis\\\/solvers\\\/UnivariateRealSolverUtils.java","INGREDIENT_SCOPE":"LOCAL","SUSPICIOUNESS":"0,992","INGREDIENT_PARENT":"if (maximumIterations <= 0) {\\n\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n\\t\\\"bad value for maximum iterations number: {0}\\\", maximumIterations);\\n}","PATCH_HUNK_TYPE":"CtIfImpl|CtBlockImpl","ORIGINAL_CODE":"if ((fa * fb) >= 0.0) {\\n\\tthrow new org.apache.commons.math.ConvergenceException(\\n\\t\\\"number of iterations={0}, maximum iterations={1}, \\\" + \\n\\t(\\\"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \\\" + \\n\\t\\\"final b value={6}, f(a)={7}, f(b)={8}\\\"), \\n\\tnumIterations, maximumIterations, initial, \\n\\tlowerBound, upperBound, a, b, fa, fb);\\n}","BUGGY_CODE_TYPE":"CtIfImpl|CtBlockImpl","OPERATOR":"ReplaceOp","MODIFIED_FILE_PATH":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-85\\\/\\\/src\\\/\\\/variant-238\\\/org\\\/apache\\\/commons\\\/math\\\/analysis\\\/solvers\\\/UnivariateRealSolverUtils.java","LINE":"198","MP_RANKING":"45","PATCH_HUNK_CODE":"if (maximumIterations <= 0) {\\n\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\n\\t\\\"bad value for maximum iterations number: {0}\\\", maximumIterations);\\n}"}],"TIME":"63","GENERATION":"119","FOLDER_SOLUTION_CODE":"\\\/Users\\\/marekmazur\\\/astor\\\/.\\\/output_astor\\\/AstorMain-math-85\\\/\\\/src\\\/\\\/variant-238","PATCH_DIFF_ORIG":"--- \\\/src\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/analysis\\\/solvers\\\/UnivariateRealSolverUtils.java\\n+++ \\\/src\\\/java\\\/org\\\/apache\\\/commons\\\/math\\\/analysis\\\/solvers\\\/UnivariateRealSolverUtils.java\\n@@ -196 +196 @@\\n-\\t\\t((a > lowerBound) || (b < upperBound)) );\\n+\\t\\t((a > lowerBound) || (b < upperBound)) ); \\t\\tif (maximumIterations <= 0) { \\t\\t\\tthrow org.apache.commons.math.MathRuntimeException.createIllegalArgumentException(\\\"bad value for maximum iterations number: {0}\\\", maximumIterations);}\\n@@ -198,8 +198,8 @@\\n-\\t\\tif ((fa * fb) >= 0.0) {\\n-\\t\\t\\tthrow new org.apache.commons.math.ConvergenceException(\\n-\\t\\t\\t\\\"number of iterations={0}, maximum iterations={1}, \\\" + \\n-\\t\\t\\t(\\\"initial={2}, lower bound={3}, upper bound={4}, final a value={5}, \\\" + \\n-\\t\\t\\t\\\"final b value={6}, f(a)={7}, f(b)={8}\\\"), \\n-\\t\\t\\tnumIterations, maximumIterations, initial, \\n-\\t\\t\\tlowerBound, upperBound, a, b, fa, fb);\\n-\\t\\t}\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n+\\n\\n"}]}
Time Total(s): 141.619
